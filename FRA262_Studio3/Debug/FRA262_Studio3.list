
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e20  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009ff8  08009ff8  00019ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a074  0800a074  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a07c  0800a07c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800a084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ac  20000068  0800a0e8  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  0800a0e8  00021114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c245  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003489  00000000  00000000  0003c31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0003f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114f  00000000  00000000  00040de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ed6  00000000  00000000  00041f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8c4  00000000  00000000  00044e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113882  00000000  00000000  0005f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006440  00000000  00000000  00172f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0017938c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009fe0 	.word	0x08009fe0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08009fe0 	.word	0x08009fe0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	; 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	bf28      	it	cs
 8000b10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b14:	d2ed      	bcs.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b970 	b.w	8000f68 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9e08      	ldr	r6, [sp, #32]
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4604      	mov	r4, r0
 8000caa:	460f      	mov	r7, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14a      	bne.n	8000d46 <__udivmoddi4+0xa6>
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	4694      	mov	ip, r2
 8000cb4:	d965      	bls.n	8000d82 <__udivmoddi4+0xe2>
 8000cb6:	fab2 f382 	clz	r3, r2
 8000cba:	b143      	cbz	r3, 8000cce <__udivmoddi4+0x2e>
 8000cbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc0:	f1c3 0220 	rsb	r2, r3, #32
 8000cc4:	409f      	lsls	r7, r3
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	4317      	orrs	r7, r2
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd2:	fa1f f58c 	uxth.w	r5, ip
 8000cd6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cda:	0c22      	lsrs	r2, r4, #16
 8000cdc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	fb01 f005 	mul.w	r0, r1, r5
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x62>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf4:	f080 811c 	bcs.w	8000f30 <__udivmoddi4+0x290>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f240 8119 	bls.w	8000f30 <__udivmoddi4+0x290>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4462      	add	r2, ip
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	b2a4      	uxth	r4, r4
 8000d06:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d12:	fb00 f505 	mul.w	r5, r0, r5
 8000d16:	42a5      	cmp	r5, r4
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x90>
 8000d1a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d22:	f080 8107 	bcs.w	8000f34 <__udivmoddi4+0x294>
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	f240 8104 	bls.w	8000f34 <__udivmoddi4+0x294>
 8000d2c:	4464      	add	r4, ip
 8000d2e:	3802      	subs	r0, #2
 8000d30:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	2100      	movs	r1, #0
 8000d38:	b11e      	cbz	r6, 8000d42 <__udivmoddi4+0xa2>
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0xbc>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	f000 80ed 	beq.w	8000f2a <__udivmoddi4+0x28a>
 8000d50:	2100      	movs	r1, #0
 8000d52:	e9c6 0500 	strd	r0, r5, [r6]
 8000d56:	4608      	mov	r0, r1
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	fab3 f183 	clz	r1, r3
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d149      	bne.n	8000df8 <__udivmoddi4+0x158>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d302      	bcc.n	8000d6e <__udivmoddi4+0xce>
 8000d68:	4282      	cmp	r2, r0
 8000d6a:	f200 80f8 	bhi.w	8000f5e <__udivmoddi4+0x2be>
 8000d6e:	1a84      	subs	r4, r0, r2
 8000d70:	eb65 0203 	sbc.w	r2, r5, r3
 8000d74:	2001      	movs	r0, #1
 8000d76:	4617      	mov	r7, r2
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d0e2      	beq.n	8000d42 <__udivmoddi4+0xa2>
 8000d7c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d80:	e7df      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000d82:	b902      	cbnz	r2, 8000d86 <__udivmoddi4+0xe6>
 8000d84:	deff      	udf	#255	; 0xff
 8000d86:	fab2 f382 	clz	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8090 	bne.w	8000eb0 <__udivmoddi4+0x210>
 8000d90:	1a8a      	subs	r2, r1, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da0:	fb07 2015 	mls	r0, r7, r5, r2
 8000da4:	0c22      	lsrs	r2, r4, #16
 8000da6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000daa:	fb0e f005 	mul.w	r0, lr, r5
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x124>
 8000db2:	eb1c 0202 	adds.w	r2, ip, r2
 8000db6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x122>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2b8>
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	1a12      	subs	r2, r2, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x14e>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x14c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2c2>
 8000dec:	4610      	mov	r0, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000df6:	e79f      	b.n	8000d38 <__udivmoddi4+0x98>
 8000df8:	f1c1 0720 	rsb	r7, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e0e:	40fd      	lsrs	r5, r7
 8000e10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e14:	4323      	orrs	r3, r4
 8000e16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e28:	fb08 f50e 	mul.w	r5, r8, lr
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	fa00 f001 	lsl.w	r0, r0, r1
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b0>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2b4>
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2b4>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4464      	add	r4, ip
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	b29d      	uxth	r5, r3
 8000e54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e58:	fb09 4413 	mls	r4, r9, r3, r4
 8000e5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e60:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1da>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2ac>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2ac>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4464      	add	r4, ip
 8000e7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e7e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46ae      	mov	lr, r5
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x29c>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x298>
 8000e90:	b156      	cbz	r6, 8000ea8 <__udivmoddi4+0x208>
 8000e92:	ebb0 0208 	subs.w	r2, r0, r8
 8000e96:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9e:	40ca      	lsrs	r2, r1
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	4317      	orrs	r7, r2
 8000ea4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	f1c3 0120 	rsb	r1, r3, #32
 8000eb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ebc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec0:	409d      	lsls	r5, r3
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed4:	0c11      	lsrs	r1, r2, #16
 8000ed6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eda:	fb00 f50e 	mul.w	r5, r0, lr
 8000ede:	428d      	cmp	r5, r1
 8000ee0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x258>
 8000ee6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef0:	428d      	cmp	r5, r1
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	1b49      	subs	r1, r1, r5
 8000efa:	b292      	uxth	r2, r2
 8000efc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f00:	fb07 1115 	mls	r1, r7, r5, r1
 8000f04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f08:	fb05 f10e 	mul.w	r1, r5, lr
 8000f0c:	4291      	cmp	r1, r2
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x282>
 8000f10:	eb1c 0202 	adds.w	r2, ip, r2
 8000f14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1a:	4291      	cmp	r1, r2
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1e:	3d02      	subs	r5, #2
 8000f20:	4462      	add	r2, ip
 8000f22:	1a52      	subs	r2, r2, r1
 8000f24:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0xfc>
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000f30:	4639      	mov	r1, r7
 8000f32:	e6e6      	b.n	8000d02 <__udivmoddi4+0x62>
 8000f34:	4610      	mov	r0, r2
 8000f36:	e6fb      	b.n	8000d30 <__udivmoddi4+0x90>
 8000f38:	4548      	cmp	r0, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f0>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f44:	3b01      	subs	r3, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f0>
 8000f48:	4645      	mov	r5, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x282>
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1da>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x258>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b0>
 8000f58:	3d02      	subs	r5, #2
 8000f5a:	4462      	add	r2, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x124>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e70a      	b.n	8000d78 <__udivmoddi4+0xd8>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x14e>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <PIDController_Init>:
uint32_t Saturation = 1000;
extern TIM_HandleTypeDef htim4;
float tolerance = 0.005;

void PIDController_Init(PIDStructureTypeDef* PID,float FWKp ,float FWKi , float FWKd, float BWKp ,float BWKi , float BWKd)	// Initialize PID Variable
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	61f8      	str	r0, [r7, #28]
 8000f74:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f78:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f7c:	ed87 1a04 	vstr	s2, [r7, #16]
 8000f80:	edc7 1a03 	vstr	s3, [r7, #12]
 8000f84:	ed87 2a02 	vstr	s4, [r7, #8]
 8000f88:	edc7 2a01 	vstr	s5, [r7, #4]
	PID->FWKp = FWKp;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	601a      	str	r2, [r3, #0]
	PID->FWKi = FWKi;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	605a      	str	r2, [r3, #4]
	PID->FWKd = FWKd;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	609a      	str	r2, [r3, #8]

	PID->BWKp = BWKp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	60da      	str	r2, [r3, #12]
	PID->BWKi = BWKi;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	611a      	str	r2, [r3, #16]
	PID->BWKd = BWKd;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	615a      	str	r2, [r3, #20]


	PID->Error[0] = 0;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
	PID->Error[2] = 0;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
	PID->Command = 0;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
	PID->Command_1 = 0;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd8:	bf00      	nop
 8000fda:	3724      	adds	r7, #36	; 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	213c      	movs	r1, #60	; 0x3c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fa00 	bl	8006400 <HAL_TIM_Encoder_Start>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 8001008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800100c:	b08e      	sub	sp, #56	; 0x38
 800100e:	af00      	add	r7, sp, #0
 8001010:	6278      	str	r0, [r7, #36]	; 0x24
 8001012:	6239      	str	r1, [r7, #32]
 8001014:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8001018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800101a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800101e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2200      	movs	r2, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001034:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001044:	1a84      	subs	r4, r0, r2
 8001046:	eb61 0503 	sbc.w	r5, r1, r3
 800104a:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800105a:	ebb0 0a02 	subs.w	sl, r0, r2
 800105e:	eb61 0b03 	sbc.w	fp, r1, r3
 8001062:	4650      	mov	r0, sl
 8001064:	4659      	mov	r1, fp
 8001066:	f7ff fa5d 	bl	8000524 <__aeabi_ul2d>
 800106a:	a368      	add	r3, pc, #416	; (adr r3, 800120c <QEIEncoder_Update+0x204>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fa8e 	bl	8000590 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fc9a 	bl	80009b4 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 8001084:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001088:	495b      	ldr	r1, [pc, #364]	; (80011f8 <QEIEncoder_Update+0x1f0>)
 800108a:	428a      	cmp	r2, r1
 800108c:	f173 0300 	sbcs.w	r3, r3, #0
 8001090:	db08      	blt.n	80010a4 <QEIEncoder_Update+0x9c>
 8001092:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001096:	1e59      	subs	r1, r3, #1
 8001098:	60f9      	str	r1, [r7, #12]
 800109a:	60ba      	str	r2, [r7, #8]
 800109c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010a0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 80010a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80010ac:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80010b0:	da08      	bge.n	80010c4 <QEIEncoder_Update+0xbc>
 80010b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010b6:	1c59      	adds	r1, r3, #1
 80010b8:	6079      	str	r1, [r7, #4]
 80010ba:	603a      	str	r2, [r7, #0]
 80010bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010c0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 80010c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80010c8:	4622      	mov	r2, r4
 80010ca:	462b      	mov	r3, r5
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	f04f 0100 	mov.w	r1, #0
 80010d4:	0119      	lsls	r1, r3, #4
 80010d6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80010da:	0110      	lsls	r0, r2, #4
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ebb2 0804 	subs.w	r8, r2, r4
 80010e4:	eb63 0905 	sbc.w	r9, r3, r5
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80010f4:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80010f8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80010fc:	4690      	mov	r8, r2
 80010fe:	4699      	mov	r9, r3
 8001100:	4642      	mov	r2, r8
 8001102:	464b      	mov	r3, r9
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fd74 	bl	8000bf4 <__aeabi_l2f>
 800110c:	ee06 0a90 	vmov	s13, r0
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <QEIEncoder_Update+0x1f4>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9d4 	bl	80004e0 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001140:	f7ff f9f8 	bl	8000534 <__aeabi_l2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <QEIEncoder_Update+0x1f8>)
 800114a:	f7ff fa21 	bl	8000590 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <QEIEncoder_Update+0x1f4>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9ae 	bl	80004bc <__aeabi_i2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4640      	mov	r0, r8
 8001166:	4649      	mov	r1, r9
 8001168:	f7ff fb3c 	bl	80007e4 <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff f856 	bl	8000224 <__adddf3>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fc18 	bl	80009b4 <__aeabi_d2f>
 8001184:	4602      	mov	r2, r0
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001190:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001198:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001204 <QEIEncoder_Update+0x1fc>
 800119c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <QEIEncoder_Update+0x200>)
 80011ac:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <QEIEncoder_Update+0x200>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <QEIEncoder_Update+0x200>)
 80011b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <QEIEncoder_Update+0x200>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <QEIEncoder_Update+0x200>)
 80011ea:	6053      	str	r3, [r2, #4]
}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	; 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011f6:	bf00      	nop
 80011f8:	80000001 	.word	0x80000001
 80011fc:	20000000 	.word	0x20000000
 8001200:	40300000 	.word	0x40300000
 8001204:	42700000 	.word	0x42700000
 8001208:	20000084 	.word	0x20000084
 800120c:	a0b5ed8d 	.word	0xa0b5ed8d
 8001210:	3eb0c6f7 	.word	0x3eb0c6f7

08001214 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <modbus_1t5_Timeout+0x3c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <modbus_1t5_Timeout+0x3c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <modbus_1t5_Timeout+0x3c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <modbus_1t5_Timeout+0x3c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000008c 	.word	0x2000008c

08001254 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <modbus_3t5_Timeout+0x1c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	755a      	strb	r2, [r3, #21]

}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	2000008c 	.word	0x2000008c

08001274 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f007 f9f3 	bl	8008668 <HAL_UART_GetError>
 8001282:	4603      	mov	r3, r0
 8001284:	2b20      	cmp	r3, #32
 8001286:	d101      	bne.n	800128c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001288:	f7ff ffc4 	bl	8001214 <modbus_1t5_Timeout>

	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800129e:	4a25      	ldr	r2, [pc, #148]	; (8001334 <Modbus_init+0xa0>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <Modbus_init+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	4a21      	ldr	r2, [pc, #132]	; (8001338 <Modbus_init+0xa4>)
 80012b2:	210e      	movs	r1, #14
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 fd2f 	bl	8006d18 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2110      	movs	r1, #16
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 f97b 	bl	80085bc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 f992 	bl	80085f4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <Modbus_init+0xa8>)
 80012d6:	2104      	movs	r1, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 fcd9 	bl	8007c90 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <Modbus_init+0xa0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <Modbus_init+0xa0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <Modbus_init+0xa0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80012f0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80012f4:	4413      	add	r3, r2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fc:	4619      	mov	r1, r3
 80012fe:	f006 fd81 	bl	8007e04 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <Modbus_init+0xa0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10c      	bne.n	800132c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <Modbus_init+0xa0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4618      	mov	r0, r3
 800131a:	f004 fcd9 	bl	8005cd0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <Modbus_init+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f004 ff28 	bl	800617c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000008c 	.word	0x2000008c
 8001338:	08001255 	.word	0x08001255
 800133c:	08001275 	.word	0x08001275

08001340 <QuinticTrajectory_Init>:
}state;

float period = 0.001;

void QuinticTrajectory_Init(QuinticTypeDef *q)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	q->Pi = 0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
	q->Pf = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
	q->t = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
	q->tf = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
	q->Position = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
	q->Velocity = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
	q->Acceleration = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	609a      	str	r2, [r3, #8]

}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <QuinticTrajectory_Generator>:

void QuinticTrajectory_Generator(QuinticTypeDef *q, float pi ,float pf , float tf)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	ed2d 8b02 	vpush	{d8}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80013a8:	ed87 1a00 	vstr	s2, [r7]
	switch(q->STATE)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	f200 81c8 	bhi.w	8001748 <QuinticTrajectory_Generator+0x3b4>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <QuinticTrajectory_Generator+0x2c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013db 	.word	0x080013db
 80013c8:	0800151d 	.word	0x0800151d
 80013cc:	0800172f 	.word	0x0800172f
	{
	case READY:
//		if(q->Pi != q->Pf) q->STATE = CALCULATE;
		q->STATE = CALCULATE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80013d8:	e1b6      	b.n	8001748 <QuinticTrajectory_Generator+0x3b4>
	case CALCULATE:
		q->t = 0;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]

		q->Pi = pi;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	61da      	str	r2, [r3, #28]
		q->Pf = pf;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	621a      	str	r2, [r3, #32]
		q->tf = tf;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	619a      	str	r2, [r3, #24]

		float s = pf - pi;
 80013f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001400:	edc7 7a05 	vstr	s15, [r7, #20]
		/*Coefficient Calculated*/
		q->c[0] = q->Pi;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
		q->c[1] = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
		q->c[2] = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
		q->c[3] = 10.0*s/powf(q->tf,3);
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff f85f 	bl	80004e0 <__aeabi_f2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4bcb      	ldr	r3, [pc, #812]	; (8001754 <QuinticTrajectory_Generator+0x3c0>)
 8001428:	f7ff f8b2 	bl	8000590 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4614      	mov	r4, r2
 8001432:	461d      	mov	r5, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	edd3 7a06 	vldr	s15, [r3, #24]
 800143a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	f008 fa0b 	bl	800985c <powf>
 8001446:	ee10 3a10 	vmov	r3, s0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f848 	bl	80004e0 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff f9c4 	bl	80007e4 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff faa6 	bl	80009b4 <__aeabi_d2f>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
		q->c[4] = -15.0*s/powf(q->tf,4);
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff f836 	bl	80004e0 <__aeabi_f2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4bb7      	ldr	r3, [pc, #732]	; (8001758 <QuinticTrajectory_Generator+0x3c4>)
 800147a:	f7ff f889 	bl	8000590 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4614      	mov	r4, r2
 8001484:	461d      	mov	r5, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a06 	vldr	s15, [r3, #24]
 800148c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	f008 f9e2 	bl	800985c <powf>
 8001498:	ee10 3a10 	vmov	r3, s0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f81f 	bl	80004e0 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7ff f99b 	bl	80007e4 <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fa7d 	bl	80009b4 <__aeabi_d2f>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
		q->c[5] = 6.0*s/powf(q->tf,5);
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff f80d 	bl	80004e0 <__aeabi_f2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4ba4      	ldr	r3, [pc, #656]	; (800175c <QuinticTrajectory_Generator+0x3c8>)
 80014cc:	f7ff f860 	bl	8000590 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4614      	mov	r4, r2
 80014d6:	461d      	mov	r5, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	edd3 7a06 	vldr	s15, [r3, #24]
 80014de:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	f008 f9b9 	bl	800985c <powf>
 80014ea:	ee10 3a10 	vmov	r3, s0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fff6 	bl	80004e0 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7ff f972 	bl	80007e4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fa54 	bl	80009b4 <__aeabi_d2f>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	639a      	str	r2, [r3, #56]	; 0x38

		q->STATE = WORKING;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2202      	movs	r2, #2
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 800151a:	e115      	b.n	8001748 <QuinticTrajectory_Generator+0x3b4>

	case WORKING:
		q->Position = q->c[0] +
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	edd3 7a05 	vldr	s15, [r3, #20]
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q->Position = q->c[0] +
 8001532:	ee37 8a27 	vadd.f32	s16, s14, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001542:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001546:	eeb0 0a67 	vmov.f32	s0, s15
 800154a:	f008 f987 	bl	800985c <powf>
 800154e:	eef0 7a40 	vmov.f32	s15, s0
 8001552:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001556:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[3]*powf(q->t,3) +
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a05 	vldr	s15, [r3, #20]
 8001566:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f008 f975 	bl	800985c <powf>
 8001572:	eef0 7a40 	vmov.f32	s15, s0
 8001576:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 800157a:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[4]*powf(q->t,4) +
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	edd3 7a05 	vldr	s15, [r3, #20]
 800158a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f008 f963 	bl	800985c <powf>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[3]*powf(q->t,3) +
 800159e:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[5]*powf(q->t,5);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ae:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	f008 f951 	bl	800985c <powf>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[4]*powf(q->t,4) +
 80015c2:	ee78 7a27 	vadd.f32	s15, s16, s15
		q->Position = q->c[0] +
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	edc3 7a00 	vstr	s15, [r3]

		q->Velocity = q->c[1] + 2*q->c[2]*q->t + 3*q->c[3]*powf(q->t,2) + 4*q->c[4]*powf(q->t,3) + 5*q->c[5]*powf(q->t,4);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e6:	ee37 8a27 	vadd.f32	s16, s14, s15
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80015f4:	ee67 8a87 	vmul.f32	s17, s15, s14
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80015fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	f008 f929 	bl	800985c <powf>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001612:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800161c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001620:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edd3 7a05 	vldr	s15, [r3, #20]
 800162a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	f008 f913 	bl	800985c <powf>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800163e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001648:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800164c:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	edd3 7a05 	vldr	s15, [r3, #20]
 8001656:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f008 f8fd 	bl	800985c <powf>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800166a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	edc3 7a01 	vstr	s15, [r3, #4]
		q->Acceleration = 2*q->c[2] + 6*q->c[3]*q->t + 12*q->c[4]*powf(q->t,2) + 20*q->c[5]*powf(q->t,3);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800167a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001684:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001688:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001696:	ee37 8a27 	vadd.f32	s16, s14, s15
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80016a0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80016a4:	ee67 8a87 	vmul.f32	s17, s15, s14
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	f008 f8d1 	bl	800985c <powf>
 80016ba:	eef0 7a40 	vmov.f32	s15, s0
 80016be:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016c2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016cc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80016d0:	ee67 8a87 	vmul.f32	s17, s15, s14
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016da:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f008 f8bb 	bl	800985c <powf>
 80016e6:	eef0 7a40 	vmov.f32	s15, s0
 80016ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80016ee:	ee78 7a27 	vadd.f32	s15, s16, s15
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	edc3 7a02 	vstr	s15, [r3, #8]
		q->t += period;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <QuinticTrajectory_Generator+0x3cc>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edc3 7a05 	vstr	s15, [r3, #20]
		if(q->t >= tf) q->STATE = FINISH;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	edd3 7a05 	vldr	s15, [r3, #20]
 8001714:	ed97 7a00 	vldr	s14, [r7]
 8001718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	d900      	bls.n	8001724 <QuinticTrajectory_Generator+0x390>
		break;
 8001722:	e011      	b.n	8001748 <QuinticTrajectory_Generator+0x3b4>
		if(q->t >= tf) q->STATE = FINISH;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2203      	movs	r2, #3
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 800172c:	e00c      	b.n	8001748 <QuinticTrajectory_Generator+0x3b4>

	case FINISH:
		q->Velocity = 0;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
		q->Acceleration = 0;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
		q->Pi = q->Pf;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	61da      	str	r2, [r3, #28]
		break;
 8001746:	bf00      	nop
	}
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	ecbd 8b02 	vpop	{d8}
 8001752:	bdb0      	pop	{r4, r5, r7, pc}
 8001754:	40240000 	.word	0x40240000
 8001758:	c02e0000 	.word	0xc02e0000
 800175c:	40180000 	.word	0x40180000
 8001760:	20000004 	.word	0x20000004

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176a:	f000 ffe4 	bl	8002736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176e:	f000 f8b3 	bl	80018d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001772:	f000 fb87 	bl	8001e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001776:	f000 fb4b 	bl	8001e10 <MX_DMA_Init>
  MX_TIM5_Init();
 800177a:	f000 fa75 	bl	8001c68 <MX_TIM5_Init>
  MX_TIM2_Init();
 800177e:	f000 f97d 	bl	8001a7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001782:	f000 f9c9 	bl	8001b18 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001786:	f000 faf5 	bl	8001d74 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800178a:	f000 fa13 	bl	8001bb4 <MX_TIM4_Init>
  MX_ADC1_Init();
 800178e:	f000 f8ed 	bl	800196c <MX_ADC1_Init>
  MX_TIM16_Init();
 8001792:	f000 fabf 	bl	8001d14 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  /* Initial Modbus Variable */
  hmodbus.huart = &huart2;
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <main+0x12c>)
 8001798:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <main+0x130>)
 800179a:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 800179c:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <main+0x12c>)
 800179e:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <main+0x134>)
 80017a0:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <main+0x12c>)
 80017a4:	2215      	movs	r2, #21
 80017a6:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80017a8:	4b39      	ldr	r3, [pc, #228]	; (8001890 <main+0x12c>)
 80017aa:	22c8      	movs	r2, #200	; 0xc8
 80017ac:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80017ae:	493b      	ldr	r1, [pc, #236]	; (800189c <main+0x138>)
 80017b0:	4837      	ldr	r0, [pc, #220]	; (8001890 <main+0x12c>)
 80017b2:	f7ff fd6f 	bl	8001294 <Modbus_init>



  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 80017b6:	483a      	ldr	r0, [pc, #232]	; (80018a0 <main+0x13c>)
 80017b8:	f004 fa8a 	bl	8005cd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 80017bc:	4839      	ldr	r0, [pc, #228]	; (80018a4 <main+0x140>)
 80017be:	f004 fa87 	bl	8005cd0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim4);							// Initialize PMW Signal Timer
 80017c2:	4839      	ldr	r0, [pc, #228]	; (80018a8 <main+0x144>)
 80017c4:	f004 fa14 	bl	8005bf0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80017c8:	2104      	movs	r1, #4
 80017ca:	4837      	ldr	r0, [pc, #220]	; (80018a8 <main+0x144>)
 80017cc:	f004 fb5c 	bl	8005e88 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, Joystick.XYBuffer, 200);
 80017d0:	22c8      	movs	r2, #200	; 0xc8
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <main+0x148>)
 80017d4:	4836      	ldr	r0, [pc, #216]	; (80018b0 <main+0x14c>)
 80017d6:	f001 fbf9 	bl	8002fcc <HAL_ADC_Start_DMA>

  float PID_P_up[3] = {0.94 ,0.00003, 0}; //{0.84 ,0.0000023, 0};
 80017da:	4a36      	ldr	r2, [pc, #216]	; (80018b4 <main+0x150>)
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80017e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_P_down[3] = {0.94 ,0.00003, 0}; //{1.6 ,0.000000067, 0}
 80017e6:	4a33      	ldr	r2, [pc, #204]	; (80018b4 <main+0x150>)
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float PID_V_up[3] = {3.7 ,0.0013, 0.00000054}; //{4.38 ,0.005, 0.0000039}  {4.35 ,0.0038, 0.0000039}
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <main+0x154>)
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_V_down[3] = {3.4 ,0.00085, 0.00000054};
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <main+0x158>)
 8001800:	463b      	mov	r3, r7
 8001802:	ca07      	ldmia	r2, {r0, r1, r2}
 8001804:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 8001808:	492d      	ldr	r1, [pc, #180]	; (80018c0 <main+0x15c>)
 800180a:	482e      	ldr	r0, [pc, #184]	; (80018c4 <main+0x160>)
 800180c:	f7ff fbea 	bl	8000fe4 <QEIEncoder_Init>
  PIDController_Init(&PIDp, PID_P_up[0], PID_P_up[1], PID_P_up[2] , PID_P_down[0], PID_P_down[1], PID_P_down[2]);	// Initialize Position Controller
 8001810:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001814:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001818:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800181c:	ed97 6a06 	vldr	s12, [r7, #24]
 8001820:	edd7 5a07 	vldr	s11, [r7, #28]
 8001824:	ed97 5a08 	vldr	s10, [r7, #32]
 8001828:	eef0 2a45 	vmov.f32	s5, s10
 800182c:	eeb0 2a65 	vmov.f32	s4, s11
 8001830:	eef0 1a46 	vmov.f32	s3, s12
 8001834:	eeb0 1a66 	vmov.f32	s2, s13
 8001838:	eef0 0a47 	vmov.f32	s1, s14
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	4821      	ldr	r0, [pc, #132]	; (80018c8 <main+0x164>)
 8001842:	f7ff fb93 	bl	8000f6c <PIDController_Init>
  PIDController_Init(&PIDv, PID_V_up[0], PID_V_up[1], PID_V_up[2] , PID_V_down[0], PID_V_down[1], PID_V_down[2]);	// Initialize Velocity Controller
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	ed97 7a04 	vldr	s14, [r7, #16]
 800184e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001852:	ed97 6a00 	vldr	s12, [r7]
 8001856:	edd7 5a01 	vldr	s11, [r7, #4]
 800185a:	ed97 5a02 	vldr	s10, [r7, #8]
 800185e:	eef0 2a45 	vmov.f32	s5, s10
 8001862:	eeb0 2a65 	vmov.f32	s4, s11
 8001866:	eef0 1a46 	vmov.f32	s3, s12
 800186a:	eeb0 1a66 	vmov.f32	s2, s13
 800186e:	eef0 0a47 	vmov.f32	s1, s14
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	4815      	ldr	r0, [pc, #84]	; (80018cc <main+0x168>)
 8001878:	f7ff fb78 	bl	8000f6c <PIDController_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// SET to UPWARD
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	4813      	ldr	r0, [pc, #76]	; (80018d0 <main+0x16c>)
 8001882:	f003 f8f1 	bl	8004a68 <HAL_GPIO_WritePin>

  QuinticTrajectory_Init(&quintic);
 8001886:	4813      	ldr	r0, [pc, #76]	; (80018d4 <main+0x170>)
 8001888:	f7ff fd5a 	bl	8001340 <QuinticTrajectory_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800188c:	e7fe      	b.n	800188c <main+0x128>
 800188e:	bf00      	nop
 8001890:	20000970 	.word	0x20000970
 8001894:	20000558 	.word	0x20000558
 8001898:	2000048c 	.word	0x2000048c
 800189c:	20000e48 	.word	0x20000e48
 80018a0:	2000015c 	.word	0x2000015c
 80018a4:	20000228 	.word	0x20000228
 80018a8:	200002f4 	.word	0x200002f4
 80018ac:	20000780 	.word	0x20000780
 80018b0:	20000090 	.word	0x20000090
 80018b4:	08009ff8 	.word	0x08009ff8
 80018b8:	0800a004 	.word	0x0800a004
 80018bc:	0800a010 	.word	0x0800a010
 80018c0:	200003c0 	.word	0x200003c0
 80018c4:	200006f0 	.word	0x200006f0
 80018c8:	20000728 	.word	0x20000728
 80018cc:	20000754 	.word	0x20000754
 80018d0:	48000800 	.word	0x48000800
 80018d4:	20000930 	.word	0x20000930

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b094      	sub	sp, #80	; 0x50
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2238      	movs	r2, #56	; 0x38
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 ff86 	bl	80097f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f003 f8e4 	bl	8004ac8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190a:	2302      	movs	r3, #2
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190e:	2303      	movs	r3, #3
 8001910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001912:	2306      	movs	r3, #6
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001916:	2355      	movs	r3, #85	; 0x55
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191a:	2302      	movs	r3, #2
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001922:	2302      	movs	r3, #2
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f980 	bl	8004c30 <HAL_RCC_OscConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001936:	f000 fbbf 	bl	80020b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193e:	2303      	movs	r3, #3
 8001940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2104      	movs	r1, #4
 8001952:	4618      	mov	r0, r3
 8001954:	f003 fc7e 	bl	8005254 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800195e:	f000 fbab 	bl	80020b8 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	; 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2220      	movs	r2, #32
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f007 ff37 	bl	80097f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800198a:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <MX_ADC1_Init+0x104>)
 800198c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001990:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <MX_ADC1_Init+0x104>)
 8001994:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001998:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <MX_ADC1_Init+0x104>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019b4:	2204      	movs	r2, #4
 80019b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019da:	2200      	movs	r2, #0
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f4:	481e      	ldr	r0, [pc, #120]	; (8001a70 <MX_ADC1_Init+0x104>)
 80019f6:	f001 f92d 	bl	8002c54 <HAL_ADC_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001a00:	f000 fb5a 	bl	80020b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4818      	ldr	r0, [pc, #96]	; (8001a70 <MX_ADC1_Init+0x104>)
 8001a10:	f002 f95e 	bl	8003cd0 <HAL_ADCEx_MultiModeConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a1a:	f000 fb4d 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_ADC1_Init+0x108>)
 8001a20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a22:	2306      	movs	r3, #6
 8001a24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a26:	2307      	movs	r3, #7
 8001a28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a2a:	237f      	movs	r3, #127	; 0x7f
 8001a2c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480d      	ldr	r0, [pc, #52]	; (8001a70 <MX_ADC1_Init+0x104>)
 8001a3c:	f001 fbb8 	bl	80031b0 <HAL_ADC_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001a46:	f000 fb37 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_ADC1_Init+0x104>)
 8001a58:	f001 fbaa 	bl	80031b0 <HAL_ADC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001a62:	f000 fb29 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3730      	adds	r7, #48	; 0x30
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000090 	.word	0x20000090
 8001a74:	1d500080 	.word	0x1d500080
 8001a78:	3ef08000 	.word	0x3ef08000

08001a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001aa4:	22a9      	movs	r2, #169	; 0xa9
 8001aa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac2:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001ac4:	f004 f830 	bl	8005b28 <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ace:	f000 faf3 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001ae0:	f004 ffaa 	bl	8006a38 <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aea:	f000 fae5 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MX_TIM2_Init+0x98>)
 8001afc:	f005 ff82 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b06:	f000 fad7 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000015c 	.word	0x2000015c

08001b18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <MX_TIM3_Init+0x98>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b3e:	22a9      	movs	r2, #169	; 0xa9
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b5c:	4813      	ldr	r0, [pc, #76]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b5e:	f003 ffe3 	bl	8005b28 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b68:	f000 faa6 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4619      	mov	r1, r3
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b7a:	f004 ff5d 	bl	8006a38 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b84:	f000 fa98 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_TIM3_Init+0x94>)
 8001b96:	f005 ff35 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ba0:	f000 fa8a 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000228 	.word	0x20000228
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <MX_TIM4_Init+0xb0>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001be0:	22a9      	movs	r2, #169	; 0xa9
 8001be2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bfe:	4818      	ldr	r0, [pc, #96]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001c00:	f004 f8de 	bl	8005dc0 <HAL_TIM_PWM_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001c0a:	f000 fa55 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4810      	ldr	r0, [pc, #64]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001c1e:	f005 fef1 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001c28:	f000 fa46 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2c:	2360      	movs	r3, #96	; 0x60
 8001c2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001c44:	f004 fde4 	bl	8006810 <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001c4e:	f000 fa33 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <MX_TIM4_Init+0xac>)
 8001c54:	f000 fbbe 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200002f4 	.word	0x200002f4
 8001c64:	40000800 	.word	0x40000800

08001c68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2224      	movs	r2, #36	; 0x24
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f007 fdbe 	bl	80097f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <MX_TIM5_Init+0xa8>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cac:	2303      	movs	r3, #3
 8001cae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001cd8:	f004 fade 	bl	8006298 <HAL_TIM_Encoder_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001ce2:	f000 f9e9 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001cf4:	f005 fe86 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001cfe:	f000 f9db 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200003c0 	.word	0x200003c0
 8001d10:	40000c00 	.word	0x40000c00

08001d14 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <MX_TIM16_Init+0x5c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d20:	22a9      	movs	r2, #169	; 0xa9
 8001d22:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d2c:	f240 4279 	movw	r2, #1145	; 0x479
 8001d30:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d46:	f003 feef 	bl	8005b28 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001d50:	f000 f9b2 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d54:	2108      	movs	r1, #8
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_TIM16_Init+0x58>)
 8001d58:	f004 f9a8 	bl	80060ac <HAL_TIM_OnePulse_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001d62:	f000 f9a9 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000048c 	.word	0x2000048c
 8001d70:	40014400 	.word	0x40014400

08001d74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001d7a:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <MX_USART2_UART_Init+0x98>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001d80:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc0:	4811      	ldr	r0, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001dc2:	f005 ff05 	bl	8007bd0 <HAL_UART_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001dcc:	f000 f974 	bl	80020b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001dd4:	f007 fc46 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001dde:	f000 f96b 	bl	80020b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de2:	2100      	movs	r1, #0
 8001de4:	4808      	ldr	r0, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001de6:	f007 fc7b 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001df0:	f000 f962 	bl	80020b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_USART2_UART_Init+0x94>)
 8001df6:	f007 fbfc 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001e00:	f000 f95a 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000558 	.word	0x20000558
 8001e0c:	40004400 	.word	0x40004400

08001e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_DMA_Init+0x70>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <MX_DMA_Init+0x70>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6493      	str	r3, [r2, #72]	; 0x48
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MX_DMA_Init+0x70>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_DMA_Init+0x70>)
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <MX_DMA_Init+0x70>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6493      	str	r3, [r2, #72]	; 0x48
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_DMA_Init+0x70>)
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	200b      	movs	r0, #11
 8001e4c:	f002 f923 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e50:	200b      	movs	r0, #11
 8001e52:	f002 f93a 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	200c      	movs	r0, #12
 8001e5c:	f002 f91b 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e60:	200c      	movs	r0, #12
 8001e62:	f002 f932 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	200d      	movs	r0, #13
 8001e6c:	f002 f913 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e70:	200d      	movs	r0, #13
 8001e72:	f002 f92a 	bl	80040ca <HAL_NVIC_EnableIRQ>

}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000

08001e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <MX_GPIO_Init+0x164>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2120      	movs	r1, #32
 8001efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f02:	f002 fdb1 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2110      	movs	r1, #16
 8001f0a:	4838      	ldr	r0, [pc, #224]	; (8001fec <MX_GPIO_Init+0x168>)
 8001f0c:	f002 fdac 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4831      	ldr	r0, [pc, #196]	; (8001fec <MX_GPIO_Init+0x168>)
 8001f28:	f002 fc1c 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f46:	f002 fc0d 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4822      	ldr	r0, [pc, #136]	; (8001fec <MX_GPIO_Init+0x168>)
 8001f62:	f002 fbff 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001f66:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	481d      	ldr	r0, [pc, #116]	; (8001ff0 <MX_GPIO_Init+0x16c>)
 8001f7c:	f002 fbf2 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001f80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <MX_GPIO_Init+0x16c>)
 8001f96:	f002 fbe5 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	480f      	ldr	r0, [pc, #60]	; (8001fec <MX_GPIO_Init+0x168>)
 8001fae:	f002 fbd9 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f002 fbcb 	bl	8004764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2028      	movs	r0, #40	; 0x28
 8001fd4:	f002 f85f 	bl	8004096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fd8:	2028      	movs	r0, #40	; 0x28
 8001fda:	f002 f876 	bl	80040ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	1c54      	adds	r4, r2, #1
 800200c:	f143 0500 	adc.w	r5, r3, #0
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002012:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3) // [1 microseconds]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d113      	bne.n	8002046 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		QEIEncoder_Update(&QEI, &htim5, micros());
 800201e:	f000 f831 	bl	8002084 <micros>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	490d      	ldr	r1, [pc, #52]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800202a:	f7fe ffed 	bl	8001008 <QEIEncoder_Update>
		QuinticTrajectory_Generator(&quintic, QEI.LinearPosition, 400, 2);
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002030:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002034:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002038:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002064 <HAL_TIM_PeriodElapsedCallback+0x70>
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002042:	f7ff f9a7 	bl	8001394 <QuinticTrajectory_Generator>
	}
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bdb0      	pop	{r4, r5, r7, pc}
 800204e:	bf00      	nop
 8002050:	2000015c 	.word	0x2000015c
 8002054:	200006e8 	.word	0x200006e8
 8002058:	20000228 	.word	0x20000228
 800205c:	200003c0 	.word	0x200003c0
 8002060:	200006f0 	.word	0x200006f0
 8002064:	43c80000 	.word	0x43c80000
 8002068:	20000930 	.word	0x20000930

0800206c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)			// Blue Switch
	{

	}
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <micros>:

uint64_t micros()	// System Time
{
 8002084:	b4b0      	push	{r4, r5, r7}
 8002086:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <micros+0x2c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2200      	movs	r2, #0
 8002090:	4618      	mov	r0, r3
 8002092:	4611      	mov	r1, r2
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <micros+0x30>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	1884      	adds	r4, r0, r2
 800209c:	eb41 0503 	adc.w	r5, r1, r3
 80020a0:	4622      	mov	r2, r4
 80020a2:	462b      	mov	r3, r5
}
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bcb0      	pop	{r4, r5, r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000015c 	.word	0x2000015c
 80020b4:	200006e8 	.word	0x200006e8

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>
	...

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_MspInit+0x44>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_MspInit+0x44>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6613      	str	r3, [r2, #96]	; 0x60
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_MspInit+0x44>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x44>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x44>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x44>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020fa:	f002 fd89 	bl	8004c10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0a0      	sub	sp, #128	; 0x80
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002124:	f107 0318 	add.w	r3, r7, #24
 8002128:	2254      	movs	r2, #84	; 0x54
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f007 fb63 	bl	80097f8 <memset>
  if(hadc->Instance==ADC1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213a:	d176      	bne.n	800222a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800213c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002140:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002142:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002146:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0318 	add.w	r3, r7, #24
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fa9d 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002158:	f7ff ffae 	bl	80020b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800215c:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_ADC_MspInit+0x128>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	4a34      	ldr	r2, [pc, #208]	; (8002234 <HAL_ADC_MspInit+0x128>)
 8002162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002168:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_ADC_MspInit+0x128>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_ADC_MspInit+0x128>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a2e      	ldr	r2, [pc, #184]	; (8002234 <HAL_ADC_MspInit+0x128>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_ADC_MspInit+0x128>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_ADC_MspInit+0x128>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	4a28      	ldr	r2, [pc, #160]	; (8002234 <HAL_ADC_MspInit+0x128>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002198:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_ADC_MspInit+0x128>)
 800219a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021a4:	2302      	movs	r3, #2
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a8:	2303      	movs	r3, #3
 80021aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021b4:	4619      	mov	r1, r3
 80021b6:	4820      	ldr	r0, [pc, #128]	; (8002238 <HAL_ADC_MspInit+0x12c>)
 80021b8:	f002 fad4 	bl	8004764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021bc:	2301      	movs	r3, #1
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c0:	2303      	movs	r3, #3
 80021c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021cc:	4619      	mov	r1, r3
 80021ce:	481b      	ldr	r0, [pc, #108]	; (800223c <HAL_ADC_MspInit+0x130>)
 80021d0:	f002 fac8 	bl	8004764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_ADC_MspInit+0x138>)
 80021d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021dc:	2205      	movs	r2, #5
 80021de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_ADC_MspInit+0x134>)
 80021fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002200:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_ADC_MspInit+0x134>)
 8002204:	2220      	movs	r2, #32
 8002206:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_ADC_MspInit+0x134>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800220e:	480c      	ldr	r0, [pc, #48]	; (8002240 <HAL_ADC_MspInit+0x134>)
 8002210:	f001 ff76 	bl	8004100 <HAL_DMA_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 800221a:	f7ff ff4d 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_ADC_MspInit+0x134>)
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_ADC_MspInit+0x134>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3780      	adds	r7, #128	; 0x80
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	48000800 	.word	0x48000800
 800223c:	48000400 	.word	0x48000400
 8002240:	200000fc 	.word	0x200000fc
 8002244:	40020030 	.word	0x40020030

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d114      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	201c      	movs	r0, #28
 8002278:	f001 ff0d 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227c:	201c      	movs	r0, #28
 800227e:	f001 ff24 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002282:	e032      	b.n	80022ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d114      	bne.n	80022b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	201d      	movs	r0, #29
 80022ac:	f001 fef3 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022b0:	201d      	movs	r0, #29
 80022b2:	f001 ff0a 	bl	80040ca <HAL_NVIC_EnableIRQ>
}
 80022b6:	e018      	b.n	80022ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_TIM_Base_MspInit+0xb4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d113      	bne.n	80022ea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	6613      	str	r3, [r2, #96]	; 0x60
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2019      	movs	r0, #25
 80022e0:	f001 fed9 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022e4:	2019      	movs	r0, #25
 80022e6:	f001 fef0 	bl	80040ca <HAL_NVIC_EnableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40014400 	.word	0x40014400

08002300 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_TIM_PWM_MspInit+0x38>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10b      	bne.n	800232a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_TIM_PWM_MspInit+0x3c>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_TIM_PWM_MspInit+0x3c>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_TIM_PWM_MspInit+0x3c>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40000800 	.word	0x40000800
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_TIM_Encoder_MspInit+0x8c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d130      	bne.n	80023c4 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x90>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002392:	2303      	movs	r3, #3
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023a2:	2302      	movs	r3, #2
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f002 f9d8 	bl	8004764 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2032      	movs	r0, #50	; 0x32
 80023ba:	f001 fe6c 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023be:	2032      	movs	r0, #50	; 0x32
 80023c0:	f001 fe83 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_TIM_MspPostInit+0x68>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11d      	bne.n	8002432 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800240e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002420:	230a      	movs	r3, #10
 8002422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f002 f999 	bl	8004764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40000800 	.word	0x40000800
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09e      	sub	sp, #120	; 0x78
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2254      	movs	r2, #84	; 0x54
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f007 f9c7 	bl	80097f8 <memset>
  if(huart->Instance==USART2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002470:	4293      	cmp	r3, r2
 8002472:	f040 8092 	bne.w	800259a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002476:	2302      	movs	r3, #2
 8002478:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f003 f902 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800248e:	f7ff fe13 	bl	80020b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002492:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <HAL_UART_MspInit+0x164>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <HAL_UART_MspInit+0x164>)
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_UART_MspInit+0x164>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_UART_MspInit+0x164>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a3e      	ldr	r2, [pc, #248]	; (80025a8 <HAL_UART_MspInit+0x164>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_UART_MspInit+0x164>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024c2:	230c      	movs	r3, #12
 80024c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d2:	2307      	movs	r3, #7
 80024d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e0:	f002 f940 	bl	8004764 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_UART_MspInit+0x168>)
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <HAL_UART_MspInit+0x16c>)
 80024e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_UART_MspInit+0x168>)
 80024ec:	221a      	movs	r2, #26
 80024ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024f0:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_UART_MspInit+0x168>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_UART_MspInit+0x168>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_UART_MspInit+0x168>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_UART_MspInit+0x168>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_UART_MspInit+0x168>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_UART_MspInit+0x168>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_UART_MspInit+0x168>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800251a:	4824      	ldr	r0, [pc, #144]	; (80025ac <HAL_UART_MspInit+0x168>)
 800251c:	f001 fdf0 	bl	8004100 <HAL_DMA_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002526:	f7ff fdc7 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_UART_MspInit+0x168>)
 800252e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_UART_MspInit+0x168>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <HAL_UART_MspInit+0x170>)
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_UART_MspInit+0x174>)
 800253c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002540:	221b      	movs	r2, #27
 8002542:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002546:	2210      	movs	r2, #16
 8002548:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_UART_MspInit+0x170>)
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002558:	2200      	movs	r2, #0
 800255a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_UART_MspInit+0x170>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002564:	2200      	movs	r2, #0
 8002566:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_UART_MspInit+0x170>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800256e:	4811      	ldr	r0, [pc, #68]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002570:	f001 fdc6 	bl	8004100 <HAL_DMA_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800257a:	f7ff fd9d 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002582:	67da      	str	r2, [r3, #124]	; 0x7c
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <HAL_UART_MspInit+0x170>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2026      	movs	r0, #38	; 0x26
 8002590:	f001 fd81 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002594:	2026      	movs	r0, #38	; 0x26
 8002596:	f001 fd98 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3778      	adds	r7, #120	; 0x78
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40021000 	.word	0x40021000
 80025ac:	20000624 	.word	0x20000624
 80025b0:	4002001c 	.word	0x4002001c
 80025b4:	20000684 	.word	0x20000684
 80025b8:	40020008 	.word	0x40020008

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 f8e8 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <DMA1_Channel1_IRQHandler+0x10>)
 8002616:	f001 ff56 	bl	80044c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000684 	.word	0x20000684

08002624 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <DMA1_Channel2_IRQHandler+0x10>)
 800262a:	f001 ff4c 	bl	80044c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000624 	.word	0x20000624

08002638 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <DMA1_Channel3_IRQHandler+0x10>)
 800263e:	f001 ff42 	bl	80044c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200000fc 	.word	0x200000fc

0800264c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002652:	f003 ff63 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000048c 	.word	0x2000048c

08002660 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM2_IRQHandler+0x10>)
 8002666:	f003 ff59 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000015c 	.word	0x2000015c

08002674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM3_IRQHandler+0x10>)
 800267a:	f003 ff4f 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000228 	.word	0x20000228

08002688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <USART2_IRQHandler+0x10>)
 800268e:	f005 fc05 	bl	8007e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000558 	.word	0x20000558

0800269c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026a4:	f002 f9f8 	bl	8004a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM5_IRQHandler+0x10>)
 80026b2:	f003 ff33 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200003c0 	.word	0x200003c0

080026c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <SystemInit+0x20>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <SystemInit+0x20>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e8:	f7ff ffea 	bl	80026c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <LoopForever+0xe>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002704:	4c0a      	ldr	r4, [pc, #40]	; (8002730 <LoopForever+0x16>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800270a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002712:	f007 f87f 	bl	8009814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002716:	f7ff f825 	bl	8001764 <main>

0800271a <LoopForever>:

LoopForever:
    b LoopForever
 800271a:	e7fe      	b.n	800271a <LoopForever>
  ldr   r0, =_estack
 800271c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002724:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002728:	0800a084 	.word	0x0800a084
  ldr r2, =_sbss
 800272c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002730:	20001114 	.word	0x20001114

08002734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC1_2_IRQHandler>

08002736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f001 fc9d 	bl	8004080 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002746:	2000      	movs	r0, #0
 8002748:	f000 f80e 	bl	8002768 <HAL_InitTick>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	e001      	b.n	800275c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002758:	f7ff fcb4 	bl	80020c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800275c:	79fb      	ldrb	r3, [r7, #7]

}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_InitTick+0x68>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d022      	beq.n	80027c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_InitTick+0x6c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_InitTick+0x68>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002788:	fbb1 f3f3 	udiv	r3, r1, r3
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f001 fca8 	bl	80040e6 <HAL_SYSTICK_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10f      	bne.n	80027bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	d809      	bhi.n	80027b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a2:	2200      	movs	r2, #0
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295
 80027aa:	f001 fc74 	bl	8004096 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_InitTick+0x70>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e004      	b.n	80027c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000010 	.word	0x20000010
 80027d4:	20000008 	.word	0x20000008
 80027d8:	2000000c 	.word	0x2000000c

080027dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x1c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_IncTick+0x20>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <HAL_IncTick+0x1c>)
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	20000fd8 	.word	0x20000fd8
 80027fc:	20000010 	.word	0x20000010

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000fd8 	.word	0x20000fd8

08002818 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3360      	adds	r3, #96	; 0x60
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <LL_ADC_SetOffset+0x44>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	03fff000 	.word	0x03fff000

080028c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3360      	adds	r3, #96	; 0x60
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	431a      	orrs	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3360      	adds	r3, #96	; 0x60
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	431a      	orrs	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	615a      	str	r2, [r3, #20]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b087      	sub	sp, #28
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3330      	adds	r3, #48	; 0x30
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	211f      	movs	r1, #31
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 011f 	and.w	r1, r3, #31
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	0e5b      	lsrs	r3, r3, #25
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0d1b      	lsrs	r3, r3, #20
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2107      	movs	r1, #7
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0d1b      	lsrs	r3, r3, #20
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0318 	and.w	r3, r3, #24
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ab4:	40d9      	lsrs	r1, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	400b      	ands	r3, r1
 8002aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	0007ffff 	.word	0x0007ffff

08002ad8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6093      	str	r3, [r2, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ba0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <LL_ADC_IsEnabled+0x18>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <LL_ADC_IsEnabled+0x1a>
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d101      	bne.n	8002c1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d101      	bne.n	8002c44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1a9      	b.n	8002fc2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fa45 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff3f 	bl	8002b18 <LL_ADC_IsDeepPowerDownEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff25 	bl	8002af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff5a 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff3e 	bl	8002b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc4:	4b9c      	ldr	r3, [pc, #624]	; (8002f38 <HAL_ADC_Init+0x2e4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	4a9c      	ldr	r2, [pc, #624]	; (8002f3c <HAL_ADC_Init+0x2e8>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f9      	bne.n	8002cda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff3c 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10d      	bne.n	8002d12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff75 	bl	8002c06 <LL_ADC_REG_IsConversionOngoing>
 8002d1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 8142 	bne.w	8002fb0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 813e 	bne.w	8002fb0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff35 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d141      	bne.n	8002dd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5c:	d004      	beq.n	8002d68 <HAL_ADC_Init+0x114>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_ADC_Init+0x2ec>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10f      	bne.n	8002d88 <HAL_ADC_Init+0x134>
 8002d68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d6c:	f7ff ff24 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d70:	4604      	mov	r4, r0
 8002d72:	4873      	ldr	r0, [pc, #460]	; (8002f40 <HAL_ADC_Init+0x2ec>)
 8002d74:	f7ff ff20 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4323      	orrs	r3, r4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e012      	b.n	8002dae <HAL_ADC_Init+0x15a>
 8002d88:	486e      	ldr	r0, [pc, #440]	; (8002f44 <HAL_ADC_Init+0x2f0>)
 8002d8a:	f7ff ff15 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	486d      	ldr	r0, [pc, #436]	; (8002f48 <HAL_ADC_Init+0x2f4>)
 8002d92:	f7ff ff11 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	431c      	orrs	r4, r3
 8002d9a:	486c      	ldr	r0, [pc, #432]	; (8002f4c <HAL_ADC_Init+0x2f8>)
 8002d9c:	f7ff ff0c 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4323      	orrs	r3, r4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_Init+0x172>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_ADC_Init+0x2ec>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_Init+0x176>
 8002dc6:	4a62      	ldr	r2, [pc, #392]	; (8002f50 <HAL_ADC_Init+0x2fc>)
 8002dc8:	e000      	b.n	8002dcc <HAL_ADC_Init+0x178>
 8002dca:	4a62      	ldr	r2, [pc, #392]	; (8002f54 <HAL_ADC_Init+0x300>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f7ff fd20 	bl	8002818 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7f5b      	ldrb	r3, [r3, #29]
 8002ddc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002de8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002dee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d106      	bne.n	8002e14 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	045b      	lsls	r3, r3, #17
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <HAL_ADC_Init+0x304>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	69b9      	ldr	r1, [r7, #24]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fee4 	bl	8002c2c <LL_ADC_INJ_IsConversionOngoing>
 8002e64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d17f      	bne.n	8002f6c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d17c      	bne.n	8002f6c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8e:	f023 0302 	bic.w	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	69b9      	ldr	r1, [r7, #24]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ebc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6911      	ldr	r1, [r2, #16]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002ed2:	e013      	b.n	8002efc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ee2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d12a      	bne.n	8002f5c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	611a      	str	r2, [r3, #16]
 8002f36:	e019      	b.n	8002f6c <HAL_ADC_Init+0x318>
 8002f38:	20000008 	.word	0x20000008
 8002f3c:	053e2d63 	.word	0x053e2d63
 8002f40:	50000100 	.word	0x50000100
 8002f44:	50000400 	.word	0x50000400
 8002f48:	50000500 	.word	0x50000500
 8002f4c:	50000600 	.word	0x50000600
 8002f50:	50000300 	.word	0x50000300
 8002f54:	50000700 	.word	0x50000700
 8002f58:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f023 010f 	bic.w	r1, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8c:	e007      	b.n	8002f9e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 020f 	bic.w	r2, r2, #15
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fae:	e007      	b.n	8002fc0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop

08002fcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_Start_DMA+0x20>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a5a      	ldr	r2, [pc, #360]	; (8003150 <HAL_ADC_Start_DMA+0x184>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x24>
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_ADC_Start_DMA+0x188>)
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_Start_DMA+0x26>
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_ADC_Start_DMA+0x18c>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd70 	bl	8002ad8 <LL_ADC_GetMultimode>
 8002ff8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fe01 	bl	8002c06 <LL_ADC_REG_IsConversionOngoing>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 809b 	bne.w	8003142 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_ADC_Start_DMA+0x4e>
 8003016:	2302      	movs	r3, #2
 8003018:	e096      	b.n	8003148 <HAL_ADC_Start_DMA+0x17c>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_ADC_Start_DMA+0x190>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d008      	beq.n	800303e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b05      	cmp	r3, #5
 8003036:	d002      	beq.n	800303e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b09      	cmp	r3, #9
 800303c:	d17a      	bne.n	8003134 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fcf6 	bl	8003a30 <ADC_Enable>
 8003044:	4603      	mov	r3, r0
 8003046:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d16d      	bne.n	800312a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <HAL_ADC_Start_DMA+0x184>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_ADC_Start_DMA+0xb4>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3b      	ldr	r2, [pc, #236]	; (8003160 <HAL_ADC_Start_DMA+0x194>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d002      	beq.n	800307c <HAL_ADC_Start_DMA+0xb0>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	e003      	b.n	8003084 <HAL_ADC_Start_DMA+0xb8>
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_ADC_Start_DMA+0x198>)
 800307e:	e001      	b.n	8003084 <HAL_ADC_Start_DMA+0xb8>
 8003080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	4293      	cmp	r3, r2
 800308a:	d002      	beq.n	8003092 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	f023 0206 	bic.w	r2, r3, #6
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60
 80030b6:	e002      	b.n	80030be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	4a29      	ldr	r2, [pc, #164]	; (8003168 <HAL_ADC_Start_DMA+0x19c>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	4a28      	ldr	r2, [pc, #160]	; (800316c <HAL_ADC_Start_DMA+0x1a0>)
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	4a27      	ldr	r2, [pc, #156]	; (8003170 <HAL_ADC_Start_DMA+0x1a4>)
 80030d4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	221c      	movs	r2, #28
 80030dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0210 	orr.w	r2, r2, #16
 80030f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3340      	adds	r3, #64	; 0x40
 8003110:	4619      	mov	r1, r3
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f001 f89b 	bl	8004250 <HAL_DMA_Start_IT>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fd5b 	bl	8002bde <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003128:	e00d      	b.n	8003146 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003132:	e008      	b.n	8003146 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003140:	e001      	b.n	8003146 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	50000100 	.word	0x50000100
 8003154:	50000300 	.word	0x50000300
 8003158:	50000700 	.word	0x50000700
 800315c:	50000600 	.word	0x50000600
 8003160:	50000500 	.word	0x50000500
 8003164:	50000400 	.word	0x50000400
 8003168:	08003b5d 	.word	0x08003b5d
 800316c:	08003c35 	.word	0x08003c35
 8003170:	08003c51 	.word	0x08003c51

08003174 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0b6      	sub	sp, #216	; 0xd8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x24>
 80031ce:	2302      	movs	r3, #2
 80031d0:	f000 bc13 	b.w	80039fa <HAL_ADC_ConfigChannel+0x84a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fd10 	bl	8002c06 <LL_ADC_REG_IsConversionOngoing>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 83f3 	bne.w	80039d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f7ff fbf1 	bl	80029e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fcfe 	bl	8002c06 <LL_ADC_REG_IsConversionOngoing>
 800320a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fd0a 	bl	8002c2c <LL_ADC_INJ_IsConversionOngoing>
 8003218:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800321c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 81d9 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 81d4 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003238:	d10f      	bne.n	800325a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	4619      	mov	r1, r3
 8003246:	f7ff fbf8 	bl	8002a3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fb9f 	bl	8002996 <LL_ADC_SetSamplingTimeCommonConfig>
 8003258:	e00e      	b.n	8003278 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	461a      	mov	r2, r3
 8003268:	f7ff fbe7 	bl	8002a3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fb8f 	bl	8002996 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	08db      	lsrs	r3, r3, #3
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d022      	beq.n	80032e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6919      	ldr	r1, [r3, #16]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032aa:	f7ff fae9 	bl	8002880 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6919      	ldr	r1, [r3, #16]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f7ff fb35 	bl	800292a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x126>
 80032d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d4:	e000      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x128>
 80032d6:	2300      	movs	r3, #0
 80032d8:	461a      	mov	r2, r3
 80032da:	f7ff fb41 	bl	8002960 <LL_ADC_SetOffsetSaturation>
 80032de:	e17b      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff faee 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_ADC_ConfigChannel+0x15c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fae3 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003302:	4603      	mov	r3, r0
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 021f 	and.w	r2, r3, #31
 800330a:	e01e      	b.n	800334a <HAL_ADC_ConfigChannel+0x19a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fad8 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800332a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800332e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e004      	b.n	8003348 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800333e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x1b2>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	e018      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1e4>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800337a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800337e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e004      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800338a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003394:	429a      	cmp	r2, r3
 8003396:	d106      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff faa7 	bl	80028f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fa8b 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x222>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fa80 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	0e9b      	lsrs	r3, r3, #26
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	e01e      	b.n	8003410 <HAL_ADC_ConfigChannel+0x260>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fa75 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e004      	b.n	800340e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x278>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	e018      	b.n	800345a <HAL_ADC_ConfigChannel+0x2aa>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800343c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e004      	b.n	800345a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800345a:	429a      	cmp	r2, r3
 800345c:	d106      	bne.n	800346c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fa44 	bl	80028f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2102      	movs	r1, #2
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fa28 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003478:	4603      	mov	r3, r0
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x2e8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fa1d 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 800348e:	4603      	mov	r3, r0
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	f003 021f 	and.w	r2, r3, #31
 8003496:	e01e      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x326>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fa12 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80034b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80034be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e004      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80034ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x33e>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	e016      	b.n	800351c <HAL_ADC_ConfigChannel+0x36c>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e004      	b.n	800351c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800351c:	429a      	cmp	r2, r3
 800351e:	d106      	bne.n	800352e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f9e3 	bl	80028f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2103      	movs	r1, #3
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff f9c7 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_ADC_ConfigChannel+0x3aa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2103      	movs	r1, #3
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f9bc 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003550:	4603      	mov	r3, r0
 8003552:	0e9b      	lsrs	r3, r3, #26
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	e017      	b.n	800358a <HAL_ADC_ConfigChannel+0x3da>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2103      	movs	r1, #3
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff f9b1 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003574:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x3f2>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	e011      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x416>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	e003      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d106      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2103      	movs	r1, #3
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f98e 	bl	80028f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff faeb 	bl	8002bb8 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 813d 	bne.w	8003864 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6819      	ldr	r1, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f7ff fa4a 	bl	8002a90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4aa2      	ldr	r2, [pc, #648]	; (800388c <HAL_ADC_ConfigChannel+0x6dc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	f040 812e 	bne.w	8003864 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x480>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2b09      	cmp	r3, #9
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e019      	b.n	8003664 <HAL_ADC_ConfigChannel+0x4b4>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800363e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003640:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e003      	b.n	8003654 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800364c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b09      	cmp	r3, #9
 800365c:	bf94      	ite	ls
 800365e:	2301      	movls	r3, #1
 8003660:	2300      	movhi	r3, #0
 8003662:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003664:	2b00      	cmp	r3, #0
 8003666:	d079      	beq.n	800375c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x4d4>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	3301      	adds	r3, #1
 800367c:	069b      	lsls	r3, r3, #26
 800367e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003682:	e015      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x500>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003694:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	069b      	lsls	r3, r3, #26
 80036ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x520>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	e017      	b.n	8003700 <HAL_ADC_ConfigChannel+0x550>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	ea42 0103 	orr.w	r1, r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x576>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0e9b      	lsrs	r3, r3, #26
 8003716:	3301      	adds	r3, #1
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	051b      	lsls	r3, r3, #20
 8003724:	e018      	b.n	8003758 <HAL_ADC_ConfigChannel+0x5a8>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e003      	b.n	800374a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3301      	adds	r3, #1
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003758:	430b      	orrs	r3, r1
 800375a:	e07e      	b.n	800385a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x5c8>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	3301      	adds	r3, #1
 8003770:	069b      	lsls	r3, r3, #26
 8003772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003776:	e015      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x5f4>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	069b      	lsls	r3, r3, #26
 80037a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x614>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	3301      	adds	r3, #1
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	e017      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x644>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	61fb      	str	r3, [r7, #28]
  return result;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	ea42 0103 	orr.w	r1, r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x670>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	3301      	adds	r3, #1
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	3b1e      	subs	r3, #30
 8003818:	051b      	lsls	r3, r3, #20
 800381a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800381e:	e01b      	b.n	8003858 <HAL_ADC_ConfigChannel+0x6a8>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	613b      	str	r3, [r7, #16]
  return result;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e003      	b.n	8003844 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f003 021f 	and.w	r2, r3, #31
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	3b1e      	subs	r3, #30
 8003852:	051b      	lsls	r3, r3, #20
 8003854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003858:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800385e:	4619      	mov	r1, r3
 8003860:	f7ff f8eb 	bl	8002a3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_ADC_ConfigChannel+0x6e0>)
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80be 	beq.w	80039ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387a:	d004      	beq.n	8003886 <HAL_ADC_ConfigChannel+0x6d6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_ADC_ConfigChannel+0x6e4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10a      	bne.n	800389c <HAL_ADC_ConfigChannel+0x6ec>
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <HAL_ADC_ConfigChannel+0x6e8>)
 8003888:	e009      	b.n	800389e <HAL_ADC_ConfigChannel+0x6ee>
 800388a:	bf00      	nop
 800388c:	407f0000 	.word	0x407f0000
 8003890:	80080000 	.word	0x80080000
 8003894:	50000100 	.word	0x50000100
 8003898:	50000300 	.word	0x50000300
 800389c:	4b59      	ldr	r3, [pc, #356]	; (8003a04 <HAL_ADC_ConfigChannel+0x854>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe ffe0 	bl	8002864 <LL_ADC_GetCommonPathInternalCh>
 80038a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a56      	ldr	r2, [pc, #344]	; (8003a08 <HAL_ADC_ConfigChannel+0x858>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x70c>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a55      	ldr	r2, [pc, #340]	; (8003a0c <HAL_ADC_ConfigChannel+0x85c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d13a      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d134      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d0:	d005      	beq.n	80038de <HAL_ADC_ConfigChannel+0x72e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_ADC_ConfigChannel+0x860>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f040 8085 	bne.w	80039e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x742>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a49      	ldr	r2, [pc, #292]	; (8003a14 <HAL_ADC_ConfigChannel+0x864>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x746>
 80038f2:	4a49      	ldr	r2, [pc, #292]	; (8003a18 <HAL_ADC_ConfigChannel+0x868>)
 80038f4:	e000      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x748>
 80038f6:	4a43      	ldr	r2, [pc, #268]	; (8003a04 <HAL_ADC_ConfigChannel+0x854>)
 80038f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f7fe ff9b 	bl	800283e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003908:	4b44      	ldr	r3, [pc, #272]	; (8003a1c <HAL_ADC_ConfigChannel+0x86c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <HAL_ADC_ConfigChannel+0x870>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003922:	e002      	b.n	800392a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3b01      	subs	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f9      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003930:	e05a      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <HAL_ADC_ConfigChannel+0x874>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d125      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800393c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11f      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <HAL_ADC_ConfigChannel+0x864>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d104      	bne.n	800395c <HAL_ADC_ConfigChannel+0x7ac>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_ADC_ConfigChannel+0x878>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d047      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003964:	d004      	beq.n	8003970 <HAL_ADC_ConfigChannel+0x7c0>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <HAL_ADC_ConfigChannel+0x864>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x7c4>
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <HAL_ADC_ConfigChannel+0x868>)
 8003972:	e000      	b.n	8003976 <HAL_ADC_ConfigChannel+0x7c6>
 8003974:	4a23      	ldr	r2, [pc, #140]	; (8003a04 <HAL_ADC_ConfigChannel+0x854>)
 8003976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800397a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f7fe ff5c 	bl	800283e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003986:	e031      	b.n	80039ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <HAL_ADC_ConfigChannel+0x87c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d12d      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d127      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_ADC_ConfigChannel+0x864>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b0:	d004      	beq.n	80039bc <HAL_ADC_ConfigChannel+0x80c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <HAL_ADC_ConfigChannel+0x864>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x810>
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_ADC_ConfigChannel+0x868>)
 80039be:	e000      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x812>
 80039c0:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_ADC_ConfigChannel+0x854>)
 80039c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe ff36 	bl	800283e <LL_ADC_SetCommonPathInternalCh>
 80039d2:	e00c      	b.n	80039ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039e6:	e002      	b.n	80039ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	37d8      	adds	r7, #216	; 0xd8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	50000700 	.word	0x50000700
 8003a08:	c3210000 	.word	0xc3210000
 8003a0c:	90c00010 	.word	0x90c00010
 8003a10:	50000600 	.word	0x50000600
 8003a14:	50000100 	.word	0x50000100
 8003a18:	50000300 	.word	0x50000300
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	053e2d63 	.word	0x053e2d63
 8003a24:	c7520000 	.word	0xc7520000
 8003a28:	50000500 	.word	0x50000500
 8003a2c:	cb840000 	.word	0xcb840000

08003a30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff f8b9 	bl	8002bb8 <LL_ADC_IsEnabled>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d176      	bne.n	8003b3a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	4b3c      	ldr	r3, [pc, #240]	; (8003b44 <ADC_Enable+0x114>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	f043 0210 	orr.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e062      	b.n	8003b3c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f888 	bl	8002b90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a88:	d004      	beq.n	8003a94 <ADC_Enable+0x64>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <ADC_Enable+0x118>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <ADC_Enable+0x68>
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <ADC_Enable+0x11c>)
 8003a96:	e000      	b.n	8003a9a <ADC_Enable+0x6a>
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <ADC_Enable+0x120>)
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fee2 	bl	8002864 <LL_ADC_GetCommonPathInternalCh>
 8003aa0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d013      	beq.n	8003ad2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <ADC_Enable+0x124>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <ADC_Enable+0x128>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ac4:	e002      	b.n	8003acc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f9      	bne.n	8003ac6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ad2:	f7fe fe95 	bl	8002800 <HAL_GetTick>
 8003ad6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad8:	e028      	b.n	8003b2c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f86a 	bl	8002bb8 <LL_ADC_IsEnabled>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f84e 	bl	8002b90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003af4:	f7fe fe84 	bl	8002800 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d914      	bls.n	8003b2c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d00d      	beq.n	8003b2c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	f043 0210 	orr.w	r2, r3, #16
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e007      	b.n	8003b3c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d1cf      	bne.n	8003ada <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	8000003f 	.word	0x8000003f
 8003b48:	50000100 	.word	0x50000100
 8003b4c:	50000300 	.word	0x50000300
 8003b50:	50000700 	.word	0x50000700
 8003b54:	20000008 	.word	0x20000008
 8003b58:	053e2d63 	.word	0x053e2d63

08003b5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d14b      	bne.n	8003c0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d021      	beq.n	8003bd4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe ff11 	bl	80029bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d032      	beq.n	8003c06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12b      	bne.n	8003c06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11f      	bne.n	8003c06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bd2:	e018      	b.n	8003c06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d111      	bne.n	8003c06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff fab4 	bl	8003174 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c0c:	e00e      	b.n	8003c2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff fabe 	bl	800319c <HAL_ADC_ErrorCallback>
}
 8003c20:	e004      	b.n	8003c2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff faa0 	bl	8003188 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	f043 0204 	orr.w	r2, r3, #4
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff fa90 	bl	800319c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <LL_ADC_IsEnabled>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <LL_ADC_IsEnabled+0x18>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <LL_ADC_IsEnabled+0x1a>
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_ADC_REG_IsConversionOngoing>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b0a1      	sub	sp, #132	; 0x84
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0e7      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d06:	d102      	bne.n	8003d0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d08:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	e009      	b.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d102      	bne.n	8003d1e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d18:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	e001      	b.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0be      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ffb1 	bl	8003caa <LL_ADC_REG_IsConversionOngoing>
 8003d48:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ffab 	bl	8003caa <LL_ADC_REG_IsConversionOngoing>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 80a0 	bne.w	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 809c 	bne.w	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a55      	ldr	r2, [pc, #340]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003d78:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003d7a:	e000      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003d7c:	4b56      	ldr	r3, [pc, #344]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003d7e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d04b      	beq.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d9a:	035b      	lsls	r3, r3, #13
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dac:	d004      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10f      	bne.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003db8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003dbc:	f7ff ff62 	bl	8003c84 <LL_ADC_IsEnabled>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	4841      	ldr	r0, [pc, #260]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dc4:	f7ff ff5e 	bl	8003c84 <LL_ADC_IsEnabled>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4323      	orrs	r3, r4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e012      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003dd8:	483c      	ldr	r0, [pc, #240]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dda:	f7ff ff53 	bl	8003c84 <LL_ADC_IsEnabled>
 8003dde:	4604      	mov	r4, r0
 8003de0:	483b      	ldr	r0, [pc, #236]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003de2:	f7ff ff4f 	bl	8003c84 <LL_ADC_IsEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	431c      	orrs	r4, r3
 8003dea:	483c      	ldr	r0, [pc, #240]	; (8003edc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003dec:	f7ff ff4a 	bl	8003c84 <LL_ADC_IsEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	4323      	orrs	r3, r4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d056      	beq.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e0a:	f023 030f 	bic.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	6811      	ldr	r1, [r2, #0]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	6892      	ldr	r2, [r2, #8]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e1e:	e047      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e34:	d004      	beq.n	8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a23      	ldr	r2, [pc, #140]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10f      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e44:	f7ff ff1e 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e48:	4604      	mov	r4, r0
 8003e4a:	481f      	ldr	r0, [pc, #124]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e4c:	f7ff ff1a 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4323      	orrs	r3, r4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e012      	b.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e60:	481a      	ldr	r0, [pc, #104]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e62:	f7ff ff0f 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e66:	4604      	mov	r4, r0
 8003e68:	4819      	ldr	r0, [pc, #100]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e6a:	f7ff ff0b 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	431c      	orrs	r4, r3
 8003e72:	481a      	ldr	r0, [pc, #104]	; (8003edc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e74:	f7ff ff06 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4323      	orrs	r3, r4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e92:	f023 030f 	bic.w	r3, r3, #15
 8003e96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e9a:	e009      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003eae:	e000      	b.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003eba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3784      	adds	r7, #132	; 0x84
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	50000100 	.word	0x50000100
 8003ecc:	50000400 	.word	0x50000400
 8003ed0:	50000500 	.word	0x50000500
 8003ed4:	50000300 	.word	0x50000300
 8003ed8:	50000700 	.word	0x50000700
 8003edc:	50000600 	.word	0x50000600

08003ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003efc:	4013      	ands	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f12:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <__NVIC_SetPriorityGrouping+0x44>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60d3      	str	r3, [r2, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__NVIC_GetPriorityGrouping+0x18>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 0307 	and.w	r3, r3, #7
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	db0b      	blt.n	8003f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	4907      	ldr	r1, [pc, #28]	; (8003f7c <__NVIC_EnableIRQ+0x38>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2001      	movs	r0, #1
 8003f66:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000e100 	.word	0xe000e100

08003f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	db0a      	blt.n	8003faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	490c      	ldr	r1, [pc, #48]	; (8003fcc <__NVIC_SetPriority+0x4c>)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	0112      	lsls	r2, r2, #4
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa8:	e00a      	b.n	8003fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4908      	ldr	r1, [pc, #32]	; (8003fd0 <__NVIC_SetPriority+0x50>)
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	3b04      	subs	r3, #4
 8003fb8:	0112      	lsls	r2, r2, #4
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	761a      	strb	r2, [r3, #24]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000e100 	.word	0xe000e100
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f1c3 0307 	rsb	r3, r3, #7
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf28      	it	cs
 8003ff2:	2304      	movcs	r3, #4
 8003ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d902      	bls.n	8004004 <NVIC_EncodePriority+0x30>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3b03      	subs	r3, #3
 8004002:	e000      	b.n	8004006 <NVIC_EncodePriority+0x32>
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	401a      	ands	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800401c:	f04f 31ff 	mov.w	r1, #4294967295
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	43d9      	mvns	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402c:	4313      	orrs	r3, r2
         );
}
 800402e:	4618      	mov	r0, r3
 8004030:	3724      	adds	r7, #36	; 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800404c:	d301      	bcc.n	8004052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800404e:	2301      	movs	r3, #1
 8004050:	e00f      	b.n	8004072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <SysTick_Config+0x40>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800405a:	210f      	movs	r1, #15
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	f7ff ff8e 	bl	8003f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <SysTick_Config+0x40>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <SysTick_Config+0x40>)
 800406c:	2207      	movs	r2, #7
 800406e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000e010 	.word	0xe000e010

08004080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ff29 	bl	8003ee0 <__NVIC_SetPriorityGrouping>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040a4:	f7ff ff40 	bl	8003f28 <__NVIC_GetPriorityGrouping>
 80040a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	6978      	ldr	r0, [r7, #20]
 80040b0:	f7ff ff90 	bl	8003fd4 <NVIC_EncodePriority>
 80040b4:	4602      	mov	r2, r0
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff5f 	bl	8003f80 <__NVIC_SetPriority>
}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff33 	bl	8003f44 <__NVIC_EnableIRQ>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ffa4 	bl	800403c <SysTick_Config>
 80040f4:	4603      	mov	r3, r0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e08d      	b.n	800422e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_DMA_Init+0x138>)
 800411a:	429a      	cmp	r2, r3
 800411c:	d80f      	bhi.n	800413e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_DMA_Init+0x13c>)
 8004126:	4413      	add	r3, r2
 8004128:	4a45      	ldr	r2, [pc, #276]	; (8004240 <HAL_DMA_Init+0x140>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	009a      	lsls	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a42      	ldr	r2, [pc, #264]	; (8004244 <HAL_DMA_Init+0x144>)
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
 800413c:	e00e      	b.n	800415c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b40      	ldr	r3, [pc, #256]	; (8004248 <HAL_DMA_Init+0x148>)
 8004146:	4413      	add	r3, r2
 8004148:	4a3d      	ldr	r2, [pc, #244]	; (8004240 <HAL_DMA_Init+0x140>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	009a      	lsls	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a3c      	ldr	r2, [pc, #240]	; (800424c <HAL_DMA_Init+0x14c>)
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa76 	bl	80046a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041bc:	d102      	bne.n	80041c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_DMA_Init+0x104>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d80c      	bhi.n	8004204 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa96 	bl	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e008      	b.n	8004216 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40020407 	.word	0x40020407
 800423c:	bffdfff8 	.word	0xbffdfff8
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	40020000 	.word	0x40020000
 8004248:	bffdfbf8 	.word	0xbffdfbf8
 800424c:	40020400 	.word	0x40020400

08004250 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_DMA_Start_IT+0x20>
 800426c:	2302      	movs	r3, #2
 800426e:	e066      	b.n	800433e <HAL_DMA_Start_IT+0xee>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d155      	bne.n	8004330 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f9bb 	bl	8004624 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 020e 	orr.w	r2, r2, #14
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e00f      	b.n	80042e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 020a 	orr.w	r2, r2, #10
 80042e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004304:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e005      	b.n	800433c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004338:	2302      	movs	r3, #2
 800433a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d005      	beq.n	800436a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2204      	movs	r2, #4
 8004362:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
 8004368:	e037      	b.n	80043da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 020e 	bic.w	r2, r2, #14
 8004378:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004388:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d00d      	beq.n	800442c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2204      	movs	r2, #4
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	e047      	b.n	80044bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 020e 	bic.w	r2, r2, #14
 800443a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	f003 021f 	and.w	r2, r3, #31
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f202 	lsl.w	r2, r1, r2
 800446e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004478:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004490:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800449a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
    }
  }
  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2204      	movs	r2, #4
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d026      	beq.n	8004540 <HAL_DMA_IRQHandler+0x7a>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d021      	beq.n	8004540 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0204 	bic.w	r2, r2, #4
 8004518:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	f003 021f 	and.w	r2, r3, #31
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2104      	movs	r1, #4
 8004528:	fa01 f202 	lsl.w	r2, r1, r2
 800452c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	2b00      	cmp	r3, #0
 8004534:	d071      	beq.n	800461a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800453e:	e06c      	b.n	800461a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2202      	movs	r2, #2
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02e      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d029      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 020a 	bic.w	r2, r2, #10
 800457a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	f003 021f 	and.w	r2, r3, #31
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	2102      	movs	r1, #2
 8004592:	fa01 f202 	lsl.w	r2, r1, r2
 8004596:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d038      	beq.n	800461a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045b0:	e033      	b.n	800461a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2208      	movs	r2, #8
 80045bc:	409a      	lsls	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02a      	beq.n	800461c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d025      	beq.n	800461c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 020e 	bic.w	r2, r2, #14
 80045de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800461a:	bf00      	nop
 800461c:	bf00      	nop
}
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800463a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f003 021f 	and.w	r2, r3, #31
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f202 	lsl.w	r2, r1, r2
 8004660:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b10      	cmp	r3, #16
 8004670:	d108      	bne.n	8004684 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004682:	e007      	b.n	8004694 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d802      	bhi.n	80046ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e001      	b.n	80046be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80046bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	3b08      	subs	r3, #8
 80046ca:	4a12      	ldr	r2, [pc, #72]	; (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a0b      	ldr	r2, [pc, #44]	; (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80046ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2201      	movs	r2, #1
 80046f4:	409a      	lsls	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40020407 	.word	0x40020407
 800470c:	40020800 	.word	0x40020800
 8004710:	40020820 	.word	0x40020820
 8004714:	cccccccd 	.word	0xcccccccd
 8004718:	40020880 	.word	0x40020880

0800471c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a08      	ldr	r2, [pc, #32]	; (8004760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800473e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b01      	subs	r3, #1
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	1000823f 	.word	0x1000823f
 8004760:	40020940 	.word	0x40020940

08004764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004772:	e15a      	b.n	8004a2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2101      	movs	r1, #1
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 814c 	beq.w	8004a24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d005      	beq.n	80047a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d130      	bne.n	8004806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047da:	2201      	movs	r2, #1
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0201 	and.w	r2, r3, #1
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b03      	cmp	r3, #3
 8004810:	d017      	beq.n	8004842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d123      	bne.n	8004896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	08da      	lsrs	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3208      	adds	r2, #8
 8004856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	08da      	lsrs	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3208      	adds	r2, #8
 8004890:	6939      	ldr	r1, [r7, #16]
 8004892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0203 	and.w	r2, r3, #3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a6 	beq.w	8004a24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d8:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <HAL_GPIO_Init+0x2e4>)
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	4a5a      	ldr	r2, [pc, #360]	; (8004a48 <HAL_GPIO_Init+0x2e4>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6613      	str	r3, [r2, #96]	; 0x60
 80048e4:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <HAL_GPIO_Init+0x2e4>)
 80048e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048f0:	4a56      	ldr	r2, [pc, #344]	; (8004a4c <HAL_GPIO_Init+0x2e8>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	3302      	adds	r3, #2
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	220f      	movs	r2, #15
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4013      	ands	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800491a:	d01f      	beq.n	800495c <HAL_GPIO_Init+0x1f8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a4c      	ldr	r2, [pc, #304]	; (8004a50 <HAL_GPIO_Init+0x2ec>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d019      	beq.n	8004958 <HAL_GPIO_Init+0x1f4>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a4b      	ldr	r2, [pc, #300]	; (8004a54 <HAL_GPIO_Init+0x2f0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <HAL_GPIO_Init+0x1f0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a4a      	ldr	r2, [pc, #296]	; (8004a58 <HAL_GPIO_Init+0x2f4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00d      	beq.n	8004950 <HAL_GPIO_Init+0x1ec>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a49      	ldr	r2, [pc, #292]	; (8004a5c <HAL_GPIO_Init+0x2f8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <HAL_GPIO_Init+0x1e8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_GPIO_Init+0x2fc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <HAL_GPIO_Init+0x1e4>
 8004944:	2305      	movs	r3, #5
 8004946:	e00a      	b.n	800495e <HAL_GPIO_Init+0x1fa>
 8004948:	2306      	movs	r3, #6
 800494a:	e008      	b.n	800495e <HAL_GPIO_Init+0x1fa>
 800494c:	2304      	movs	r3, #4
 800494e:	e006      	b.n	800495e <HAL_GPIO_Init+0x1fa>
 8004950:	2303      	movs	r3, #3
 8004952:	e004      	b.n	800495e <HAL_GPIO_Init+0x1fa>
 8004954:	2302      	movs	r3, #2
 8004956:	e002      	b.n	800495e <HAL_GPIO_Init+0x1fa>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_GPIO_Init+0x1fa>
 800495c:	2300      	movs	r3, #0
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	f002 0203 	and.w	r2, r2, #3
 8004964:	0092      	lsls	r2, r2, #2
 8004966:	4093      	lsls	r3, r2
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800496e:	4937      	ldr	r1, [pc, #220]	; (8004a4c <HAL_GPIO_Init+0x2e8>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	3302      	adds	r3, #2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800497c:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_GPIO_Init+0x300>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	43db      	mvns	r3, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049a0:	4a30      	ldr	r2, [pc, #192]	; (8004a64 <HAL_GPIO_Init+0x300>)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <HAL_GPIO_Init+0x300>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049ca:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <HAL_GPIO_Init+0x300>)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <HAL_GPIO_Init+0x300>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	43db      	mvns	r3, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049f4:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_GPIO_Init+0x300>)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_GPIO_Init+0x300>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a1e:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <HAL_GPIO_Init+0x300>)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3301      	adds	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f ae9d 	bne.w	8004774 <HAL_GPIO_Init+0x10>
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	48000400 	.word	0x48000400
 8004a54:	48000800 	.word	0x48000800
 8004a58:	48000c00 	.word	0x48000c00
 8004a5c:	48001000 	.word	0x48001000
 8004a60:	48001400 	.word	0x48001400
 8004a64:	40010400 	.word	0x40010400

08004a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
 8004a74:	4613      	mov	r3, r2
 8004a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a78:	787b      	ldrb	r3, [r7, #1]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a84:	e002      	b.n	8004a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd fad8 	bl	800206c <HAL_GPIO_EXTI_Callback>
  }
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40010400 	.word	0x40010400

08004ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d141      	bne.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ad6:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae2:	d131      	bne.n	8004b48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ae4:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aea:	4a46      	ldr	r2, [pc, #280]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004afc:	4a41      	ldr	r2, [pc, #260]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b04:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2232      	movs	r2, #50	; 0x32
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	0c9b      	lsrs	r3, r3, #18
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b1a:	e002      	b.n	8004b22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b22:	4b38      	ldr	r3, [pc, #224]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2e:	d102      	bne.n	8004b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f2      	bne.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b36:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d158      	bne.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e057      	b.n	8004bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b48:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4e:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b58:	e04d      	b.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d141      	bne.n	8004be6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6e:	d131      	bne.n	8004bd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b76:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b80:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b88:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2232      	movs	r2, #50	; 0x32
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	0c9b      	lsrs	r3, r3, #18
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba6:	e002      	b.n	8004bae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d102      	bne.n	8004bc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f2      	bne.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	d112      	bne.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e011      	b.n	8004bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004be4:	e007      	b.n	8004bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40007000 	.word	0x40007000
 8004c08:	20000008 	.word	0x20000008
 8004c0c:	431bde83 	.word	0x431bde83

08004c10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c1e:	6093      	str	r3, [r2, #8]
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40007000 	.word	0x40007000

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e2fe      	b.n	8005240 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d075      	beq.n	8004d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4e:	4b97      	ldr	r3, [pc, #604]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c58:	4b94      	ldr	r3, [pc, #592]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	d102      	bne.n	8004c6e <HAL_RCC_OscConfig+0x3e>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d002      	beq.n	8004c74 <HAL_RCC_OscConfig+0x44>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	4b8d      	ldr	r3, [pc, #564]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05b      	beq.n	8004d38 <HAL_RCC_OscConfig+0x108>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d157      	bne.n	8004d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e2d9      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x74>
 8004c96:	4b85      	ldr	r3, [pc, #532]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a84      	ldr	r2, [pc, #528]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e01d      	b.n	8004ce0 <HAL_RCC_OscConfig+0xb0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x98>
 8004cae:	4b7f      	ldr	r3, [pc, #508]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7e      	ldr	r2, [pc, #504]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7b      	ldr	r2, [pc, #492]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0xb0>
 8004cc8:	4b78      	ldr	r3, [pc, #480]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a77      	ldr	r2, [pc, #476]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b75      	ldr	r3, [pc, #468]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a74      	ldr	r2, [pc, #464]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fd8a 	bl	8002800 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fd86 	bl	8002800 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e29e      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d02:	4b6a      	ldr	r3, [pc, #424]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fd fd76 	bl	8002800 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fd fd72 	bl	8002800 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e28a      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d2a:	4b60      	ldr	r3, [pc, #384]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0xe8>
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d075      	beq.n	8004e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4b59      	ldr	r3, [pc, #356]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d50:	4b56      	ldr	r3, [pc, #344]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCC_OscConfig+0x136>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d002      	beq.n	8004d6c <HAL_RCC_OscConfig+0x13c>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d11f      	bne.n	8004dac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d6c:	4b4f      	ldr	r3, [pc, #316]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_OscConfig+0x154>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e25d      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b49      	ldr	r3, [pc, #292]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	4946      	ldr	r1, [pc, #280]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d98:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fd fce3 	bl	8002768 <HAL_InitTick>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d043      	beq.n	8004e30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e249      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d023      	beq.n	8004dfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db4:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a3c      	ldr	r2, [pc, #240]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fd1e 	bl	8002800 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fd1a 	bl	8002800 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e232      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dda:	4b34      	ldr	r3, [pc, #208]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de6:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	061b      	lsls	r3, r3, #24
 8004df4:	492d      	ldr	r1, [pc, #180]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
 8004dfa:	e01a      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fcfa 	bl	8002800 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fd fcf6 	bl	8002800 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e20e      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1e0>
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d041      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01c      	beq.n	8004e80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4c:	4a17      	ldr	r2, [pc, #92]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fd fcd3 	bl	8002800 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e5e:	f7fd fccf 	bl	8002800 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1e7      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e70:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ef      	beq.n	8004e5e <HAL_RCC_OscConfig+0x22e>
 8004e7e:	e020      	b.n	8004ec2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_RCC_OscConfig+0x27c>)
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fd fcb6 	bl	8002800 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e96:	e00d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fd fcb2 	bl	8002800 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d906      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e1ca      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eb4:	4b8c      	ldr	r3, [pc, #560]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1ea      	bne.n	8004e98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80a6 	beq.w	800501c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ed4:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x2b4>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x2b6>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00d      	beq.n	8004f06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eea:	4b7f      	ldr	r3, [pc, #508]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	4a7e      	ldr	r2, [pc, #504]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef6:	4b7c      	ldr	r3, [pc, #496]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f02:	2301      	movs	r3, #1
 8004f04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f06:	4b79      	ldr	r3, [pc, #484]	; (80050ec <HAL_RCC_OscConfig+0x4bc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f12:	4b76      	ldr	r3, [pc, #472]	; (80050ec <HAL_RCC_OscConfig+0x4bc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a75      	ldr	r2, [pc, #468]	; (80050ec <HAL_RCC_OscConfig+0x4bc>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1e:	f7fd fc6f 	bl	8002800 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fd fc6b 	bl	8002800 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e183      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f38:	4b6c      	ldr	r3, [pc, #432]	; (80050ec <HAL_RCC_OscConfig+0x4bc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d108      	bne.n	8004f5e <HAL_RCC_OscConfig+0x32e>
 8004f4c:	4b66      	ldr	r3, [pc, #408]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	4a65      	ldr	r2, [pc, #404]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f5c:	e024      	b.n	8004fa8 <HAL_RCC_OscConfig+0x378>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d110      	bne.n	8004f88 <HAL_RCC_OscConfig+0x358>
 8004f66:	4b60      	ldr	r3, [pc, #384]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	4a5e      	ldr	r2, [pc, #376]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	f043 0304 	orr.w	r3, r3, #4
 8004f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f76:	4b5c      	ldr	r3, [pc, #368]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	4a5a      	ldr	r2, [pc, #360]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f86:	e00f      	b.n	8004fa8 <HAL_RCC_OscConfig+0x378>
 8004f88:	4b57      	ldr	r3, [pc, #348]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	4a56      	ldr	r2, [pc, #344]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f98:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	4a52      	ldr	r2, [pc, #328]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d016      	beq.n	8004fde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fd fc26 	bl	8002800 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7fd fc22 	bl	8002800 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e138      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fce:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ed      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x388>
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fd fc0f 	bl	8002800 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fd fc0b 	bl	8002800 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e121      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1ed      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800500a:	7ffb      	ldrb	r3, [r7, #31]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a34      	ldr	r2, [pc, #208]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d03c      	beq.n	80050a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01c      	beq.n	800506a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005036:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fd fbde 	bl	8002800 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005048:	f7fd fbda 	bl	8002800 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0f2      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800505a:	4b23      	ldr	r3, [pc, #140]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 800505c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ef      	beq.n	8005048 <HAL_RCC_OscConfig+0x418>
 8005068:	e01b      	b.n	80050a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800506a:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 800506c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fd fbc1 	bl	8002800 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005082:	f7fd fbbd 	bl	8002800 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0d5      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 8005096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1ef      	bne.n	8005082 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80c9 	beq.w	800523e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 030c 	and.w	r3, r3, #12
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	f000 8083 	beq.w	80051c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d15e      	bne.n	8005180 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <HAL_RCC_OscConfig+0x4b8>)
 80050c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fd fb97 	bl	8002800 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d4:	e00c      	b.n	80050f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fd fb93 	bl	8002800 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d905      	bls.n	80050f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e0ab      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f0:	4b55      	ldr	r3, [pc, #340]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ec      	bne.n	80050d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fc:	4b52      	ldr	r3, [pc, #328]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	4b52      	ldr	r3, [pc, #328]	; (800524c <HAL_RCC_OscConfig+0x61c>)
 8005102:	4013      	ands	r3, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6a11      	ldr	r1, [r2, #32]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800510c:	3a01      	subs	r2, #1
 800510e:	0112      	lsls	r2, r2, #4
 8005110:	4311      	orrs	r1, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005116:	0212      	lsls	r2, r2, #8
 8005118:	4311      	orrs	r1, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800511e:	0852      	lsrs	r2, r2, #1
 8005120:	3a01      	subs	r2, #1
 8005122:	0552      	lsls	r2, r2, #21
 8005124:	4311      	orrs	r1, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800512a:	0852      	lsrs	r2, r2, #1
 800512c:	3a01      	subs	r2, #1
 800512e:	0652      	lsls	r2, r2, #25
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005136:	06d2      	lsls	r2, r2, #27
 8005138:	430a      	orrs	r2, r1
 800513a:	4943      	ldr	r1, [pc, #268]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 800513c:	4313      	orrs	r3, r2
 800513e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005140:	4b41      	ldr	r3, [pc, #260]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a40      	ldr	r2, [pc, #256]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 8005146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800514c:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4a3d      	ldr	r2, [pc, #244]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 8005152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005156:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fd fb52 	bl	8002800 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005160:	f7fd fb4e 	bl	8002800 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e066      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005172:	4b35      	ldr	r3, [pc, #212]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x530>
 800517e:	e05e      	b.n	800523e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a30      	ldr	r2, [pc, #192]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 8005186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800518a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fd fb38 	bl	8002800 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005194:	f7fd fb34 	bl	8002800 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e04c      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a6:	4b28      	ldr	r3, [pc, #160]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051b2:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	4924      	ldr	r1, [pc, #144]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCC_OscConfig+0x620>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]
 80051be:	e03e      	b.n	800523e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e039      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051cc:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCC_OscConfig+0x618>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0203 	and.w	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d12c      	bne.n	800523a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	3b01      	subs	r3, #1
 80051ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d123      	bne.n	800523a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d11b      	bne.n	800523a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d113      	bne.n	800523a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	3b01      	subs	r3, #1
 8005220:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d109      	bne.n	800523a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	3b01      	subs	r3, #1
 8005234:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d001      	beq.n	800523e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40021000 	.word	0x40021000
 800524c:	019f800c 	.word	0x019f800c
 8005250:	feeefffc 	.word	0xfeeefffc

08005254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e11e      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b91      	ldr	r3, [pc, #580]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b8e      	ldr	r3, [pc, #568]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	498c      	ldr	r1, [pc, #560]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b8a      	ldr	r3, [pc, #552]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e106      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d073      	beq.n	8005390 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d129      	bne.n	8005304 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b0:	4b81      	ldr	r3, [pc, #516]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0f4      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052c0:	f000 f99e 	bl	8005600 <RCC_GetSysClockFreqFromPLLSource>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4a7c      	ldr	r2, [pc, #496]	; (80054bc <HAL_RCC_ClockConfig+0x268>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d93f      	bls.n	800534e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052ce:	4b7a      	ldr	r3, [pc, #488]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d033      	beq.n	800534e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d12f      	bne.n	800534e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052ee:	4b72      	ldr	r3, [pc, #456]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f6:	4a70      	ldr	r2, [pc, #448]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e024      	b.n	800534e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d107      	bne.n	800531c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530c:	4b6a      	ldr	r3, [pc, #424]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0c6      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531c:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0be      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800532c:	f000 f8ce 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8005330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4a61      	ldr	r2, [pc, #388]	; (80054bc <HAL_RCC_ClockConfig+0x268>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d909      	bls.n	800534e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800533a:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005342:	4a5d      	ldr	r2, [pc, #372]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 8005344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005348:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800534e:	4b5a      	ldr	r3, [pc, #360]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4957      	ldr	r1, [pc, #348]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800535c:	4313      	orrs	r3, r2
 800535e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005360:	f7fd fa4e 	bl	8002800 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	e00a      	b.n	800537e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005368:	f7fd fa4a 	bl	8002800 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e095      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	4b4e      	ldr	r3, [pc, #312]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 020c 	and.w	r2, r3, #12
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	429a      	cmp	r2, r3
 800538e:	d1eb      	bne.n	8005368 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d023      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a8:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053c0:	4b3d      	ldr	r3, [pc, #244]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053c8:	4a3b      	ldr	r2, [pc, #236]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b39      	ldr	r3, [pc, #228]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4936      	ldr	r1, [pc, #216]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b80      	cmp	r3, #128	; 0x80
 80053e8:	d105      	bne.n	80053f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4a32      	ldr	r2, [pc, #200]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 80053f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d21d      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 020f 	bic.w	r2, r3, #15
 800540c:	4929      	ldr	r1, [pc, #164]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005414:	f7fd f9f4 	bl	8002800 <HAL_GetTick>
 8005418:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	e00a      	b.n	8005432 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541c:	f7fd f9f0 	bl	8002800 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e03b      	b.n	80054aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d1ed      	bne.n	800541c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4917      	ldr	r1, [pc, #92]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490f      	ldr	r1, [pc, #60]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800547e:	f000 f825 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <HAL_RCC_ClockConfig+0x264>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490c      	ldr	r1, [pc, #48]	; (80054c0 <HAL_RCC_ClockConfig+0x26c>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <HAL_RCC_ClockConfig+0x270>)
 800549c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <HAL_RCC_ClockConfig+0x274>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd f960 	bl	8002768 <HAL_InitTick>
 80054a8:	4603      	mov	r3, r0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40022000 	.word	0x40022000
 80054b8:	40021000 	.word	0x40021000
 80054bc:	04c4b400 	.word	0x04c4b400
 80054c0:	0800a01c 	.word	0x0800a01c
 80054c4:	20000008 	.word	0x20000008
 80054c8:	2000000c 	.word	0x2000000c

080054cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d102      	bne.n	80054e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054de:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	e047      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d102      	bne.n	80054f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054f0:	4b26      	ldr	r3, [pc, #152]	; (800558c <HAL_RCC_GetSysClockFreq+0xc0>)
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	e03e      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054f6:	4b23      	ldr	r3, [pc, #140]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d136      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005502:	4b20      	ldr	r3, [pc, #128]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	3301      	adds	r3, #1
 8005518:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d10c      	bne.n	800553a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 800552a:	68d2      	ldr	r2, [r2, #12]
 800552c:	0a12      	lsrs	r2, r2, #8
 800552e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	617b      	str	r3, [r7, #20]
      break;
 8005538:	e00c      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	4a10      	ldr	r2, [pc, #64]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005544:	68d2      	ldr	r2, [r2, #12]
 8005546:	0a12      	lsrs	r2, r2, #8
 8005548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
      break;
 8005552:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0e5b      	lsrs	r3, r3, #25
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	3301      	adds	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e001      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005574:	693b      	ldr	r3, [r7, #16]
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	00f42400 	.word	0x00f42400
 800558c:	016e3600 	.word	0x016e3600

08005590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005596:	681b      	ldr	r3, [r3, #0]
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000008 	.word	0x20000008

080055a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055ac:	f7ff fff0 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4904      	ldr	r1, [pc, #16]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800a02c 	.word	0x0800a02c

080055d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055d8:	f7ff ffda 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0adb      	lsrs	r3, r3, #11
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4904      	ldr	r1, [pc, #16]	; (80055fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	0800a02c 	.word	0x0800a02c

08005600 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005606:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d10c      	bne.n	800563e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005624:	4a17      	ldr	r2, [pc, #92]	; (8005684 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800562e:	68d2      	ldr	r2, [r2, #12]
 8005630:	0a12      	lsrs	r2, r2, #8
 8005632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
    break;
 800563c:	e00c      	b.n	8005658 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	0a12      	lsrs	r2, r2, #8
 800564c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
    break;
 8005656:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0e5b      	lsrs	r3, r3, #25
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005672:	687b      	ldr	r3, [r7, #4]
}
 8005674:	4618      	mov	r0, r3
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40021000 	.word	0x40021000
 8005684:	016e3600 	.word	0x016e3600
 8005688:	00f42400 	.word	0x00f42400

0800568c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005694:	2300      	movs	r3, #0
 8005696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005698:	2300      	movs	r3, #0
 800569a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8098 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056aa:	2300      	movs	r3, #0
 80056ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ae:	4b43      	ldr	r3, [pc, #268]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	4a3f      	ldr	r2, [pc, #252]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6593      	str	r3, [r2, #88]	; 0x58
 80056c6:	4b3d      	ldr	r3, [pc, #244]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d2:	2301      	movs	r3, #1
 80056d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d6:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056e2:	f7fd f88d 	bl	8002800 <HAL_GetTick>
 80056e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e8:	e009      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ea:	f7fd f889 	bl	8002800 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d902      	bls.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	74fb      	strb	r3, [r7, #19]
        break;
 80056fc:	e005      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0ef      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d159      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01e      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	d019      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800572c:	4b23      	ldr	r3, [pc, #140]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005736:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005738:	4b20      	ldr	r3, [pc, #128]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fd f849 	bl	8002800 <HAL_GetTick>
 800576e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005770:	e00b      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005772:	f7fd f845 	bl	8002800 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005780:	4293      	cmp	r3, r2
 8005782:	d902      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	74fb      	strb	r3, [r7, #19]
            break;
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578a:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ec      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	4903      	ldr	r1, [pc, #12]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057b4:	e008      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	74bb      	strb	r3, [r7, #18]
 80057ba:	e005      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c8:	7c7b      	ldrb	r3, [r7, #17]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d105      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ce:	4ba7      	ldr	r3, [pc, #668]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	4aa6      	ldr	r2, [pc, #664]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057e6:	4ba1      	ldr	r3, [pc, #644]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ec:	f023 0203 	bic.w	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	499d      	ldr	r1, [pc, #628]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005808:	4b98      	ldr	r3, [pc, #608]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	f023 020c 	bic.w	r2, r3, #12
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	4995      	ldr	r1, [pc, #596]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800582a:	4b90      	ldr	r3, [pc, #576]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	498c      	ldr	r1, [pc, #560]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800584c:	4b87      	ldr	r3, [pc, #540]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005852:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4984      	ldr	r1, [pc, #528]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800586e:	4b7f      	ldr	r3, [pc, #508]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	497b      	ldr	r1, [pc, #492]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005890:	4b76      	ldr	r3, [pc, #472]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	4973      	ldr	r1, [pc, #460]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058b2:	4b6e      	ldr	r3, [pc, #440]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	496a      	ldr	r1, [pc, #424]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058d4:	4b65      	ldr	r3, [pc, #404]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	4962      	ldr	r1, [pc, #392]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058f6:	4b5d      	ldr	r3, [pc, #372]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	4959      	ldr	r1, [pc, #356]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005918:	4b54      	ldr	r3, [pc, #336]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	4951      	ldr	r1, [pc, #324]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800593a:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4948      	ldr	r1, [pc, #288]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800595c:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4940      	ldr	r1, [pc, #256]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597a:	d105      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a3a      	ldr	r2, [pc, #232]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005986:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	4932      	ldr	r1, [pc, #200]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b2:	d105      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b4:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4a2c      	ldr	r2, [pc, #176]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d015      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059cc:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	4924      	ldr	r1, [pc, #144]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059ea:	d105      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ec:	4b1f      	ldr	r3, [pc, #124]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a12:	4916      	ldr	r1, [pc, #88]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a22:	d105      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d019      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	4908      	ldr	r1, [pc, #32]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a02      	ldr	r2, [pc, #8]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a66:	60d3      	str	r3, [r2, #12]
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d015      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a7c:	4b29      	ldr	r3, [pc, #164]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	4926      	ldr	r1, [pc, #152]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a9c:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d015      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac2:	4918      	ldr	r1, [pc, #96]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ade:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005aec:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	490a      	ldr	r1, [pc, #40]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40021000 	.word	0x40021000

08005b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e054      	b.n	8005be4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d111      	bne.n	8005b6a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 fee2 	bl	8007918 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a23      	ldr	r2, [pc, #140]	; (8005bec <HAL_TIM_Base_Init+0xc4>)
 8005b60:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f001 fa2b 	bl	8006fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	08002249 	.word	0x08002249

08005bf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d001      	beq.n	8005c08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e04c      	b.n	8005ca2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <HAL_TIM_Base_Start+0xc0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d022      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d01d      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <HAL_TIM_Base_Start+0xc4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d018      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <HAL_TIM_Base_Start+0xc8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d013      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <HAL_TIM_Base_Start+0xcc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00e      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1e      	ldr	r2, [pc, #120]	; (8005cc0 <HAL_TIM_Base_Start+0xd0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d009      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <HAL_TIM_Base_Start+0xd4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_TIM_Base_Start+0x70>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <HAL_TIM_Base_Start+0xd8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d115      	bne.n	8005c8c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <HAL_TIM_Base_Start+0xdc>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b06      	cmp	r3, #6
 8005c70:	d015      	beq.n	8005c9e <HAL_TIM_Base_Start+0xae>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c78:	d011      	beq.n	8005c9e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8a:	e008      	b.n	8005c9e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e000      	b.n	8005ca0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40015000 	.word	0x40015000
 8005ccc:	00010007 	.word	0x00010007

08005cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d001      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e054      	b.n	8005d92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d022      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d12:	d01d      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d018      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <HAL_TIM_Base_Start_IT+0xdc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00e      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d009      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x80>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d115      	bne.n	8005d7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_TIM_Base_Start_IT+0xec>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d015      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0xbe>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d68:	d011      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	e008      	b.n	8005d8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e000      	b.n	8005d90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40015000 	.word	0x40015000
 8005dbc:	00010007 	.word	0x00010007

08005dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e054      	b.n	8005e7c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d111      	bne.n	8005e02 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fd96 	bl	8007918 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <HAL_TIM_PWM_Init+0xc4>)
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f001 f8df 	bl	8006fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	08002301 	.word	0x08002301

08005e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_TIM_PWM_Start+0x24>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e03c      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d109      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x3e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e02f      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d109      	bne.n	8005ee0 <HAL_TIM_PWM_Start+0x58>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e022      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d109      	bne.n	8005efa <HAL_TIM_PWM_Start+0x72>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	bf14      	ite	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	2300      	moveq	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	e015      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d109      	bne.n	8005f14 <HAL_TIM_PWM_Start+0x8c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e008      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e0a6      	b.n	800607c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xb6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3c:	e023      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Start+0xc6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	e01b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0xd6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	e013      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xe6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f6c:	e00b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0xf6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f7c:	e003      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fc9c 	bl	80078cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a3a      	ldr	r2, [pc, #232]	; (8006084 <HAL_TIM_PWM_Start+0x1fc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a39      	ldr	r2, [pc, #228]	; (8006088 <HAL_TIM_PWM_Start+0x200>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a37      	ldr	r2, [pc, #220]	; (800608c <HAL_TIM_PWM_Start+0x204>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a36      	ldr	r2, [pc, #216]	; (8006090 <HAL_TIM_PWM_Start+0x208>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a34      	ldr	r2, [pc, #208]	; (8006094 <HAL_TIM_PWM_Start+0x20c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0x148>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a33      	ldr	r2, [pc, #204]	; (8006098 <HAL_TIM_PWM_Start+0x210>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIM_PWM_Start+0x14c>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x14e>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a25      	ldr	r2, [pc, #148]	; (8006084 <HAL_TIM_PWM_Start+0x1fc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d022      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d01d      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a26      	ldr	r2, [pc, #152]	; (800609c <HAL_TIM_PWM_Start+0x214>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d018      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_TIM_PWM_Start+0x218>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <HAL_TIM_PWM_Start+0x21c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_TIM_PWM_Start+0x200>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_TIM_PWM_Start+0x204>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Start+0x1b2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a18      	ldr	r2, [pc, #96]	; (8006098 <HAL_TIM_PWM_Start+0x210>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d115      	bne.n	8006066 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_TIM_PWM_Start+0x220>)
 8006042:	4013      	ands	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d015      	beq.n	8006078 <HAL_TIM_PWM_Start+0x1f0>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d011      	beq.n	8006078 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	e008      	b.n	8006078 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e000      	b.n	800607a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800
 8006098:	40015000 	.word	0x40015000
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	00010007 	.word	0x00010007

080060ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e04c      	b.n	800615a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d111      	bne.n	80060f0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fc1f 	bl	8007918 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_TIM_OnePulse_Init+0xb8>)
 80060e6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f000 ff68 	bl	8006fd8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0208 	bic.w	r2, r2, #8
 8006116:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6819      	ldr	r1, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	08006169 	.word	0x08006169

08006168 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800618c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006194:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800619c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d108      	bne.n	80061be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b2:	7b7b      	ldrb	r3, [r7, #13]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d102      	bne.n	80061be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061b8:	7b3b      	ldrb	r3, [r7, #12]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d001      	beq.n	80061c2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e059      	b.n	8006276 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0202 	orr.w	r2, r2, #2
 80061f0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0204 	orr.w	r2, r2, #4
 8006200:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2201      	movs	r2, #1
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f001 fb5e 	bl	80078cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2201      	movs	r2, #1
 8006216:	2104      	movs	r1, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fb57 	bl	80078cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a17      	ldr	r2, [pc, #92]	; (8006280 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a15      	ldr	r2, [pc, #84]	; (8006284 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a14      	ldr	r2, [pc, #80]	; (8006288 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_TIM_OnePulse_Start_IT+0xde>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a12      	ldr	r2, [pc, #72]	; (800628c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a11      	ldr	r2, [pc, #68]	; (8006290 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0f      	ldr	r2, [pc, #60]	; (8006294 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006272:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800
 8006294:	40015000 	.word	0x40015000

08006298 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0a2      	b.n	80063f2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d111      	bne.n	80062dc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fb29 	bl	8007918 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a4a      	ldr	r2, [pc, #296]	; (80063fc <HAL_TIM_Encoder_Init+0x164>)
 80062d2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f000 fe68 	bl	8006fd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006330:	f023 0303 	bic.w	r3, r3, #3
 8006334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	4313      	orrs	r3, r2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800634e:	f023 030c 	bic.w	r3, r3, #12
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800635a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800635e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	4313      	orrs	r3, r2
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	011a      	lsls	r2, r3, #4
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	4313      	orrs	r3, r2
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800638c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006394:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	4313      	orrs	r3, r2
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	08002341 	.word	0x08002341

08006400 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006410:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006418:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006420:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006428:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d110      	bne.n	8006452 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006436:	7b7b      	ldrb	r3, [r7, #13]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d001      	beq.n	8006440 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e069      	b.n	8006514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006450:	e031      	b.n	80064b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d110      	bne.n	800647a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d102      	bne.n	8006464 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800645e:	7b3b      	ldrb	r3, [r7, #12]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d001      	beq.n	8006468 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e055      	b.n	8006514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006478:	e01d      	b.n	80064b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d108      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006486:	7b7b      	ldrb	r3, [r7, #13]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d102      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800648c:	7b3b      	ldrb	r3, [r7, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e03e      	b.n	8006514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_TIM_Encoder_Start+0xc4>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d008      	beq.n	80064d4 <HAL_TIM_Encoder_Start+0xd4>
 80064c2:	e00f      	b.n	80064e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f9fd 	bl	80078cc <TIM_CCxChannelCmd>
      break;
 80064d2:	e016      	b.n	8006502 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2201      	movs	r2, #1
 80064da:	2104      	movs	r1, #4
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 f9f5 	bl	80078cc <TIM_CCxChannelCmd>
      break;
 80064e2:	e00e      	b.n	8006502 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 f9ed 	bl	80078cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2201      	movs	r2, #1
 80064f8:	2104      	movs	r1, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f9e6 	bl	80078cc <TIM_CCxChannelCmd>
      break;
 8006500:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d026      	beq.n	800658c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d021      	beq.n	800658c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0202 	mvn.w	r2, #2
 8006550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
 8006570:	e009      	b.n	8006586 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d026      	beq.n	80065e4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d021      	beq.n	80065e4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0204 	mvn.w	r2, #4
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
 80065c8:	e009      	b.n	80065de <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d026      	beq.n	800663c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d021      	beq.n	800663c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0208 	mvn.w	r2, #8
 8006600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2204      	movs	r2, #4
 8006606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
 8006620:	e009      	b.n	8006636 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	d026      	beq.n	8006694 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	d021      	beq.n	8006694 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0210 	mvn.w	r2, #16
 8006658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2208      	movs	r2, #8
 800665e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
 8006678:	e009      	b.n	800668e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d009      	beq.n	80066bc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0201 	mvn.w	r2, #1
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800670a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00e      	beq.n	8006766 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0220 	mvn.w	r2, #32
 800675a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00e      	beq.n	800678e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00e      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80067d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00e      	beq.n	8006806 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80067fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800682a:	2302      	movs	r3, #2
 800682c:	e0ff      	b.n	8006a2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b14      	cmp	r3, #20
 800683a:	f200 80f0 	bhi.w	8006a1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006899 	.word	0x08006899
 8006848:	08006a1f 	.word	0x08006a1f
 800684c:	08006a1f 	.word	0x08006a1f
 8006850:	08006a1f 	.word	0x08006a1f
 8006854:	080068d9 	.word	0x080068d9
 8006858:	08006a1f 	.word	0x08006a1f
 800685c:	08006a1f 	.word	0x08006a1f
 8006860:	08006a1f 	.word	0x08006a1f
 8006864:	0800691b 	.word	0x0800691b
 8006868:	08006a1f 	.word	0x08006a1f
 800686c:	08006a1f 	.word	0x08006a1f
 8006870:	08006a1f 	.word	0x08006a1f
 8006874:	0800695b 	.word	0x0800695b
 8006878:	08006a1f 	.word	0x08006a1f
 800687c:	08006a1f 	.word	0x08006a1f
 8006880:	08006a1f 	.word	0x08006a1f
 8006884:	0800699d 	.word	0x0800699d
 8006888:	08006a1f 	.word	0x08006a1f
 800688c:	08006a1f 	.word	0x08006a1f
 8006890:	08006a1f 	.word	0x08006a1f
 8006894:	080069dd 	.word	0x080069dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fc4e 	bl	8007140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0208 	orr.w	r2, r2, #8
 80068b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0204 	bic.w	r2, r2, #4
 80068c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6999      	ldr	r1, [r3, #24]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	619a      	str	r2, [r3, #24]
      break;
 80068d6:	e0a5      	b.n	8006a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fcc8 	bl	8007274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	619a      	str	r2, [r3, #24]
      break;
 8006918:	e084      	b.n	8006a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fd3b 	bl	800739c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0208 	orr.w	r2, r2, #8
 8006934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0204 	bic.w	r2, r2, #4
 8006944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69d9      	ldr	r1, [r3, #28]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	61da      	str	r2, [r3, #28]
      break;
 8006958:	e064      	b.n	8006a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fdad 	bl	80074c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69d9      	ldr	r1, [r3, #28]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	021a      	lsls	r2, r3, #8
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	61da      	str	r2, [r3, #28]
      break;
 800699a:	e043      	b.n	8006a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fe20 	bl	80075e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0208 	orr.w	r2, r2, #8
 80069b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0204 	bic.w	r2, r2, #4
 80069c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80069da:	e023      	b.n	8006a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fe6a 	bl	80076bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	021a      	lsls	r2, r3, #8
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a1c:	e002      	b.n	8006a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	75fb      	strb	r3, [r7, #23]
      break;
 8006a22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop

08006a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_ConfigClockSource+0x1c>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e0f6      	b.n	8006c42 <HAL_TIM_ConfigClockSource+0x20a>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006a72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6f      	ldr	r2, [pc, #444]	; (8006c4c <HAL_TIM_ConfigClockSource+0x214>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	f000 80c1 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006a94:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <HAL_TIM_ConfigClockSource+0x214>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	f200 80c6 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a9c:	4a6c      	ldr	r2, [pc, #432]	; (8006c50 <HAL_TIM_ConfigClockSource+0x218>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f000 80b9 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006aa4:	4a6a      	ldr	r2, [pc, #424]	; (8006c50 <HAL_TIM_ConfigClockSource+0x218>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f200 80be 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006aac:	4a69      	ldr	r2, [pc, #420]	; (8006c54 <HAL_TIM_ConfigClockSource+0x21c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	f000 80b1 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006ab4:	4a67      	ldr	r2, [pc, #412]	; (8006c54 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f200 80b6 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006abc:	4a66      	ldr	r2, [pc, #408]	; (8006c58 <HAL_TIM_ConfigClockSource+0x220>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f000 80a9 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006ac4:	4a64      	ldr	r2, [pc, #400]	; (8006c58 <HAL_TIM_ConfigClockSource+0x220>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	f200 80ae 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006acc:	4a63      	ldr	r2, [pc, #396]	; (8006c5c <HAL_TIM_ConfigClockSource+0x224>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	f000 80a1 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006ad4:	4a61      	ldr	r2, [pc, #388]	; (8006c5c <HAL_TIM_ConfigClockSource+0x224>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	f200 80a6 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006adc:	4a60      	ldr	r2, [pc, #384]	; (8006c60 <HAL_TIM_ConfigClockSource+0x228>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	f000 8099 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006ae4:	4a5e      	ldr	r2, [pc, #376]	; (8006c60 <HAL_TIM_ConfigClockSource+0x228>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	f200 809e 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006aec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006af0:	f000 8091 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006af4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006af8:	f200 8096 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b00:	f000 8089 	beq.w	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b08:	f200 808e 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b10:	d03e      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x158>
 8006b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b16:	f200 8087 	bhi.w	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	f000 8086 	beq.w	8006c2e <HAL_TIM_ConfigClockSource+0x1f6>
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d87f      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b28:	2b70      	cmp	r3, #112	; 0x70
 8006b2a:	d01a      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x12a>
 8006b2c:	2b70      	cmp	r3, #112	; 0x70
 8006b2e:	d87b      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b30:	2b60      	cmp	r3, #96	; 0x60
 8006b32:	d050      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x19e>
 8006b34:	2b60      	cmp	r3, #96	; 0x60
 8006b36:	d877      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b38:	2b50      	cmp	r3, #80	; 0x50
 8006b3a:	d03c      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x17e>
 8006b3c:	2b50      	cmp	r3, #80	; 0x50
 8006b3e:	d873      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d058      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x1be>
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d86f      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b48:	2b30      	cmp	r3, #48	; 0x30
 8006b4a:	d064      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006b4c:	2b30      	cmp	r3, #48	; 0x30
 8006b4e:	d86b      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d060      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d867      	bhi.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d05c      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d05a      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x1de>
 8006b60:	e062      	b.n	8006c28 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b72:	f000 fe8b 	bl	800788c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	609a      	str	r2, [r3, #8]
      break;
 8006b8e:	e04f      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ba0:	f000 fe74 	bl	800788c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bb2:	609a      	str	r2, [r3, #8]
      break;
 8006bb4:	e03c      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f000 fde6 	bl	8007794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2150      	movs	r1, #80	; 0x50
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fe3f 	bl	8007852 <TIM_ITRx_SetConfig>
      break;
 8006bd4:	e02c      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006be2:	461a      	mov	r2, r3
 8006be4:	f000 fe05 	bl	80077f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2160      	movs	r1, #96	; 0x60
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fe2f 	bl	8007852 <TIM_ITRx_SetConfig>
      break;
 8006bf4:	e01c      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c02:	461a      	mov	r2, r3
 8006c04:	f000 fdc6 	bl	8007794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2140      	movs	r1, #64	; 0x40
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fe1f 	bl	8007852 <TIM_ITRx_SetConfig>
      break;
 8006c14:	e00c      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f000 fe16 	bl	8007852 <TIM_ITRx_SetConfig>
      break;
 8006c26:	e003      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c2c:	e000      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	00100070 	.word	0x00100070
 8006c50:	00100060 	.word	0x00100060
 8006c54:	00100050 	.word	0x00100050
 8006c58:	00100040 	.word	0x00100040
 8006c5c:	00100030 	.word	0x00100030
 8006c60:	00100020 	.word	0x00100020

08006c64 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	460b      	mov	r3, r1
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e14a      	b.n	8006fca <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	f040 80dd 	bne.w	8006efc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b1f      	cmp	r3, #31
 8006d46:	f200 80d6 	bhi.w	8006ef6 <HAL_TIM_RegisterCallback+0x1de>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <HAL_TIM_RegisterCallback+0x38>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006dd1 	.word	0x08006dd1
 8006d54:	08006dd9 	.word	0x08006dd9
 8006d58:	08006de1 	.word	0x08006de1
 8006d5c:	08006de9 	.word	0x08006de9
 8006d60:	08006df1 	.word	0x08006df1
 8006d64:	08006df9 	.word	0x08006df9
 8006d68:	08006e01 	.word	0x08006e01
 8006d6c:	08006e09 	.word	0x08006e09
 8006d70:	08006e11 	.word	0x08006e11
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006e21 	.word	0x08006e21
 8006d7c:	08006e29 	.word	0x08006e29
 8006d80:	08006e31 	.word	0x08006e31
 8006d84:	08006e39 	.word	0x08006e39
 8006d88:	08006e43 	.word	0x08006e43
 8006d8c:	08006e4d 	.word	0x08006e4d
 8006d90:	08006e57 	.word	0x08006e57
 8006d94:	08006e61 	.word	0x08006e61
 8006d98:	08006e6b 	.word	0x08006e6b
 8006d9c:	08006e75 	.word	0x08006e75
 8006da0:	08006e7f 	.word	0x08006e7f
 8006da4:	08006e89 	.word	0x08006e89
 8006da8:	08006e93 	.word	0x08006e93
 8006dac:	08006e9d 	.word	0x08006e9d
 8006db0:	08006ea7 	.word	0x08006ea7
 8006db4:	08006eb1 	.word	0x08006eb1
 8006db8:	08006ebb 	.word	0x08006ebb
 8006dbc:	08006ec5 	.word	0x08006ec5
 8006dc0:	08006ecf 	.word	0x08006ecf
 8006dc4:	08006ed9 	.word	0x08006ed9
 8006dc8:	08006ee3 	.word	0x08006ee3
 8006dcc:	08006eed 	.word	0x08006eed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006dd6:	e0f7      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006dde:	e0f3      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006de6:	e0ef      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006dee:	e0eb      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006df6:	e0e7      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006dfe:	e0e3      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006e06:	e0df      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006e0e:	e0db      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006e16:	e0d7      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006e1e:	e0d3      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006e26:	e0cf      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006e2e:	e0cb      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006e36:	e0c7      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006e40:	e0c2      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006e4a:	e0bd      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006e54:	e0b8      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006e5e:	e0b3      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006e68:	e0ae      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006e72:	e0a9      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006e7c:	e0a4      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006e86:	e09f      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006e90:	e09a      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006e9a:	e095      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006ea4:	e090      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006eae:	e08b      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006eb8:	e086      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8006ec2:	e081      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8006ecc:	e07c      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8006ed6:	e077      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8006ee0:	e072      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8006eea:	e06d      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8006ef4:	e068      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
        break;
 8006efa:	e065      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d15d      	bne.n	8006fc4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	2b0d      	cmp	r3, #13
 8006f0c:	d857      	bhi.n	8006fbe <HAL_TIM_RegisterCallback+0x2a6>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <HAL_TIM_RegisterCallback+0x1fc>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f55 	.word	0x08006f55
 8006f1c:	08006f5d 	.word	0x08006f5d
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006f75 	.word	0x08006f75
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f8d 	.word	0x08006f8d
 8006f38:	08006f95 	.word	0x08006f95
 8006f3c:	08006f9d 	.word	0x08006f9d
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006fb5 	.word	0x08006fb5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006f52:	e039      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006f5a:	e035      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006f62:	e031      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006f6a:	e02d      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006f72:	e029      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006f7a:	e025      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006f82:	e021      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006f8a:	e01d      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006f92:	e019      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006f9a:	e015      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006fa2:	e011      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006faa:	e00d      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006fb2:	e009      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006fbc:	e004      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
        break;
 8006fc2:	e001      	b.n	8006fc8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop

08006fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a4c      	ldr	r2, [pc, #304]	; (800711c <TIM_Base_SetConfig+0x144>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d017      	beq.n	8007020 <TIM_Base_SetConfig+0x48>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff6:	d013      	beq.n	8007020 <TIM_Base_SetConfig+0x48>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a49      	ldr	r2, [pc, #292]	; (8007120 <TIM_Base_SetConfig+0x148>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_Base_SetConfig+0x48>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a48      	ldr	r2, [pc, #288]	; (8007124 <TIM_Base_SetConfig+0x14c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_Base_SetConfig+0x48>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a47      	ldr	r2, [pc, #284]	; (8007128 <TIM_Base_SetConfig+0x150>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_Base_SetConfig+0x48>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a46      	ldr	r2, [pc, #280]	; (800712c <TIM_Base_SetConfig+0x154>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0x48>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a45      	ldr	r2, [pc, #276]	; (8007130 <TIM_Base_SetConfig+0x158>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d108      	bne.n	8007032 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a39      	ldr	r2, [pc, #228]	; (800711c <TIM_Base_SetConfig+0x144>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d023      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007040:	d01f      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a36      	ldr	r2, [pc, #216]	; (8007120 <TIM_Base_SetConfig+0x148>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01b      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a35      	ldr	r2, [pc, #212]	; (8007124 <TIM_Base_SetConfig+0x14c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d017      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a34      	ldr	r2, [pc, #208]	; (8007128 <TIM_Base_SetConfig+0x150>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a33      	ldr	r2, [pc, #204]	; (800712c <TIM_Base_SetConfig+0x154>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a33      	ldr	r2, [pc, #204]	; (8007134 <TIM_Base_SetConfig+0x15c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a32      	ldr	r2, [pc, #200]	; (8007138 <TIM_Base_SetConfig+0x160>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a31      	ldr	r2, [pc, #196]	; (800713c <TIM_Base_SetConfig+0x164>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_Base_SetConfig+0xaa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a2c      	ldr	r2, [pc, #176]	; (8007130 <TIM_Base_SetConfig+0x158>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d108      	bne.n	8007094 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a18      	ldr	r2, [pc, #96]	; (800711c <TIM_Base_SetConfig+0x144>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <TIM_Base_SetConfig+0x110>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a1a      	ldr	r2, [pc, #104]	; (800712c <TIM_Base_SetConfig+0x154>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00f      	beq.n	80070e8 <TIM_Base_SetConfig+0x110>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <TIM_Base_SetConfig+0x15c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00b      	beq.n	80070e8 <TIM_Base_SetConfig+0x110>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a19      	ldr	r2, [pc, #100]	; (8007138 <TIM_Base_SetConfig+0x160>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_Base_SetConfig+0x110>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a18      	ldr	r2, [pc, #96]	; (800713c <TIM_Base_SetConfig+0x164>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_Base_SetConfig+0x110>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a13      	ldr	r2, [pc, #76]	; (8007130 <TIM_Base_SetConfig+0x158>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d103      	bne.n	80070f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d105      	bne.n	800710e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	611a      	str	r2, [r3, #16]
  }
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40000400 	.word	0x40000400
 8007124:	40000800 	.word	0x40000800
 8007128:	40000c00 	.word	0x40000c00
 800712c:	40013400 	.word	0x40013400
 8007130:	40015000 	.word	0x40015000
 8007134:	40014000 	.word	0x40014000
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800

08007140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f023 0201 	bic.w	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 0302 	bic.w	r3, r3, #2
 800718c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a30      	ldr	r2, [pc, #192]	; (800725c <TIM_OC1_SetConfig+0x11c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <TIM_OC1_SetConfig+0x88>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a2f      	ldr	r2, [pc, #188]	; (8007260 <TIM_OC1_SetConfig+0x120>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_OC1_SetConfig+0x88>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a2e      	ldr	r2, [pc, #184]	; (8007264 <TIM_OC1_SetConfig+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_OC1_SetConfig+0x88>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a2d      	ldr	r2, [pc, #180]	; (8007268 <TIM_OC1_SetConfig+0x128>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_OC1_SetConfig+0x88>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a2c      	ldr	r2, [pc, #176]	; (800726c <TIM_OC1_SetConfig+0x12c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC1_SetConfig+0x88>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a2b      	ldr	r2, [pc, #172]	; (8007270 <TIM_OC1_SetConfig+0x130>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d10c      	bne.n	80071e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0308 	bic.w	r3, r3, #8
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <TIM_OC1_SetConfig+0x11c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <TIM_OC1_SetConfig+0xd2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <TIM_OC1_SetConfig+0x120>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <TIM_OC1_SetConfig+0xd2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <TIM_OC1_SetConfig+0x124>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00b      	beq.n	8007212 <TIM_OC1_SetConfig+0xd2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1a      	ldr	r2, [pc, #104]	; (8007268 <TIM_OC1_SetConfig+0x128>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_OC1_SetConfig+0xd2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <TIM_OC1_SetConfig+0x12c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_OC1_SetConfig+0xd2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <TIM_OC1_SetConfig+0x130>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d111      	bne.n	8007236 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	621a      	str	r2, [r3, #32]
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800
 8007270:	40015000 	.word	0x40015000

08007274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	f023 0210 	bic.w	r2, r3, #16
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f023 0320 	bic.w	r3, r3, #32
 80072c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <TIM_OC2_SetConfig+0x110>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d007      	beq.n	80072e8 <TIM_OC2_SetConfig+0x74>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2b      	ldr	r2, [pc, #172]	; (8007388 <TIM_OC2_SetConfig+0x114>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_OC2_SetConfig+0x74>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a2a      	ldr	r2, [pc, #168]	; (800738c <TIM_OC2_SetConfig+0x118>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d10d      	bne.n	8007304 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a1f      	ldr	r2, [pc, #124]	; (8007384 <TIM_OC2_SetConfig+0x110>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <TIM_OC2_SetConfig+0xc0>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <TIM_OC2_SetConfig+0x114>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00f      	beq.n	8007334 <TIM_OC2_SetConfig+0xc0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <TIM_OC2_SetConfig+0x11c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00b      	beq.n	8007334 <TIM_OC2_SetConfig+0xc0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <TIM_OC2_SetConfig+0x120>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d007      	beq.n	8007334 <TIM_OC2_SetConfig+0xc0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <TIM_OC2_SetConfig+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_OC2_SetConfig+0xc0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a17      	ldr	r2, [pc, #92]	; (800738c <TIM_OC2_SetConfig+0x118>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d113      	bne.n	800735c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800733a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40013400 	.word	0x40013400
 800738c:	40015000 	.word	0x40015000
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800

0800739c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <TIM_OC3_SetConfig+0x10c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <TIM_OC3_SetConfig+0x72>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2a      	ldr	r2, [pc, #168]	; (80074ac <TIM_OC3_SetConfig+0x110>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_OC3_SetConfig+0x72>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a29      	ldr	r2, [pc, #164]	; (80074b0 <TIM_OC3_SetConfig+0x114>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d10d      	bne.n	800742a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <TIM_OC3_SetConfig+0x10c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <TIM_OC3_SetConfig+0xbe>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <TIM_OC3_SetConfig+0x110>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00f      	beq.n	800745a <TIM_OC3_SetConfig+0xbe>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <TIM_OC3_SetConfig+0x118>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00b      	beq.n	800745a <TIM_OC3_SetConfig+0xbe>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a1c      	ldr	r2, [pc, #112]	; (80074b8 <TIM_OC3_SetConfig+0x11c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_OC3_SetConfig+0xbe>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a1b      	ldr	r2, [pc, #108]	; (80074bc <TIM_OC3_SetConfig+0x120>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_OC3_SetConfig+0xbe>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <TIM_OC3_SetConfig+0x114>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d113      	bne.n	8007482 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	621a      	str	r2, [r3, #32]
}
 800749c:	bf00      	nop
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40013400 	.word	0x40013400
 80074b0:	40015000 	.word	0x40015000
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40014400 	.word	0x40014400
 80074bc:	40014800 	.word	0x40014800

080074c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800750e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	031b      	lsls	r3, r3, #12
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a2c      	ldr	r2, [pc, #176]	; (80075d0 <TIM_OC4_SetConfig+0x110>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d007      	beq.n	8007534 <TIM_OC4_SetConfig+0x74>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a2b      	ldr	r2, [pc, #172]	; (80075d4 <TIM_OC4_SetConfig+0x114>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d003      	beq.n	8007534 <TIM_OC4_SetConfig+0x74>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2a      	ldr	r2, [pc, #168]	; (80075d8 <TIM_OC4_SetConfig+0x118>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d10d      	bne.n	8007550 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800753a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	031b      	lsls	r3, r3, #12
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	4313      	orrs	r3, r2
 8007546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800754e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <TIM_OC4_SetConfig+0x110>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <TIM_OC4_SetConfig+0xc0>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <TIM_OC4_SetConfig+0x114>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00f      	beq.n	8007580 <TIM_OC4_SetConfig+0xc0>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <TIM_OC4_SetConfig+0x11c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00b      	beq.n	8007580 <TIM_OC4_SetConfig+0xc0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <TIM_OC4_SetConfig+0x120>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d007      	beq.n	8007580 <TIM_OC4_SetConfig+0xc0>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <TIM_OC4_SetConfig+0x124>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <TIM_OC4_SetConfig+0xc0>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <TIM_OC4_SetConfig+0x118>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d113      	bne.n	80075a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007586:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800758e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	019b      	lsls	r3, r3, #6
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	019b      	lsls	r3, r3, #6
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40015000 	.word	0x40015000
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800

080075e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800762c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a19      	ldr	r2, [pc, #100]	; (80076a4 <TIM_OC5_SetConfig+0xbc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <TIM_OC5_SetConfig+0xc0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00f      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <TIM_OC5_SetConfig+0xc4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00b      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <TIM_OC5_SetConfig+0xc8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <TIM_OC5_SetConfig+0xcc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <TIM_OC5_SetConfig+0xd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d109      	bne.n	800767e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800
 80076b8:	40015000 	.word	0x40015000

080076bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	051b      	lsls	r3, r3, #20
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a1a      	ldr	r2, [pc, #104]	; (800777c <TIM_OC6_SetConfig+0xc0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d013      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a19      	ldr	r2, [pc, #100]	; (8007780 <TIM_OC6_SetConfig+0xc4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00f      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <TIM_OC6_SetConfig+0xc8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <TIM_OC6_SetConfig+0xcc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a16      	ldr	r2, [pc, #88]	; (800778c <TIM_OC6_SetConfig+0xd0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a15      	ldr	r2, [pc, #84]	; (8007790 <TIM_OC6_SetConfig+0xd4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d109      	bne.n	8007754 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40013400 	.word	0x40013400
 8007784:	40014000 	.word	0x40014000
 8007788:	40014400 	.word	0x40014400
 800778c:	40014800 	.word	0x40014800
 8007790:	40015000 	.word	0x40015000

08007794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f023 0201 	bic.w	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f023 030a 	bic.w	r3, r3, #10
 80077d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b087      	sub	sp, #28
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f023 0210 	bic.w	r2, r3, #16
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800781c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	031b      	lsls	r3, r3, #12
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800782e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	f043 0307 	orr.w	r3, r3, #7
 8007878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	609a      	str	r2, [r3, #8]
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	021a      	lsls	r2, r3, #8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	609a      	str	r2, [r3, #8]
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2201      	movs	r2, #1
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	43db      	mvns	r3, r3
 80078ee:	401a      	ands	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1a      	ldr	r2, [r3, #32]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 031f 	and.w	r3, r3, #31
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	fa01 f303 	lsl.w	r3, r1, r3
 8007904:	431a      	orrs	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a26      	ldr	r2, [pc, #152]	; (80079bc <TIM_ResetCallback+0xa4>)
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a25      	ldr	r2, [pc, #148]	; (80079c0 <TIM_ResetCallback+0xa8>)
 800792c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a24      	ldr	r2, [pc, #144]	; (80079c4 <TIM_ResetCallback+0xac>)
 8007934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a23      	ldr	r2, [pc, #140]	; (80079c8 <TIM_ResetCallback+0xb0>)
 800793c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a22      	ldr	r2, [pc, #136]	; (80079cc <TIM_ResetCallback+0xb4>)
 8007944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <TIM_ResetCallback+0xb8>)
 800794c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a20      	ldr	r2, [pc, #128]	; (80079d4 <TIM_ResetCallback+0xbc>)
 8007954:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <TIM_ResetCallback+0xc0>)
 800795c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <TIM_ResetCallback+0xc4>)
 8007964:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <TIM_ResetCallback+0xc8>)
 800796c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <TIM_ResetCallback+0xcc>)
 8007974:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <TIM_ResetCallback+0xd0>)
 800797c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <TIM_ResetCallback+0xd4>)
 8007984:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <TIM_ResetCallback+0xd8>)
 800798c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a18      	ldr	r2, [pc, #96]	; (80079f4 <TIM_ResetCallback+0xdc>)
 8007994:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <TIM_ResetCallback+0xe0>)
 800799c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a16      	ldr	r2, [pc, #88]	; (80079fc <TIM_ResetCallback+0xe4>)
 80079a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <TIM_ResetCallback+0xe8>)
 80079ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	08001ff5 	.word	0x08001ff5
 80079c0:	08006c65 	.word	0x08006c65
 80079c4:	08006cdd 	.word	0x08006cdd
 80079c8:	08006cf1 	.word	0x08006cf1
 80079cc:	08006c8d 	.word	0x08006c8d
 80079d0:	08006ca1 	.word	0x08006ca1
 80079d4:	08006c79 	.word	0x08006c79
 80079d8:	08006cb5 	.word	0x08006cb5
 80079dc:	08006cc9 	.word	0x08006cc9
 80079e0:	08006d05 	.word	0x08006d05
 80079e4:	08007b31 	.word	0x08007b31
 80079e8:	08007b45 	.word	0x08007b45
 80079ec:	08007b59 	.word	0x08007b59
 80079f0:	08007b6d 	.word	0x08007b6d
 80079f4:	08007b81 	.word	0x08007b81
 80079f8:	08007b95 	.word	0x08007b95
 80079fc:	08007ba9 	.word	0x08007ba9
 8007a00:	08007bbd 	.word	0x08007bbd

08007a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e074      	b.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a34      	ldr	r2, [pc, #208]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a33      	ldr	r2, [pc, #204]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a31      	ldr	r2, [pc, #196]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d108      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a21      	ldr	r2, [pc, #132]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d01d      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1f      	ldr	r2, [pc, #124]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a18      	ldr	r2, [pc, #96]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a11      	ldr	r2, [pc, #68]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d10c      	bne.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40013400 	.word	0x40013400
 8007b1c:	40015000 	.word	0x40015000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40014000 	.word	0x40014000

08007b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e050      	b.n	8007c84 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d114      	bne.n	8007c16 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fd45 	bl	8008684 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a21      	ldr	r2, [pc, #132]	; (8007c8c <HAL_UART_Init+0xbc>)
 8007c08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2224      	movs	r2, #36	; 0x24
 8007c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0201 	bic.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 f872 	bl	8008d20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fd73 	bl	8008728 <UART_SetConfig>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e01b      	b.n	8007c84 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f8f1 	bl	8008e64 <UART_CheckIdleState>
 8007c82:	4603      	mov	r3, r0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	08002445 	.word	0x08002445

08007c90 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d109      	bne.n	8007cbc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e09c      	b.n	8007df6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	2b20      	cmp	r3, #32
 8007cc4:	d16c      	bne.n	8007da0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	2b0c      	cmp	r3, #12
 8007cca:	d85e      	bhi.n	8007d8a <HAL_UART_RegisterCallback+0xfa>
 8007ccc:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <HAL_UART_RegisterCallback+0x44>)
 8007cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd2:	bf00      	nop
 8007cd4:	08007d09 	.word	0x08007d09
 8007cd8:	08007d13 	.word	0x08007d13
 8007cdc:	08007d1d 	.word	0x08007d1d
 8007ce0:	08007d27 	.word	0x08007d27
 8007ce4:	08007d31 	.word	0x08007d31
 8007ce8:	08007d3b 	.word	0x08007d3b
 8007cec:	08007d45 	.word	0x08007d45
 8007cf0:	08007d4f 	.word	0x08007d4f
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007d63 	.word	0x08007d63
 8007cfc:	08007d6d 	.word	0x08007d6d
 8007d00:	08007d77 	.word	0x08007d77
 8007d04:	08007d81 	.word	0x08007d81
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007d10:	e070      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007d1a:	e06b      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007d24:	e066      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007d2e:	e061      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007d38:	e05c      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007d42:	e057      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007d4c:	e052      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007d56:	e04d      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8007d60:	e048      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8007d6a:	e043      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8007d74:	e03e      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8007d7e:	e039      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8007d88:	e034      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9e:	e029      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d11a      	bne.n	8007de0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b0b      	cmp	r3, #11
 8007dae:	d002      	beq.n	8007db6 <HAL_UART_RegisterCallback+0x126>
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d005      	beq.n	8007dc0 <HAL_UART_RegisterCallback+0x130>
 8007db4:	e009      	b.n	8007dca <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8007dbe:	e019      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8007dc8:	e014      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8007dde:	e009      	b.n	8007df4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop

08007e04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d137      	bne.n	8007e8c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <HAL_UART_Receive_DMA+0x24>
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e030      	b.n	8007e8e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <HAL_UART_Receive_DMA+0x94>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01f      	beq.n	8007e7c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	623b      	str	r3, [r7, #32]
 8007e6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	6a3a      	ldr	r2, [r7, #32]
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f001 f906 	bl	8009094 <UART_Start_Receive_DMA>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	e000      	b.n	8007e8e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e8c:	2302      	movs	r3, #2
  }
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3728      	adds	r7, #40	; 0x28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40008000 	.word	0x40008000

08007e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b0ba      	sub	sp, #232	; 0xe8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ec6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007eca:	4013      	ands	r3, r2
 8007ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11b      	bne.n	8007f10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d015      	beq.n	8007f10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 82f3 	beq.w	80084ec <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
      }
      return;
 8007f0e:	e2ed      	b.n	80084ec <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8129 	beq.w	800816c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f1e:	4b90      	ldr	r3, [pc, #576]	; (8008160 <HAL_UART_IRQHandler+0x2c4>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f2a:	4b8e      	ldr	r3, [pc, #568]	; (8008164 <HAL_UART_IRQHandler+0x2c8>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 811c 	beq.w	800816c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d011      	beq.n	8007f64 <HAL_UART_IRQHandler+0xc8>
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2201      	movs	r2, #1
 8007f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5a:	f043 0201 	orr.w	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d011      	beq.n	8007f94 <HAL_UART_IRQHandler+0xf8>
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2202      	movs	r2, #2
 8007f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8a:	f043 0204 	orr.w	r2, r3, #4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d011      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x128>
 8007fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fba:	f043 0202 	orr.w	r2, r3, #2
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d017      	beq.n	8008000 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d105      	bne.n	8007fe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fe0:	4b5f      	ldr	r3, [pc, #380]	; (8008160 <HAL_UART_IRQHandler+0x2c4>)
 8007fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2208      	movs	r2, #8
 8007fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff6:	f043 0208 	orr.w	r2, r3, #8
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008008:	2b00      	cmp	r3, #0
 800800a:	d012      	beq.n	8008032 <HAL_UART_IRQHandler+0x196>
 800800c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008028:	f043 0220 	orr.w	r2, r3, #32
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8259 	beq.w	80084f0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800803e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d013      	beq.n	8008072 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800804a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008078:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d005      	beq.n	8008096 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800808a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800808e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008092:	2b00      	cmp	r3, #0
 8008094:	d058      	beq.n	8008148 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f8e3 	bl	8009262 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d148      	bne.n	800813c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3308      	adds	r3, #8
 80080b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3308      	adds	r3, #8
 80080d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1d9      	bne.n	80080aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <HAL_UART_IRQHandler+0x2cc>)
 8008108:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008110:	4618      	mov	r0, r3
 8008112:	f7fc f971 	bl	80043f8 <HAL_DMA_Abort_IT>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01f      	beq.n	800815c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812e:	e015      	b.n	800815c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813a:	e00f      	b.n	800815c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008146:	e009      	b.n	800815c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800815a:	e1c9      	b.n	80084f0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	bf00      	nop
    return;
 800815e:	e1c7      	b.n	80084f0 <HAL_UART_IRQHandler+0x654>
 8008160:	10000001 	.word	0x10000001
 8008164:	04000120 	.word	0x04000120
 8008168:	0800952d 	.word	0x0800952d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	2b01      	cmp	r3, #1
 8008172:	f040 8157 	bne.w	8008424 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8150 	beq.w	8008424 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8149 	beq.w	8008424 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2210      	movs	r2, #16
 8008198:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	f040 80bd 	bne.w	8008324 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8199 	beq.w	80084f4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081cc:	429a      	cmp	r2, r3
 80081ce:	f080 8191 	bcs.w	80084f4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 8087 	bne.w	80082fe <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800820c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800821a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800821e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1da      	bne.n	80081f0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800824a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3308      	adds	r3, #8
 800825a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800825e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008262:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e1      	bne.n	800823a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800828c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800829a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800829c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e3      	bne.n	8008276 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082cc:	f023 0310 	bic.w	r3, r3, #16
 80082d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082de:	65bb      	str	r3, [r7, #88]	; 0x58
 80082e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e4      	bne.n	80082bc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fc f824 	bl	8004346 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8008316:	b292      	uxth	r2, r2
 8008318:	1a8a      	subs	r2, r1, r2
 800831a:	b292      	uxth	r2, r2
 800831c:	4611      	mov	r1, r2
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008322:	e0e7      	b.n	80084f4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008330:	b29b      	uxth	r3, r3
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80d9 	beq.w	80084f8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8008346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80d4 	beq.w	80084f8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008372:	647b      	str	r3, [r7, #68]	; 0x44
 8008374:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e4      	bne.n	8008350 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	623b      	str	r3, [r7, #32]
   return(result);
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3308      	adds	r3, #8
 80083aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083ae:	633a      	str	r2, [r7, #48]	; 0x30
 80083b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e1      	bne.n	8008386 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	69b9      	ldr	r1, [r7, #24]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	617b      	str	r3, [r7, #20]
   return(result);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e4      	bne.n	80083d6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008418:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800841c:	4611      	mov	r1, r2
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008422:	e069      	b.n	80084f8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d010      	beq.n	8008452 <HAL_UART_IRQHandler+0x5b6>
 8008430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008444:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008450:	e055      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d014      	beq.n	8008488 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800845e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d105      	bne.n	8008476 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800846a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800846e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d008      	beq.n	8008488 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800847a:	2b00      	cmp	r3, #0
 800847c:	d03e      	beq.n	80084fc <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
    }
    return;
 8008486:	e039      	b.n	80084fc <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <HAL_UART_IRQHandler+0x60c>
 8008494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 f85b 	bl	800955c <UART_EndTransmit_IT>
    return;
 80084a6:	e02a      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <HAL_UART_IRQHandler+0x630>
 80084b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ca:	e018      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d012      	beq.n	80084fe <HAL_UART_IRQHandler+0x662>
 80084d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da0e      	bge.n	80084fe <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ea:	e008      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
      return;
 80084ec:	bf00      	nop
 80084ee:	e006      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
    return;
 80084f0:	bf00      	nop
 80084f2:	e004      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
      return;
 80084f4:	bf00      	nop
 80084f6:	e002      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
      return;
 80084f8:	bf00      	nop
 80084fa:	e000      	b.n	80084fe <HAL_UART_IRQHandler+0x662>
    return;
 80084fc:	bf00      	nop
  }
}
 80084fe:	37e8      	adds	r7, #232	; 0xe8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d009      	beq.n	80085e4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	615a      	str	r2, [r3, #20]
  }
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	40008000 	.word	0x40008000

080085f4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a18      	ldr	r2, [pc, #96]	; (8008664 <HAL_UART_EnableReceiverTimeout+0x70>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d027      	beq.n	8008656 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860c:	2b20      	cmp	r3, #32
 800860e:	d120      	bne.n	8008652 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_UART_EnableReceiverTimeout+0x2a>
 800861a:	2302      	movs	r3, #2
 800861c:	e01c      	b.n	8008658 <HAL_UART_EnableReceiverTimeout+0x64>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2224      	movs	r2, #36	; 0x24
 800862a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800863c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	e002      	b.n	8008658 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008652:	2302      	movs	r3, #2
 8008654:	e000      	b.n	8008658 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
  }
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	40008000 	.word	0x40008000

08008668 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <UART_InitCallbacksToDefault+0x74>)
 8008690:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <UART_InitCallbacksToDefault+0x78>)
 8008698:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a18      	ldr	r2, [pc, #96]	; (8008700 <UART_InitCallbacksToDefault+0x7c>)
 80086a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a17      	ldr	r2, [pc, #92]	; (8008704 <UART_InitCallbacksToDefault+0x80>)
 80086a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a16      	ldr	r2, [pc, #88]	; (8008708 <UART_InitCallbacksToDefault+0x84>)
 80086b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <UART_InitCallbacksToDefault+0x88>)
 80086b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a14      	ldr	r2, [pc, #80]	; (8008710 <UART_InitCallbacksToDefault+0x8c>)
 80086c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a13      	ldr	r2, [pc, #76]	; (8008714 <UART_InitCallbacksToDefault+0x90>)
 80086c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a12      	ldr	r2, [pc, #72]	; (8008718 <UART_InitCallbacksToDefault+0x94>)
 80086d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a11      	ldr	r2, [pc, #68]	; (800871c <UART_InitCallbacksToDefault+0x98>)
 80086d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a10      	ldr	r2, [pc, #64]	; (8008720 <UART_InitCallbacksToDefault+0x9c>)
 80086e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a0f      	ldr	r2, [pc, #60]	; (8008724 <UART_InitCallbacksToDefault+0xa0>)
 80086e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	08008519 	.word	0x08008519
 80086fc:	08008505 	.word	0x08008505
 8008700:	08008541 	.word	0x08008541
 8008704:	0800852d 	.word	0x0800852d
 8008708:	08008555 	.word	0x08008555
 800870c:	08008569 	.word	0x08008569
 8008710:	0800857d 	.word	0x0800857d
 8008714:	08008591 	.word	0x08008591
 8008718:	080095b7 	.word	0x080095b7
 800871c:	080095cb 	.word	0x080095cb
 8008720:	080095df 	.word	0x080095df
 8008724:	080085a5 	.word	0x080085a5

08008728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800872c:	b08c      	sub	sp, #48	; 0x30
 800872e:	af00      	add	r7, sp, #0
 8008730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	431a      	orrs	r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	431a      	orrs	r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	4313      	orrs	r3, r2
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	4baa      	ldr	r3, [pc, #680]	; (8008a00 <UART_SetConfig+0x2d8>)
 8008758:	4013      	ands	r3, r2
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008760:	430b      	orrs	r3, r1
 8008762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a9f      	ldr	r2, [pc, #636]	; (8008a04 <UART_SetConfig+0x2dc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008790:	4313      	orrs	r3, r2
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800879e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	f023 010f 	bic.w	r1, r3, #15
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a90      	ldr	r2, [pc, #576]	; (8008a08 <UART_SetConfig+0x2e0>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d125      	bne.n	8008818 <UART_SetConfig+0xf0>
 80087cc:	4b8f      	ldr	r3, [pc, #572]	; (8008a0c <UART_SetConfig+0x2e4>)
 80087ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d81a      	bhi.n	8008810 <UART_SetConfig+0xe8>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0xb8>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	080087f1 	.word	0x080087f1
 80087e4:	08008801 	.word	0x08008801
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	08008809 	.word	0x08008809
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e116      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80087f8:	2302      	movs	r3, #2
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e112      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008800:	2304      	movs	r3, #4
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e10e      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008808:	2308      	movs	r3, #8
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e10a      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008810:	2310      	movs	r3, #16
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008816:	e106      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a7c      	ldr	r2, [pc, #496]	; (8008a10 <UART_SetConfig+0x2e8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d138      	bne.n	8008894 <UART_SetConfig+0x16c>
 8008822:	4b7a      	ldr	r3, [pc, #488]	; (8008a0c <UART_SetConfig+0x2e4>)
 8008824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008828:	f003 030c 	and.w	r3, r3, #12
 800882c:	2b0c      	cmp	r3, #12
 800882e:	d82d      	bhi.n	800888c <UART_SetConfig+0x164>
 8008830:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x110>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	0800886d 	.word	0x0800886d
 800883c:	0800888d 	.word	0x0800888d
 8008840:	0800888d 	.word	0x0800888d
 8008844:	0800888d 	.word	0x0800888d
 8008848:	0800887d 	.word	0x0800887d
 800884c:	0800888d 	.word	0x0800888d
 8008850:	0800888d 	.word	0x0800888d
 8008854:	0800888d 	.word	0x0800888d
 8008858:	08008875 	.word	0x08008875
 800885c:	0800888d 	.word	0x0800888d
 8008860:	0800888d 	.word	0x0800888d
 8008864:	0800888d 	.word	0x0800888d
 8008868:	08008885 	.word	0x08008885
 800886c:	2300      	movs	r3, #0
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008872:	e0d8      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008874:	2302      	movs	r3, #2
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887a:	e0d4      	b.n	8008a26 <UART_SetConfig+0x2fe>
 800887c:	2304      	movs	r3, #4
 800887e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008882:	e0d0      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008884:	2308      	movs	r3, #8
 8008886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888a:	e0cc      	b.n	8008a26 <UART_SetConfig+0x2fe>
 800888c:	2310      	movs	r3, #16
 800888e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008892:	e0c8      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a5e      	ldr	r2, [pc, #376]	; (8008a14 <UART_SetConfig+0x2ec>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d125      	bne.n	80088ea <UART_SetConfig+0x1c2>
 800889e:	4b5b      	ldr	r3, [pc, #364]	; (8008a0c <UART_SetConfig+0x2e4>)
 80088a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088a8:	2b30      	cmp	r3, #48	; 0x30
 80088aa:	d016      	beq.n	80088da <UART_SetConfig+0x1b2>
 80088ac:	2b30      	cmp	r3, #48	; 0x30
 80088ae:	d818      	bhi.n	80088e2 <UART_SetConfig+0x1ba>
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	d00a      	beq.n	80088ca <UART_SetConfig+0x1a2>
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d814      	bhi.n	80088e2 <UART_SetConfig+0x1ba>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <UART_SetConfig+0x19a>
 80088bc:	2b10      	cmp	r3, #16
 80088be:	d008      	beq.n	80088d2 <UART_SetConfig+0x1aa>
 80088c0:	e00f      	b.n	80088e2 <UART_SetConfig+0x1ba>
 80088c2:	2300      	movs	r3, #0
 80088c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c8:	e0ad      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80088ca:	2302      	movs	r3, #2
 80088cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d0:	e0a9      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80088d2:	2304      	movs	r3, #4
 80088d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d8:	e0a5      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80088da:	2308      	movs	r3, #8
 80088dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e0:	e0a1      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80088e2:	2310      	movs	r3, #16
 80088e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e8:	e09d      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a4a      	ldr	r2, [pc, #296]	; (8008a18 <UART_SetConfig+0x2f0>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d125      	bne.n	8008940 <UART_SetConfig+0x218>
 80088f4:	4b45      	ldr	r3, [pc, #276]	; (8008a0c <UART_SetConfig+0x2e4>)
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008900:	d016      	beq.n	8008930 <UART_SetConfig+0x208>
 8008902:	2bc0      	cmp	r3, #192	; 0xc0
 8008904:	d818      	bhi.n	8008938 <UART_SetConfig+0x210>
 8008906:	2b80      	cmp	r3, #128	; 0x80
 8008908:	d00a      	beq.n	8008920 <UART_SetConfig+0x1f8>
 800890a:	2b80      	cmp	r3, #128	; 0x80
 800890c:	d814      	bhi.n	8008938 <UART_SetConfig+0x210>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <UART_SetConfig+0x1f0>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d008      	beq.n	8008928 <UART_SetConfig+0x200>
 8008916:	e00f      	b.n	8008938 <UART_SetConfig+0x210>
 8008918:	2300      	movs	r3, #0
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891e:	e082      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008920:	2302      	movs	r3, #2
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008926:	e07e      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892e:	e07a      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008936:	e076      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893e:	e072      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a35      	ldr	r2, [pc, #212]	; (8008a1c <UART_SetConfig+0x2f4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d12a      	bne.n	80089a0 <UART_SetConfig+0x278>
 800894a:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <UART_SetConfig+0x2e4>)
 800894c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008958:	d01a      	beq.n	8008990 <UART_SetConfig+0x268>
 800895a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800895e:	d81b      	bhi.n	8008998 <UART_SetConfig+0x270>
 8008960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008964:	d00c      	beq.n	8008980 <UART_SetConfig+0x258>
 8008966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800896a:	d815      	bhi.n	8008998 <UART_SetConfig+0x270>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <UART_SetConfig+0x250>
 8008970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008974:	d008      	beq.n	8008988 <UART_SetConfig+0x260>
 8008976:	e00f      	b.n	8008998 <UART_SetConfig+0x270>
 8008978:	2300      	movs	r3, #0
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e052      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008980:	2302      	movs	r3, #2
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e04e      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008988:	2304      	movs	r3, #4
 800898a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898e:	e04a      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008990:	2308      	movs	r3, #8
 8008992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008996:	e046      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008998:	2310      	movs	r3, #16
 800899a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899e:	e042      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a17      	ldr	r2, [pc, #92]	; (8008a04 <UART_SetConfig+0x2dc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d13a      	bne.n	8008a20 <UART_SetConfig+0x2f8>
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <UART_SetConfig+0x2e4>)
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089b8:	d01a      	beq.n	80089f0 <UART_SetConfig+0x2c8>
 80089ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089be:	d81b      	bhi.n	80089f8 <UART_SetConfig+0x2d0>
 80089c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c4:	d00c      	beq.n	80089e0 <UART_SetConfig+0x2b8>
 80089c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ca:	d815      	bhi.n	80089f8 <UART_SetConfig+0x2d0>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <UART_SetConfig+0x2b0>
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d4:	d008      	beq.n	80089e8 <UART_SetConfig+0x2c0>
 80089d6:	e00f      	b.n	80089f8 <UART_SetConfig+0x2d0>
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e022      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80089e0:	2302      	movs	r3, #2
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e6:	e01e      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80089e8:	2304      	movs	r3, #4
 80089ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ee:	e01a      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80089f0:	2308      	movs	r3, #8
 80089f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089f6:	e016      	b.n	8008a26 <UART_SetConfig+0x2fe>
 80089f8:	2310      	movs	r3, #16
 80089fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089fe:	e012      	b.n	8008a26 <UART_SetConfig+0x2fe>
 8008a00:	cfff69f3 	.word	0xcfff69f3
 8008a04:	40008000 	.word	0x40008000
 8008a08:	40013800 	.word	0x40013800
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	40004400 	.word	0x40004400
 8008a14:	40004800 	.word	0x40004800
 8008a18:	40004c00 	.word	0x40004c00
 8008a1c:	40005000 	.word	0x40005000
 8008a20:	2310      	movs	r3, #16
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4aae      	ldr	r2, [pc, #696]	; (8008ce4 <UART_SetConfig+0x5bc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	f040 8097 	bne.w	8008b60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a36:	2b08      	cmp	r3, #8
 8008a38:	d823      	bhi.n	8008a82 <UART_SetConfig+0x35a>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <UART_SetConfig+0x318>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a65 	.word	0x08008a65
 8008a44:	08008a83 	.word	0x08008a83
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a83 	.word	0x08008a83
 8008a50:	08008a73 	.word	0x08008a73
 8008a54:	08008a83 	.word	0x08008a83
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a83 	.word	0x08008a83
 8008a60:	08008a7b 	.word	0x08008a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a64:	f7fc fda0 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8008a68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a6a:	e010      	b.n	8008a8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a6c:	4b9e      	ldr	r3, [pc, #632]	; (8008ce8 <UART_SetConfig+0x5c0>)
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a70:	e00d      	b.n	8008a8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a72:	f7fc fd2b 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8008a76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a78:	e009      	b.n	8008a8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a80:	e005      	b.n	8008a8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 8130 	beq.w	8008cf6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	4a94      	ldr	r2, [pc, #592]	; (8008cec <UART_SetConfig+0x5c4>)
 8008a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	4413      	add	r3, r2
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d305      	bcc.n	8008ac6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d903      	bls.n	8008ace <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008acc:	e113      	b.n	8008cf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	60fa      	str	r2, [r7, #12]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	4a84      	ldr	r2, [pc, #528]	; (8008cec <UART_SetConfig+0x5c4>)
 8008adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008af0:	f7f8 f8be 	bl	8000c70 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4610      	mov	r0, r2
 8008afa:	4619      	mov	r1, r3
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	020b      	lsls	r3, r1, #8
 8008b06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b0a:	0202      	lsls	r2, r0, #8
 8008b0c:	6979      	ldr	r1, [r7, #20]
 8008b0e:	6849      	ldr	r1, [r1, #4]
 8008b10:	0849      	lsrs	r1, r1, #1
 8008b12:	2000      	movs	r0, #0
 8008b14:	460c      	mov	r4, r1
 8008b16:	4605      	mov	r5, r0
 8008b18:	eb12 0804 	adds.w	r8, r2, r4
 8008b1c:	eb43 0905 	adc.w	r9, r3, r5
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	469a      	mov	sl, r3
 8008b28:	4693      	mov	fp, r2
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	465b      	mov	r3, fp
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f8 f89d 	bl	8000c70 <__aeabi_uldivmod>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b44:	d308      	bcc.n	8008b58 <UART_SetConfig+0x430>
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b4c:	d204      	bcs.n	8008b58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a3a      	ldr	r2, [r7, #32]
 8008b54:	60da      	str	r2, [r3, #12]
 8008b56:	e0ce      	b.n	8008cf6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b5e:	e0ca      	b.n	8008cf6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b68:	d166      	bne.n	8008c38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d827      	bhi.n	8008bc2 <UART_SetConfig+0x49a>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0x450>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008ba5 	.word	0x08008ba5
 8008b80:	08008bad 	.word	0x08008bad
 8008b84:	08008bc3 	.word	0x08008bc3
 8008b88:	08008bb3 	.word	0x08008bb3
 8008b8c:	08008bc3 	.word	0x08008bc3
 8008b90:	08008bc3 	.word	0x08008bc3
 8008b94:	08008bc3 	.word	0x08008bc3
 8008b98:	08008bbb 	.word	0x08008bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b9c:	f7fc fd04 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8008ba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ba2:	e014      	b.n	8008bce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba4:	f7fc fd16 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8008ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008baa:	e010      	b.n	8008bce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bac:	4b4e      	ldr	r3, [pc, #312]	; (8008ce8 <UART_SetConfig+0x5c0>)
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bb0:	e00d      	b.n	8008bce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb2:	f7fc fc8b 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bb8:	e009      	b.n	8008bce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bc0:	e005      	b.n	8008bce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8090 	beq.w	8008cf6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	4a44      	ldr	r2, [pc, #272]	; (8008cec <UART_SetConfig+0x5c4>)
 8008bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be8:	005a      	lsls	r2, r3, #1
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	441a      	add	r2, r3
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	2b0f      	cmp	r3, #15
 8008c00:	d916      	bls.n	8008c30 <UART_SetConfig+0x508>
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c08:	d212      	bcs.n	8008c30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f023 030f 	bic.w	r3, r3, #15
 8008c12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	085b      	lsrs	r3, r3, #1
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	8bfb      	ldrh	r3, [r7, #30]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	8bfa      	ldrh	r2, [r7, #30]
 8008c2c:	60da      	str	r2, [r3, #12]
 8008c2e:	e062      	b.n	8008cf6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c36:	e05e      	b.n	8008cf6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d828      	bhi.n	8008c92 <UART_SetConfig+0x56a>
 8008c40:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <UART_SetConfig+0x520>)
 8008c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c46:	bf00      	nop
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c75 	.word	0x08008c75
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	08008c93 	.word	0x08008c93
 8008c58:	08008c83 	.word	0x08008c83
 8008c5c:	08008c93 	.word	0x08008c93
 8008c60:	08008c93 	.word	0x08008c93
 8008c64:	08008c93 	.word	0x08008c93
 8008c68:	08008c8b 	.word	0x08008c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c6c:	f7fc fc9c 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c72:	e014      	b.n	8008c9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c74:	f7fc fcae 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8008c78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c7a:	e010      	b.n	8008c9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ce8 <UART_SetConfig+0x5c0>)
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c80:	e00d      	b.n	8008c9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c82:	f7fc fc23 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 8008c86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c88:	e009      	b.n	8008c9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c90:	e005      	b.n	8008c9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d028      	beq.n	8008cf6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	4a10      	ldr	r2, [pc, #64]	; (8008cec <UART_SetConfig+0x5c4>)
 8008caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	441a      	add	r2, r3
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	2b0f      	cmp	r3, #15
 8008ccc:	d910      	bls.n	8008cf0 <UART_SetConfig+0x5c8>
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd4:	d20c      	bcs.n	8008cf0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60da      	str	r2, [r3, #12]
 8008ce0:	e009      	b.n	8008cf6 <UART_SetConfig+0x5ce>
 8008ce2:	bf00      	nop
 8008ce4:	40008000 	.word	0x40008000
 8008ce8:	00f42400 	.word	0x00f42400
 8008cec:	0800a034 	.word	0x0800a034
      }
      else
      {
        ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008d12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3730      	adds	r7, #48	; 0x30
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00a      	beq.n	8008d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d01a      	beq.n	8008e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1e:	d10a      	bne.n	8008e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b098      	sub	sp, #96	; 0x60
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e74:	f7f9 fcc4 	bl	8002800 <HAL_GetTick>
 8008e78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d12f      	bne.n	8008ee8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e90:	2200      	movs	r2, #0
 8008e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f88e 	bl	8008fb8 <UART_WaitOnFlagUntilTimeout>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d022      	beq.n	8008ee8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ec2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e6      	bne.n	8008ea2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e063      	b.n	8008fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d149      	bne.n	8008f8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ef6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008efe:	2200      	movs	r2, #0
 8008f00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f857 	bl	8008fb8 <UART_WaitOnFlagUntilTimeout>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d03c      	beq.n	8008f8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e6      	bne.n	8008f10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f023 0301 	bic.w	r3, r3, #1
 8008f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f62:	61fa      	str	r2, [r7, #28]
 8008f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e5      	bne.n	8008f42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e012      	b.n	8008fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3758      	adds	r7, #88	; 0x58
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc8:	e04f      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd0:	d04b      	beq.n	800906a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd2:	f7f9 fc15 	bl	8002800 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e04e      	b.n	800908a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d037      	beq.n	800906a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b80      	cmp	r3, #128	; 0x80
 8008ffe:	d034      	beq.n	800906a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d031      	beq.n	800906a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b08      	cmp	r3, #8
 8009012:	d110      	bne.n	8009036 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2208      	movs	r2, #8
 800901a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f920 	bl	8009262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2208      	movs	r2, #8
 8009026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e029      	b.n	800908a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009044:	d111      	bne.n	800906a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800904e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 f906 	bl	8009262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e00f      	b.n	800908a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69da      	ldr	r2, [r3, #28]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4013      	ands	r3, r2
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	429a      	cmp	r2, r3
 8009078:	bf0c      	ite	eq
 800907a:	2301      	moveq	r3, #1
 800907c:	2300      	movne	r3, #0
 800907e:	b2db      	uxtb	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	429a      	cmp	r2, r3
 8009086:	d0a0      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b096      	sub	sp, #88	; 0x58
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	88fa      	ldrh	r2, [r7, #6]
 80090ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2222      	movs	r2, #34	; 0x22
 80090bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d02d      	beq.n	8009126 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d0:	4a40      	ldr	r2, [pc, #256]	; (80091d4 <UART_Start_Receive_DMA+0x140>)
 80090d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090da:	4a3f      	ldr	r2, [pc, #252]	; (80091d8 <UART_Start_Receive_DMA+0x144>)
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e4:	4a3d      	ldr	r2, [pc, #244]	; (80091dc <UART_Start_Receive_DMA+0x148>)
 80090e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ee:	2200      	movs	r2, #0
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3324      	adds	r3, #36	; 0x24
 80090fe:	4619      	mov	r1, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	461a      	mov	r2, r3
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	f7fb f8a2 	bl	8004250 <HAL_DMA_Start_IT>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2210      	movs	r2, #16
 8009116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e051      	b.n	80091ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009142:	657b      	str	r3, [r7, #84]	; 0x54
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800914c:	64bb      	str	r3, [r7, #72]	; 0x48
 800914e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800915a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3308      	adds	r3, #8
 8009166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	653b      	str	r3, [r7, #80]	; 0x50
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009180:	637a      	str	r2, [r7, #52]	; 0x34
 8009182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e5      	bne.n	8009160 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3308      	adds	r3, #8
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	613b      	str	r3, [r7, #16]
   return(result);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3308      	adds	r3, #8
 80091b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091b4:	623a      	str	r2, [r7, #32]
 80091b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e5      	bne.n	8009194 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3758      	adds	r7, #88	; 0x58
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	0800932f 	.word	0x0800932f
 80091d8:	08009463 	.word	0x08009463
 80091dc:	080094a9 	.word	0x080094a9

080091e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b08f      	sub	sp, #60	; 0x3c
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009208:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800920c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e6      	bne.n	80091e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3308      	adds	r3, #8
 8009220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	60bb      	str	r3, [r7, #8]
   return(result);
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009230:	633b      	str	r3, [r7, #48]	; 0x30
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923a:	61ba      	str	r2, [r7, #24]
 800923c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6979      	ldr	r1, [r7, #20]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	613b      	str	r3, [r7, #16]
   return(result);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e5      	bne.n	800921a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2220      	movs	r2, #32
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009256:	bf00      	nop
 8009258:	373c      	adds	r7, #60	; 0x3c
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009262:	b480      	push	{r7}
 8009264:	b095      	sub	sp, #84	; 0x54
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800927e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009288:	643b      	str	r3, [r7, #64]	; 0x40
 800928a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800928e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e6      	bne.n	800926a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092b2:	f023 0301 	bic.w	r3, r3, #1
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3308      	adds	r3, #8
 80092be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e3      	bne.n	800929c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d118      	bne.n	800930e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f023 0310 	bic.w	r3, r3, #16
 80092f0:	647b      	str	r3, [r7, #68]	; 0x44
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	613b      	str	r3, [r7, #16]
   return(result);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e6      	bne.n	80092dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009322:	bf00      	nop
 8009324:	3754      	adds	r7, #84	; 0x54
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b09c      	sub	sp, #112	; 0x70
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d171      	bne.n	800942e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800934a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934c:	2200      	movs	r2, #0
 800934e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009366:	66bb      	str	r3, [r7, #104]	; 0x68
 8009368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009370:	65bb      	str	r3, [r7, #88]	; 0x58
 8009372:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800937e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e6      	bne.n	8009352 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009396:	f023 0301 	bic.w	r3, r3, #1
 800939a:	667b      	str	r3, [r7, #100]	; 0x64
 800939c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3308      	adds	r3, #8
 80093a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093a4:	647a      	str	r2, [r7, #68]	; 0x44
 80093a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e5      	bne.n	8009384 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3308      	adds	r3, #8
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	623b      	str	r3, [r7, #32]
   return(result);
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ce:	663b      	str	r3, [r7, #96]	; 0x60
 80093d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3308      	adds	r3, #8
 80093d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093d8:	633a      	str	r2, [r7, #48]	; 0x30
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e5      	bne.n	80093b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d118      	bne.n	800942e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	60fb      	str	r3, [r7, #12]
   return(result);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 0310 	bic.w	r3, r3, #16
 8009410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	69b9      	ldr	r1, [r7, #24]
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	617b      	str	r3, [r7, #20]
   return(result);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e6      	bne.n	80093fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800942e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009430:	2200      	movs	r2, #0
 8009432:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d109      	bne.n	8009450 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800943c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009442:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009444:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8009448:	4611      	mov	r1, r2
 800944a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800944c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800944e:	e004      	b.n	800945a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8009450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009456:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009458:	4798      	blx	r3
}
 800945a:	bf00      	nop
 800945c:	3770      	adds	r7, #112	; 0x70
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947a:	2b01      	cmp	r3, #1
 800947c:	d10b      	bne.n	8009496 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800948a:	0852      	lsrs	r2, r2, #1
 800948c:	b292      	uxth	r2, r2
 800948e:	4611      	mov	r1, r2
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009494:	e004      	b.n	80094a0 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	4798      	blx	r3
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d0:	2b80      	cmp	r3, #128	; 0x80
 80094d2:	d109      	bne.n	80094e8 <UART_DMAError+0x40>
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b21      	cmp	r3, #33	; 0x21
 80094d8:	d106      	bne.n	80094e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	f7ff fe7c 	bl	80091e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d109      	bne.n	800950a <UART_DMAError+0x62>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b22      	cmp	r3, #34	; 0x22
 80094fa:	d106      	bne.n	800950a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	f7ff feac 	bl	8009262 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009510:	f043 0210 	orr.w	r2, r3, #16
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009520:	6978      	ldr	r0, [r7, #20]
 8009522:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009524:	bf00      	nop
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009554:	bf00      	nop
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	60bb      	str	r3, [r7, #8]
   return(result);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009578:	61fb      	str	r3, [r7, #28]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	61bb      	str	r3, [r7, #24]
 8009584:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6979      	ldr	r1, [r7, #20]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	613b      	str	r3, [r7, #16]
   return(result);
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e6      	bne.n	8009564 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ae:	bf00      	nop
 80095b0:	3720      	adds	r7, #32
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_UARTEx_DisableFifoMode+0x16>
 8009604:	2302      	movs	r3, #2
 8009606:	e027      	b.n	8009658 <HAL_UARTEx_DisableFifoMode+0x66>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	; 0x24
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0201 	bic.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009678:	2302      	movs	r3, #2
 800967a:	e02d      	b.n	80096d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2224      	movs	r2, #36	; 0x24
 8009688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0201 	bic.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f84f 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e02d      	b.n	8009754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	; 0x24
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0201 	bic.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f811 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009768:	2b00      	cmp	r3, #0
 800976a:	d108      	bne.n	800977e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800977c:	e031      	b.n	80097e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800977e:	2308      	movs	r3, #8
 8009780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009782:	2308      	movs	r3, #8
 8009784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	0e5b      	lsrs	r3, r3, #25
 800978e:	b2db      	uxtb	r3, r3
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	0f5b      	lsrs	r3, r3, #29
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	7b3a      	ldrb	r2, [r7, #12]
 80097aa:	4911      	ldr	r1, [pc, #68]	; (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ac:	5c8a      	ldrb	r2, [r1, r2]
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097b2:	7b3a      	ldrb	r2, [r7, #12]
 80097b4:	490f      	ldr	r1, [pc, #60]	; (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	7b7a      	ldrb	r2, [r7, #13]
 80097c8:	4909      	ldr	r1, [pc, #36]	; (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ca:	5c8a      	ldrb	r2, [r1, r2]
 80097cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097d0:	7b7a      	ldrb	r2, [r7, #13]
 80097d2:	4908      	ldr	r1, [pc, #32]	; (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	0800a04c 	.word	0x0800a04c
 80097f4:	0800a054 	.word	0x0800a054

080097f8 <memset>:
 80097f8:	4402      	add	r2, r0
 80097fa:	4603      	mov	r3, r0
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d100      	bne.n	8009802 <memset+0xa>
 8009800:	4770      	bx	lr
 8009802:	f803 1b01 	strb.w	r1, [r3], #1
 8009806:	e7f9      	b.n	80097fc <memset+0x4>

08009808 <__errno>:
 8009808:	4b01      	ldr	r3, [pc, #4]	; (8009810 <__errno+0x8>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20000060 	.word	0x20000060

08009814 <__libc_init_array>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4d0d      	ldr	r5, [pc, #52]	; (800984c <__libc_init_array+0x38>)
 8009818:	4c0d      	ldr	r4, [pc, #52]	; (8009850 <__libc_init_array+0x3c>)
 800981a:	1b64      	subs	r4, r4, r5
 800981c:	10a4      	asrs	r4, r4, #2
 800981e:	2600      	movs	r6, #0
 8009820:	42a6      	cmp	r6, r4
 8009822:	d109      	bne.n	8009838 <__libc_init_array+0x24>
 8009824:	4d0b      	ldr	r5, [pc, #44]	; (8009854 <__libc_init_array+0x40>)
 8009826:	4c0c      	ldr	r4, [pc, #48]	; (8009858 <__libc_init_array+0x44>)
 8009828:	f000 fbda 	bl	8009fe0 <_init>
 800982c:	1b64      	subs	r4, r4, r5
 800982e:	10a4      	asrs	r4, r4, #2
 8009830:	2600      	movs	r6, #0
 8009832:	42a6      	cmp	r6, r4
 8009834:	d105      	bne.n	8009842 <__libc_init_array+0x2e>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	f855 3b04 	ldr.w	r3, [r5], #4
 800983c:	4798      	blx	r3
 800983e:	3601      	adds	r6, #1
 8009840:	e7ee      	b.n	8009820 <__libc_init_array+0xc>
 8009842:	f855 3b04 	ldr.w	r3, [r5], #4
 8009846:	4798      	blx	r3
 8009848:	3601      	adds	r6, #1
 800984a:	e7f2      	b.n	8009832 <__libc_init_array+0x1e>
 800984c:	0800a07c 	.word	0x0800a07c
 8009850:	0800a07c 	.word	0x0800a07c
 8009854:	0800a07c 	.word	0x0800a07c
 8009858:	0800a080 	.word	0x0800a080

0800985c <powf>:
 800985c:	b508      	push	{r3, lr}
 800985e:	ed2d 8b04 	vpush	{d8-d9}
 8009862:	eeb0 8a60 	vmov.f32	s16, s1
 8009866:	eeb0 9a40 	vmov.f32	s18, s0
 800986a:	f000 f85b 	bl	8009924 <__ieee754_powf>
 800986e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	eef0 8a40 	vmov.f32	s17, s0
 800987a:	d63e      	bvs.n	80098fa <powf+0x9e>
 800987c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	d112      	bne.n	80098ac <powf+0x50>
 8009886:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988e:	d039      	beq.n	8009904 <powf+0xa8>
 8009890:	eeb0 0a48 	vmov.f32	s0, s16
 8009894:	f000 f839 	bl	800990a <finitef>
 8009898:	b378      	cbz	r0, 80098fa <powf+0x9e>
 800989a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	d52a      	bpl.n	80098fa <powf+0x9e>
 80098a4:	f7ff ffb0 	bl	8009808 <__errno>
 80098a8:	2322      	movs	r3, #34	; 0x22
 80098aa:	e014      	b.n	80098d6 <powf+0x7a>
 80098ac:	f000 f82d 	bl	800990a <finitef>
 80098b0:	b998      	cbnz	r0, 80098da <powf+0x7e>
 80098b2:	eeb0 0a49 	vmov.f32	s0, s18
 80098b6:	f000 f828 	bl	800990a <finitef>
 80098ba:	b170      	cbz	r0, 80098da <powf+0x7e>
 80098bc:	eeb0 0a48 	vmov.f32	s0, s16
 80098c0:	f000 f823 	bl	800990a <finitef>
 80098c4:	b148      	cbz	r0, 80098da <powf+0x7e>
 80098c6:	eef4 8a68 	vcmp.f32	s17, s17
 80098ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ce:	d7e9      	bvc.n	80098a4 <powf+0x48>
 80098d0:	f7ff ff9a 	bl	8009808 <__errno>
 80098d4:	2321      	movs	r3, #33	; 0x21
 80098d6:	6003      	str	r3, [r0, #0]
 80098d8:	e00f      	b.n	80098fa <powf+0x9e>
 80098da:	eef5 8a40 	vcmp.f32	s17, #0.0
 80098de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e2:	d10a      	bne.n	80098fa <powf+0x9e>
 80098e4:	eeb0 0a49 	vmov.f32	s0, s18
 80098e8:	f000 f80f 	bl	800990a <finitef>
 80098ec:	b128      	cbz	r0, 80098fa <powf+0x9e>
 80098ee:	eeb0 0a48 	vmov.f32	s0, s16
 80098f2:	f000 f80a 	bl	800990a <finitef>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d1d4      	bne.n	80098a4 <powf+0x48>
 80098fa:	eeb0 0a68 	vmov.f32	s0, s17
 80098fe:	ecbd 8b04 	vpop	{d8-d9}
 8009902:	bd08      	pop	{r3, pc}
 8009904:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009908:	e7f7      	b.n	80098fa <powf+0x9e>

0800990a <finitef>:
 800990a:	b082      	sub	sp, #8
 800990c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009916:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800991a:	bfac      	ite	ge
 800991c:	2000      	movge	r0, #0
 800991e:	2001      	movlt	r0, #1
 8009920:	b002      	add	sp, #8
 8009922:	4770      	bx	lr

08009924 <__ieee754_powf>:
 8009924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009928:	ee10 4a90 	vmov	r4, s1
 800992c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8009930:	ed2d 8b02 	vpush	{d8}
 8009934:	ee10 7a10 	vmov	r7, s0
 8009938:	eeb0 8a40 	vmov.f32	s16, s0
 800993c:	eef0 8a60 	vmov.f32	s17, s1
 8009940:	d10c      	bne.n	800995c <__ieee754_powf+0x38>
 8009942:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8009946:	007f      	lsls	r7, r7, #1
 8009948:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800994c:	f240 8292 	bls.w	8009e74 <__ieee754_powf+0x550>
 8009950:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009954:	ecbd 8b02 	vpop	{d8}
 8009958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800995c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8009960:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009964:	dcf4      	bgt.n	8009950 <__ieee754_powf+0x2c>
 8009966:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800996a:	dd08      	ble.n	800997e <__ieee754_powf+0x5a>
 800996c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009970:	d1ee      	bne.n	8009950 <__ieee754_powf+0x2c>
 8009972:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009976:	0064      	lsls	r4, r4, #1
 8009978:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800997c:	e7e6      	b.n	800994c <__ieee754_powf+0x28>
 800997e:	2f00      	cmp	r7, #0
 8009980:	da20      	bge.n	80099c4 <__ieee754_powf+0xa0>
 8009982:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009986:	da2d      	bge.n	80099e4 <__ieee754_powf+0xc0>
 8009988:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800998c:	f2c0 827b 	blt.w	8009e86 <__ieee754_powf+0x562>
 8009990:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009994:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009998:	fa48 f603 	asr.w	r6, r8, r3
 800999c:	fa06 f303 	lsl.w	r3, r6, r3
 80099a0:	4543      	cmp	r3, r8
 80099a2:	f040 8270 	bne.w	8009e86 <__ieee754_powf+0x562>
 80099a6:	f006 0601 	and.w	r6, r6, #1
 80099aa:	f1c6 0602 	rsb	r6, r6, #2
 80099ae:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80099b2:	d11f      	bne.n	80099f4 <__ieee754_powf+0xd0>
 80099b4:	2c00      	cmp	r4, #0
 80099b6:	f280 8263 	bge.w	8009e80 <__ieee754_powf+0x55c>
 80099ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80099be:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80099c2:	e7c7      	b.n	8009954 <__ieee754_powf+0x30>
 80099c4:	2600      	movs	r6, #0
 80099c6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80099ca:	d1f0      	bne.n	80099ae <__ieee754_powf+0x8a>
 80099cc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80099d0:	f000 8250 	beq.w	8009e74 <__ieee754_powf+0x550>
 80099d4:	dd08      	ble.n	80099e8 <__ieee754_powf+0xc4>
 80099d6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8009cdc <__ieee754_powf+0x3b8>
 80099da:	2c00      	cmp	r4, #0
 80099dc:	bfa8      	it	ge
 80099de:	eeb0 0a68 	vmovge.f32	s0, s17
 80099e2:	e7b7      	b.n	8009954 <__ieee754_powf+0x30>
 80099e4:	2602      	movs	r6, #2
 80099e6:	e7ee      	b.n	80099c6 <__ieee754_powf+0xa2>
 80099e8:	2c00      	cmp	r4, #0
 80099ea:	f280 8246 	bge.w	8009e7a <__ieee754_powf+0x556>
 80099ee:	eeb1 0a68 	vneg.f32	s0, s17
 80099f2:	e7af      	b.n	8009954 <__ieee754_powf+0x30>
 80099f4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80099f8:	d102      	bne.n	8009a00 <__ieee754_powf+0xdc>
 80099fa:	ee28 0a08 	vmul.f32	s0, s16, s16
 80099fe:	e7a9      	b.n	8009954 <__ieee754_powf+0x30>
 8009a00:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009a04:	eeb0 0a48 	vmov.f32	s0, s16
 8009a08:	d107      	bne.n	8009a1a <__ieee754_powf+0xf6>
 8009a0a:	2f00      	cmp	r7, #0
 8009a0c:	db05      	blt.n	8009a1a <__ieee754_powf+0xf6>
 8009a0e:	ecbd 8b02 	vpop	{d8}
 8009a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a16:	f000 badf 	b.w	8009fd8 <__ieee754_sqrtf>
 8009a1a:	f000 fa4d 	bl	8009eb8 <fabsf>
 8009a1e:	b125      	cbz	r5, 8009a2a <__ieee754_powf+0x106>
 8009a20:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8009a24:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009a28:	d115      	bne.n	8009a56 <__ieee754_powf+0x132>
 8009a2a:	2c00      	cmp	r4, #0
 8009a2c:	bfbc      	itt	lt
 8009a2e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009a32:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	da8c      	bge.n	8009954 <__ieee754_powf+0x30>
 8009a3a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8009a3e:	4335      	orrs	r5, r6
 8009a40:	d104      	bne.n	8009a4c <__ieee754_powf+0x128>
 8009a42:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009a46:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009a4a:	e783      	b.n	8009954 <__ieee754_powf+0x30>
 8009a4c:	2e01      	cmp	r6, #1
 8009a4e:	d181      	bne.n	8009954 <__ieee754_powf+0x30>
 8009a50:	eeb1 0a40 	vneg.f32	s0, s0
 8009a54:	e77e      	b.n	8009954 <__ieee754_powf+0x30>
 8009a56:	0ff8      	lsrs	r0, r7, #31
 8009a58:	3801      	subs	r0, #1
 8009a5a:	ea56 0300 	orrs.w	r3, r6, r0
 8009a5e:	d104      	bne.n	8009a6a <__ieee754_powf+0x146>
 8009a60:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009a64:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009a68:	e774      	b.n	8009954 <__ieee754_powf+0x30>
 8009a6a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8009a6e:	dd73      	ble.n	8009b58 <__ieee754_powf+0x234>
 8009a70:	4b9b      	ldr	r3, [pc, #620]	; (8009ce0 <__ieee754_powf+0x3bc>)
 8009a72:	429d      	cmp	r5, r3
 8009a74:	dc08      	bgt.n	8009a88 <__ieee754_powf+0x164>
 8009a76:	2c00      	cmp	r4, #0
 8009a78:	da0b      	bge.n	8009a92 <__ieee754_powf+0x16e>
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	ecbd 8b02 	vpop	{d8}
 8009a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	f000 baa2 	b.w	8009fcc <__math_oflowf>
 8009a88:	4b96      	ldr	r3, [pc, #600]	; (8009ce4 <__ieee754_powf+0x3c0>)
 8009a8a:	429d      	cmp	r5, r3
 8009a8c:	dd08      	ble.n	8009aa0 <__ieee754_powf+0x17c>
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	dcf3      	bgt.n	8009a7a <__ieee754_powf+0x156>
 8009a92:	2000      	movs	r0, #0
 8009a94:	ecbd 8b02 	vpop	{d8}
 8009a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9c:	f000 ba90 	b.w	8009fc0 <__math_uflowf>
 8009aa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009aa4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009aa8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8009ce8 <__ieee754_powf+0x3c4>
 8009aac:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009ab0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009ab4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009ab8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009abc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ac4:	eddf 7a89 	vldr	s15, [pc, #548]	; 8009cec <__ieee754_powf+0x3c8>
 8009ac8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009acc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8009cf0 <__ieee754_powf+0x3cc>
 8009ad0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009ad4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8009cf4 <__ieee754_powf+0x3d0>
 8009ad8:	eef0 6a67 	vmov.f32	s13, s15
 8009adc:	eee0 6a07 	vfma.f32	s13, s0, s14
 8009ae0:	ee16 3a90 	vmov	r3, s13
 8009ae4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009ae8:	f023 030f 	bic.w	r3, r3, #15
 8009aec:	ee06 3a90 	vmov	s13, r3
 8009af0:	eee0 6a47 	vfms.f32	s13, s0, s14
 8009af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009af8:	3e01      	subs	r6, #1
 8009afa:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009afe:	4306      	orrs	r6, r0
 8009b00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009b04:	f024 040f 	bic.w	r4, r4, #15
 8009b08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009b0c:	bf08      	it	eq
 8009b0e:	eeb0 8a47 	vmoveq.f32	s16, s14
 8009b12:	ee07 4a10 	vmov	s14, r4
 8009b16:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009b1a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009b26:	ee07 4a10 	vmov	s14, r4
 8009b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b2e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009b32:	ee17 1a10 	vmov	r1, s14
 8009b36:	2900      	cmp	r1, #0
 8009b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b3c:	f340 817c 	ble.w	8009e38 <__ieee754_powf+0x514>
 8009b40:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009b44:	f340 80f8 	ble.w	8009d38 <__ieee754_powf+0x414>
 8009b48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b50:	bf4c      	ite	mi
 8009b52:	2001      	movmi	r0, #1
 8009b54:	2000      	movpl	r0, #0
 8009b56:	e791      	b.n	8009a7c <__ieee754_powf+0x158>
 8009b58:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8009b5c:	bf01      	itttt	eq
 8009b5e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8009cf8 <__ieee754_powf+0x3d4>
 8009b62:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009b66:	f06f 0317 	mvneq.w	r3, #23
 8009b6a:	ee17 5a90 	vmoveq	r5, s15
 8009b6e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8009b72:	bf18      	it	ne
 8009b74:	2300      	movne	r3, #0
 8009b76:	3a7f      	subs	r2, #127	; 0x7f
 8009b78:	441a      	add	r2, r3
 8009b7a:	4b60      	ldr	r3, [pc, #384]	; (8009cfc <__ieee754_powf+0x3d8>)
 8009b7c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009b80:	429d      	cmp	r5, r3
 8009b82:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8009b86:	dd06      	ble.n	8009b96 <__ieee754_powf+0x272>
 8009b88:	4b5d      	ldr	r3, [pc, #372]	; (8009d00 <__ieee754_powf+0x3dc>)
 8009b8a:	429d      	cmp	r5, r3
 8009b8c:	f340 80a4 	ble.w	8009cd8 <__ieee754_powf+0x3b4>
 8009b90:	3201      	adds	r2, #1
 8009b92:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009b96:	2500      	movs	r5, #0
 8009b98:	4b5a      	ldr	r3, [pc, #360]	; (8009d04 <__ieee754_powf+0x3e0>)
 8009b9a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009b9e:	ee07 1a10 	vmov	s14, r1
 8009ba2:	edd3 5a00 	vldr	s11, [r3]
 8009ba6:	4b58      	ldr	r3, [pc, #352]	; (8009d08 <__ieee754_powf+0x3e4>)
 8009ba8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009bb4:	1049      	asrs	r1, r1, #1
 8009bb6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009bba:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009bbe:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8009bc2:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009bc6:	ee07 1a90 	vmov	s15, r1
 8009bca:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009bce:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009bd2:	ee15 7a10 	vmov	r7, s10
 8009bd6:	401f      	ands	r7, r3
 8009bd8:	ee06 7a90 	vmov	s13, r7
 8009bdc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009be0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009be4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009be8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009bec:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009d0c <__ieee754_powf+0x3e8>
 8009bf0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009d10 <__ieee754_powf+0x3ec>
 8009bf4:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009bf8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009d14 <__ieee754_powf+0x3f0>
 8009bfc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009c00:	eddf 5a39 	vldr	s11, [pc, #228]	; 8009ce8 <__ieee754_powf+0x3c4>
 8009c04:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009c08:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009d18 <__ieee754_powf+0x3f4>
 8009c0c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009c10:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009d1c <__ieee754_powf+0x3f8>
 8009c14:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009c18:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009c1c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009c20:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009c24:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009c28:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8009c2c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009c30:	eef0 5a67 	vmov.f32	s11, s15
 8009c34:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009c38:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009c3c:	ee15 1a90 	vmov	r1, s11
 8009c40:	4019      	ands	r1, r3
 8009c42:	ee05 1a90 	vmov	s11, r1
 8009c46:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009c4a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c52:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009c56:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009c5a:	eeb0 6a67 	vmov.f32	s12, s15
 8009c5e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009c62:	ee16 1a10 	vmov	r1, s12
 8009c66:	4019      	ands	r1, r3
 8009c68:	ee07 1a10 	vmov	s14, r1
 8009c6c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009c70:	ee06 1a10 	vmov	s12, r1
 8009c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c78:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009d20 <__ieee754_powf+0x3fc>
 8009c7c:	4929      	ldr	r1, [pc, #164]	; (8009d24 <__ieee754_powf+0x400>)
 8009c7e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8009d28 <__ieee754_powf+0x404>
 8009c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c86:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009d2c <__ieee754_powf+0x408>
 8009c8a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009c8e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009c92:	ed91 7a00 	vldr	s14, [r1]
 8009c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c9a:	ee07 2a10 	vmov	s14, r2
 8009c9e:	eef0 6a67 	vmov.f32	s13, s15
 8009ca2:	4a23      	ldr	r2, [pc, #140]	; (8009d30 <__ieee754_powf+0x40c>)
 8009ca4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009ca8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8009cac:	ed92 5a00 	vldr	s10, [r2]
 8009cb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cb4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009cb8:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009cbc:	ee16 2a90 	vmov	r2, s13
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	ee06 3a90 	vmov	s13, r3
 8009cc6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009cca:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009cce:	eea6 7a65 	vfms.f32	s14, s12, s11
 8009cd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009cd6:	e70f      	b.n	8009af8 <__ieee754_powf+0x1d4>
 8009cd8:	2501      	movs	r5, #1
 8009cda:	e75d      	b.n	8009b98 <__ieee754_powf+0x274>
 8009cdc:	00000000 	.word	0x00000000
 8009ce0:	3f7ffff3 	.word	0x3f7ffff3
 8009ce4:	3f800007 	.word	0x3f800007
 8009ce8:	3eaaaaab 	.word	0x3eaaaaab
 8009cec:	3fb8aa3b 	.word	0x3fb8aa3b
 8009cf0:	36eca570 	.word	0x36eca570
 8009cf4:	3fb8aa00 	.word	0x3fb8aa00
 8009cf8:	4b800000 	.word	0x4b800000
 8009cfc:	001cc471 	.word	0x001cc471
 8009d00:	005db3d6 	.word	0x005db3d6
 8009d04:	0800a05c 	.word	0x0800a05c
 8009d08:	fffff000 	.word	0xfffff000
 8009d0c:	3e6c3255 	.word	0x3e6c3255
 8009d10:	3e53f142 	.word	0x3e53f142
 8009d14:	3e8ba305 	.word	0x3e8ba305
 8009d18:	3edb6db7 	.word	0x3edb6db7
 8009d1c:	3f19999a 	.word	0x3f19999a
 8009d20:	3f76384f 	.word	0x3f76384f
 8009d24:	0800a06c 	.word	0x0800a06c
 8009d28:	3f763800 	.word	0x3f763800
 8009d2c:	369dc3a0 	.word	0x369dc3a0
 8009d30:	0800a064 	.word	0x0800a064
 8009d34:	3338aa3c 	.word	0x3338aa3c
 8009d38:	f040 8093 	bne.w	8009e62 <__ieee754_powf+0x53e>
 8009d3c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009d34 <__ieee754_powf+0x410>
 8009d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d44:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009d48:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d50:	f73f aefa 	bgt.w	8009b48 <__ieee754_powf+0x224>
 8009d54:	15db      	asrs	r3, r3, #23
 8009d56:	3b7e      	subs	r3, #126	; 0x7e
 8009d58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009d5c:	4118      	asrs	r0, r3
 8009d5e:	4408      	add	r0, r1
 8009d60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009d64:	4a49      	ldr	r2, [pc, #292]	; (8009e8c <__ieee754_powf+0x568>)
 8009d66:	3b7f      	subs	r3, #127	; 0x7f
 8009d68:	411a      	asrs	r2, r3
 8009d6a:	4002      	ands	r2, r0
 8009d6c:	ee07 2a10 	vmov	s14, r2
 8009d70:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009d74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009d78:	f1c3 0317 	rsb	r3, r3, #23
 8009d7c:	4118      	asrs	r0, r3
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d84:	bfb8      	it	lt
 8009d86:	4240      	neglt	r0, r0
 8009d88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009d8c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8009e90 <__ieee754_powf+0x56c>
 8009d90:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8009e94 <__ieee754_powf+0x570>
 8009d94:	ee17 3a10 	vmov	r3, s14
 8009d98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009d9c:	f023 030f 	bic.w	r3, r3, #15
 8009da0:	ee07 3a10 	vmov	s14, r3
 8009da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009dac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009db0:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009e98 <__ieee754_powf+0x574>
 8009db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009dbc:	eef0 6a67 	vmov.f32	s13, s15
 8009dc0:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009dc4:	eef0 5a66 	vmov.f32	s11, s13
 8009dc8:	eee7 5a46 	vfms.f32	s11, s14, s12
 8009dcc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009dd0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009dd4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8009e9c <__ieee754_powf+0x578>
 8009dd8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8009ea0 <__ieee754_powf+0x57c>
 8009ddc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009de0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009ea4 <__ieee754_powf+0x580>
 8009de4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009de8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009ea8 <__ieee754_powf+0x584>
 8009dec:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009df0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009eac <__ieee754_powf+0x588>
 8009df4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009df8:	eeb0 6a66 	vmov.f32	s12, s13
 8009dfc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8009e00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e04:	ee66 5a86 	vmul.f32	s11, s13, s12
 8009e08:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009e0c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8009e10:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8009e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009e20:	ee10 3a10 	vmov	r3, s0
 8009e24:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e2c:	da1f      	bge.n	8009e6e <__ieee754_powf+0x54a>
 8009e2e:	f000 f84b 	bl	8009ec8 <scalbnf>
 8009e32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009e36:	e58d      	b.n	8009954 <__ieee754_powf+0x30>
 8009e38:	4a1d      	ldr	r2, [pc, #116]	; (8009eb0 <__ieee754_powf+0x58c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	dd07      	ble.n	8009e4e <__ieee754_powf+0x52a>
 8009e3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e46:	bf4c      	ite	mi
 8009e48:	2001      	movmi	r0, #1
 8009e4a:	2000      	movpl	r0, #0
 8009e4c:	e622      	b.n	8009a94 <__ieee754_powf+0x170>
 8009e4e:	d108      	bne.n	8009e62 <__ieee754_powf+0x53e>
 8009e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e54:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	f6ff af7a 	blt.w	8009d54 <__ieee754_powf+0x430>
 8009e60:	e7ed      	b.n	8009e3e <__ieee754_powf+0x51a>
 8009e62:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009e66:	f73f af75 	bgt.w	8009d54 <__ieee754_powf+0x430>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e78c      	b.n	8009d88 <__ieee754_powf+0x464>
 8009e6e:	ee00 3a10 	vmov	s0, r3
 8009e72:	e7de      	b.n	8009e32 <__ieee754_powf+0x50e>
 8009e74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009e78:	e56c      	b.n	8009954 <__ieee754_powf+0x30>
 8009e7a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009eb4 <__ieee754_powf+0x590>
 8009e7e:	e569      	b.n	8009954 <__ieee754_powf+0x30>
 8009e80:	eeb0 0a48 	vmov.f32	s0, s16
 8009e84:	e566      	b.n	8009954 <__ieee754_powf+0x30>
 8009e86:	2600      	movs	r6, #0
 8009e88:	e591      	b.n	80099ae <__ieee754_powf+0x8a>
 8009e8a:	bf00      	nop
 8009e8c:	ff800000 	.word	0xff800000
 8009e90:	3f317218 	.word	0x3f317218
 8009e94:	3f317200 	.word	0x3f317200
 8009e98:	35bfbe8c 	.word	0x35bfbe8c
 8009e9c:	b5ddea0e 	.word	0xb5ddea0e
 8009ea0:	3331bb4c 	.word	0x3331bb4c
 8009ea4:	388ab355 	.word	0x388ab355
 8009ea8:	bb360b61 	.word	0xbb360b61
 8009eac:	3e2aaaab 	.word	0x3e2aaaab
 8009eb0:	43160000 	.word	0x43160000
 8009eb4:	00000000 	.word	0x00000000

08009eb8 <fabsf>:
 8009eb8:	ee10 3a10 	vmov	r3, s0
 8009ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ec0:	ee00 3a10 	vmov	s0, r3
 8009ec4:	4770      	bx	lr
	...

08009ec8 <scalbnf>:
 8009ec8:	ee10 3a10 	vmov	r3, s0
 8009ecc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009ed0:	d02b      	beq.n	8009f2a <scalbnf+0x62>
 8009ed2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009ed6:	d302      	bcc.n	8009ede <scalbnf+0x16>
 8009ed8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009edc:	4770      	bx	lr
 8009ede:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009ee2:	d123      	bne.n	8009f2c <scalbnf+0x64>
 8009ee4:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <scalbnf+0xb0>)
 8009ee6:	eddf 7a25 	vldr	s15, [pc, #148]	; 8009f7c <scalbnf+0xb4>
 8009eea:	4298      	cmp	r0, r3
 8009eec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ef0:	db17      	blt.n	8009f22 <scalbnf+0x5a>
 8009ef2:	ee10 3a10 	vmov	r3, s0
 8009ef6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009efa:	3a19      	subs	r2, #25
 8009efc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009f00:	4288      	cmp	r0, r1
 8009f02:	dd15      	ble.n	8009f30 <scalbnf+0x68>
 8009f04:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009f80 <scalbnf+0xb8>
 8009f08:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8009f84 <scalbnf+0xbc>
 8009f0c:	ee10 3a10 	vmov	r3, s0
 8009f10:	eeb0 7a67 	vmov.f32	s14, s15
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bfb8      	it	lt
 8009f18:	eef0 7a66 	vmovlt.f32	s15, s13
 8009f1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009f20:	4770      	bx	lr
 8009f22:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009f88 <scalbnf+0xc0>
 8009f26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009f2a:	4770      	bx	lr
 8009f2c:	0dd2      	lsrs	r2, r2, #23
 8009f2e:	e7e5      	b.n	8009efc <scalbnf+0x34>
 8009f30:	4410      	add	r0, r2
 8009f32:	28fe      	cmp	r0, #254	; 0xfe
 8009f34:	dce6      	bgt.n	8009f04 <scalbnf+0x3c>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	dd06      	ble.n	8009f48 <scalbnf+0x80>
 8009f3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009f42:	ee00 3a10 	vmov	s0, r3
 8009f46:	4770      	bx	lr
 8009f48:	f110 0f16 	cmn.w	r0, #22
 8009f4c:	da09      	bge.n	8009f62 <scalbnf+0x9a>
 8009f4e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009f88 <scalbnf+0xc0>
 8009f52:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8009f8c <scalbnf+0xc4>
 8009f56:	ee10 3a10 	vmov	r3, s0
 8009f5a:	eeb0 7a67 	vmov.f32	s14, s15
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	e7d9      	b.n	8009f16 <scalbnf+0x4e>
 8009f62:	3019      	adds	r0, #25
 8009f64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009f6c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009f90 <scalbnf+0xc8>
 8009f70:	ee07 3a90 	vmov	s15, r3
 8009f74:	e7d7      	b.n	8009f26 <scalbnf+0x5e>
 8009f76:	bf00      	nop
 8009f78:	ffff3cb0 	.word	0xffff3cb0
 8009f7c:	4c000000 	.word	0x4c000000
 8009f80:	7149f2ca 	.word	0x7149f2ca
 8009f84:	f149f2ca 	.word	0xf149f2ca
 8009f88:	0da24260 	.word	0x0da24260
 8009f8c:	8da24260 	.word	0x8da24260
 8009f90:	33000000 	.word	0x33000000

08009f94 <with_errnof>:
 8009f94:	b513      	push	{r0, r1, r4, lr}
 8009f96:	4604      	mov	r4, r0
 8009f98:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009f9c:	f7ff fc34 	bl	8009808 <__errno>
 8009fa0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009fa4:	6004      	str	r4, [r0, #0]
 8009fa6:	b002      	add	sp, #8
 8009fa8:	bd10      	pop	{r4, pc}

08009faa <xflowf>:
 8009faa:	b130      	cbz	r0, 8009fba <xflowf+0x10>
 8009fac:	eef1 7a40 	vneg.f32	s15, s0
 8009fb0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009fb4:	2022      	movs	r0, #34	; 0x22
 8009fb6:	f7ff bfed 	b.w	8009f94 <with_errnof>
 8009fba:	eef0 7a40 	vmov.f32	s15, s0
 8009fbe:	e7f7      	b.n	8009fb0 <xflowf+0x6>

08009fc0 <__math_uflowf>:
 8009fc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fc8 <__math_uflowf+0x8>
 8009fc4:	f7ff bff1 	b.w	8009faa <xflowf>
 8009fc8:	10000000 	.word	0x10000000

08009fcc <__math_oflowf>:
 8009fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fd4 <__math_oflowf+0x8>
 8009fd0:	f7ff bfeb 	b.w	8009faa <xflowf>
 8009fd4:	70000000 	.word	0x70000000

08009fd8 <__ieee754_sqrtf>:
 8009fd8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009fdc:	4770      	bx	lr
	...

08009fe0 <_init>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr

08009fec <_fini>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr
