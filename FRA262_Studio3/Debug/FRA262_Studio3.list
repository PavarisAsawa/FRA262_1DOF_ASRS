
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad64  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800af3c  0800af3c  0001af3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb8  0800afb8  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800afb8  0800afb8  0001afb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afc0  0800afc0  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc0  0800afc0  0001afc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc4  0800afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800afc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  20000278  0800b240  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  0800b240  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec6c  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003baf  00000000  00000000  0003ef57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  00042b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ce  00000000  00000000  000441f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000295a0  00000000  00000000  000453c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c672  00000000  00000000  0006e966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113af3  00000000  00000000  0008afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066b0  00000000  00000000  0019eacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001a517c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000278 	.word	0x20000278
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800af24 	.word	0x0800af24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000027c 	.word	0x2000027c
 8000214:	0800af24 	.word	0x0800af24

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	bf28      	it	cs
 8000b50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b54:	d2ed      	bcs.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b970 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9e08      	ldr	r6, [sp, #32]
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	460f      	mov	r7, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14a      	bne.n	8000d86 <__udivmoddi4+0xa6>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4694      	mov	ip, r2
 8000cf4:	d965      	bls.n	8000dc2 <__udivmoddi4+0xe2>
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	b143      	cbz	r3, 8000d0e <__udivmoddi4+0x2e>
 8000cfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d00:	f1c3 0220 	rsb	r2, r3, #32
 8000d04:	409f      	lsls	r7, r3
 8000d06:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0a:	4317      	orrs	r7, r2
 8000d0c:	409c      	lsls	r4, r3
 8000d0e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d12:	fa1f f58c 	uxth.w	r5, ip
 8000d16:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d1a:	0c22      	lsrs	r2, r4, #16
 8000d1c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d24:	fb01 f005 	mul.w	r0, r1, r5
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x62>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d34:	f080 811c 	bcs.w	8000f70 <__udivmoddi4+0x290>
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	f240 8119 	bls.w	8000f70 <__udivmoddi4+0x290>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4462      	add	r2, ip
 8000d42:	1a12      	subs	r2, r2, r0
 8000d44:	b2a4      	uxth	r4, r4
 8000d46:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d4e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d52:	fb00 f505 	mul.w	r5, r0, r5
 8000d56:	42a5      	cmp	r5, r4
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x90>
 8000d5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d62:	f080 8107 	bcs.w	8000f74 <__udivmoddi4+0x294>
 8000d66:	42a5      	cmp	r5, r4
 8000d68:	f240 8104 	bls.w	8000f74 <__udivmoddi4+0x294>
 8000d6c:	4464      	add	r4, ip
 8000d6e:	3802      	subs	r0, #2
 8000d70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d74:	1b64      	subs	r4, r4, r5
 8000d76:	2100      	movs	r1, #0
 8000d78:	b11e      	cbz	r6, 8000d82 <__udivmoddi4+0xa2>
 8000d7a:	40dc      	lsrs	r4, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0xbc>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	f000 80ed 	beq.w	8000f6a <__udivmoddi4+0x28a>
 8000d90:	2100      	movs	r1, #0
 8000d92:	e9c6 0500 	strd	r0, r5, [r6]
 8000d96:	4608      	mov	r0, r1
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	fab3 f183 	clz	r1, r3
 8000da0:	2900      	cmp	r1, #0
 8000da2:	d149      	bne.n	8000e38 <__udivmoddi4+0x158>
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	d302      	bcc.n	8000dae <__udivmoddi4+0xce>
 8000da8:	4282      	cmp	r2, r0
 8000daa:	f200 80f8 	bhi.w	8000f9e <__udivmoddi4+0x2be>
 8000dae:	1a84      	subs	r4, r0, r2
 8000db0:	eb65 0203 	sbc.w	r2, r5, r3
 8000db4:	2001      	movs	r0, #1
 8000db6:	4617      	mov	r7, r2
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d0e2      	beq.n	8000d82 <__udivmoddi4+0xa2>
 8000dbc:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc0:	e7df      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000dc2:	b902      	cbnz	r2, 8000dc6 <__udivmoddi4+0xe6>
 8000dc4:	deff      	udf	#255	; 0xff
 8000dc6:	fab2 f382 	clz	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x210>
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de0:	fb07 2015 	mls	r0, r7, r5, r2
 8000de4:	0c22      	lsrs	r2, r4, #16
 8000de6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dea:	fb0e f005 	mul.w	r0, lr, r5
 8000dee:	4290      	cmp	r0, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x124>
 8000df2:	eb1c 0202 	adds.w	r2, ip, r2
 8000df6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x122>
 8000dfc:	4290      	cmp	r0, r2
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2b8>
 8000e02:	4645      	mov	r5, r8
 8000e04:	1a12      	subs	r2, r2, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e0c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x14e>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x14c>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2c2>
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e36:	e79f      	b.n	8000d78 <__udivmoddi4+0x98>
 8000e38:	f1c1 0720 	rsb	r7, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e4e:	40fd      	lsrs	r5, r7
 8000e50:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e54:	4323      	orrs	r3, r4
 8000e56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e62:	0c1c      	lsrs	r4, r3, #16
 8000e64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e68:	fb08 f50e 	mul.w	r5, r8, lr
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	fa00 f001 	lsl.w	r0, r0, r1
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b0>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2b4>
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2b4>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4464      	add	r4, ip
 8000e90:	1b64      	subs	r4, r4, r5
 8000e92:	b29d      	uxth	r5, r3
 8000e94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e98:	fb09 4413 	mls	r4, r9, r3, r4
 8000e9c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1da>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2ac>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2ac>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	4464      	add	r4, ip
 8000eba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ebe:	fba3 9502 	umull	r9, r5, r3, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	42ac      	cmp	r4, r5
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46ae      	mov	lr, r5
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x29c>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x298>
 8000ed0:	b156      	cbz	r6, 8000ee8 <__udivmoddi4+0x208>
 8000ed2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ed6:	eb64 040e 	sbc.w	r4, r4, lr
 8000eda:	fa04 f707 	lsl.w	r7, r4, r7
 8000ede:	40ca      	lsrs	r2, r1
 8000ee0:	40cc      	lsrs	r4, r1
 8000ee2:	4317      	orrs	r7, r2
 8000ee4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	f1c3 0120 	rsb	r1, r3, #32
 8000ef4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef8:	fa20 f201 	lsr.w	r2, r0, r1
 8000efc:	fa25 f101 	lsr.w	r1, r5, r1
 8000f00:	409d      	lsls	r5, r3
 8000f02:	432a      	orrs	r2, r5
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f10:	fb07 1510 	mls	r5, r7, r0, r1
 8000f14:	0c11      	lsrs	r1, r2, #16
 8000f16:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f1a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f1e:	428d      	cmp	r5, r1
 8000f20:	fa04 f403 	lsl.w	r4, r4, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x258>
 8000f26:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b0>
 8000f30:	428d      	cmp	r5, r1
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b0>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4461      	add	r1, ip
 8000f38:	1b49      	subs	r1, r1, r5
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f40:	fb07 1115 	mls	r1, r7, r5, r1
 8000f44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f48:	fb05 f10e 	mul.w	r1, r5, lr
 8000f4c:	4291      	cmp	r1, r2
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x282>
 8000f50:	eb1c 0202 	adds.w	r2, ip, r2
 8000f54:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2a8>
 8000f5a:	4291      	cmp	r1, r2
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2a8>
 8000f5e:	3d02      	subs	r5, #2
 8000f60:	4462      	add	r2, ip
 8000f62:	1a52      	subs	r2, r2, r1
 8000f64:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0xfc>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000f70:	4639      	mov	r1, r7
 8000f72:	e6e6      	b.n	8000d42 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e6fb      	b.n	8000d70 <__udivmoddi4+0x90>
 8000f78:	4548      	cmp	r0, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f0>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f84:	3b01      	subs	r3, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f0>
 8000f88:	4645      	mov	r5, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x282>
 8000f8c:	462b      	mov	r3, r5
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1da>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x258>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b0>
 8000f98:	3d02      	subs	r5, #2
 8000f9a:	4462      	add	r2, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x124>
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	e70a      	b.n	8000db8 <__udivmoddi4+0xd8>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x14e>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <Heartbeat>:

State status;
ShelvePosition shelve;
GetValue Value;

void Heartbeat(){
 8000fac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fb0:	af00      	add	r7, sp, #0
	static uint64_t timestamp = 0;
	  if(HAL_GetTick() >= timestamp)
 8000fb2:	f002 fac1 	bl	8003538 <HAL_GetTick>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2200      	movs	r2, #0
 8000fba:	461c      	mov	r4, r3
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <Heartbeat+0x44>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	4294      	cmp	r4, r2
 8000fc6:	eb75 0303 	sbcs.w	r3, r5, r3
 8000fca:	d30d      	bcc.n	8000fe8 <Heartbeat+0x3c>
	  {
		  timestamp += 200;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <Heartbeat+0x44>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000fd6:	f143 0900 	adc.w	r9, r3, #0
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <Heartbeat+0x44>)
 8000fdc:	e9c3 8900 	strd	r8, r9, [r3]
		  registerFrame[0x00].U16 = 22881;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <Heartbeat+0x48>)
 8000fe2:	f645 1261 	movw	r2, #22881	; 0x5961
 8000fe6:	801a      	strh	r2, [r3, #0]
	  }
}
 8000fe8:	bf00      	nop
 8000fea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002b0 	.word	0x200002b0
 8000ff4:	200010c8 	.word	0x200010c8

08000ff8 <Routine>:

void Routine(QEIStructureTypeDef *QEI){
 8000ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	static uint64_t timestamp2 = 0;
	if(HAL_GetTick() >= timestamp2 && registerFrame[0x00].U16 == 18537) //ส่งค่าพวกนี้หลังจาก BaseSytem อ่าน Heartbeat ทุกๆ 200 ms
 8001002:	f002 fa99 	bl	8003538 <HAL_GetTick>
 8001006:	4603      	mov	r3, r0
 8001008:	2200      	movs	r2, #0
 800100a:	461c      	mov	r4, r3
 800100c:	4615      	mov	r5, r2
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <Routine+0xc4>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	4294      	cmp	r4, r2
 8001016:	eb75 0303 	sbcs.w	r3, r5, r3
 800101a:	d349      	bcc.n	80010b0 <Routine+0xb8>
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <Routine+0xc8>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f644 0269 	movw	r2, #18537	; 0x4869
 8001024:	4293      	cmp	r3, r2
 8001026:	d143      	bne.n	80010b0 <Routine+0xb8>
	{
	timestamp2 += 200;
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <Routine+0xc4>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8001032:	f143 0900 	adc.w	r9, r3, #0
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <Routine+0xc4>)
 8001038:	e9c3 8900 	strd	r8, r9, [r3]

	//Check Lead
	//if (lead switch1 == 1){
	registerFrame[0x04].U16 = 0b0000;
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <Routine+0xc8>)
 800103e:	2200      	movs	r2, #0
 8001040:	811a      	strh	r2, [r3, #8]
	registerFrame[0x04].U16 = 0b0010;
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <Routine+0xc8>)
 8001044:	2202      	movs	r2, #2
 8001046:	811a      	strh	r2, [r3, #8]
	//else if (lead switch2 == 1){
//		registerFrame[0x04].U16 = 0b0000;
//		registerFrame[0x04].U16 = 0b0001;//Gripper Movement Actual Status = 'Lead Switch 2 Status'
	//}

	registerFrame[0x10].U16 = status.Z_Status; //Z-axis Moving Status
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <Routine+0xcc>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <Routine+0xc8>)
 8001050:	841a      	strh	r2, [r3, #32]
	registerFrame[0x11].U16 = (int16_t)(QEI->LinearPosition * 10); //Z-axis Actual Position = 19 ค่าจริง*10
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001058:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800105c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001064:	ee17 3a90 	vmov	r3, s15
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <Routine+0xc8>)
 800106e:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[0x12].U16 = (uint16_t)(QEI->LinearVelocity * 10); //Z-axis Actual Speed = 20
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001076:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001082:	ee17 3a90 	vmov	r3, s15
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <Routine+0xc8>)
 800108a:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[0x13].U16 = (uint16_t)(QEI->LinearAcceleration * 10); //Z-axis Acceleration = 21
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001092:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109e:	ee17 3a90 	vmov	r3, s15
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <Routine+0xc8>)
 80010a6:	84da      	strh	r2, [r3, #38]	; 0x26
	registerFrame[0x40].U16 = 22*10; //X-axis Actual Position = 2
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <Routine+0xc8>)
 80010aa:	22dc      	movs	r2, #220	; 0xdc
 80010ac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ba:	bf00      	nop
 80010bc:	200002b8 	.word	0x200002b8
 80010c0:	200010c8 	.word	0x200010c8
 80010c4:	20000294 	.word	0x20000294

080010c8 <PIDController_Init>:
uint32_t Saturation = 1000;
extern TIM_HandleTypeDef htim4;
float tolerance = 0.005;

void PIDController_Init(PIDStructureTypeDef* PID,float FWKp ,float FWKi , float FWKd, float BWKp ,float BWKi , float BWKd)	// Initialize PID Variable
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	61f8      	str	r0, [r7, #28]
 80010d0:	ed87 0a06 	vstr	s0, [r7, #24]
 80010d4:	edc7 0a05 	vstr	s1, [r7, #20]
 80010d8:	ed87 1a04 	vstr	s2, [r7, #16]
 80010dc:	edc7 1a03 	vstr	s3, [r7, #12]
 80010e0:	ed87 2a02 	vstr	s4, [r7, #8]
 80010e4:	edc7 2a01 	vstr	s5, [r7, #4]
	PID->FWKp = FWKp;
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	601a      	str	r2, [r3, #0]
	PID->FWKi = FWKi;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	605a      	str	r2, [r3, #4]
	PID->FWKd = FWKd;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	609a      	str	r2, [r3, #8]

	PID->BWKp = BWKp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	60da      	str	r2, [r3, #12]
	PID->BWKi = BWKi;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	611a      	str	r2, [r3, #16]
	PID->BWKd = BWKd;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	615a      	str	r2, [r3, #20]


	PID->Error[0] = 0;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
	PID->Error[2] = 0;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
	PID->Command = 0;
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
	PID->Command_1 = 0;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	; 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <Motor_Control>:

void Motor_Control(int32_t cmd)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if(cmd > 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dd05      	ble.n	800115a <Motor_Control+0x1a>
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <Motor_Control+0x54>)
 8001154:	f004 fb3c 	bl	80057d0 <HAL_GPIO_WritePin>
 8001158:	e007      	b.n	800116a <Motor_Control+0x2a>
	else if (cmd < 0)  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	da04      	bge.n	800116a <Motor_Control+0x2a>
 8001160:	2200      	movs	r2, #0
 8001162:	2110      	movs	r1, #16
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <Motor_Control+0x54>)
 8001166:	f004 fb33 	bl	80057d0 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,fabs(cmd));
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff f9a6 	bl	80004bc <__aeabi_i2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4614      	mov	r4, r2
 8001176:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <Motor_Control+0x58>)
 800117c:	681e      	ldr	r6, [r3, #0]
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff fc17 	bl	80009b4 <__aeabi_d2uiz>
 8001186:	4603      	mov	r3, r0
 8001188:	63b3      	str	r3, [r6, #56]	; 0x38
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	bf00      	nop
 8001194:	48000800 	.word	0x48000800
 8001198:	20000574 	.word	0x20000574

0800119c <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	213c      	movs	r1, #60	; 0x3c
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 ffd8 	bl	8007168 <HAL_TIM_Encoder_Start>
	QEIdata->HomePosition = 80;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <QEIEncoder_Init+0x2c>)
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	42a00000 	.word	0x42a00000
 80011cc:	00000000 	.word	0x00000000

080011d0 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 80011d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011d4:	b08e      	sub	sp, #56	; 0x38
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6278      	str	r0, [r7, #36]	; 0x24
 80011da:	6239      	str	r1, [r7, #32]
 80011dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 80011e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	2200      	movs	r2, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	617a      	str	r2, [r7, #20]
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80011fc:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800120c:	1a84      	subs	r4, r0, r2
 800120e:	eb61 0503 	sbc.w	r5, r1, r3
 8001212:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001222:	ebb0 0a02 	subs.w	sl, r0, r2
 8001226:	eb61 0b03 	sbc.w	fp, r1, r3
 800122a:	4650      	mov	r0, sl
 800122c:	4659      	mov	r1, fp
 800122e:	f7ff f979 	bl	8000524 <__aeabi_ul2d>
 8001232:	a368      	add	r3, pc, #416	; (adr r3, 80013d4 <QEIEncoder_Update+0x204>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9aa 	bl	8000590 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fbd6 	bl	80009f4 <__aeabi_d2f>
 8001248:	4603      	mov	r3, r0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 800124c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001250:	495b      	ldr	r1, [pc, #364]	; (80013c0 <QEIEncoder_Update+0x1f0>)
 8001252:	428a      	cmp	r2, r1
 8001254:	f173 0300 	sbcs.w	r3, r3, #0
 8001258:	db08      	blt.n	800126c <QEIEncoder_Update+0x9c>
 800125a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800125e:	1e59      	subs	r1, r3, #1
 8001260:	60f9      	str	r1, [r7, #12]
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001268:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 800126c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001270:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001274:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001278:	da08      	bge.n	800128c <QEIEncoder_Update+0xbc>
 800127a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	6079      	str	r1, [r7, #4]
 8001282:	603a      	str	r2, [r7, #0]
 8001284:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001288:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 800128c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001290:	4622      	mov	r2, r4
 8001292:	462b      	mov	r3, r5
 8001294:	f04f 0000 	mov.w	r0, #0
 8001298:	f04f 0100 	mov.w	r1, #0
 800129c:	0119      	lsls	r1, r3, #4
 800129e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80012a2:	0110      	lsls	r0, r2, #4
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	ebb2 0804 	subs.w	r8, r2, r4
 80012ac:	eb63 0905 	sbc.w	r9, r3, r5
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80012bc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80012c0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80012c4:	4690      	mov	r8, r2
 80012c6:	4699      	mov	r9, r3
 80012c8:	4642      	mov	r2, r8
 80012ca:	464b      	mov	r3, r9
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fcb0 	bl	8000c34 <__aeabi_l2f>
 80012d4:	ee06 0a90 	vmov	s13, r0
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <QEIEncoder_Update+0x1f4>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f8f0 	bl	80004e0 <__aeabi_f2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001308:	f7ff f914 	bl	8000534 <__aeabi_l2d>
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <QEIEncoder_Update+0x1f8>)
 8001312:	f7ff f93d 	bl	8000590 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4690      	mov	r8, r2
 800131c:	4699      	mov	r9, r3
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <QEIEncoder_Update+0x1f4>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8ca 	bl	80004bc <__aeabi_i2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4640      	mov	r0, r8
 800132e:	4649      	mov	r1, r9
 8001330:	f7ff fa58 	bl	80007e4 <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff72 	bl	8000224 <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fb54 	bl	80009f4 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	edd3 7a08 	vldr	s15, [r3, #32]
 8001358:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800135c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001360:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013cc <QEIEncoder_Update+0x1fc>
 8001364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <QEIEncoder_Update+0x200>)
 8001374:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <QEIEncoder_Update+0x200>)
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <QEIEncoder_Update+0x200>)
 800137e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001382:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001386:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800139a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <QEIEncoder_Update+0x200>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <QEIEncoder_Update+0x200>)
 80013b2:	6053      	str	r3, [r2, #4]
}
 80013b4:	bf00      	nop
 80013b6:	3738      	adds	r7, #56	; 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013be:	bf00      	nop
 80013c0:	80000001 	.word	0x80000001
 80013c4:	20000000 	.word	0x20000000
 80013c8:	40300000 	.word	0x40300000
 80013cc:	42700000 	.word	0x42700000
 80013d0:	200002c0 	.word	0x200002c0
 80013d4:	a0b5ed8d 	.word	0xa0b5ed8d
 80013d8:	3eb0c6f7 	.word	0x3eb0c6f7

080013dc <QEIEncoder_SetHome>:

void QEIEncoder_SetHome(QEIStructureTypeDef* QEI)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	QEI->LinearPosition = QEI->HomePosition;//	Set Zero Position
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <Joystick_UpdateValue>:
	D	:	PA10
*/
uint8_t DEBOUNCE_INTERVAL = 200;

void Joystick_UpdateValue(JoystickStructureTypeDef* joystick,QEIStructureTypeDef* QEI)
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b098      	sub	sp, #96	; 0x60
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6578      	str	r0, [r7, #84]	; 0x54
 8001402:	6539      	str	r1, [r7, #80]	; 0x50
	static uint16_t tempSTATE[4] = {1,1,1,1};
	static uint64_t lastTIME[4] = {0,0,0,0};
	static uint64_t SUMX;
	static uint64_t SUMY;
	static int8_t POINT = 0;
	if(POINT > 4) POINT = 4;
 8001404:	4bac      	ldr	r3, [pc, #688]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 8001406:	f993 3000 	ldrsb.w	r3, [r3]
 800140a:	2b04      	cmp	r3, #4
 800140c:	dd03      	ble.n	8001416 <Joystick_UpdateValue+0x1e>
 800140e:	4aaa      	ldr	r2, [pc, #680]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 8001410:	2304      	movs	r3, #4
 8001412:	7013      	strb	r3, [r2, #0]
 8001414:	e007      	b.n	8001426 <Joystick_UpdateValue+0x2e>
	else if(POINT < 0) POINT = 0;
 8001416:	4ba8      	ldr	r3, [pc, #672]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 8001418:	f993 3000 	ldrsb.w	r3, [r3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	da02      	bge.n	8001426 <Joystick_UpdateValue+0x2e>
 8001420:	4aa5      	ldr	r2, [pc, #660]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 8001422:	2300      	movs	r3, #0
 8001424:	7013      	strb	r3, [r2, #0]
	SUMX = 0;
 8001426:	49a5      	ldr	r1, [pc, #660]	; (80016bc <Joystick_UpdateValue+0x2c4>)
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
	SUMY = 0;
 8001434:	49a2      	ldr	r1, [pc, #648]	; (80016c0 <Joystick_UpdateValue+0x2c8>)
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	e9c1 2300 	strd	r2, r3, [r1]

	static uint64_t currentTIME;
	currentTIME = HAL_GetTick();
 8001442:	f002 f879 	bl	8003538 <HAL_GetTick>
 8001446:	4603      	mov	r3, r0
 8001448:	2200      	movs	r2, #0
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
 800144c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800144e:	4b9d      	ldr	r3, [pc, #628]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 8001450:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001454:	e9c3 1200 	strd	r1, r2, [r3]
	/* Update STATE Value */

//
    if (!tempSTATE[A] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) && (currentTIME - lastTIME[A] > DEBOUNCE_INTERVAL)) {
 8001458:	4b9b      	ldr	r3, [pc, #620]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d125      	bne.n	80014ac <Joystick_UpdateValue+0xb4>
 8001460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001464:	4899      	ldr	r0, [pc, #612]	; (80016cc <Joystick_UpdateValue+0x2d4>)
 8001466:	f004 f99b 	bl	80057a0 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01d      	beq.n	80014ac <Joystick_UpdateValue+0xb4>
 8001470:	4b94      	ldr	r3, [pc, #592]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 8001472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001476:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	1a84      	subs	r4, r0, r2
 800147e:	eb61 0503 	sbc.w	r5, r1, r3
 8001482:	4b94      	ldr	r3, [pc, #592]	; (80016d4 <Joystick_UpdateValue+0x2dc>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2200      	movs	r2, #0
 800148a:	4698      	mov	r8, r3
 800148c:	4691      	mov	r9, r2
 800148e:	45a0      	cmp	r8, r4
 8001490:	eb79 0305 	sbcs.w	r3, r9, r5
 8001494:	d20a      	bcs.n	80014ac <Joystick_UpdateValue+0xb4>
        joystick->PIN[A] = 1;
 8001496:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001498:	2301      	movs	r3, #1
 800149a:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
        lastTIME[A] = currentTIME;
 800149e:	4b89      	ldr	r3, [pc, #548]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	498a      	ldr	r1, [pc, #552]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
 80014aa:	e003      	b.n	80014b4 <Joystick_UpdateValue+0xbc>
    } else joystick->PIN[A] = 0;
 80014ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
    tempSTATE[A] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	4884      	ldr	r0, [pc, #528]	; (80016cc <Joystick_UpdateValue+0x2d4>)
 80014ba:	f004 f971 	bl	80057a0 <HAL_GPIO_ReadPin>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4a81      	ldr	r2, [pc, #516]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 80014c4:	8013      	strh	r3, [r2, #0]

    // Check button B
    if (!tempSTATE[B] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) && (currentTIME - lastTIME[B] > DEBOUNCE_INTERVAL)) {
 80014c6:	4b80      	ldr	r3, [pc, #512]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 80014c8:	885b      	ldrh	r3, [r3, #2]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d129      	bne.n	8001522 <Joystick_UpdateValue+0x12a>
 80014ce:	2110      	movs	r1, #16
 80014d0:	487e      	ldr	r0, [pc, #504]	; (80016cc <Joystick_UpdateValue+0x2d4>)
 80014d2:	f004 f965 	bl	80057a0 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d022      	beq.n	8001522 <Joystick_UpdateValue+0x12a>
 80014dc:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 80014de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e2:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 80014e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014e8:	ebb0 0a02 	subs.w	sl, r0, r2
 80014ec:	eb61 0b03 	sbc.w	fp, r1, r3
 80014f0:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <Joystick_UpdateValue+0x2dc>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2200      	movs	r2, #0
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
 80014fa:	647a      	str	r2, [r7, #68]	; 0x44
 80014fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001500:	460b      	mov	r3, r1
 8001502:	4553      	cmp	r3, sl
 8001504:	4613      	mov	r3, r2
 8001506:	eb73 030b 	sbcs.w	r3, r3, fp
 800150a:	d20a      	bcs.n	8001522 <Joystick_UpdateValue+0x12a>
        joystick->PIN[B] = 1;
 800150c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800150e:	2301      	movs	r3, #1
 8001510:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
        lastTIME[B] = currentTIME;
 8001514:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	496d      	ldr	r1, [pc, #436]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 800151c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001520:	e003      	b.n	800152a <Joystick_UpdateValue+0x132>
    } else joystick->PIN[B] = 0;
 8001522:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001524:	2300      	movs	r3, #0
 8001526:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
    tempSTATE[B] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800152a:	2110      	movs	r1, #16
 800152c:	4867      	ldr	r0, [pc, #412]	; (80016cc <Joystick_UpdateValue+0x2d4>)
 800152e:	f004 f937 	bl	80057a0 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	b29b      	uxth	r3, r3
 8001536:	4a64      	ldr	r2, [pc, #400]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 8001538:	8053      	strh	r3, [r2, #2]

    // Check button C
    if (!tempSTATE[C] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && (currentTIME - lastTIME[C] > DEBOUNCE_INTERVAL)) {
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d12d      	bne.n	800159e <Joystick_UpdateValue+0x1a6>
 8001542:	2120      	movs	r1, #32
 8001544:	4861      	ldr	r0, [pc, #388]	; (80016cc <Joystick_UpdateValue+0x2d4>)
 8001546:	f004 f92b 	bl	80057a0 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d026      	beq.n	800159e <Joystick_UpdateValue+0x1a6>
 8001550:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 8001552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001556:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 8001558:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800155c:	1a84      	subs	r4, r0, r2
 800155e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001560:	eb61 0303 	sbc.w	r3, r1, r3
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <Joystick_UpdateValue+0x2dc>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2200      	movs	r2, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
 8001570:	637a      	str	r2, [r7, #52]	; 0x34
 8001572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001576:	4623      	mov	r3, r4
 8001578:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800157c:	4602      	mov	r2, r0
 800157e:	4293      	cmp	r3, r2
 8001580:	462b      	mov	r3, r5
 8001582:	460a      	mov	r2, r1
 8001584:	4193      	sbcs	r3, r2
 8001586:	d20a      	bcs.n	800159e <Joystick_UpdateValue+0x1a6>
        joystick->PIN[C] = 1;
 8001588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800158a:	2301      	movs	r3, #1
 800158c:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
        lastTIME[C] = currentTIME;
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	494e      	ldr	r1, [pc, #312]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 8001598:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800159c:	e003      	b.n	80015a6 <Joystick_UpdateValue+0x1ae>
    } else joystick->PIN[C] = 0;
 800159e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
    tempSTATE[C] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80015a6:	2120      	movs	r1, #32
 80015a8:	4848      	ldr	r0, [pc, #288]	; (80016cc <Joystick_UpdateValue+0x2d4>)
 80015aa:	f004 f8f9 	bl	80057a0 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 80015b4:	8093      	strh	r3, [r2, #4]

    // Check button D
    if (!tempSTATE[D] && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && (currentTIME - lastTIME[D] > DEBOUNCE_INTERVAL)) {
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 80015b8:	88db      	ldrh	r3, [r3, #6]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d12f      	bne.n	800161e <Joystick_UpdateValue+0x226>
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f004 f8eb 	bl	80057a0 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d026      	beq.n	800161e <Joystick_UpdateValue+0x226>
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 80015d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 80015d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015dc:	1a84      	subs	r4, r0, r2
 80015de:	62bc      	str	r4, [r7, #40]	; 0x28
 80015e0:	eb61 0303 	sbc.w	r3, r1, r3
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <Joystick_UpdateValue+0x2dc>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	627a      	str	r2, [r7, #36]	; 0x24
 80015f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015f6:	4623      	mov	r3, r4
 80015f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015fc:	4602      	mov	r2, r0
 80015fe:	4293      	cmp	r3, r2
 8001600:	462b      	mov	r3, r5
 8001602:	460a      	mov	r2, r1
 8001604:	4193      	sbcs	r3, r2
 8001606:	d20a      	bcs.n	800161e <Joystick_UpdateValue+0x226>
        joystick->PIN[D] = 1;
 8001608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160a:	2201      	movs	r2, #1
 800160c:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
        lastTIME[D] = currentTIME;
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <Joystick_UpdateValue+0x2cc>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	492e      	ldr	r1, [pc, #184]	; (80016d0 <Joystick_UpdateValue+0x2d8>)
 8001618:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800161c:	e003      	b.n	8001626 <Joystick_UpdateValue+0x22e>
    } else joystick->PIN[D] = 0;
 800161e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001620:	2200      	movs	r2, #0
 8001622:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    tempSTATE[D] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f004 f8b7 	bl	80057a0 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <Joystick_UpdateValue+0x2d0>)
 8001638:	80da      	strh	r2, [r3, #6]



	if(joystick->PIN[B] == 1)
 800163a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001640:	2b01      	cmp	r3, #1
 8001642:	d116      	bne.n	8001672 <Joystick_UpdateValue+0x27a>
	{
		joystick->PointPosition[POINT] = QEI->LinearPosition;
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 8001646:	f993 3000 	ldrsb.w	r3, [r3]
 800164a:	4618      	mov	r0, r3
 800164c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001652:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3304      	adds	r3, #4
 800165c:	601a      	str	r2, [r3, #0]
		POINT++;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 8001660:	f993 3000 	ldrsb.w	r3, [r3]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3301      	adds	r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b25a      	sxtb	r2, r3
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e04b      	b.n	800170a <Joystick_UpdateValue+0x312>
	}
	else if(joystick->PIN[C] == 1)
 8001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001674:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001678:	2b01      	cmp	r3, #1
 800167a:	d12d      	bne.n	80016d8 <Joystick_UpdateValue+0x2e0>
	{
		joystick->PointPosition[0] = 0;
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		joystick->PointPosition[1] = 0;
 8001686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		joystick->PointPosition[2] = 0;
 8001690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		joystick->PointPosition[3] = 0;
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		joystick->PointPosition[4] = 0;
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		POINT = 0;
 80016ae:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <Joystick_UpdateValue+0x2c0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e029      	b.n	800170a <Joystick_UpdateValue+0x312>
 80016b6:	bf00      	nop
 80016b8:	200002c8 	.word	0x200002c8
 80016bc:	200002d0 	.word	0x200002d0
 80016c0:	200002d8 	.word	0x200002d8
 80016c4:	200002e0 	.word	0x200002e0
 80016c8:	20000004 	.word	0x20000004
 80016cc:	48000400 	.word	0x48000400
 80016d0:	200002e8 	.word	0x200002e8
 80016d4:	20000002 	.word	0x20000002
	}
	else if(joystick->PIN[D] == 1)
 80016d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016da:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d113      	bne.n	800170a <Joystick_UpdateValue+0x312>
	{
		joystick->PointPosition[POINT] = 0;
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <Joystick_UpdateValue+0x3e0>)
 80016e4:	f993 3000 	ldrsb.w	r3, [r3]
 80016e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016ea:	3366      	adds	r3, #102	; 0x66
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3304      	adds	r3, #4
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
		POINT--;
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <Joystick_UpdateValue+0x3e0>)
 80016fa:	f993 3000 	ldrsb.w	r3, [r3]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	b25a      	sxtb	r2, r3
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <Joystick_UpdateValue+0x3e0>)
 8001708:	701a      	strb	r2, [r3, #0]
	}


	/*			Joy			*/
	for(uint8_t i = 0 ; i < 100 ; i ++)
 800170a:	2300      	movs	r3, #0
 800170c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001710:	e03b      	b.n	800178a <Joystick_UpdateValue+0x392>
	{
		SUMX += joystick->XYBuffer[2*i];
 8001712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001716:	005a      	lsls	r2, r3, #1
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800171e:	b29b      	uxth	r3, r3
 8001720:	2200      	movs	r2, #0
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <Joystick_UpdateValue+0x3e4>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001730:	4621      	mov	r1, r4
 8001732:	1889      	adds	r1, r1, r2
 8001734:	6139      	str	r1, [r7, #16]
 8001736:	4629      	mov	r1, r5
 8001738:	eb41 0303 	adc.w	r3, r1, r3
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <Joystick_UpdateValue+0x3e4>)
 8001740:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001744:	e9c3 1200 	strd	r1, r2, [r3]
		SUMY += joystick->XYBuffer[(2*i)+1];
 8001748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001752:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2200      	movs	r2, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	60fa      	str	r2, [r7, #12]
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <Joystick_UpdateValue+0x3e8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001768:	4621      	mov	r1, r4
 800176a:	1889      	adds	r1, r1, r2
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	4629      	mov	r1, r5
 8001770:	eb41 0303 	adc.w	r3, r1, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <Joystick_UpdateValue+0x3e8>)
 8001778:	e9d7 1200 	ldrd	r1, r2, [r7]
 800177c:	e9c3 1200 	strd	r1, r2, [r3]
	for(uint8_t i = 0 ; i < 100 ; i ++)
 8001780:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001784:	3301      	adds	r3, #1
 8001786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800178a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800178e:	2b63      	cmp	r3, #99	; 0x63
 8001790:	d9bf      	bls.n	8001712 <Joystick_UpdateValue+0x31a>
	}

	joystick->X = SUMX/100;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <Joystick_UpdateValue+0x3e4>)
 8001794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001798:	f04f 0264 	mov.w	r2, #100	; 0x64
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	f7ff fa86 	bl	8000cb0 <__aeabi_uldivmod>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	b292      	uxth	r2, r2
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
	joystick->Y = SUMY/100;
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <Joystick_UpdateValue+0x3e8>)
 80017b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f7ff fa77 	bl	8000cb0 <__aeabi_uldivmod>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	b292      	uxth	r2, r2
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192


}
 80017ce:	bf00      	nop
 80017d0:	3760      	adds	r7, #96	; 0x60
 80017d2:	46bd      	mov	sp, r7
 80017d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d8:	200002c8 	.word	0x200002c8
 80017dc:	200002d0 	.word	0x200002d0
 80017e0:	200002d8 	.word	0x200002d8

080017e4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <modbus_1t5_Timeout+0x3c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <modbus_1t5_Timeout+0x3c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <modbus_1t5_Timeout+0x3c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <modbus_1t5_Timeout+0x3c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000308 	.word	0x20000308

08001824 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <modbus_3t5_Timeout+0x1c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	755a      	strb	r2, [r3, #21]

}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000308 	.word	0x20000308

08001844 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f007 fe3f 	bl	80094d0 <HAL_UART_GetError>
 8001852:	4603      	mov	r3, r0
 8001854:	2b20      	cmp	r3, #32
 8001856:	d101      	bne.n	800185c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001858:	f7ff ffc4 	bl	80017e4 <modbus_1t5_Timeout>

	}
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800186e:	4a25      	ldr	r2, [pc, #148]	; (8001904 <Modbus_init+0xa0>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <Modbus_init+0xa0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a21      	ldr	r2, [pc, #132]	; (8001908 <Modbus_init+0xa4>)
 8001882:	210e      	movs	r1, #14
 8001884:	4618      	mov	r0, r3
 8001886:	f006 f8fb 	bl	8007a80 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2110      	movs	r1, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f007 fdc7 	bl	8009424 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f007 fdde 	bl	800945c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <Modbus_init+0xa8>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	4618      	mov	r0, r3
 80018aa:	f007 f8a5 	bl	80089f8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <Modbus_init+0xa0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Modbus_init+0xa0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <Modbus_init+0xa0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80018c0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80018c4:	4413      	add	r3, r2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018cc:	4619      	mov	r1, r3
 80018ce:	f007 f9cd 	bl	8008c6c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <Modbus_init+0xa0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Modbus_init+0xa0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f005 f8a5 	bl	8006a38 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <Modbus_init+0xa0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 faf4 	bl	8006ee4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000308 	.word	0x20000308
 8001908:	08001825 	.word	0x08001825
 800190c:	08001845 	.word	0x08001845

08001910 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800191c:	23ff      	movs	r3, #255	; 0xff
 800191e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001920:	23ff      	movs	r3, #255	; 0xff
 8001922:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001924:	e013      	b.n	800194e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	4053      	eors	r3, r2
 8001932:	b2db      	uxtb	r3, r3
 8001934:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <CRC16+0x64>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4053      	eors	r3, r2
 8001942:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <CRC16+0x68>)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800194e:	883b      	ldrh	r3, [r7, #0]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	803a      	strh	r2, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e6      	bne.n	8001926 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	b29b      	uxth	r3, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	2000010c 	.word	0x2000010c
 8001978:	2000000c 	.word	0x2000000c

0800197c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001982:	4b7e      	ldr	r3, [pc, #504]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	7ddb      	ldrb	r3, [r3, #23]
 8001988:	3b01      	subs	r3, #1
 800198a:	2b03      	cmp	r3, #3
 800198c:	d80a      	bhi.n	80019a4 <Modbus_Protocal_Worker+0x28>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <Modbus_Protocal_Worker+0x18>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019af 	.word	0x080019af
 8001998:	08001b43 	.word	0x08001b43
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a7f 	.word	0x08001a7f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80019a4:	4b75      	ldr	r3, [pc, #468]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	75da      	strb	r2, [r3, #23]
		break;
 80019ac:	e0e1      	b.n	8001b72 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80019ae:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2202      	movs	r2, #2
 80019c0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80019c2:	f000 f9d3 	bl	8001d6c <Modbus_Emission>
 80019c6:	e018      	b.n	80019fa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80019dc:	b29b      	uxth	r3, r3
 80019de:	429a      	cmp	r2, r3
 80019e0:	d00b      	beq.n	80019fa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80019ea:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80019f2:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2203      	movs	r2, #3
 80019f8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	f040 80ad 	bne.w	8001b64 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a26:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a32:	4619      	mov	r1, r3
 8001a34:	f007 f91a 	bl	8008c6c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001a38:	e094      	b.n	8001b64 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	7d1b      	ldrb	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8091 	beq.w	8001b68 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001a46:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	22fe      	movs	r2, #254	; 0xfe
 8001a4c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a6c:	1a8a      	subs	r2, r1, r2
 8001a6e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001a70:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001a7c:	e074      	b.n	8001b68 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001a86:	f113 0f02 	cmn.w	r3, #2
 8001a8a:	d150      	bne.n	8001b2e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001aa4:	3b02      	subs	r3, #2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f7ff ff31 	bl	8001910 <CRC16>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001ab2:	793a      	ldrb	r2, [r7, #4]
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ac0:	3b02      	subs	r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d10c      	bne.n	8001ae6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001acc:	797a      	ldrb	r2, [r7, #5]
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ada:	3b01      	subs	r3, #1
 8001adc:	440b      	add	r3, r1
 8001ade:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d004      	beq.n	8001af0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	22ff      	movs	r2, #255	; 0xff
 8001aec:	759a      	strb	r2, [r3, #22]
				break;
 8001aee:	e040      	b.n	8001b72 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d113      	bne.n	8001b2a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001b12:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b1c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f008 fe30 	bl	800a784 <memcpy>

			//execute command
			Modbus_frame_response();
 8001b24:	f000 f90a 	bl	8001d3c <Modbus_frame_response>
 8001b28:	e001      	b.n	8001b2e <Modbus_Protocal_Worker+0x1b2>
				break;
 8001b2a:	bf00      	nop
					}
		break;


	}
}
 8001b2c:	e021      	b.n	8001b72 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	7d5b      	ldrb	r3, [r3, #21]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d019      	beq.n	8001b6c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	75da      	strb	r2, [r3, #23]
		break;
 8001b40:	e014      	b.n	8001b6c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d10f      	bne.n	8001b70 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <Modbus_Protocal_Worker+0x200>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	75da      	strb	r2, [r3, #23]
		break;
 8001b62:	e005      	b.n	8001b70 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001b64:	bf00      	nop
 8001b66:	e004      	b.n	8001b72 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001b68:	bf00      	nop
 8001b6a:	e002      	b.n	8001b72 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001b70:	bf00      	nop
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000308 	.word	0x20000308

08001b80 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <modbusWrite1Register+0x80>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	7e5b      	ldrb	r3, [r3, #25]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <modbusWrite1Register+0x80>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	7e9b      	ldrb	r3, [r3, #26]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <modbusWrite1Register+0x80>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d903      	bls.n	8001bb2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001baa:	2002      	movs	r0, #2
 8001bac:	f000 f8a4 	bl	8001cf8 <ModbusErrorReply>
			 return;
 8001bb0:	e023      	b.n	8001bfa <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <modbusWrite1Register+0x80>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <modbusWrite1Register+0x80>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	440b      	add	r3, r1
 8001bc2:	7ed2      	ldrb	r2, [r2, #27]
 8001bc4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <modbusWrite1Register+0x80>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <modbusWrite1Register+0x80>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	7f12      	ldrb	r2, [r2, #28]
 8001bd8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <modbusWrite1Register+0x80>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			hModbus->Rxframe,
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <modbusWrite1Register+0x80>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001be8:	2208      	movs	r2, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	f008 fdca 	bl	800a784 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <modbusWrite1Register+0x80>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270



}
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000308 	.word	0x20000308

08001c04 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	7edb      	ldrb	r3, [r3, #27]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	7f1b      	ldrb	r3, [r3, #28]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001c22:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	7e5b      	ldrb	r3, [r3, #25]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	7e9b      	ldrb	r3, [r3, #26]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <modbusRead1Register+0x42>
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	2b7d      	cmp	r3, #125	; 0x7d
 8001c44:	d903      	bls.n	8001c4e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f000 f856 	bl	8001cf8 <ModbusErrorReply>
		 return;
 8001c4c:	e04e      	b.n	8001cec <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001c4e:	88ba      	ldrh	r2, [r7, #4]
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d808      	bhi.n	8001c6c <modbusRead1Register+0x68>
 8001c5a:	88ba      	ldrh	r2, [r7, #4]
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4413      	add	r3, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d903      	bls.n	8001c74 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f000 f843 	bl	8001cf8 <ModbusErrorReply>
		 return;
 8001c72:	e03b      	b.n	8001cec <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001c8e:	2400      	movs	r4, #0
 8001c90:	e020      	b.n	8001cd4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	4423      	add	r3, r4
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	18d1      	adds	r1, r2, r3
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	1c63      	adds	r3, r4, #1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	7849      	ldrb	r1, [r1, #1]
 8001caa:	4413      	add	r3, r2
 8001cac:	460a      	mov	r2, r1
 8001cae:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	88bb      	ldrh	r3, [r7, #4]
 8001cba:	4423      	add	r3, r4
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	18d1      	adds	r1, r2, r3
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	0063      	lsls	r3, r4, #1
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	7809      	ldrb	r1, [r1, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	460a      	mov	r2, r1
 8001cce:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001cd2:	3401      	adds	r4, #1
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	429c      	cmp	r4, r3
 8001cd8:	dbdb      	blt.n	8001c92 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <modbusRead1Register+0xf0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0052      	lsls	r2, r2, #1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270

}
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000308 	.word	0x20000308

08001cf8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <ModbusErrorReply+0x40>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	7e1a      	ldrb	r2, [r3, #24]
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <ModbusErrorReply+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = Errorcode;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <ModbusErrorReply+0x40>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->TxCount = 2;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <ModbusErrorReply+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000308 	.word	0x20000308

08001d3c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <Modbus_frame_response+0x2c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	7e1b      	ldrb	r3, [r3, #24]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d004      	beq.n	8001d54 <Modbus_frame_response+0x18>
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d105      	bne.n	8001d5a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001d4e:	f7ff ff17 	bl	8001b80 <modbusWrite1Register>
		break;
 8001d52:	e006      	b.n	8001d62 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001d54:	f7ff ff56 	bl	8001c04 <modbusRead1Register>
		break;
 8001d58:	e003      	b.n	8001d62 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff ffcc 	bl	8001cf8 <ModbusErrorReply>
		break;
 8001d60:	bf00      	nop

	}
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000308 	.word	0x20000308

08001d6c <Modbus_Emission>:

void Modbus_Emission()
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <Modbus_Emission+0xe8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d15d      	bne.n	8001e3c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <Modbus_Emission+0xe8>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <Modbus_Emission+0xe8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	7812      	ldrb	r2, [r2, #0]
 8001d8a:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <Modbus_Emission+0xe8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001d96:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <Modbus_Emission+0xe8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
				hModbus->TxCount
 8001da0:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <Modbus_Emission+0xe8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 8001da8:	461a      	mov	r2, r3
 8001daa:	f008 fceb 	bl	800a784 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <Modbus_Emission+0xe8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <Modbus_Emission+0xe8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3203      	adds	r2, #3
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <Modbus_Emission+0xe8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <Modbus_Emission+0xe8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001dd4:	3b02      	subs	r3, #2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f7ff fd99 	bl	8001910 <CRC16>
 8001dde:	4603      	mov	r3, r0
 8001de0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <Modbus_Emission+0xe8>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <Modbus_Emission+0xe8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001dee:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001df0:	7939      	ldrb	r1, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	460a      	mov	r2, r1
 8001df6:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <Modbus_Emission+0xe8>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e06:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001e08:	7979      	ldrb	r1, [r7, #5]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d10d      	bne.n	8001e3c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e36:	461a      	mov	r2, r3
 8001e38:	f006 fe98 	bl	8008b6c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <Modbus_Emission+0xe8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	755a      	strb	r2, [r3, #21]

}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000308 	.word	0x20000308

08001e58 <Jog_mode>:
float MAX_SPEED = 200;
uint64_t _BACKDRIVE_FACTOR = 20;
extern TIM_HandleTypeDef htim4;

void Jog_mode(JoystickStructureTypeDef *joystick , QEIStructureTypeDef *QEI)
{
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]

	Joystick_UpdateValue(joystick,QEI);
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fac7 	bl	80013f8 <Joystick_UpdateValue>
	if(joystick->Y < 2146 && joystick->Y >1950)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001e70:	f640 0261 	movw	r2, #2145	; 0x861
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d80f      	bhi.n	8001e98 <Jog_mode+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001e7e:	f240 729e 	movw	r2, #1950	; 0x79e
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d908      	bls.n	8001e98 <Jog_mode+0x40>
	{
		Motor_Control(_BACKDRIVE_FACTOR);
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <Jog_mode+0x134>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7ff f956 	bl	8001140 <Motor_Control>
	{
 8001e94:	bf00      	nop
	{
		Motor_Control(-(uint16_t)(((1975-joystick->Y)*MAX_SPEED)/1975));
	}
	else Motor_Control(_BACKDRIVE_FACTOR);

}
 8001e96:	e075      	b.n	8001f84 <Jog_mode+0x12c>
	else if(joystick->Y > 2146)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001e9e:	f640 0262 	movw	r2, #2146	; 0x862
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d943      	bls.n	8001f2e <Jog_mode+0xd6>
		if( (uint16_t)(((joystick->Y-2000)*MAX_SPEED)/2000) > _BACKDRIVE_FACTOR) Motor_Control((uint16_t)(((joystick->Y-2000)*MAX_SPEED)/2000));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001eac:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <Jog_mode+0x138>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001f94 <Jog_mode+0x13c>
 8001ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	461c      	mov	r4, r3
 8001eda:	4615      	mov	r5, r2
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <Jog_mode+0x134>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	42a2      	cmp	r2, r4
 8001ee4:	41ab      	sbcs	r3, r5
 8001ee6:	d21a      	bcs.n	8001f1e <Jog_mode+0xc6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001eee:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <Jog_mode+0x138>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001f94 <Jog_mode+0x13c>
 8001f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f10:	ee17 3a90 	vmov	r3, s15
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f912 	bl	8001140 <Motor_Control>
}
 8001f1c:	e032      	b.n	8001f84 <Jog_mode+0x12c>
		else Motor_Control(_BACKDRIVE_FACTOR);
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <Jog_mode+0x134>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7ff f90a 	bl	8001140 <Motor_Control>
}
 8001f2c:	e02a      	b.n	8001f84 <Jog_mode+0x12c>
	else if(joystick->Y < 1950)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001f34:	f240 729d 	movw	r2, #1949	; 0x79d
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d81c      	bhi.n	8001f76 <Jog_mode+0x11e>
		Motor_Control(-(uint16_t)(((1975-joystick->Y)*MAX_SPEED)/1975));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8001f42:	f5c3 63f6 	rsb	r3, r3, #1968	; 0x7b0
 8001f46:	3307      	adds	r3, #7
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <Jog_mode+0x138>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001f98 <Jog_mode+0x140>
 8001f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f66:	ee17 3a90 	vmov	r3, s15
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8e6 	bl	8001140 <Motor_Control>
}
 8001f74:	e006      	b.n	8001f84 <Jog_mode+0x12c>
	else Motor_Control(_BACKDRIVE_FACTOR);
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <Jog_mode+0x134>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff f8de 	bl	8001140 <Motor_Control>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	20000210 	.word	0x20000210
 8001f90:	2000020c 	.word	0x2000020c
 8001f94:	44fa0000 	.word	0x44fa0000
 8001f98:	44f6e000 	.word	0x44f6e000

08001f9c <SetHome_mode>:
	PIDControllerPosition_Command(PID, QEI, setpoint);
	Motor_Control(PID->Command);
}

void SetHome_mode(FlagTypeDef *flag ,QEIStructureTypeDef *QEI)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	static uint8_t pre_state = 0;
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && !pre_state)		// IF found PHOTOELECTRIC
 8001fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001faa:	4816      	ldr	r0, [pc, #88]	; (8002004 <SetHome_mode+0x68>)
 8001fac:	f003 fbf8 	bl	80057a0 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <SetHome_mode+0x3e>
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <SetHome_mode+0x6c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <SetHome_mode+0x3e>
	{
		flag->setHome = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		Motor_Control(_BACKDRIVE_FACTOR);
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <SetHome_mode+0x70>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff f8b7 	bl	8001140 <Motor_Control>
		QEIEncoder_SetHome(QEI);
 8001fd2:	6838      	ldr	r0, [r7, #0]
 8001fd4:	f7ff fa02 	bl	80013dc <QEIEncoder_SetHome>
	{
 8001fd8:	e010      	b.n	8001ffc <SetHome_mode+0x60>
	}
	else
	{
		flag->setHome = 1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
		Motor_Control(-100);
 8001fe0:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001fe4:	f7ff f8ac 	bl	8001140 <Motor_Control>
		pre_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001fe8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <SetHome_mode+0x68>)
 8001fee:	f003 fbd7 	bl	80057a0 <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SetHome_mode+0x6c>)
 8001ff8:	701a      	strb	r2, [r3, #0]
	}
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	48000400 	.word	0x48000400
 8002008:	2000030c 	.word	0x2000030c
 800200c:	20000210 	.word	0x20000210

08002010 <QuinticTrajectory_Init>:
}state;

float period = 0.001;

void QuinticTrajectory_Init(QuinticTypeDef *q)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	q->Pi = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
	q->Pf = 0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
	q->t = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
	q->tf = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
	q->Position = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
	q->Velocity = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
	q->Acceleration = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	609a      	str	r2, [r3, #8]

}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <QuinticTrajectory_Generator>:

void QuinticTrajectory_Generator(QuinticTypeDef *q, float pi ,float pf , float tf)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	ed2d 8b02 	vpush	{d8}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	ed87 0a02 	vstr	s0, [r7, #8]
 8002074:	edc7 0a01 	vstr	s1, [r7, #4]
 8002078:	ed87 1a00 	vstr	s2, [r7]
	switch(q->STATE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002082:	2b03      	cmp	r3, #3
 8002084:	f200 81c8 	bhi.w	8002418 <QuinticTrajectory_Generator+0x3b4>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <QuinticTrajectory_Generator+0x2c>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020ab 	.word	0x080020ab
 8002098:	080021ed 	.word	0x080021ed
 800209c:	080023ff 	.word	0x080023ff
	{
	case READY:
//		if(q->Pi != q->Pf) q->STATE = CALCULATE;
		q->STATE = CALCULATE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80020a8:	e1b6      	b.n	8002418 <QuinticTrajectory_Generator+0x3b4>
	case CALCULATE:
		q->t = 0;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]

		q->Pi = pi;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	61da      	str	r2, [r3, #28]
		q->Pf = pf;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	621a      	str	r2, [r3, #32]
		q->tf = tf;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	619a      	str	r2, [r3, #24]

		float s = pf - pi;
 80020c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80020c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d0:	edc7 7a05 	vstr	s15, [r7, #20]
		/*Coefficient Calculated*/
		q->c[0] = q->Pi;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
		q->c[1] = 0;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
		q->c[2] = 0;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
		q->c[3] = 10.0*s/powf(q->tf,3);
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7fe f9f7 	bl	80004e0 <__aeabi_f2d>
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4bcb      	ldr	r3, [pc, #812]	; (8002424 <QuinticTrajectory_Generator+0x3c0>)
 80020f8:	f7fe fa4a 	bl	8000590 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a06 	vldr	s15, [r3, #24]
 800210a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	f008 fb45 	bl	800a7a0 <powf>
 8002116:	ee10 3a10 	vmov	r3, s0
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f9e0 	bl	80004e0 <__aeabi_f2d>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4620      	mov	r0, r4
 8002126:	4629      	mov	r1, r5
 8002128:	f7fe fb5c 	bl	80007e4 <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fc5e 	bl	80009f4 <__aeabi_d2f>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
		q->c[4] = -15.0*s/powf(q->tf,4);
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7fe f9ce 	bl	80004e0 <__aeabi_f2d>
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4bb7      	ldr	r3, [pc, #732]	; (8002428 <QuinticTrajectory_Generator+0x3c4>)
 800214a:	f7fe fa21 	bl	8000590 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4614      	mov	r4, r2
 8002154:	461d      	mov	r5, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	edd3 7a06 	vldr	s15, [r3, #24]
 800215c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002160:	eeb0 0a67 	vmov.f32	s0, s15
 8002164:	f008 fb1c 	bl	800a7a0 <powf>
 8002168:	ee10 3a10 	vmov	r3, s0
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f9b7 	bl	80004e0 <__aeabi_f2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4620      	mov	r0, r4
 8002178:	4629      	mov	r1, r5
 800217a:	f7fe fb33 	bl	80007e4 <__aeabi_ddiv>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fc35 	bl	80009f4 <__aeabi_d2f>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
		q->c[5] = 6.0*s/powf(q->tf,5);
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	f7fe f9a5 	bl	80004e0 <__aeabi_f2d>
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4ba4      	ldr	r3, [pc, #656]	; (800242c <QuinticTrajectory_Generator+0x3c8>)
 800219c:	f7fe f9f8 	bl	8000590 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80021ae:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	f008 faf3 	bl	800a7a0 <powf>
 80021ba:	ee10 3a10 	vmov	r3, s0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f98e 	bl	80004e0 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4620      	mov	r0, r4
 80021ca:	4629      	mov	r1, r5
 80021cc:	f7fe fb0a 	bl	80007e4 <__aeabi_ddiv>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fc0c 	bl	80009f4 <__aeabi_d2f>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38

		q->STATE = WORKING;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80021ea:	e115      	b.n	8002418 <QuinticTrajectory_Generator+0x3b4>

	case WORKING:
		q->Position = q->c[0] +
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q->Position = q->c[0] +
 8002202:	ee37 8a27 	vadd.f32	s16, s14, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002212:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	f008 fac1 	bl	800a7a0 <powf>
 800221e:	eef0 7a40 	vmov.f32	s15, s0
 8002222:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002226:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[3]*powf(q->t,3) +
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	edd3 7a05 	vldr	s15, [r3, #20]
 8002236:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800223a:	eeb0 0a67 	vmov.f32	s0, s15
 800223e:	f008 faaf 	bl	800a7a0 <powf>
 8002242:	eef0 7a40 	vmov.f32	s15, s0
 8002246:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 800224a:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[4]*powf(q->t,4) +
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	edd3 7a05 	vldr	s15, [r3, #20]
 800225a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800225e:	eeb0 0a67 	vmov.f32	s0, s15
 8002262:	f008 fa9d 	bl	800a7a0 <powf>
 8002266:	eef0 7a40 	vmov.f32	s15, s0
 800226a:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[3]*powf(q->t,3) +
 800226e:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[5]*powf(q->t,5);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	edd3 7a05 	vldr	s15, [r3, #20]
 800227e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002282:	eeb0 0a67 	vmov.f32	s0, s15
 8002286:	f008 fa8b 	bl	800a7a0 <powf>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[4]*powf(q->t,4) +
 8002292:	ee78 7a27 	vadd.f32	s15, s16, s15
		q->Position = q->c[0] +
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	edc3 7a00 	vstr	s15, [r3]

		q->Velocity = q->c[1] + 2*q->c[2]*q->t + 3*q->c[3]*powf(q->t,2) + 4*q->c[4]*powf(q->t,3) + 5*q->c[5]*powf(q->t,4);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80022b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b6:	ee37 8a27 	vadd.f32	s16, s14, s15
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80022c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80022c4:	ee67 8a87 	vmul.f32	s17, s15, s14
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80022ce:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80022d2:	eeb0 0a67 	vmov.f32	s0, s15
 80022d6:	f008 fa63 	bl	800a7a0 <powf>
 80022da:	eef0 7a40 	vmov.f32	s15, s0
 80022de:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80022e2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80022ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022f0:	ee67 8a87 	vmul.f32	s17, s15, s14
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80022fa:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	f008 fa4d 	bl	800a7a0 <powf>
 8002306:	eef0 7a40 	vmov.f32	s15, s0
 800230a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800230e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002318:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800231c:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	edd3 7a05 	vldr	s15, [r3, #20]
 8002326:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800232a:	eeb0 0a67 	vmov.f32	s0, s15
 800232e:	f008 fa37 	bl	800a7a0 <powf>
 8002332:	eef0 7a40 	vmov.f32	s15, s0
 8002336:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800233a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edc3 7a01 	vstr	s15, [r3, #4]
		q->Acceleration = 2*q->c[2] + 6*q->c[3]*q->t + 12*q->c[4]*powf(q->t,2) + 20*q->c[5]*powf(q->t,3);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800234a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002354:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002358:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002366:	ee37 8a27 	vadd.f32	s16, s14, s15
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002370:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002374:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	edd3 7a05 	vldr	s15, [r3, #20]
 800237e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	f008 fa0b 	bl	800a7a0 <powf>
 800238a:	eef0 7a40 	vmov.f32	s15, s0
 800238e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002392:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800239c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80023a0:	ee67 8a87 	vmul.f32	s17, s15, s14
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80023aa:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80023ae:	eeb0 0a67 	vmov.f32	s0, s15
 80023b2:	f008 f9f5 	bl	800a7a0 <powf>
 80023b6:	eef0 7a40 	vmov.f32	s15, s0
 80023ba:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80023be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	edc3 7a02 	vstr	s15, [r3, #8]
		q->t += period;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <QuinticTrajectory_Generator+0x3cc>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	edc3 7a05 	vstr	s15, [r3, #20]
		if(q->t >= tf) q->STATE = FINISH;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80023e4:	ed97 7a00 	vldr	s14, [r7]
 80023e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f0:	d900      	bls.n	80023f4 <QuinticTrajectory_Generator+0x390>
		break;
 80023f2:	e011      	b.n	8002418 <QuinticTrajectory_Generator+0x3b4>
		if(q->t >= tf) q->STATE = FINISH;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2203      	movs	r2, #3
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80023fc:	e00c      	b.n	8002418 <QuinticTrajectory_Generator+0x3b4>

	case FINISH:
		q->Velocity = 0;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
		q->Acceleration = 0;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
		q->Pi = q->Pf;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	61da      	str	r2, [r3, #28]
		break;
 8002416:	bf00      	nop
	}
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	ecbd 8b02 	vpop	{d8}
 8002422:	bdb0      	pop	{r4, r5, r7, pc}
 8002424:	40240000 	.word	0x40240000
 8002428:	c02e0000 	.word	0xc02e0000
 800242c:	40180000 	.word	0x40180000
 8002430:	20000218 	.word	0x20000218

08002434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243a:	f001 f818 	bl	800346e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243e:	f000 f8e7 	bl	8002610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002442:	f000 fbbb 	bl	8002bbc <MX_GPIO_Init>
  MX_DMA_Init();
 8002446:	f000 fb7f 	bl	8002b48 <MX_DMA_Init>
  MX_TIM5_Init();
 800244a:	f000 faa9 	bl	80029a0 <MX_TIM5_Init>
  MX_TIM2_Init();
 800244e:	f000 f9b1 	bl	80027b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002452:	f000 f9fd 	bl	8002850 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002456:	f000 fb29 	bl	8002aac <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800245a:	f000 fa47 	bl	80028ec <MX_TIM4_Init>
  MX_ADC1_Init();
 800245e:	f000 f921 	bl	80026a4 <MX_ADC1_Init>
  MX_TIM16_Init();
 8002462:	f000 faf3 	bl	8002a4c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  /* Initial Modbus Variable */
  hmodbus.huart = &huart2;
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <main+0x188>)
 8002468:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <main+0x18c>)
 800246a:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <main+0x188>)
 800246e:	4a55      	ldr	r2, [pc, #340]	; (80025c4 <main+0x190>)
 8002470:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8002472:	4b52      	ldr	r3, [pc, #328]	; (80025bc <main+0x188>)
 8002474:	2215      	movs	r2, #21
 8002476:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <main+0x188>)
 800247a:	22c8      	movs	r2, #200	; 0xc8
 800247c:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800247e:	4952      	ldr	r1, [pc, #328]	; (80025c8 <main+0x194>)
 8002480:	484e      	ldr	r0, [pc, #312]	; (80025bc <main+0x188>)
 8002482:	f7ff f9ef 	bl	8001864 <Modbus_init>



  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 8002486:	4851      	ldr	r0, [pc, #324]	; (80025cc <main+0x198>)
 8002488:	f004 fad6 	bl	8006a38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 800248c:	4850      	ldr	r0, [pc, #320]	; (80025d0 <main+0x19c>)
 800248e:	f004 fad3 	bl	8006a38 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim4);							// Initialize PMW Signal Timer
 8002492:	4850      	ldr	r0, [pc, #320]	; (80025d4 <main+0x1a0>)
 8002494:	f004 fa60 	bl	8006958 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002498:	2104      	movs	r1, #4
 800249a:	484e      	ldr	r0, [pc, #312]	; (80025d4 <main+0x1a0>)
 800249c:	f004 fba8 	bl	8006bf0 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, Joystick.XYBuffer, 200);
 80024a0:	22c8      	movs	r2, #200	; 0xc8
 80024a2:	494d      	ldr	r1, [pc, #308]	; (80025d8 <main+0x1a4>)
 80024a4:	484d      	ldr	r0, [pc, #308]	; (80025dc <main+0x1a8>)
 80024a6:	f001 fc2d 	bl	8003d04 <HAL_ADC_Start_DMA>

  float PID_P_up[3] = {0.94 ,0.00003, 0}; //{0.84 ,0.0000023, 0};
 80024aa:	4a4d      	ldr	r2, [pc, #308]	; (80025e0 <main+0x1ac>)
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_P_down[3] = {0.94 ,0.00003, 0}; //{1.6 ,0.000000067, 0}
 80024b6:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <main+0x1ac>)
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80024be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float PID_V_up[3] = {3.7 ,0.0013, 0.00000054}; //{4.38 ,0.005, 0.0000039}  {4.35 ,0.0038, 0.0000039}
 80024c2:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <main+0x1b0>)
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_V_down[3] = {3.4 ,0.00085, 0.00000054};
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <main+0x1b4>)
 80024d0:	463b      	mov	r3, r7
 80024d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 80024d8:	4944      	ldr	r1, [pc, #272]	; (80025ec <main+0x1b8>)
 80024da:	4845      	ldr	r0, [pc, #276]	; (80025f0 <main+0x1bc>)
 80024dc:	f7fe fe5e 	bl	800119c <QEIEncoder_Init>
  PIDController_Init(&PIDp, PID_P_up[0], PID_P_up[1], PID_P_up[2] , PID_P_down[0], PID_P_down[1], PID_P_down[2]);	// Initialize Position Controller
 80024e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80024ec:	ed97 6a06 	vldr	s12, [r7, #24]
 80024f0:	edd7 5a07 	vldr	s11, [r7, #28]
 80024f4:	ed97 5a08 	vldr	s10, [r7, #32]
 80024f8:	eef0 2a45 	vmov.f32	s5, s10
 80024fc:	eeb0 2a65 	vmov.f32	s4, s11
 8002500:	eef0 1a46 	vmov.f32	s3, s12
 8002504:	eeb0 1a66 	vmov.f32	s2, s13
 8002508:	eef0 0a47 	vmov.f32	s1, s14
 800250c:	eeb0 0a67 	vmov.f32	s0, s15
 8002510:	4838      	ldr	r0, [pc, #224]	; (80025f4 <main+0x1c0>)
 8002512:	f7fe fdd9 	bl	80010c8 <PIDController_Init>
  PIDController_Init(&PIDv, PID_V_up[0], PID_V_up[1], PID_V_up[2] , PID_V_down[0], PID_V_down[1], PID_V_down[2]);	// Initialize Velocity Controller
 8002516:	edd7 7a03 	vldr	s15, [r7, #12]
 800251a:	ed97 7a04 	vldr	s14, [r7, #16]
 800251e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002522:	ed97 6a00 	vldr	s12, [r7]
 8002526:	edd7 5a01 	vldr	s11, [r7, #4]
 800252a:	ed97 5a02 	vldr	s10, [r7, #8]
 800252e:	eef0 2a45 	vmov.f32	s5, s10
 8002532:	eeb0 2a65 	vmov.f32	s4, s11
 8002536:	eef0 1a46 	vmov.f32	s3, s12
 800253a:	eeb0 1a66 	vmov.f32	s2, s13
 800253e:	eef0 0a47 	vmov.f32	s1, s14
 8002542:	eeb0 0a67 	vmov.f32	s0, s15
 8002546:	482c      	ldr	r0, [pc, #176]	; (80025f8 <main+0x1c4>)
 8002548:	f7fe fdbe 	bl	80010c8 <PIDController_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// SET to UPWARD
 800254c:	2201      	movs	r2, #1
 800254e:	2110      	movs	r1, #16
 8002550:	482a      	ldr	r0, [pc, #168]	; (80025fc <main+0x1c8>)
 8002552:	f003 f93d 	bl	80057d0 <HAL_GPIO_WritePin>

  QuinticTrajectory_Init(&quintic);
 8002556:	482a      	ldr	r0, [pc, #168]	; (8002600 <main+0x1cc>)
 8002558:	f7ff fd5a 	bl	8002010 <QuinticTrajectory_Init>

  STATE = IDLE;
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <main+0x1d0>)
 800255e:	2200      	movs	r2, #0
 8002560:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Protocol Part */
	  status.StateFrame = registerFrame[0x01].U16;
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <main+0x194>)
 8002564:	885b      	ldrh	r3, [r3, #2]
 8002566:	461a      	mov	r2, r3
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <main+0x1d4>)
 800256a:	611a      	str	r2, [r3, #16]
	  Modbus_Protocal_Worker();
 800256c:	f7ff fa06 	bl	800197c <Modbus_Protocal_Worker>
	  Heartbeat();
 8002570:	f7fe fd1c 	bl	8000fac <Heartbeat>
	  Routine(&QEI);
 8002574:	481e      	ldr	r0, [pc, #120]	; (80025f0 <main+0x1bc>)
 8002576:	f7fe fd3f 	bl	8000ff8 <Routine>
	  switch (STATE) {
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <main+0x1d0>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d015      	beq.n	80025ae <main+0x17a>
 8002582:	2b02      	cmp	r3, #2
 8002584:	dced      	bgt.n	8002562 <main+0x12e>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <main+0x15c>
 800258a:	2b01      	cmp	r3, #1
 800258c:	d004      	beq.n	8002598 <main+0x164>
 800258e:	e013      	b.n	80025b8 <main+0x184>
		case IDLE:
			STATE = SETHOME;
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <main+0x1d0>)
 8002592:	2201      	movs	r2, #1
 8002594:	801a      	strh	r2, [r3, #0]
			break;
 8002596:	e00f      	b.n	80025b8 <main+0x184>
		case SETHOME:
			SetHome_mode(&Flag, &QEI);
 8002598:	4915      	ldr	r1, [pc, #84]	; (80025f0 <main+0x1bc>)
 800259a:	481c      	ldr	r0, [pc, #112]	; (800260c <main+0x1d8>)
 800259c:	f7ff fcfe 	bl	8001f9c <SetHome_mode>
			if(Flag.setHome == 0)	// If finish sethome
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <main+0x1d8>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <main+0x17a>
			{
				STATE = JOG;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <main+0x1d0>)
 80025aa:	2202      	movs	r2, #2
 80025ac:	801a      	strh	r2, [r3, #0]
			}
		case JOG:
			Jog_mode(&Joystick, &QEI);
 80025ae:	4910      	ldr	r1, [pc, #64]	; (80025f0 <main+0x1bc>)
 80025b0:	4809      	ldr	r0, [pc, #36]	; (80025d8 <main+0x1a4>)
 80025b2:	f7ff fc51 	bl	8001e58 <Jog_mode>
			break;
 80025b6:	bf00      	nop
	  status.StateFrame = registerFrame[0x01].U16;
 80025b8:	e7d3      	b.n	8002562 <main+0x12e>
 80025ba:	bf00      	nop
 80025bc:	20000bf0 	.word	0x20000bf0
 80025c0:	200007d8 	.word	0x200007d8
 80025c4:	2000070c 	.word	0x2000070c
 80025c8:	200010c8 	.word	0x200010c8
 80025cc:	200003dc 	.word	0x200003dc
 80025d0:	200004a8 	.word	0x200004a8
 80025d4:	20000574 	.word	0x20000574
 80025d8:	20000a00 	.word	0x20000a00
 80025dc:	20000310 	.word	0x20000310
 80025e0:	0800af3c 	.word	0x0800af3c
 80025e4:	0800af48 	.word	0x0800af48
 80025e8:	0800af54 	.word	0x0800af54
 80025ec:	20000640 	.word	0x20000640
 80025f0:	20000970 	.word	0x20000970
 80025f4:	200009a8 	.word	0x200009a8
 80025f8:	200009d4 	.word	0x200009d4
 80025fc:	48000800 	.word	0x48000800
 8002600:	20000bb0 	.word	0x20000bb0
 8002604:	20001258 	.word	0x20001258
 8002608:	20000294 	.word	0x20000294
 800260c:	2000125c 	.word	0x2000125c

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b094      	sub	sp, #80	; 0x50
 8002614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	2238      	movs	r2, #56	; 0x38
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f008 f87e 	bl	800a720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002632:	2000      	movs	r0, #0
 8002634:	f003 f8fc 	bl	8005830 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002638:	2301      	movs	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800263c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002640:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002642:	2302      	movs	r3, #2
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002646:	2303      	movs	r3, #3
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800264a:	2306      	movs	r3, #6
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800264e:	2355      	movs	r3, #85	; 0x55
 8002650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002652:	2302      	movs	r3, #2
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002656:	2302      	movs	r3, #2
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800265a:	2302      	movs	r3, #2
 800265c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265e:	f107 0318 	add.w	r3, r7, #24
 8002662:	4618      	mov	r0, r3
 8002664:	f003 f998 	bl	8005998 <HAL_RCC_OscConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800266e:	f000 fbbf 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002672:	230f      	movs	r3, #15
 8002674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002676:	2303      	movs	r3, #3
 8002678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2104      	movs	r1, #4
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fc96 	bl	8005fbc <HAL_RCC_ClockConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002696:	f000 fbab 	bl	8002df0 <Error_Handler>
  }
}
 800269a:	bf00      	nop
 800269c:	3750      	adds	r7, #80	; 0x50
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2220      	movs	r2, #32
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f008 f82f 	bl	800a720 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026d8:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80026de:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026ec:	2204      	movs	r2, #4
 80026ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <MX_ADC1_Init+0x104>)
 80026fe:	2202      	movs	r2, #2
 8002700:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <MX_ADC1_Init+0x104>)
 800270c:	2200      	movs	r2, #0
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002720:	2200      	movs	r2, #0
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800272c:	481e      	ldr	r0, [pc, #120]	; (80027a8 <MX_ADC1_Init+0x104>)
 800272e:	f001 f92d 	bl	800398c <HAL_ADC_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002738:	f000 fb5a 	bl	8002df0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002748:	f002 f95e 	bl	8004a08 <HAL_ADCEx_MultiModeConfigChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002752:	f000 fb4d 	bl	8002df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <MX_ADC1_Init+0x108>)
 8002758:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800275a:	2306      	movs	r3, #6
 800275c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800275e:	2307      	movs	r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002762:	237f      	movs	r3, #127	; 0x7f
 8002764:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002766:	2304      	movs	r3, #4
 8002768:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002774:	f001 fbb8 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800277e:	f000 fb37 	bl	8002df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_ADC1_Init+0x10c>)
 8002784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002786:	230c      	movs	r3, #12
 8002788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <MX_ADC1_Init+0x104>)
 8002790:	f001 fbaa 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800279a:	f000 fb29 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000310 	.word	0x20000310
 80027ac:	1d500080 	.word	0x1d500080
 80027b0:	3ef08000 	.word	0x3ef08000

080027b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	; (800284c <MX_TIM2_Init+0x98>)
 80027d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <MX_TIM2_Init+0x98>)
 80027dc:	22a9      	movs	r2, #169	; 0xa9
 80027de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <MX_TIM2_Init+0x98>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <MX_TIM2_Init+0x98>)
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <MX_TIM2_Init+0x98>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <MX_TIM2_Init+0x98>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027fa:	4814      	ldr	r0, [pc, #80]	; (800284c <MX_TIM2_Init+0x98>)
 80027fc:	f004 f848 	bl	8006890 <HAL_TIM_Base_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002806:	f000 faf3 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800280a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4619      	mov	r1, r3
 8002816:	480d      	ldr	r0, [pc, #52]	; (800284c <MX_TIM2_Init+0x98>)
 8002818:	f004 ffc2 	bl	80077a0 <HAL_TIM_ConfigClockSource>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002822:	f000 fae5 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4806      	ldr	r0, [pc, #24]	; (800284c <MX_TIM2_Init+0x98>)
 8002834:	f005 ff9a 	bl	800876c <HAL_TIMEx_MasterConfigSynchronization>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800283e:	f000 fad7 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200003dc 	.word	0x200003dc

08002850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <MX_TIM3_Init+0x94>)
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <MX_TIM3_Init+0x98>)
 8002872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <MX_TIM3_Init+0x94>)
 8002876:	22a9      	movs	r2, #169	; 0xa9
 8002878:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_TIM3_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_TIM3_Init+0x94>)
 8002882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_TIM3_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <MX_TIM3_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002894:	4813      	ldr	r0, [pc, #76]	; (80028e4 <MX_TIM3_Init+0x94>)
 8002896:	f003 fffb 	bl	8006890 <HAL_TIM_Base_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028a0:	f000 faa6 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <MX_TIM3_Init+0x94>)
 80028b2:	f004 ff75 	bl	80077a0 <HAL_TIM_ConfigClockSource>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028bc:	f000 fa98 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_TIM3_Init+0x94>)
 80028ce:	f005 ff4d 	bl	800876c <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028d8:	f000 fa8a 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200004a8 	.word	0x200004a8
 80028e8:	40000400 	.word	0x40000400

080028ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fe:	463b      	mov	r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	615a      	str	r2, [r3, #20]
 800290e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <MX_TIM4_Init+0xac>)
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <MX_TIM4_Init+0xb0>)
 8002914:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <MX_TIM4_Init+0xac>)
 8002918:	22a9      	movs	r2, #169	; 0xa9
 800291a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <MX_TIM4_Init+0xac>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <MX_TIM4_Init+0xac>)
 8002924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002928:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <MX_TIM4_Init+0xac>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <MX_TIM4_Init+0xac>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002936:	4818      	ldr	r0, [pc, #96]	; (8002998 <MX_TIM4_Init+0xac>)
 8002938:	f004 f8f6 	bl	8006b28 <HAL_TIM_PWM_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002942:	f000 fa55 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4810      	ldr	r0, [pc, #64]	; (8002998 <MX_TIM4_Init+0xac>)
 8002956:	f005 ff09 	bl	800876c <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002960:	f000 fa46 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002964:	2360      	movs	r3, #96	; 0x60
 8002966:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002974:	463b      	mov	r3, r7
 8002976:	2204      	movs	r2, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <MX_TIM4_Init+0xac>)
 800297c:	f004 fdfc 	bl	8007578 <HAL_TIM_PWM_ConfigChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002986:	f000 fa33 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <MX_TIM4_Init+0xac>)
 800298c:	f000 fbbe 	bl	800310c <HAL_TIM_MspPostInit>

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000574 	.word	0x20000574
 800299c:	40000800 	.word	0x40000800

080029a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f007 feb6 	bl	800a720 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <MX_TIM5_Init+0xa4>)
 80029c0:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <MX_TIM5_Init+0xa8>)
 80029c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <MX_TIM5_Init+0xa4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_TIM5_Init+0xa4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <MX_TIM5_Init+0xa4>)
 80029d2:	f04f 32ff 	mov.w	r2, #4294967295
 80029d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <MX_TIM5_Init+0xa4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <MX_TIM5_Init+0xa4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029e4:	2303      	movs	r3, #3
 80029e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029fc:	2301      	movs	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480d      	ldr	r0, [pc, #52]	; (8002a44 <MX_TIM5_Init+0xa4>)
 8002a10:	f004 faf6 	bl	8007000 <HAL_TIM_Encoder_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002a1a:	f000 f9e9 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a26:	463b      	mov	r3, r7
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <MX_TIM5_Init+0xa4>)
 8002a2c:	f005 fe9e 	bl	800876c <HAL_TIMEx_MasterConfigSynchronization>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002a36:	f000 f9db 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	3730      	adds	r7, #48	; 0x30
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000640 	.word	0x20000640
 8002a48:	40000c00 	.word	0x40000c00

08002a4c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <MX_TIM16_Init+0x5c>)
 8002a54:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a58:	22a9      	movs	r2, #169	; 0xa9
 8002a5a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a64:	f240 4279 	movw	r2, #1145	; 0x479
 8002a68:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a7e:	f003 ff07 	bl	8006890 <HAL_TIM_Base_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a88:	f000 f9b2 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002a8c:	2108      	movs	r1, #8
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_TIM16_Init+0x58>)
 8002a90:	f004 f9c0 	bl	8006e14 <HAL_TIM_OnePulse_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002a9a:	f000 f9a9 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000070c 	.word	0x2000070c
 8002aa8:	40014400 	.word	0x40014400

08002aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <MX_USART2_UART_Init+0x98>)
 8002ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ab8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002af8:	4811      	ldr	r0, [pc, #68]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002afa:	f005 ff1d 	bl	8008938 <HAL_UART_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002b04:	f000 f974 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b08:	2100      	movs	r1, #0
 8002b0a:	480d      	ldr	r0, [pc, #52]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002b0c:	f007 fd3d 	bl	800a58a <HAL_UARTEx_SetTxFifoThreshold>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002b16:	f000 f96b 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4808      	ldr	r0, [pc, #32]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002b1e:	f007 fd72 	bl	800a606 <HAL_UARTEx_SetRxFifoThreshold>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002b28:	f000 f962 	bl	8002df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <MX_USART2_UART_Init+0x94>)
 8002b2e:	f007 fcf3 	bl	800a518 <HAL_UARTEx_DisableFifoMode>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002b38:	f000 f95a 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200007d8 	.word	0x200007d8
 8002b44:	40004400 	.word	0x40004400

08002b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_DMA_Init+0x70>)
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <MX_DMA_Init+0x70>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6493      	str	r3, [r2, #72]	; 0x48
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_DMA_Init+0x70>)
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_DMA_Init+0x70>)
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <MX_DMA_Init+0x70>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6493      	str	r3, [r2, #72]	; 0x48
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_DMA_Init+0x70>)
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	200b      	movs	r0, #11
 8002b84:	f002 f923 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b88:	200b      	movs	r0, #11
 8002b8a:	f002 f93a 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	200c      	movs	r0, #12
 8002b94:	f002 f91b 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002b98:	200c      	movs	r0, #12
 8002b9a:	f002 f932 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	200d      	movs	r0, #13
 8002ba4:	f002 f913 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ba8:	200d      	movs	r0, #13
 8002baa:	f002 f92a 	bl	8004e02 <HAL_NVIC_EnableIRQ>

}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000

08002bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd2:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a4c      	ldr	r2, [pc, #304]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002bf0:	f043 0320 	orr.w	r3, r3, #32
 8002bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0e:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	4a40      	ldr	r2, [pc, #256]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <MX_GPIO_Init+0x164>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2120      	movs	r1, #32
 8002c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3a:	f002 fdc9 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2110      	movs	r1, #16
 8002c42:	4838      	ldr	r0, [pc, #224]	; (8002d24 <MX_GPIO_Init+0x168>)
 8002c44:	f002 fdc4 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4831      	ldr	r0, [pc, #196]	; (8002d24 <MX_GPIO_Init+0x168>)
 8002c60:	f002 fc1c 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c64:	2320      	movs	r3, #32
 8002c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7e:	f002 fc0d 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c82:	2310      	movs	r3, #16
 8002c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <MX_GPIO_Init+0x168>)
 8002c9a:	f002 fbff 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8002c9e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	481d      	ldr	r0, [pc, #116]	; (8002d28 <MX_GPIO_Init+0x16c>)
 8002cb4:	f002 fbf2 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002cb8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4816      	ldr	r0, [pc, #88]	; (8002d28 <MX_GPIO_Init+0x16c>)
 8002cce:	f002 fbe5 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480f      	ldr	r0, [pc, #60]	; (8002d24 <MX_GPIO_Init+0x168>)
 8002ce6:	f002 fbd9 	bl	800549c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d02:	f002 fbcb 	bl	800549c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2028      	movs	r0, #40	; 0x28
 8002d0c:	f002 f85f 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d10:	2028      	movs	r0, #40	; 0x28
 8002d12:	f002 f876 	bl	8004e02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	1c54      	adds	r4, r2, #1
 8002d44:	f143 0500 	adc.w	r5, r3, #0
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d4a:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3) // [1 microseconds]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d113      	bne.n	8002d7e <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		QEIEncoder_Update(&QEI, &htim5, micros());
 8002d56:	f000 f831 	bl	8002dbc <micros>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	490d      	ldr	r1, [pc, #52]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002d60:	480d      	ldr	r0, [pc, #52]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002d62:	f7fe fa35 	bl	80011d0 <QEIEncoder_Update>
		QuinticTrajectory_Generator(&quintic, QEI.LinearPosition, 400, 2);
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002d68:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d6c:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002d70:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002d9c <HAL_TIM_PeriodElapsedCallback+0x70>
 8002d74:	eeb0 0a67 	vmov.f32	s0, s15
 8002d78:	4809      	ldr	r0, [pc, #36]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002d7a:	f7ff f973 	bl	8002064 <QuinticTrajectory_Generator>
	}
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200003dc 	.word	0x200003dc
 8002d8c:	20000968 	.word	0x20000968
 8002d90:	200004a8 	.word	0x200004a8
 8002d94:	20000640 	.word	0x20000640
 8002d98:	20000970 	.word	0x20000970
 8002d9c:	43c80000 	.word	0x43c80000
 8002da0:	20000bb0 	.word	0x20000bb0

08002da4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)			// Blue Switch
	{
	}
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <micros>:

uint64_t micros()	// System Time
{
 8002dbc:	b4b0      	push	{r4, r5, r7}
 8002dbe:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <micros+0x2c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <micros+0x30>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	1884      	adds	r4, r0, r2
 8002dd4:	eb41 0503 	adc.w	r5, r1, r3
 8002dd8:	4622      	mov	r2, r4
 8002dda:	462b      	mov	r3, r5
}
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bcb0      	pop	{r4, r5, r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	200003dc 	.word	0x200003dc
 8002dec:	20000968 	.word	0x20000968

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <Error_Handler+0x8>
	...

08002dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_MspInit+0x44>)
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_MspInit+0x44>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_MspInit+0x44>)
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_MspInit+0x44>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_MspInit+0x44>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6593      	str	r3, [r2, #88]	; 0x58
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_MspInit+0x44>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e32:	f002 fda1 	bl	8005978 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b0a0      	sub	sp, #128	; 0x80
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e5c:	f107 0318 	add.w	r3, r7, #24
 8002e60:	2254      	movs	r2, #84	; 0x54
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f007 fc5b 	bl	800a720 <memset>
  if(hadc->Instance==ADC1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e72:	d176      	bne.n	8002f62 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002e7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fab5 	bl	80063f4 <HAL_RCCEx_PeriphCLKConfig>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e90:	f7ff ffae 	bl	8002df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4a34      	ldr	r2, [pc, #208]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb0:	4a2e      	ldr	r2, [pc, #184]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_ADC_MspInit+0x128>)
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002edc:	2302      	movs	r3, #2
 8002ede:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002eec:	4619      	mov	r1, r3
 8002eee:	4820      	ldr	r0, [pc, #128]	; (8002f70 <HAL_ADC_MspInit+0x12c>)
 8002ef0:	f002 fad4 	bl	800549c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f04:	4619      	mov	r1, r3
 8002f06:	481b      	ldr	r0, [pc, #108]	; (8002f74 <HAL_ADC_MspInit+0x130>)
 8002f08:	f002 fac8 	bl	800549c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_ADC_MspInit+0x138>)
 8002f10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f14:	2205      	movs	r2, #5
 8002f16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f48:	f001 ff76 	bl	8004e38 <HAL_DMA_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8002f52:	f7ff ff4d 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f5c:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <HAL_ADC_MspInit+0x134>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f62:	bf00      	nop
 8002f64:	3780      	adds	r7, #128	; 0x80
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	48000800 	.word	0x48000800
 8002f74:	48000400 	.word	0x48000400
 8002f78:	2000037c 	.word	0x2000037c
 8002f7c:	40020030 	.word	0x40020030

08002f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d114      	bne.n	8002fbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	4a25      	ldr	r2, [pc, #148]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	201c      	movs	r0, #28
 8002fb0:	f001 ff0d 	bl	8004dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fb4:	201c      	movs	r0, #28
 8002fb6:	f001 ff24 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002fba:	e032      	b.n	8003022 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_TIM_Base_MspInit+0xb0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d114      	bne.n	8002ff0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc6:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	201d      	movs	r0, #29
 8002fe4:	f001 fef3 	bl	8004dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fe8:	201d      	movs	r0, #29
 8002fea:	f001 ff0a 	bl	8004e02 <HAL_NVIC_EnableIRQ>
}
 8002fee:	e018      	b.n	8003022 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_TIM_Base_MspInit+0xb4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d113      	bne.n	8003022 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	6613      	str	r3, [r2, #96]	; 0x60
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_TIM_Base_MspInit+0xac>)
 8003008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	2019      	movs	r0, #25
 8003018:	f001 fed9 	bl	8004dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800301c:	2019      	movs	r0, #25
 800301e:	f001 fef0 	bl	8004e02 <HAL_NVIC_EnableIRQ>
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	40000400 	.word	0x40000400
 8003034:	40014400 	.word	0x40014400

08003038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_TIM_PWM_MspInit+0x38>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10b      	bne.n	8003062 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_TIM_PWM_MspInit+0x3c>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_TIM_PWM_MspInit+0x3c>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_TIM_PWM_MspInit+0x3c>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40000800 	.word	0x40000800
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d130      	bne.n	80030fc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030ca:	2303      	movs	r3, #3
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030da:	2302      	movs	r3, #2
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e8:	f002 f9d8 	bl	800549c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2100      	movs	r1, #0
 80030f0:	2032      	movs	r0, #50	; 0x32
 80030f2:	f001 fe6c 	bl	8004dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80030f6:	2032      	movs	r0, #50	; 0x32
 80030f8:	f001 fe83 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030fc:	bf00      	nop
 80030fe:	3728      	adds	r7, #40	; 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40000c00 	.word	0x40000c00
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_TIM_MspPostInit+0x68>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d11d      	bne.n	800316a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_TIM_MspPostInit+0x6c>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_TIM_MspPostInit+0x6c>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_TIM_MspPostInit+0x6c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003158:	230a      	movs	r3, #10
 800315a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	4619      	mov	r1, r3
 8003162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003166:	f002 f999 	bl	800549c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800316a:	bf00      	nop
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40000800 	.word	0x40000800
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b09e      	sub	sp, #120	; 0x78
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	2254      	movs	r2, #84	; 0x54
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f007 fabf 	bl	800a720 <memset>
  if(huart->Instance==USART2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4d      	ldr	r2, [pc, #308]	; (80032dc <HAL_UART_MspInit+0x160>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	f040 8092 	bne.w	80032d2 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ae:	2302      	movs	r3, #2
 80031b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 f91a 	bl	80063f4 <HAL_RCCEx_PeriphCLKConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031c6:	f7ff fe13 	bl	8002df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <HAL_UART_MspInit+0x164>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	4a44      	ldr	r2, [pc, #272]	; (80032e0 <HAL_UART_MspInit+0x164>)
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	6593      	str	r3, [r2, #88]	; 0x58
 80031d6:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_UART_MspInit+0x164>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_UART_MspInit+0x164>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4a3e      	ldr	r2, [pc, #248]	; (80032e0 <HAL_UART_MspInit+0x164>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_UART_MspInit+0x164>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031fa:	230c      	movs	r3, #12
 80031fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800320a:	2307      	movs	r3, #7
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003212:	4619      	mov	r1, r3
 8003214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003218:	f002 f940 	bl	800549c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_UART_MspInit+0x168>)
 800321e:	4a32      	ldr	r2, [pc, #200]	; (80032e8 <HAL_UART_MspInit+0x16c>)
 8003220:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003224:	221a      	movs	r2, #26
 8003226:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_UART_MspInit+0x168>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_UART_MspInit+0x168>)
 800323c:	2200      	movs	r2, #0
 800323e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003248:	2200      	movs	r2, #0
 800324a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_UART_MspInit+0x168>)
 800324e:	2200      	movs	r2, #0
 8003250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003252:	4824      	ldr	r0, [pc, #144]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003254:	f001 fdf0 	bl	8004e38 <HAL_DMA_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800325e:	f7ff fdc7 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_UART_MspInit+0x168>)
 8003266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800326a:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <HAL_UART_MspInit+0x168>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_UART_MspInit+0x170>)
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_UART_MspInit+0x174>)
 8003274:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_UART_MspInit+0x170>)
 8003278:	221b      	movs	r2, #27
 800327a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_UART_MspInit+0x170>)
 800327e:	2210      	movs	r2, #16
 8003280:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <HAL_UART_MspInit+0x170>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_UART_MspInit+0x170>)
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_UART_MspInit+0x170>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_UART_MspInit+0x170>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_UART_MspInit+0x170>)
 800329c:	2200      	movs	r2, #0
 800329e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_UART_MspInit+0x170>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032a6:	4811      	ldr	r0, [pc, #68]	; (80032ec <HAL_UART_MspInit+0x170>)
 80032a8:	f001 fdc6 	bl	8004e38 <HAL_DMA_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80032b2:	f7ff fd9d 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <HAL_UART_MspInit+0x170>)
 80032ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80032bc:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <HAL_UART_MspInit+0x170>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	2026      	movs	r0, #38	; 0x26
 80032c8:	f001 fd81 	bl	8004dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032cc:	2026      	movs	r0, #38	; 0x26
 80032ce:	f001 fd98 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032d2:	bf00      	nop
 80032d4:	3778      	adds	r7, #120	; 0x78
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40021000 	.word	0x40021000
 80032e4:	200008a4 	.word	0x200008a4
 80032e8:	4002001c 	.word	0x4002001c
 80032ec:	20000904 	.word	0x20000904
 80032f0:	40020008 	.word	0x40020008

080032f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032f8:	e7fe      	b.n	80032f8 <NMI_Handler+0x4>

080032fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032fe:	e7fe      	b.n	80032fe <HardFault_Handler+0x4>

08003300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <MemManage_Handler+0x4>

08003306 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <BusFault_Handler+0x4>

0800330c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <UsageFault_Handler+0x4>

08003312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003340:	f000 f8e8 	bl	8003514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}

08003348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <DMA1_Channel1_IRQHandler+0x10>)
 800334e:	f001 ff56 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000904 	.word	0x20000904

0800335c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <DMA1_Channel2_IRQHandler+0x10>)
 8003362:	f001 ff4c 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200008a4 	.word	0x200008a4

08003370 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <DMA1_Channel3_IRQHandler+0x10>)
 8003376:	f001 ff42 	bl	80051fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000037c 	.word	0x2000037c

08003384 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800338a:	f003 ff7b 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000070c 	.word	0x2000070c

08003398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <TIM2_IRQHandler+0x10>)
 800339e:	f003 ff71 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200003dc 	.word	0x200003dc

080033ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <TIM3_IRQHandler+0x10>)
 80033b2:	f003 ff67 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200004a8 	.word	0x200004a8

080033c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <USART2_IRQHandler+0x10>)
 80033c6:	f005 fc9d 	bl	8008d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200007d8 	.word	0x200007d8

080033d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033dc:	f002 fa10 	bl	8005800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM5_IRQHandler+0x10>)
 80033ea:	f003 ff4b 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000640 	.word	0x20000640

080033f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <SystemInit+0x20>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <SystemInit+0x20>)
 8003404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800341c:	480d      	ldr	r0, [pc, #52]	; (8003454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800341e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003420:	f7ff ffea 	bl	80033f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003424:	480c      	ldr	r0, [pc, #48]	; (8003458 <LoopForever+0x6>)
  ldr r1, =_edata
 8003426:	490d      	ldr	r1, [pc, #52]	; (800345c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <LoopForever+0xe>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800342c:	e002      	b.n	8003434 <LoopCopyDataInit>

0800342e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003432:	3304      	adds	r3, #4

08003434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003438:	d3f9      	bcc.n	800342e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800343c:	4c0a      	ldr	r4, [pc, #40]	; (8003468 <LoopForever+0x16>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003440:	e001      	b.n	8003446 <LoopFillZerobss>

08003442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003444:	3204      	adds	r2, #4

08003446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003448:	d3fb      	bcc.n	8003442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800344a:	f007 f977 	bl	800a73c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800344e:	f7fe fff1 	bl	8002434 <main>

08003452 <LoopForever>:

LoopForever:
    b LoopForever
 8003452:	e7fe      	b.n	8003452 <LoopForever>
  ldr   r0, =_estack
 8003454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800345c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8003460:	0800afc8 	.word	0x0800afc8
  ldr r2, =_sbss
 8003464:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003468:	2000139c 	.word	0x2000139c

0800346c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800346c:	e7fe      	b.n	800346c <ADC1_2_IRQHandler>

0800346e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003478:	2003      	movs	r0, #3
 800347a:	f001 fc9d 	bl	8004db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800347e:	2000      	movs	r0, #0
 8003480:	f000 f80e 	bl	80034a0 <HAL_InitTick>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	71fb      	strb	r3, [r7, #7]
 800348e:	e001      	b.n	8003494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003490:	f7ff fcb4 	bl	8002dfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003494:	79fb      	ldrb	r3, [r7, #7]

}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_InitTick+0x68>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d022      	beq.n	80034fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_InitTick+0x6c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_InitTick+0x68>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fca8 	bl	8004e1e <HAL_SYSTICK_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	d809      	bhi.n	80034ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034da:	2200      	movs	r2, #0
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	f001 fc74 	bl	8004dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <HAL_InitTick+0x70>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e007      	b.n	80034fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	e004      	b.n	80034fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e001      	b.n	80034fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000224 	.word	0x20000224
 800350c:	2000021c 	.word	0x2000021c
 8003510:	20000220 	.word	0x20000220

08003514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_IncTick+0x1c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_IncTick+0x20>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4413      	add	r3, r2
 8003522:	4a03      	ldr	r2, [pc, #12]	; (8003530 <HAL_IncTick+0x1c>)
 8003524:	6013      	str	r3, [r2, #0]
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20001260 	.word	0x20001260
 8003534:	20000224 	.word	0x20000224

08003538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return uwTick;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_GetTick+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20001260 	.word	0x20001260

08003550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	609a      	str	r2, [r3, #8]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3360      	adds	r3, #96	; 0x60
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <LL_ADC_SetOffset+0x44>)
 80035da:	4013      	ands	r3, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	03fff000 	.word	0x03fff000

08003600 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3360      	adds	r3, #96	; 0x60
 800360e:	461a      	mov	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3360      	adds	r3, #96	; 0x60
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3360      	adds	r3, #96	; 0x60
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	431a      	orrs	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3360      	adds	r3, #96	; 0x60
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	431a      	orrs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	615a      	str	r2, [r3, #20]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800371a:	b480      	push	{r7}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3330      	adds	r3, #48	; 0x30
 800372a:	461a      	mov	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	4413      	add	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	211f      	movs	r1, #31
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	f003 011f 	and.w	r1, r3, #31
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3314      	adds	r3, #20
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	0e5b      	lsrs	r3, r3, #25
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	4413      	add	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	0d1b      	lsrs	r3, r3, #20
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2107      	movs	r1, #7
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0d1b      	lsrs	r3, r3, #20
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	431a      	orrs	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e0:	43db      	mvns	r3, r3
 80037e2:	401a      	ands	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0318 	and.w	r3, r3, #24
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <LL_ADC_SetChannelSingleDiff+0x44>)
 80037ec:	40d9      	lsrs	r1, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	400b      	ands	r3, r1
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	0007ffff 	.word	0x0007ffff

08003810 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 031f 	and.w	r3, r3, #31
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800383c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6093      	str	r3, [r2, #8]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003864:	d101      	bne.n	800386a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800388c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b4:	d101      	bne.n	80038ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <LL_ADC_IsEnabled+0x18>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <LL_ADC_IsEnabled+0x1a>
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003926:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800392a:	f043 0204 	orr.w	r2, r3, #4
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d101      	bne.n	8003956 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1a9      	b.n	8003cfa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fa45 	bl	8002e44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff3f 	bl	8003850 <LL_ADC_IsDeepPowerDownEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff25 	bl	800382c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff5a 	bl	80038a0 <LL_ADC_IsInternalRegulatorEnabled>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d115      	bne.n	8003a1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff3e 	bl	8003878 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039fc:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_ADC_Init+0x2e4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	099b      	lsrs	r3, r3, #6
 8003a02:	4a9c      	ldr	r2, [pc, #624]	; (8003c74 <HAL_ADC_Init+0x2e8>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a10:	e002      	b.n	8003a18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f9      	bne.n	8003a12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff3c 	bl	80038a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff75 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 8003a54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 8142 	bne.w	8003ce8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 813e 	bne.w	8003ce8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a74:	f043 0202 	orr.w	r2, r3, #2
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff35 	bl	80038f0 <LL_ADC_IsEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d141      	bne.n	8003b10 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a94:	d004      	beq.n	8003aa0 <HAL_ADC_Init+0x114>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a77      	ldr	r2, [pc, #476]	; (8003c78 <HAL_ADC_Init+0x2ec>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10f      	bne.n	8003ac0 <HAL_ADC_Init+0x134>
 8003aa0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003aa4:	f7ff ff24 	bl	80038f0 <LL_ADC_IsEnabled>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4873      	ldr	r0, [pc, #460]	; (8003c78 <HAL_ADC_Init+0x2ec>)
 8003aac:	f7ff ff20 	bl	80038f0 <LL_ADC_IsEnabled>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4323      	orrs	r3, r4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e012      	b.n	8003ae6 <HAL_ADC_Init+0x15a>
 8003ac0:	486e      	ldr	r0, [pc, #440]	; (8003c7c <HAL_ADC_Init+0x2f0>)
 8003ac2:	f7ff ff15 	bl	80038f0 <LL_ADC_IsEnabled>
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	486d      	ldr	r0, [pc, #436]	; (8003c80 <HAL_ADC_Init+0x2f4>)
 8003aca:	f7ff ff11 	bl	80038f0 <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	431c      	orrs	r4, r3
 8003ad2:	486c      	ldr	r0, [pc, #432]	; (8003c84 <HAL_ADC_Init+0x2f8>)
 8003ad4:	f7ff ff0c 	bl	80038f0 <LL_ADC_IsEnabled>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4323      	orrs	r3, r4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af2:	d004      	beq.n	8003afe <HAL_ADC_Init+0x172>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5f      	ldr	r2, [pc, #380]	; (8003c78 <HAL_ADC_Init+0x2ec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_Init+0x176>
 8003afe:	4a62      	ldr	r2, [pc, #392]	; (8003c88 <HAL_ADC_Init+0x2fc>)
 8003b00:	e000      	b.n	8003b04 <HAL_ADC_Init+0x178>
 8003b02:	4a62      	ldr	r2, [pc, #392]	; (8003c8c <HAL_ADC_Init+0x300>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7ff fd20 	bl	8003550 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7f5b      	ldrb	r3, [r3, #29]
 8003b14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d106      	bne.n	8003b4c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	045b      	lsls	r3, r3, #17
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <HAL_ADC_Init+0x304>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fee4 	bl	8003964 <LL_ADC_INJ_IsConversionOngoing>
 8003b9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d17f      	bne.n	8003ca4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d17c      	bne.n	8003ca4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bb6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc6:	f023 0302 	bic.w	r3, r3, #2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	69b9      	ldr	r1, [r7, #24]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bf4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6911      	ldr	r1, [r2, #16]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003c0a:	e013      	b.n	8003c34 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12a      	bne.n	8003c94 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c60:	430a      	orrs	r2, r1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	e019      	b.n	8003ca4 <HAL_ADC_Init+0x318>
 8003c70:	2000021c 	.word	0x2000021c
 8003c74:	053e2d63 	.word	0x053e2d63
 8003c78:	50000100 	.word	0x50000100
 8003c7c:	50000400 	.word	0x50000400
 8003c80:	50000500 	.word	0x50000500
 8003c84:	50000600 	.word	0x50000600
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	50000700 	.word	0x50000700
 8003c90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10c      	bne.n	8003cc6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f023 010f 	bic.w	r1, r3, #15
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	1e5a      	subs	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8003cc4:	e007      	b.n	8003cd6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 020f 	bic.w	r2, r2, #15
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ce6:	e007      	b.n	8003cf8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f043 0210 	orr.w	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd90      	pop	{r4, r7, pc}
 8003d02:	bf00      	nop

08003d04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d18:	d004      	beq.n	8003d24 <HAL_ADC_Start_DMA+0x20>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5a      	ldr	r2, [pc, #360]	; (8003e88 <HAL_ADC_Start_DMA+0x184>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_ADC_Start_DMA+0x24>
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_ADC_Start_DMA+0x188>)
 8003d26:	e000      	b.n	8003d2a <HAL_ADC_Start_DMA+0x26>
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_ADC_Start_DMA+0x18c>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fd70 	bl	8003810 <LL_ADC_GetMultimode>
 8003d30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fe01 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 809b 	bne.w	8003e7a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADC_Start_DMA+0x4e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e096      	b.n	8003e80 <HAL_ADC_Start_DMA+0x17c>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4d      	ldr	r2, [pc, #308]	; (8003e94 <HAL_ADC_Start_DMA+0x190>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d008      	beq.n	8003d76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b09      	cmp	r3, #9
 8003d74:	d17a      	bne.n	8003e6c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fcf6 	bl	8004768 <ADC_Enable>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d16d      	bne.n	8003e62 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_ADC_Start_DMA+0x184>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_ADC_Start_DMA+0xb4>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <HAL_ADC_Start_DMA+0x194>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d002      	beq.n	8003db4 <HAL_ADC_Start_DMA+0xb0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	e003      	b.n	8003dbc <HAL_ADC_Start_DMA+0xb8>
 8003db4:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_ADC_Start_DMA+0x198>)
 8003db6:	e001      	b.n	8003dbc <HAL_ADC_Start_DMA+0xb8>
 8003db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d002      	beq.n	8003dca <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	f023 0206 	bic.w	r2, r3, #6
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
 8003dee:	e002      	b.n	8003df6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <HAL_ADC_Start_DMA+0x19c>)
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	4a28      	ldr	r2, [pc, #160]	; (8003ea4 <HAL_ADC_Start_DMA+0x1a0>)
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <HAL_ADC_Start_DMA+0x1a4>)
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	221c      	movs	r2, #28
 8003e14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0210 	orr.w	r2, r2, #16
 8003e2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3340      	adds	r3, #64	; 0x40
 8003e48:	4619      	mov	r1, r3
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f001 f89b 	bl	8004f88 <HAL_DMA_Start_IT>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fd5b 	bl	8003916 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003e60:	e00d      	b.n	8003e7e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003e6a:	e008      	b.n	8003e7e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003e78:	e001      	b.n	8003e7e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	50000100 	.word	0x50000100
 8003e8c:	50000300 	.word	0x50000300
 8003e90:	50000700 	.word	0x50000700
 8003e94:	50000600 	.word	0x50000600
 8003e98:	50000500 	.word	0x50000500
 8003e9c:	50000400 	.word	0x50000400
 8003ea0:	08004895 	.word	0x08004895
 8003ea4:	0800496d 	.word	0x0800496d
 8003ea8:	08004989 	.word	0x08004989

08003eac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0b6      	sub	sp, #216	; 0xd8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x24>
 8003f06:	2302      	movs	r3, #2
 8003f08:	f000 bc13 	b.w	8004732 <HAL_ADC_ConfigChannel+0x84a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fd10 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 83f3 	bne.w	800470c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f7ff fbf1 	bl	800371a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fcfe 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 8003f42:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd0a 	bl	8003964 <LL_ADC_INJ_IsConversionOngoing>
 8003f50:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 81d9 	bne.w	8004310 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 81d4 	bne.w	8004310 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f70:	d10f      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7ff fbf8 	bl	8003772 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fb9f 	bl	80036ce <LL_ADC_SetSamplingTimeCommonConfig>
 8003f90:	e00e      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7ff fbe7 	bl	8003772 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fb8f 	bl	80036ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	08db      	lsrs	r3, r3, #3
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d022      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6919      	ldr	r1, [r3, #16]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fe2:	f7ff fae9 	bl	80035b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6919      	ldr	r1, [r3, #16]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7ff fb35 	bl	8003662 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <HAL_ADC_ConfigChannel+0x126>
 8004008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800400c:	e000      	b.n	8004010 <HAL_ADC_ConfigChannel+0x128>
 800400e:	2300      	movs	r3, #0
 8004010:	461a      	mov	r2, r3
 8004012:	f7ff fb41 	bl	8003698 <LL_ADC_SetOffsetSaturation>
 8004016:	e17b      	b.n	8004310 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff faee 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x15c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fae3 	bl	8003600 <LL_ADC_GetOffsetChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	f003 021f 	and.w	r2, r3, #31
 8004042:	e01e      	b.n	8004082 <HAL_ADC_ConfigChannel+0x19a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fad8 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800406a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004072:	2320      	movs	r3, #32
 8004074:	e004      	b.n	8004080 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_ADC_ConfigChannel+0x1b2>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	0e9b      	lsrs	r3, r3, #26
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	e018      	b.n	80040cc <HAL_ADC_ConfigChannel+0x1e4>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80040ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80040b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040be:	2320      	movs	r3, #32
 80040c0:	e004      	b.n	80040cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d106      	bne.n	80040de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff faa7 	bl	800362c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fa8b 	bl	8003600 <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_ADC_ConfigChannel+0x222>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fa80 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	0e9b      	lsrs	r3, r3, #26
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	e01e      	b.n	8004148 <HAL_ADC_ConfigChannel+0x260>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fa75 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800412c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e004      	b.n	8004146 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800413c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x278>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	e018      	b.n	8004192 <HAL_ADC_ConfigChannel+0x2aa>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004174:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800417c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e004      	b.n	8004192 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	2101      	movs	r1, #1
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fa44 	bl	800362c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fa28 	bl	8003600 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x2e8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fa1d 	bl	8003600 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	f003 021f 	and.w	r2, r3, #31
 80041ce:	e01e      	b.n	800420e <HAL_ADC_ConfigChannel+0x326>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fa12 	bl	8003600 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80041ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80041f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80041fe:	2320      	movs	r3, #32
 8004200:	e004      	b.n	800420c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x33e>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	e016      	b.n	8004254 <HAL_ADC_ConfigChannel+0x36c>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800423a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800423e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e004      	b.n	8004254 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800424a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004254:	429a      	cmp	r2, r3
 8004256:	d106      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2200      	movs	r2, #0
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff f9e3 	bl	800362c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2103      	movs	r1, #3
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff f9c7 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004272:	4603      	mov	r3, r0
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x3aa>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2103      	movs	r1, #3
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f9bc 	bl	8003600 <LL_ADC_GetOffsetChannel>
 8004288:	4603      	mov	r3, r0
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	e017      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x3da>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2103      	movs	r1, #3
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff f9b1 	bl	8003600 <LL_ADC_GetOffsetChannel>
 800429e:	4603      	mov	r3, r0
 80042a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80042aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80042ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80042b4:	2320      	movs	r3, #32
 80042b6:	e003      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_ADC_ConfigChannel+0x3f2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	0e9b      	lsrs	r3, r3, #26
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	e011      	b.n	80042fe <HAL_ADC_ConfigChannel+0x416>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80042e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80042ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e003      	b.n	80042fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042fe:	429a      	cmp	r2, r3
 8004300:	d106      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	2103      	movs	r1, #3
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f98e 	bl	800362c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff faeb 	bl	80038f0 <LL_ADC_IsEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 813d 	bne.w	800459c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	f7ff fa4a 	bl	80037c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4aa2      	ldr	r2, [pc, #648]	; (80045c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f040 812e 	bne.w	800459c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x480>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2b09      	cmp	r3, #9
 800435e:	bf94      	ite	ls
 8004360:	2301      	movls	r3, #1
 8004362:	2300      	movhi	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e019      	b.n	800439c <HAL_ADC_ConfigChannel+0x4b4>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004378:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800437a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e003      	b.n	800438c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2b09      	cmp	r3, #9
 8004394:	bf94      	ite	ls
 8004396:	2301      	movls	r3, #1
 8004398:	2300      	movhi	r3, #0
 800439a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800439c:	2b00      	cmp	r3, #0
 800439e:	d079      	beq.n	8004494 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x4d4>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	3301      	adds	r3, #1
 80043b4:	069b      	lsls	r3, r3, #26
 80043b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043ba:	e015      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x500>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80043ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80043d4:	2320      	movs	r3, #32
 80043d6:	e003      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80043d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	069b      	lsls	r3, r3, #26
 80043e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x520>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	3301      	adds	r3, #1
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	e017      	b.n	8004438 <HAL_ADC_ConfigChannel+0x550>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004418:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800441a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004420:	2320      	movs	r3, #32
 8004422:	e003      	b.n	800442c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	ea42 0103 	orr.w	r1, r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <HAL_ADC_ConfigChannel+0x576>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0e9b      	lsrs	r3, r3, #26
 800444e:	3301      	adds	r3, #1
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	051b      	lsls	r3, r3, #20
 800445c:	e018      	b.n	8004490 <HAL_ADC_ConfigChannel+0x5a8>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800446c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004476:	2320      	movs	r3, #32
 8004478:	e003      	b.n	8004482 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800447a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	3301      	adds	r3, #1
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004490:	430b      	orrs	r3, r1
 8004492:	e07e      	b.n	8004592 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x5c8>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	3301      	adds	r3, #1
 80044a8:	069b      	lsls	r3, r3, #26
 80044aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ae:	e015      	b.n	80044dc <HAL_ADC_ConfigChannel+0x5f4>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e003      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	069b      	lsls	r3, r3, #26
 80044d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x614>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	3301      	adds	r3, #1
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	e017      	b.n	800452c <HAL_ADC_ConfigChannel+0x644>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	61fb      	str	r3, [r7, #28]
  return result;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004514:	2320      	movs	r3, #32
 8004516:	e003      	b.n	8004520 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3301      	adds	r3, #1
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	ea42 0103 	orr.w	r1, r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x670>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	3301      	adds	r3, #1
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	3b1e      	subs	r3, #30
 8004550:	051b      	lsls	r3, r3, #20
 8004552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004556:	e01b      	b.n	8004590 <HAL_ADC_ConfigChannel+0x6a8>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	613b      	str	r3, [r7, #16]
  return result;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e003      	b.n	800457c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f003 021f 	and.w	r2, r3, #31
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	3b1e      	subs	r3, #30
 800458a:	051b      	lsls	r3, r3, #20
 800458c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004596:	4619      	mov	r1, r3
 8004598:	f7ff f8eb 	bl	8003772 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80be 	beq.w	8004726 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b2:	d004      	beq.n	80045be <HAL_ADC_ConfigChannel+0x6d6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_ADC_ConfigChannel+0x6e4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10a      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x6ec>
 80045be:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80045c0:	e009      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x6ee>
 80045c2:	bf00      	nop
 80045c4:	407f0000 	.word	0x407f0000
 80045c8:	80080000 	.word	0x80080000
 80045cc:	50000100 	.word	0x50000100
 80045d0:	50000300 	.word	0x50000300
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_ADC_ConfigChannel+0x854>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe ffe0 	bl	800359c <LL_ADC_GetCommonPathInternalCh>
 80045dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a56      	ldr	r2, [pc, #344]	; (8004740 <HAL_ADC_ConfigChannel+0x858>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_ADC_ConfigChannel+0x70c>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a55      	ldr	r2, [pc, #340]	; (8004744 <HAL_ADC_ConfigChannel+0x85c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d13a      	bne.n	800466a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d134      	bne.n	800466a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004608:	d005      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x72e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4e      	ldr	r2, [pc, #312]	; (8004748 <HAL_ADC_ConfigChannel+0x860>)
 8004610:	4293      	cmp	r3, r2
 8004612:	f040 8085 	bne.w	8004720 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461e:	d004      	beq.n	800462a <HAL_ADC_ConfigChannel+0x742>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a49      	ldr	r2, [pc, #292]	; (800474c <HAL_ADC_ConfigChannel+0x864>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x746>
 800462a:	4a49      	ldr	r2, [pc, #292]	; (8004750 <HAL_ADC_ConfigChannel+0x868>)
 800462c:	e000      	b.n	8004630 <HAL_ADC_ConfigChannel+0x748>
 800462e:	4a43      	ldr	r2, [pc, #268]	; (800473c <HAL_ADC_ConfigChannel+0x854>)
 8004630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7fe ff9b 	bl	8003576 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004640:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_ADC_ConfigChannel+0x86c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	4a44      	ldr	r2, [pc, #272]	; (8004758 <HAL_ADC_ConfigChannel+0x870>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800465a:	e002      	b.n	8004662 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f9      	bne.n	800465c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004668:	e05a      	b.n	8004720 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3b      	ldr	r2, [pc, #236]	; (800475c <HAL_ADC_ConfigChannel+0x874>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d125      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11f      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <HAL_ADC_ConfigChannel+0x864>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d104      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x7ac>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a34      	ldr	r2, [pc, #208]	; (8004760 <HAL_ADC_ConfigChannel+0x878>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d047      	beq.n	8004724 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800469c:	d004      	beq.n	80046a8 <HAL_ADC_ConfigChannel+0x7c0>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2a      	ldr	r2, [pc, #168]	; (800474c <HAL_ADC_ConfigChannel+0x864>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x7c4>
 80046a8:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_ADC_ConfigChannel+0x868>)
 80046aa:	e000      	b.n	80046ae <HAL_ADC_ConfigChannel+0x7c6>
 80046ac:	4a23      	ldr	r2, [pc, #140]	; (800473c <HAL_ADC_ConfigChannel+0x854>)
 80046ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fe ff5c 	bl	8003576 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046be:	e031      	b.n	8004724 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <HAL_ADC_ConfigChannel+0x87c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d12d      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d127      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1c      	ldr	r2, [pc, #112]	; (800474c <HAL_ADC_ConfigChannel+0x864>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e8:	d004      	beq.n	80046f4 <HAL_ADC_ConfigChannel+0x80c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_ADC_ConfigChannel+0x864>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x810>
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_ADC_ConfigChannel+0x868>)
 80046f6:	e000      	b.n	80046fa <HAL_ADC_ConfigChannel+0x812>
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <HAL_ADC_ConfigChannel+0x854>)
 80046fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe ff36 	bl	8003576 <LL_ADC_SetCommonPathInternalCh>
 800470a:	e00c      	b.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800471e:	e002      	b.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004724:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800472e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004732:	4618      	mov	r0, r3
 8004734:	37d8      	adds	r7, #216	; 0xd8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	50000700 	.word	0x50000700
 8004740:	c3210000 	.word	0xc3210000
 8004744:	90c00010 	.word	0x90c00010
 8004748:	50000600 	.word	0x50000600
 800474c:	50000100 	.word	0x50000100
 8004750:	50000300 	.word	0x50000300
 8004754:	2000021c 	.word	0x2000021c
 8004758:	053e2d63 	.word	0x053e2d63
 800475c:	c7520000 	.word	0xc7520000
 8004760:	50000500 	.word	0x50000500
 8004764:	cb840000 	.word	0xcb840000

08004768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff f8b9 	bl	80038f0 <LL_ADC_IsEnabled>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d176      	bne.n	8004872 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	4b3c      	ldr	r3, [pc, #240]	; (800487c <ADC_Enable+0x114>)
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e062      	b.n	8004874 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f888 	bl	80038c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047c0:	d004      	beq.n	80047cc <ADC_Enable+0x64>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	; (8004880 <ADC_Enable+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <ADC_Enable+0x68>
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <ADC_Enable+0x11c>)
 80047ce:	e000      	b.n	80047d2 <ADC_Enable+0x6a>
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <ADC_Enable+0x120>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fee2 	bl	800359c <LL_ADC_GetCommonPathInternalCh>
 80047d8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d013      	beq.n	800480a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047e2:	4b2a      	ldr	r3, [pc, #168]	; (800488c <ADC_Enable+0x124>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a29      	ldr	r2, [pc, #164]	; (8004890 <ADC_Enable+0x128>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047fc:	e002      	b.n	8004804 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3b01      	subs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f9      	bne.n	80047fe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800480a:	f7fe fe95 	bl	8003538 <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004810:	e028      	b.n	8004864 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f86a 	bl	80038f0 <LL_ADC_IsEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff f84e 	bl	80038c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800482c:	f7fe fe84 	bl	8003538 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d914      	bls.n	8004864 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d00d      	beq.n	8004864 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	f043 0210 	orr.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e007      	b.n	8004874 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b01      	cmp	r3, #1
 8004870:	d1cf      	bne.n	8004812 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	8000003f 	.word	0x8000003f
 8004880:	50000100 	.word	0x50000100
 8004884:	50000300 	.word	0x50000300
 8004888:	50000700 	.word	0x50000700
 800488c:	2000021c 	.word	0x2000021c
 8004890:	053e2d63 	.word	0x053e2d63

08004894 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d14b      	bne.n	8004946 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d021      	beq.n	800490c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe ff11 	bl	80036f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d032      	beq.n	800493e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d12b      	bne.n	800493e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11f      	bne.n	800493e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	f043 0201 	orr.w	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	65da      	str	r2, [r3, #92]	; 0x5c
 800490a:	e018      	b.n	800493e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d111      	bne.n	800493e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	f043 0201 	orr.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fab4 	bl	8003eac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004944:	e00e      	b.n	8004964 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fabe 	bl	8003ed4 <HAL_ADC_ErrorCallback>
}
 8004958:	e004      	b.n	8004964 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff faa0 	bl	8003ec0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	f043 0204 	orr.w	r2, r3, #4
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff fa90 	bl	8003ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <LL_ADC_IsEnabled>:
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <LL_ADC_IsEnabled+0x18>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <LL_ADC_IsEnabled+0x1a>
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d101      	bne.n	80049fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b0a1      	sub	sp, #132	; 0x84
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0e7      	b.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004a32:	2300      	movs	r3, #0
 8004a34:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3e:	d102      	bne.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a40:	4b6f      	ldr	r3, [pc, #444]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e009      	b.n	8004a5a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6e      	ldr	r2, [pc, #440]	; (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004a50:	4b6d      	ldr	r3, [pc, #436]	; (8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	e001      	b.n	8004a5a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0be      	b.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff ffb1 	bl	80049e2 <LL_ADC_REG_IsConversionOngoing>
 8004a80:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff ffab 	bl	80049e2 <LL_ADC_REG_IsConversionOngoing>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 80a0 	bne.w	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 809c 	bne.w	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aa4:	d004      	beq.n	8004ab0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a55      	ldr	r2, [pc, #340]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004ab0:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004ab2:	e000      	b.n	8004ab6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ab4:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004ab6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d04b      	beq.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ad2:	035b      	lsls	r3, r3, #13
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ada:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ae4:	d004      	beq.n	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a45      	ldr	r2, [pc, #276]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10f      	bne.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004af0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004af4:	f7ff ff62 	bl	80049bc <LL_ADC_IsEnabled>
 8004af8:	4604      	mov	r4, r0
 8004afa:	4841      	ldr	r0, [pc, #260]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004afc:	f7ff ff5e 	bl	80049bc <LL_ADC_IsEnabled>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4323      	orrs	r3, r4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e012      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004b10:	483c      	ldr	r0, [pc, #240]	; (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b12:	f7ff ff53 	bl	80049bc <LL_ADC_IsEnabled>
 8004b16:	4604      	mov	r4, r0
 8004b18:	483b      	ldr	r0, [pc, #236]	; (8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b1a:	f7ff ff4f 	bl	80049bc <LL_ADC_IsEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	431c      	orrs	r4, r3
 8004b22:	483c      	ldr	r0, [pc, #240]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b24:	f7ff ff4a 	bl	80049bc <LL_ADC_IsEnabled>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4323      	orrs	r3, r4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d056      	beq.n	8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b42:	f023 030f 	bic.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6892      	ldr	r2, [r2, #8]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	431a      	orrs	r2, r3
 8004b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b54:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b56:	e047      	b.n	8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b6c:	d004      	beq.n	8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10f      	bne.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004b78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b7c:	f7ff ff1e 	bl	80049bc <LL_ADC_IsEnabled>
 8004b80:	4604      	mov	r4, r0
 8004b82:	481f      	ldr	r0, [pc, #124]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b84:	f7ff ff1a 	bl	80049bc <LL_ADC_IsEnabled>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4323      	orrs	r3, r4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e012      	b.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b98:	481a      	ldr	r0, [pc, #104]	; (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b9a:	f7ff ff0f 	bl	80049bc <LL_ADC_IsEnabled>
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4819      	ldr	r0, [pc, #100]	; (8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ba2:	f7ff ff0b 	bl	80049bc <LL_ADC_IsEnabled>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	431c      	orrs	r4, r3
 8004baa:	481a      	ldr	r0, [pc, #104]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004bac:	f7ff ff06 	bl	80049bc <LL_ADC_IsEnabled>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4323      	orrs	r3, r4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d012      	beq.n	8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bd0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bd2:	e009      	b.n	8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004be6:	e000      	b.n	8004bea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004be8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bf2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3784      	adds	r7, #132	; 0x84
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	50000100 	.word	0x50000100
 8004c04:	50000400 	.word	0x50000400
 8004c08:	50000500 	.word	0x50000500
 8004c0c:	50000300 	.word	0x50000300
 8004c10:	50000700 	.word	0x50000700
 8004c14:	50000600 	.word	0x50000600

08004c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <__NVIC_SetPriorityGrouping+0x44>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c34:	4013      	ands	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4a:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <__NVIC_SetPriorityGrouping+0x44>)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	60d3      	str	r3, [r2, #12]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <__NVIC_GetPriorityGrouping+0x18>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f003 0307 	and.w	r3, r3, #7
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	db0b      	blt.n	8004ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	f003 021f 	and.w	r2, r3, #31
 8004c94:	4907      	ldr	r1, [pc, #28]	; (8004cb4 <__NVIC_EnableIRQ+0x38>)
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	e000e100 	.word	0xe000e100

08004cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	6039      	str	r1, [r7, #0]
 8004cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db0a      	blt.n	8004ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	490c      	ldr	r1, [pc, #48]	; (8004d04 <__NVIC_SetPriority+0x4c>)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ce0:	e00a      	b.n	8004cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4908      	ldr	r1, [pc, #32]	; (8004d08 <__NVIC_SetPriority+0x50>)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	3b04      	subs	r3, #4
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	761a      	strb	r2, [r3, #24]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000e100 	.word	0xe000e100
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f1c3 0307 	rsb	r3, r3, #7
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf28      	it	cs
 8004d2a:	2304      	movcs	r3, #4
 8004d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3304      	adds	r3, #4
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d902      	bls.n	8004d3c <NVIC_EncodePriority+0x30>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3b03      	subs	r3, #3
 8004d3a:	e000      	b.n	8004d3e <NVIC_EncodePriority+0x32>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	401a      	ands	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d54:	f04f 31ff 	mov.w	r1, #4294967295
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	43d9      	mvns	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d64:	4313      	orrs	r3, r2
         );
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3724      	adds	r7, #36	; 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d84:	d301      	bcc.n	8004d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d86:	2301      	movs	r3, #1
 8004d88:	e00f      	b.n	8004daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <SysTick_Config+0x40>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d92:	210f      	movs	r1, #15
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	f7ff ff8e 	bl	8004cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <SysTick_Config+0x40>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <SysTick_Config+0x40>)
 8004da4:	2207      	movs	r2, #7
 8004da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	e000e010 	.word	0xe000e010

08004db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff29 	bl	8004c18 <__NVIC_SetPriorityGrouping>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ddc:	f7ff ff40 	bl	8004c60 <__NVIC_GetPriorityGrouping>
 8004de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7ff ff90 	bl	8004d0c <NVIC_EncodePriority>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff5f 	bl	8004cb8 <__NVIC_SetPriority>
}
 8004dfa:	bf00      	nop
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ff33 	bl	8004c7c <__NVIC_EnableIRQ>
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ffa4 	bl	8004d74 <SysTick_Config>
 8004e2c:	4603      	mov	r3, r0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e08d      	b.n	8004f66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4b47      	ldr	r3, [pc, #284]	; (8004f70 <HAL_DMA_Init+0x138>)
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d80f      	bhi.n	8004e76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b45      	ldr	r3, [pc, #276]	; (8004f74 <HAL_DMA_Init+0x13c>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	4a45      	ldr	r2, [pc, #276]	; (8004f78 <HAL_DMA_Init+0x140>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	009a      	lsls	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a42      	ldr	r2, [pc, #264]	; (8004f7c <HAL_DMA_Init+0x144>)
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
 8004e74:	e00e      	b.n	8004e94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <HAL_DMA_Init+0x148>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	4a3d      	ldr	r2, [pc, #244]	; (8004f78 <HAL_DMA_Init+0x140>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	009a      	lsls	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a3c      	ldr	r2, [pc, #240]	; (8004f84 <HAL_DMA_Init+0x14c>)
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa76 	bl	80053d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef4:	d102      	bne.n	8004efc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f10:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_DMA_Init+0x104>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d80c      	bhi.n	8004f3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa96 	bl	8005454 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e008      	b.n	8004f4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40020407 	.word	0x40020407
 8004f74:	bffdfff8 	.word	0xbffdfff8
 8004f78:	cccccccd 	.word	0xcccccccd
 8004f7c:	40020000 	.word	0x40020000
 8004f80:	bffdfbf8 	.word	0xbffdfbf8
 8004f84:	40020400 	.word	0x40020400

08004f88 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_DMA_Start_IT+0x20>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e066      	b.n	8005076 <HAL_DMA_Start_IT+0xee>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d155      	bne.n	8005068 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f9bb 	bl	800535c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 020e 	orr.w	r2, r2, #14
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e00f      	b.n	8005020 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 020a 	orr.w	r2, r2, #10
 800501e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005054:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e005      	b.n	8005074 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005070:	2302      	movs	r3, #2
 8005072:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d005      	beq.n	80050a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2204      	movs	r2, #4
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
 80050a0:	e037      	b.n	8005112 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 020e 	bic.w	r2, r2, #14
 80050b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f003 021f 	and.w	r2, r3, #31
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2101      	movs	r1, #1
 80050e0:	fa01 f202 	lsl.w	r2, r1, r2
 80050e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005106:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005110:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d00d      	beq.n	8005164 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2204      	movs	r2, #4
 800514c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
 8005162:	e047      	b.n	80051f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 020e 	bic.w	r2, r2, #14
 8005172:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f202 	lsl.w	r2, r1, r2
 80051a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
    }
  }
  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	2204      	movs	r2, #4
 8005220:	409a      	lsls	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d026      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7a>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d021      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0204 	bic.w	r2, r2, #4
 8005250:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	f003 021f 	and.w	r2, r3, #31
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2104      	movs	r1, #4
 8005260:	fa01 f202 	lsl.w	r2, r1, r2
 8005264:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	2b00      	cmp	r3, #0
 800526c:	d071      	beq.n	8005352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005276:	e06c      	b.n	8005352 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	2202      	movs	r2, #2
 8005282:	409a      	lsls	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02e      	beq.n	80052ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d029      	beq.n	80052ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 020a 	bic.w	r2, r2, #10
 80052b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	f003 021f 	and.w	r2, r3, #31
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	2102      	movs	r1, #2
 80052ca:	fa01 f202 	lsl.w	r2, r1, r2
 80052ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d038      	beq.n	8005352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052e8:	e033      	b.n	8005352 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2208      	movs	r2, #8
 80052f4:	409a      	lsls	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02a      	beq.n	8005354 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d025      	beq.n	8005354 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 020e 	bic.w	r2, r2, #14
 8005316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	f003 021f 	and.w	r2, r3, #31
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f202 	lsl.w	r2, r1, r2
 800532a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005352:	bf00      	nop
 8005354:	bf00      	nop
}
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005372:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f003 021f 	and.w	r2, r3, #31
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2101      	movs	r1, #1
 8005394:	fa01 f202 	lsl.w	r2, r1, r2
 8005398:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d108      	bne.n	80053bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053ba:	e007      	b.n	80053cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d802      	bhi.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e001      	b.n	80053f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	3b08      	subs	r3, #8
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	009a      	lsls	r2, r3, #2
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	461a      	mov	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005422:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2201      	movs	r2, #1
 800542c:	409a      	lsls	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40020407 	.word	0x40020407
 8005444:	40020800 	.word	0x40020800
 8005448:	40020820 	.word	0x40020820
 800544c:	cccccccd 	.word	0xcccccccd
 8005450:	40020880 	.word	0x40020880

08005454 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a08      	ldr	r2, [pc, #32]	; (8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005476:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	1000823f 	.word	0x1000823f
 8005498:	40020940 	.word	0x40020940

0800549c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054aa:	e15a      	b.n	8005762 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	2101      	movs	r1, #1
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 814c 	beq.w	800575c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d005      	beq.n	80054dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d130      	bne.n	800553e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	2203      	movs	r2, #3
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005512:	2201      	movs	r2, #1
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	091b      	lsrs	r3, r3, #4
 8005528:	f003 0201 	and.w	r2, r3, #1
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	2b03      	cmp	r3, #3
 8005548:	d017      	beq.n	800557a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	2203      	movs	r2, #3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d123      	bne.n	80055ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	220f      	movs	r2, #15
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	08da      	lsrs	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3208      	adds	r2, #8
 80055c8:	6939      	ldr	r1, [r7, #16]
 80055ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	2203      	movs	r2, #3
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 0203 	and.w	r2, r3, #3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80a6 	beq.w	800575c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005610:	4b5b      	ldr	r3, [pc, #364]	; (8005780 <HAL_GPIO_Init+0x2e4>)
 8005612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005614:	4a5a      	ldr	r2, [pc, #360]	; (8005780 <HAL_GPIO_Init+0x2e4>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6613      	str	r3, [r2, #96]	; 0x60
 800561c:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_GPIO_Init+0x2e4>)
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005628:	4a56      	ldr	r2, [pc, #344]	; (8005784 <HAL_GPIO_Init+0x2e8>)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	3302      	adds	r3, #2
 8005630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	220f      	movs	r2, #15
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005652:	d01f      	beq.n	8005694 <HAL_GPIO_Init+0x1f8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a4c      	ldr	r2, [pc, #304]	; (8005788 <HAL_GPIO_Init+0x2ec>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d019      	beq.n	8005690 <HAL_GPIO_Init+0x1f4>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a4b      	ldr	r2, [pc, #300]	; (800578c <HAL_GPIO_Init+0x2f0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <HAL_GPIO_Init+0x1f0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a4a      	ldr	r2, [pc, #296]	; (8005790 <HAL_GPIO_Init+0x2f4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00d      	beq.n	8005688 <HAL_GPIO_Init+0x1ec>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a49      	ldr	r2, [pc, #292]	; (8005794 <HAL_GPIO_Init+0x2f8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <HAL_GPIO_Init+0x1e8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a48      	ldr	r2, [pc, #288]	; (8005798 <HAL_GPIO_Init+0x2fc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_GPIO_Init+0x1e4>
 800567c:	2305      	movs	r3, #5
 800567e:	e00a      	b.n	8005696 <HAL_GPIO_Init+0x1fa>
 8005680:	2306      	movs	r3, #6
 8005682:	e008      	b.n	8005696 <HAL_GPIO_Init+0x1fa>
 8005684:	2304      	movs	r3, #4
 8005686:	e006      	b.n	8005696 <HAL_GPIO_Init+0x1fa>
 8005688:	2303      	movs	r3, #3
 800568a:	e004      	b.n	8005696 <HAL_GPIO_Init+0x1fa>
 800568c:	2302      	movs	r3, #2
 800568e:	e002      	b.n	8005696 <HAL_GPIO_Init+0x1fa>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_GPIO_Init+0x1fa>
 8005694:	2300      	movs	r3, #0
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	f002 0203 	and.w	r2, r2, #3
 800569c:	0092      	lsls	r2, r2, #2
 800569e:	4093      	lsls	r3, r2
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056a6:	4937      	ldr	r1, [pc, #220]	; (8005784 <HAL_GPIO_Init+0x2e8>)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	089b      	lsrs	r3, r3, #2
 80056ac:	3302      	adds	r3, #2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056b4:	4b39      	ldr	r3, [pc, #228]	; (800579c <HAL_GPIO_Init+0x300>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	43db      	mvns	r3, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056d8:	4a30      	ldr	r2, [pc, #192]	; (800579c <HAL_GPIO_Init+0x300>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_GPIO_Init+0x300>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	43db      	mvns	r3, r3
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4013      	ands	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <HAL_GPIO_Init+0x300>)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <HAL_GPIO_Init+0x300>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	43db      	mvns	r3, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800572c:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_GPIO_Init+0x300>)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <HAL_GPIO_Init+0x300>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	43db      	mvns	r3, r3
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005756:	4a11      	ldr	r2, [pc, #68]	; (800579c <HAL_GPIO_Init+0x300>)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3301      	adds	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f ae9d 	bne.w	80054ac <HAL_GPIO_Init+0x10>
  }
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40021000 	.word	0x40021000
 8005784:	40010000 	.word	0x40010000
 8005788:	48000400 	.word	0x48000400
 800578c:	48000800 	.word	0x48000800
 8005790:	48000c00 	.word	0x48000c00
 8005794:	48001000 	.word	0x48001000
 8005798:	48001400 	.word	0x48001400
 800579c:	40010400 	.word	0x40010400

080057a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	887b      	ldrh	r3, [r7, #2]
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e001      	b.n	80057c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
 80057dc:	4613      	mov	r3, r2
 80057de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057e0:	787b      	ldrb	r3, [r7, #1]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057ec:	e002      	b.n	80057f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005816:	4a05      	ldr	r2, [pc, #20]	; (800582c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fd fac0 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010400 	.word	0x40010400

08005830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d141      	bne.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800583e:	4b4b      	ldr	r3, [pc, #300]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584a:	d131      	bne.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800584c:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005852:	4a46      	ldr	r2, [pc, #280]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800585c:	4b43      	ldr	r3, [pc, #268]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005864:	4a41      	ldr	r2, [pc, #260]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800586a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800586c:	4b40      	ldr	r3, [pc, #256]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2232      	movs	r2, #50	; 0x32
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	4a3f      	ldr	r2, [pc, #252]	; (8005974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	0c9b      	lsrs	r3, r3, #18
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005882:	e002      	b.n	800588a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588a:	4b38      	ldr	r3, [pc, #224]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d102      	bne.n	800589e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f2      	bne.n	8005884 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800589e:	4b33      	ldr	r3, [pc, #204]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d158      	bne.n	800595e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e057      	b.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b0:	4b2e      	ldr	r3, [pc, #184]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b6:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058c0:	e04d      	b.n	800595e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c8:	d141      	bne.n	800594e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ca:	4b28      	ldr	r3, [pc, #160]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d131      	bne.n	800593c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058d8:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058de:	4a23      	ldr	r2, [pc, #140]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058e8:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058f0:	4a1e      	ldr	r2, [pc, #120]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058f8:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2232      	movs	r2, #50	; 0x32
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	0c9b      	lsrs	r3, r3, #18
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800590e:	e002      	b.n	8005916 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3b01      	subs	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005922:	d102      	bne.n	800592a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f2      	bne.n	8005910 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800592a:	4b10      	ldr	r3, [pc, #64]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005936:	d112      	bne.n	800595e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e011      	b.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800594c:	e007      	b.n	800595e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005956:	4a05      	ldr	r2, [pc, #20]	; (800596c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005958:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800595c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40007000 	.word	0x40007000
 8005970:	2000021c 	.word	0x2000021c
 8005974:	431bde83 	.word	0x431bde83

08005978 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005986:	6093      	str	r3, [r2, #8]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40007000 	.word	0x40007000

08005998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e2fe      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d075      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b6:	4b97      	ldr	r3, [pc, #604]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c0:	4b94      	ldr	r3, [pc, #592]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	d102      	bne.n	80059d6 <HAL_RCC_OscConfig+0x3e>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d002      	beq.n	80059dc <HAL_RCC_OscConfig+0x44>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d10b      	bne.n	80059f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059dc:	4b8d      	ldr	r3, [pc, #564]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d05b      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x108>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d157      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e2d9      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d106      	bne.n	8005a0c <HAL_RCC_OscConfig+0x74>
 80059fe:	4b85      	ldr	r3, [pc, #532]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a84      	ldr	r2, [pc, #528]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e01d      	b.n	8005a48 <HAL_RCC_OscConfig+0xb0>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x98>
 8005a16:	4b7f      	ldr	r3, [pc, #508]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a7e      	ldr	r2, [pc, #504]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4b7c      	ldr	r3, [pc, #496]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a7b      	ldr	r2, [pc, #492]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0xb0>
 8005a30:	4b78      	ldr	r3, [pc, #480]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a77      	ldr	r2, [pc, #476]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b75      	ldr	r3, [pc, #468]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a74      	ldr	r2, [pc, #464]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fd fd72 	bl	8003538 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fd fd6e 	bl	8003538 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	; 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e29e      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6a:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0xc0>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fd fd5e 	bl	8003538 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fd fd5a 	bl	8003538 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e28a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a92:	4b60      	ldr	r3, [pc, #384]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0xe8>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d075      	beq.n	8005b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aae:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab8:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b0c      	cmp	r3, #12
 8005ac6:	d102      	bne.n	8005ace <HAL_RCC_OscConfig+0x136>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d002      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x13c>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d11f      	bne.n	8005b14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad4:	4b4f      	ldr	r3, [pc, #316]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_RCC_OscConfig+0x154>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e25d      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aec:	4b49      	ldr	r3, [pc, #292]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	061b      	lsls	r3, r3, #24
 8005afa:	4946      	ldr	r1, [pc, #280]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b00:	4b45      	ldr	r3, [pc, #276]	; (8005c18 <HAL_RCC_OscConfig+0x280>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fd fccb 	bl	80034a0 <HAL_InitTick>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d043      	beq.n	8005b98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e249      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d023      	beq.n	8005b64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b1c:	4b3d      	ldr	r3, [pc, #244]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a3c      	ldr	r2, [pc, #240]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fd fd06 	bl	8003538 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b30:	f7fd fd02 	bl	8003538 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e232      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b42:	4b34      	ldr	r3, [pc, #208]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4e:	4b31      	ldr	r3, [pc, #196]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	061b      	lsls	r3, r3, #24
 8005b5c:	492d      	ldr	r1, [pc, #180]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
 8005b62:	e01a      	b.n	8005b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b64:	4b2b      	ldr	r3, [pc, #172]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fd fce2 	bl	8003538 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b78:	f7fd fcde 	bl	8003538 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e20e      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b8a:	4b22      	ldr	r3, [pc, #136]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x1e0>
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d041      	beq.n	8005c2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01c      	beq.n	8005be8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bae:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb4:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbe:	f7fd fcbb 	bl	8003538 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc6:	f7fd fcb7 	bl	8003538 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e1e7      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ef      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x22e>
 8005be6:	e020      	b.n	8005c2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <HAL_RCC_OscConfig+0x27c>)
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fd fc9e 	bl	8003538 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bfe:	e00d      	b.n	8005c1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c00:	f7fd fc9a 	bl	8003538 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d906      	bls.n	8005c1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e1ca      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
 8005c12:	bf00      	nop
 8005c14:	40021000 	.word	0x40021000
 8005c18:	20000220 	.word	0x20000220
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c1c:	4b8c      	ldr	r3, [pc, #560]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ea      	bne.n	8005c00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80a6 	beq.w	8005d84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c3c:	4b84      	ldr	r3, [pc, #528]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_RCC_OscConfig+0x2b4>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x2b6>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	4b7f      	ldr	r3, [pc, #508]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	4a7e      	ldr	r2, [pc, #504]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c5e:	4b7c      	ldr	r3, [pc, #496]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c6e:	4b79      	ldr	r3, [pc, #484]	; (8005e54 <HAL_RCC_OscConfig+0x4bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d118      	bne.n	8005cac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c7a:	4b76      	ldr	r3, [pc, #472]	; (8005e54 <HAL_RCC_OscConfig+0x4bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a75      	ldr	r2, [pc, #468]	; (8005e54 <HAL_RCC_OscConfig+0x4bc>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c86:	f7fd fc57 	bl	8003538 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8e:	f7fd fc53 	bl	8003538 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e183      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ca0:	4b6c      	ldr	r3, [pc, #432]	; (8005e54 <HAL_RCC_OscConfig+0x4bc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d108      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x32e>
 8005cb4:	4b66      	ldr	r3, [pc, #408]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	4a65      	ldr	r2, [pc, #404]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc4:	e024      	b.n	8005d10 <HAL_RCC_OscConfig+0x378>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d110      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x358>
 8005cce:	4b60      	ldr	r3, [pc, #384]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	4a5e      	ldr	r2, [pc, #376]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f043 0304 	orr.w	r3, r3, #4
 8005cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cde:	4b5c      	ldr	r3, [pc, #368]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	4a5a      	ldr	r2, [pc, #360]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cee:	e00f      	b.n	8005d10 <HAL_RCC_OscConfig+0x378>
 8005cf0:	4b57      	ldr	r3, [pc, #348]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	4a56      	ldr	r2, [pc, #344]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d00:	4b53      	ldr	r3, [pc, #332]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	4a52      	ldr	r2, [pc, #328]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d08:	f023 0304 	bic.w	r3, r3, #4
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d016      	beq.n	8005d46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fd fc0e 	bl	8003538 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d20:	f7fd fc0a 	bl	8003538 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e138      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d36:	4b46      	ldr	r3, [pc, #280]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0ed      	beq.n	8005d20 <HAL_RCC_OscConfig+0x388>
 8005d44:	e015      	b.n	8005d72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d46:	f7fd fbf7 	bl	8003538 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d4c:	e00a      	b.n	8005d64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4e:	f7fd fbf3 	bl	8003538 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e121      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d64:	4b3a      	ldr	r3, [pc, #232]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ed      	bne.n	8005d4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d105      	bne.n	8005d84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d78:	4b35      	ldr	r3, [pc, #212]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	4a34      	ldr	r2, [pc, #208]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d03c      	beq.n	8005e0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01c      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d98:	4b2d      	ldr	r3, [pc, #180]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d9e:	4a2c      	ldr	r2, [pc, #176]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da8:	f7fd fbc6 	bl	8003538 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db0:	f7fd fbc2 	bl	8003538 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e0f2      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dc2:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ef      	beq.n	8005db0 <HAL_RCC_OscConfig+0x418>
 8005dd0:	e01b      	b.n	8005e0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dd2:	4b1f      	ldr	r3, [pc, #124]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de2:	f7fd fba9 	bl	8003538 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dea:	f7fd fba5 	bl	8003538 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0d5      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dfc:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1ef      	bne.n	8005dea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80c9 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 030c 	and.w	r3, r3, #12
 8005e1c:	2b0c      	cmp	r3, #12
 8005e1e:	f000 8083 	beq.w	8005f28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d15e      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <HAL_RCC_OscConfig+0x4b8>)
 8005e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e36:	f7fd fb7f 	bl	8003538 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3c:	e00c      	b.n	8005e58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3e:	f7fd fb7b 	bl	8003538 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d905      	bls.n	8005e58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e0ab      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e58:	4b55      	ldr	r3, [pc, #340]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ec      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e64:	4b52      	ldr	r3, [pc, #328]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	4b52      	ldr	r3, [pc, #328]	; (8005fb4 <HAL_RCC_OscConfig+0x61c>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6a11      	ldr	r1, [r2, #32]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e74:	3a01      	subs	r2, #1
 8005e76:	0112      	lsls	r2, r2, #4
 8005e78:	4311      	orrs	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e7e:	0212      	lsls	r2, r2, #8
 8005e80:	4311      	orrs	r1, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e86:	0852      	lsrs	r2, r2, #1
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	0552      	lsls	r2, r2, #21
 8005e8c:	4311      	orrs	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e92:	0852      	lsrs	r2, r2, #1
 8005e94:	3a01      	subs	r2, #1
 8005e96:	0652      	lsls	r2, r2, #25
 8005e98:	4311      	orrs	r1, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e9e:	06d2      	lsls	r2, r2, #27
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	4943      	ldr	r1, [pc, #268]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea8:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a40      	ldr	r2, [pc, #256]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb4:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4a3d      	ldr	r2, [pc, #244]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ebe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fd fb3a 	bl	8003538 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fd fb36 	bl	8003538 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e066      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eda:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x530>
 8005ee6:	e05e      	b.n	8005fa6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a30      	ldr	r2, [pc, #192]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fd fb20 	bl	8003538 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efc:	f7fd fb1c 	bl	8003538 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e04c      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f0e:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f1a:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	4924      	ldr	r1, [pc, #144]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <HAL_RCC_OscConfig+0x620>)
 8005f22:	4013      	ands	r3, r2
 8005f24:	60cb      	str	r3, [r1, #12]
 8005f26:	e03e      	b.n	8005fa6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e039      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_OscConfig+0x618>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f003 0203 	and.w	r2, r3, #3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d12c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	3b01      	subs	r3, #1
 8005f54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d123      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d11b      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d113      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	3b01      	subs	r3, #1
 8005f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	019f800c 	.word	0x019f800c
 8005fb8:	feeefffc 	.word	0xfeeefffc

08005fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e11e      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd4:	4b91      	ldr	r3, [pc, #580]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d910      	bls.n	8006004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	4b8e      	ldr	r3, [pc, #568]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 020f 	bic.w	r2, r3, #15
 8005fea:	498c      	ldr	r1, [pc, #560]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b8a      	ldr	r3, [pc, #552]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e106      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d073      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d129      	bne.n	800606c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006018:	4b81      	ldr	r3, [pc, #516]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0f4      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006028:	f000 f99e 	bl	8006368 <RCC_GetSysClockFreqFromPLLSource>
 800602c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <HAL_RCC_ClockConfig+0x268>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d93f      	bls.n	80060b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006036:	4b7a      	ldr	r3, [pc, #488]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800604a:	2b00      	cmp	r3, #0
 800604c:	d033      	beq.n	80060b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006052:	2b00      	cmp	r3, #0
 8006054:	d12f      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006056:	4b72      	ldr	r3, [pc, #456]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605e:	4a70      	ldr	r2, [pc, #448]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e024      	b.n	80060b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d107      	bne.n	8006084 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006074:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0c6      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006084:	4b66      	ldr	r3, [pc, #408]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0be      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006094:	f000 f8ce 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 8006098:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4a61      	ldr	r2, [pc, #388]	; (8006224 <HAL_RCC_ClockConfig+0x268>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d909      	bls.n	80060b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060a2:	4b5f      	ldr	r3, [pc, #380]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060aa:	4a5d      	ldr	r2, [pc, #372]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80060ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060b6:	4b5a      	ldr	r3, [pc, #360]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f023 0203 	bic.w	r2, r3, #3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4957      	ldr	r1, [pc, #348]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c8:	f7fd fa36 	bl	8003538 <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ce:	e00a      	b.n	80060e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d0:	f7fd fa32 	bl	8003538 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f241 3288 	movw	r2, #5000	; 0x1388
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e095      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e6:	4b4e      	ldr	r3, [pc, #312]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 020c 	and.w	r2, r3, #12
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d1eb      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d023      	beq.n	800614c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006110:	4b43      	ldr	r3, [pc, #268]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4a42      	ldr	r2, [pc, #264]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006116:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800611a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006128:	4b3d      	ldr	r3, [pc, #244]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006130:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006136:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006138:	4b39      	ldr	r3, [pc, #228]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	4936      	ldr	r1, [pc, #216]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
 800614a:	e008      	b.n	800615e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d105      	bne.n	800615e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006152:	4b33      	ldr	r3, [pc, #204]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	4a32      	ldr	r2, [pc, #200]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 8006158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800615e:	4b2f      	ldr	r3, [pc, #188]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d21d      	bcs.n	80061a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616c:	4b2b      	ldr	r3, [pc, #172]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 020f 	bic.w	r2, r3, #15
 8006174:	4929      	ldr	r1, [pc, #164]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800617c:	f7fd f9dc 	bl	8003538 <HAL_GetTick>
 8006180:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006182:	e00a      	b.n	800619a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006184:	f7fd f9d8 	bl	8003538 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e03b      	b.n	8006212 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_RCC_ClockConfig+0x260>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d1ed      	bne.n	8006184 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b4:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4917      	ldr	r1, [pc, #92]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	490f      	ldr	r1, [pc, #60]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061e6:	f000 f825 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <HAL_RCC_ClockConfig+0x264>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	490c      	ldr	r1, [pc, #48]	; (8006228 <HAL_RCC_ClockConfig+0x26c>)
 80061f8:	5ccb      	ldrb	r3, [r1, r3]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_RCC_ClockConfig+0x270>)
 8006204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <HAL_RCC_ClockConfig+0x274>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd f948 	bl	80034a0 <HAL_InitTick>
 8006210:	4603      	mov	r3, r0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40022000 	.word	0x40022000
 8006220:	40021000 	.word	0x40021000
 8006224:	04c4b400 	.word	0x04c4b400
 8006228:	0800af60 	.word	0x0800af60
 800622c:	2000021c 	.word	0x2000021c
 8006230:	20000220 	.word	0x20000220

08006234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800623a:	4b2c      	ldr	r3, [pc, #176]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b04      	cmp	r3, #4
 8006244:	d102      	bne.n	800624c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006246:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	e047      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b08      	cmp	r3, #8
 8006256:	d102      	bne.n	800625e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006258:	4b26      	ldr	r3, [pc, #152]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	e03e      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800625e:	4b23      	ldr	r3, [pc, #140]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b0c      	cmp	r3, #12
 8006268:	d136      	bne.n	80062d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006274:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	3301      	adds	r3, #1
 8006280:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d10c      	bne.n	80062a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006288:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	4a16      	ldr	r2, [pc, #88]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006292:	68d2      	ldr	r2, [r2, #12]
 8006294:	0a12      	lsrs	r2, r2, #8
 8006296:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	617b      	str	r3, [r7, #20]
      break;
 80062a0:	e00c      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062a2:	4a13      	ldr	r2, [pc, #76]	; (80062f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	4a10      	ldr	r2, [pc, #64]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ac:	68d2      	ldr	r2, [r2, #12]
 80062ae:	0a12      	lsrs	r2, r2, #8
 80062b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062b4:	fb02 f303 	mul.w	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]
      break;
 80062ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	0e5b      	lsrs	r3, r3, #25
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	3301      	adds	r3, #1
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	e001      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062dc:	693b      	ldr	r3, [r7, #16]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000
 80062f0:	00f42400 	.word	0x00f42400
 80062f4:	016e3600 	.word	0x016e3600

080062f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <HAL_RCC_GetHCLKFreq+0x14>)
 80062fe:	681b      	ldr	r3, [r3, #0]
}
 8006300:	4618      	mov	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	2000021c 	.word	0x2000021c

08006310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006314:	f7ff fff0 	bl	80062f8 <HAL_RCC_GetHCLKFreq>
 8006318:	4602      	mov	r2, r0
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	4904      	ldr	r1, [pc, #16]	; (8006338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006326:	5ccb      	ldrb	r3, [r1, r3]
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40021000 	.word	0x40021000
 8006338:	0800af70 	.word	0x0800af70

0800633c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006340:	f7ff ffda 	bl	80062f8 <HAL_RCC_GetHCLKFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	0adb      	lsrs	r3, r3, #11
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	4904      	ldr	r1, [pc, #16]	; (8006364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800635c:	4618      	mov	r0, r3
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40021000 	.word	0x40021000
 8006364:	0800af70 	.word	0x0800af70

08006368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800636e:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d10c      	bne.n	80063a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006396:	68d2      	ldr	r2, [r2, #12]
 8006398:	0a12      	lsrs	r2, r2, #8
 800639a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	617b      	str	r3, [r7, #20]
    break;
 80063a4:	e00c      	b.n	80063c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063a6:	4a12      	ldr	r2, [pc, #72]	; (80063f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063b0:	68d2      	ldr	r2, [r2, #12]
 80063b2:	0a12      	lsrs	r2, r2, #8
 80063b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063b8:	fb02 f303 	mul.w	r3, r2, r3
 80063bc:	617b      	str	r3, [r7, #20]
    break;
 80063be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063c0:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	0e5b      	lsrs	r3, r3, #25
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	3301      	adds	r3, #1
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063da:	687b      	ldr	r3, [r7, #4]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40021000 	.word	0x40021000
 80063ec:	016e3600 	.word	0x016e3600
 80063f0:	00f42400 	.word	0x00f42400

080063f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063fc:	2300      	movs	r3, #0
 80063fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006400:	2300      	movs	r3, #0
 8006402:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8098 	beq.w	8006542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006412:	2300      	movs	r3, #0
 8006414:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006416:	4b43      	ldr	r3, [pc, #268]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006422:	4b40      	ldr	r3, [pc, #256]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006426:	4a3f      	ldr	r2, [pc, #252]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642c:	6593      	str	r3, [r2, #88]	; 0x58
 800642e:	4b3d      	ldr	r3, [pc, #244]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643a:	2301      	movs	r3, #1
 800643c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800643e:	4b3a      	ldr	r3, [pc, #232]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a39      	ldr	r2, [pc, #228]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800644a:	f7fd f875 	bl	8003538 <HAL_GetTick>
 800644e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006450:	e009      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006452:	f7fd f871 	bl	8003538 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d902      	bls.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	74fb      	strb	r3, [r7, #19]
        break;
 8006464:	e005      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006466:	4b30      	ldr	r3, [pc, #192]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0ef      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006472:	7cfb      	ldrb	r3, [r7, #19]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d159      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006482:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01e      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	d019      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006494:	4b23      	ldr	r3, [pc, #140]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064a0:	4b20      	ldr	r3, [pc, #128]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064b0:	4b1c      	ldr	r3, [pc, #112]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fd f831 	bl	8003538 <HAL_GetTick>
 80064d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d8:	e00b      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064da:	f7fd f82d 	bl	8003538 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d902      	bls.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	74fb      	strb	r3, [r7, #19]
            break;
 80064f0:	e006      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064f2:	4b0c      	ldr	r3, [pc, #48]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ec      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006506:	4b07      	ldr	r3, [pc, #28]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006514:	4903      	ldr	r1, [pc, #12]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006516:	4313      	orrs	r3, r2
 8006518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800651c:	e008      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800651e:	7cfb      	ldrb	r3, [r7, #19]
 8006520:	74bb      	strb	r3, [r7, #18]
 8006522:	e005      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006524:	40021000 	.word	0x40021000
 8006528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006530:	7c7b      	ldrb	r3, [r7, #17]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d105      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006536:	4ba7      	ldr	r3, [pc, #668]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	4aa6      	ldr	r2, [pc, #664]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006540:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800654e:	4ba1      	ldr	r3, [pc, #644]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	f023 0203 	bic.w	r2, r3, #3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	499d      	ldr	r1, [pc, #628]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006570:	4b98      	ldr	r3, [pc, #608]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 020c 	bic.w	r2, r3, #12
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	4995      	ldr	r1, [pc, #596]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006592:	4b90      	ldr	r3, [pc, #576]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006598:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	498c      	ldr	r1, [pc, #560]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065b4:	4b87      	ldr	r3, [pc, #540]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	4984      	ldr	r1, [pc, #528]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065d6:	4b7f      	ldr	r3, [pc, #508]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	497b      	ldr	r1, [pc, #492]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065f8:	4b76      	ldr	r3, [pc, #472]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	4973      	ldr	r1, [pc, #460]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800661a:	4b6e      	ldr	r3, [pc, #440]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	496a      	ldr	r1, [pc, #424]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800663c:	4b65      	ldr	r3, [pc, #404]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	4962      	ldr	r1, [pc, #392]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800665e:	4b5d      	ldr	r3, [pc, #372]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	4959      	ldr	r1, [pc, #356]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006680:	4b54      	ldr	r3, [pc, #336]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006686:	f023 0203 	bic.w	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	4951      	ldr	r1, [pc, #324]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066a2:	4b4c      	ldr	r3, [pc, #304]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	4948      	ldr	r1, [pc, #288]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d015      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066c4:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4940      	ldr	r1, [pc, #256]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e4:	4b3b      	ldr	r3, [pc, #236]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4a3a      	ldr	r2, [pc, #232]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d015      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066fc:	4b35      	ldr	r3, [pc, #212]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670a:	4932      	ldr	r1, [pc, #200]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670c:	4313      	orrs	r3, r2
 800670e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671a:	d105      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006726:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d015      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006734:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	4924      	ldr	r1, [pc, #144]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006752:	d105      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006754:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800675e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d015      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800676c:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	4916      	ldr	r1, [pc, #88]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678a:	d105      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800678c:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006796:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d019      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	4908      	ldr	r1, [pc, #32]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c2:	d109      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a02      	ldr	r2, [pc, #8]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ce:	60d3      	str	r3, [r2, #12]
 80067d0:	e002      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80067d2:	bf00      	nop
 80067d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d015      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80067e4:	4b29      	ldr	r3, [pc, #164]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	4926      	ldr	r1, [pc, #152]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006802:	d105      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4a20      	ldr	r2, [pc, #128]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800680a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d015      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	4918      	ldr	r1, [pc, #96]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683a:	d105      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800683c:	4b13      	ldr	r3, [pc, #76]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4a12      	ldr	r2, [pc, #72]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006846:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d015      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800685a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006862:	490a      	ldr	r1, [pc, #40]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006872:	d105      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	4a04      	ldr	r2, [pc, #16]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800687a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800687e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006880:	7cbb      	ldrb	r3, [r7, #18]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000

08006890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e054      	b.n	800694c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d111      	bne.n	80068d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fee2 	bl	8008680 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a23      	ldr	r2, [pc, #140]	; (8006954 <HAL_TIM_Base_Init+0xc4>)
 80068c8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f001 fa2b 	bl	8007d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08002f81 	.word	0x08002f81

08006958 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	d001      	beq.n	8006970 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e04c      	b.n	8006a0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <HAL_TIM_Base_Start+0xc0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d01d      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a22      	ldr	r2, [pc, #136]	; (8006a1c <HAL_TIM_Base_Start+0xc4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a21      	ldr	r2, [pc, #132]	; (8006a20 <HAL_TIM_Base_Start+0xc8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1f      	ldr	r2, [pc, #124]	; (8006a24 <HAL_TIM_Base_Start+0xcc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <HAL_TIM_Base_Start+0xd0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <HAL_TIM_Base_Start+0xd4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_TIM_Base_Start+0x70>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <HAL_TIM_Base_Start+0xd8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d115      	bne.n	80069f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_TIM_Base_Start+0xdc>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b06      	cmp	r3, #6
 80069d8:	d015      	beq.n	8006a06 <HAL_TIM_Base_Start+0xae>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e0:	d011      	beq.n	8006a06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f2:	e008      	b.n	8006a06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e000      	b.n	8006a08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40000800 	.word	0x40000800
 8006a24:	40000c00 	.word	0x40000c00
 8006a28:	40013400 	.word	0x40013400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40015000 	.word	0x40015000
 8006a34:	00010007 	.word	0x00010007

08006a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d001      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e054      	b.n	8006afa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d022      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d01d      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d018      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d013      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00e      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_TIM_Base_Start_IT+0xe0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_TIM_Base_Start_IT+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d115      	bne.n	8006ae4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <HAL_TIM_Base_Start_IT+0xec>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b06      	cmp	r3, #6
 8006ac8:	d015      	beq.n	8006af6 <HAL_TIM_Base_Start_IT+0xbe>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad0:	d011      	beq.n	8006af6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae2:	e008      	b.n	8006af6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e000      	b.n	8006af8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40013400 	.word	0x40013400
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40015000 	.word	0x40015000
 8006b24:	00010007 	.word	0x00010007

08006b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e054      	b.n	8006be4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d111      	bne.n	8006b6a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fd96 	bl	8008680 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a23      	ldr	r2, [pc, #140]	; (8006bec <HAL_TIM_PWM_Init+0xc4>)
 8006b60:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f001 f8df 	bl	8007d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	08003039 	.word	0x08003039

08006bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <HAL_TIM_PWM_Start+0x24>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	e03c      	b.n	8006c8e <HAL_TIM_PWM_Start+0x9e>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d109      	bne.n	8006c2e <HAL_TIM_PWM_Start+0x3e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	bf14      	ite	ne
 8006c26:	2301      	movne	r3, #1
 8006c28:	2300      	moveq	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	e02f      	b.n	8006c8e <HAL_TIM_PWM_Start+0x9e>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d109      	bne.n	8006c48 <HAL_TIM_PWM_Start+0x58>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	bf14      	ite	ne
 8006c40:	2301      	movne	r3, #1
 8006c42:	2300      	moveq	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	e022      	b.n	8006c8e <HAL_TIM_PWM_Start+0x9e>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b0c      	cmp	r3, #12
 8006c4c:	d109      	bne.n	8006c62 <HAL_TIM_PWM_Start+0x72>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	e015      	b.n	8006c8e <HAL_TIM_PWM_Start+0x9e>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d109      	bne.n	8006c7c <HAL_TIM_PWM_Start+0x8c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	e008      	b.n	8006c8e <HAL_TIM_PWM_Start+0x9e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e0a6      	b.n	8006de4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_PWM_Start+0xb6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca4:	e023      	b.n	8006cee <HAL_TIM_PWM_Start+0xfe>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0xc6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb4:	e01b      	b.n	8006cee <HAL_TIM_PWM_Start+0xfe>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0xd6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc4:	e013      	b.n	8006cee <HAL_TIM_PWM_Start+0xfe>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b0c      	cmp	r3, #12
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_PWM_Start+0xe6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd4:	e00b      	b.n	8006cee <HAL_TIM_PWM_Start+0xfe>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_PWM_Start+0xf6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce4:	e003      	b.n	8006cee <HAL_TIM_PWM_Start+0xfe>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fc9c 	bl	8008634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3a      	ldr	r2, [pc, #232]	; (8006dec <HAL_TIM_PWM_Start+0x1fc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_PWM_Start+0x148>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <HAL_TIM_PWM_Start+0x200>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_TIM_PWM_Start+0x148>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a37      	ldr	r2, [pc, #220]	; (8006df4 <HAL_TIM_PWM_Start+0x204>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_TIM_PWM_Start+0x148>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a36      	ldr	r2, [pc, #216]	; (8006df8 <HAL_TIM_PWM_Start+0x208>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIM_PWM_Start+0x148>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a34      	ldr	r2, [pc, #208]	; (8006dfc <HAL_TIM_PWM_Start+0x20c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_PWM_Start+0x148>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a33      	ldr	r2, [pc, #204]	; (8006e00 <HAL_TIM_PWM_Start+0x210>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d101      	bne.n	8006d3c <HAL_TIM_PWM_Start+0x14c>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_TIM_PWM_Start+0x14e>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d007      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a25      	ldr	r2, [pc, #148]	; (8006dec <HAL_TIM_PWM_Start+0x1fc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d022      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d01d      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <HAL_TIM_PWM_Start+0x214>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d018      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a24      	ldr	r2, [pc, #144]	; (8006e08 <HAL_TIM_PWM_Start+0x218>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a23      	ldr	r2, [pc, #140]	; (8006e0c <HAL_TIM_PWM_Start+0x21c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00e      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <HAL_TIM_PWM_Start+0x200>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a18      	ldr	r2, [pc, #96]	; (8006df4 <HAL_TIM_PWM_Start+0x204>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x1b2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a18      	ldr	r2, [pc, #96]	; (8006e00 <HAL_TIM_PWM_Start+0x210>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d115      	bne.n	8006dce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_TIM_PWM_Start+0x220>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b06      	cmp	r3, #6
 8006db2:	d015      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1f0>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dba:	d011      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dcc:	e008      	b.n	8006de0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0201 	orr.w	r2, r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e000      	b.n	8006de2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40012c00 	.word	0x40012c00
 8006df0:	40013400 	.word	0x40013400
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40014400 	.word	0x40014400
 8006dfc:	40014800 	.word	0x40014800
 8006e00:	40015000 	.word	0x40015000
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	00010007 	.word	0x00010007

08006e14 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e04c      	b.n	8006ec2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d111      	bne.n	8006e58 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fc1f 	bl	8008680 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ecc <HAL_TIM_OnePulse_Init+0xb8>)
 8006e4e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f000 ff68 	bl	8007d40 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0208 	bic.w	r2, r2, #8
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6819      	ldr	r1, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	08006ed1 	.word	0x08006ed1

08006ed0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006efc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f0c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d108      	bne.n	8006f26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d105      	bne.n	8006f26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f1a:	7b7b      	ldrb	r3, [r7, #13]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d102      	bne.n	8006f26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f20:	7b3b      	ldrb	r3, [r7, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d001      	beq.n	8006f2a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e059      	b.n	8006fde <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0202 	orr.w	r2, r2, #2
 8006f58:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0204 	orr.w	r2, r2, #4
 8006f68:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fb5e 	bl	8008634 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	2104      	movs	r1, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 fb57 	bl	8008634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a11      	ldr	r2, [pc, #68]	; (8006ff8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800
 8006ffc:	40015000 	.word	0x40015000

08007000 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0a2      	b.n	800715a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d111      	bne.n	8007044 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fb29 	bl	8008680 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a4a      	ldr	r2, [pc, #296]	; (8007164 <HAL_TIM_Encoder_Init+0x164>)
 800703a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3304      	adds	r3, #4
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f000 fe68 	bl	8007d40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	4313      	orrs	r3, r2
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80070b6:	f023 030c 	bic.w	r3, r3, #12
 80070ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	4313      	orrs	r3, r2
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	011a      	lsls	r2, r3, #4
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	031b      	lsls	r3, r3, #12
 80070e6:	4313      	orrs	r3, r2
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070f4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80070fc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	4313      	orrs	r3, r2
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	08003079 	.word	0x08003079

08007168 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007178:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007180:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007188:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007190:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d110      	bne.n	80071ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d102      	bne.n	80071a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800719e:	7b7b      	ldrb	r3, [r7, #13]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d001      	beq.n	80071a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e069      	b.n	800727c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b8:	e031      	b.n	800721e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d110      	bne.n	80071e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d102      	bne.n	80071cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071c6:	7b3b      	ldrb	r3, [r7, #12]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d001      	beq.n	80071d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e055      	b.n	800727c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071e0:	e01d      	b.n	800721e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d108      	bne.n	80071fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d105      	bne.n	80071fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d102      	bne.n	80071fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071f4:	7b3b      	ldrb	r3, [r7, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d001      	beq.n	80071fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e03e      	b.n	800727c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2202      	movs	r2, #2
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2202      	movs	r2, #2
 8007212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_TIM_Encoder_Start+0xc4>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b04      	cmp	r3, #4
 8007228:	d008      	beq.n	800723c <HAL_TIM_Encoder_Start+0xd4>
 800722a:	e00f      	b.n	800724c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2201      	movs	r2, #1
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f001 f9fd 	bl	8008634 <TIM_CCxChannelCmd>
      break;
 800723a:	e016      	b.n	800726a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2201      	movs	r2, #1
 8007242:	2104      	movs	r1, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f9f5 	bl	8008634 <TIM_CCxChannelCmd>
      break;
 800724a:	e00e      	b.n	800726a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2201      	movs	r2, #1
 8007252:	2100      	movs	r1, #0
 8007254:	4618      	mov	r0, r3
 8007256:	f001 f9ed 	bl	8008634 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2201      	movs	r2, #1
 8007260:	2104      	movs	r1, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f001 f9e6 	bl	8008634 <TIM_CCxChannelCmd>
      break;
 8007268:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d026      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d021      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0202 	mvn.w	r2, #2
 80072b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
 80072d8:	e009      	b.n	80072ee <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d026      	beq.n	800734c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d021      	beq.n	800734c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0204 	mvn.w	r2, #4
 8007310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
 8007330:	e009      	b.n	8007346 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d026      	beq.n	80073a4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d021      	beq.n	80073a4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0208 	mvn.w	r2, #8
 8007368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2204      	movs	r2, #4
 800736e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	e009      	b.n	800739e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d026      	beq.n	80073fc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d021      	beq.n	80073fc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0210 	mvn.w	r2, #16
 80073c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2208      	movs	r2, #8
 80073c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
 80073e0:	e009      	b.n	80073f6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0201 	mvn.w	r2, #1
 8007418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800744a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00e      	beq.n	800747e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00e      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f06f 0220 	mvn.w	r2, #32
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80074ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00e      	beq.n	8007546 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800753a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007592:	2302      	movs	r3, #2
 8007594:	e0ff      	b.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b14      	cmp	r3, #20
 80075a2:	f200 80f0 	bhi.w	8007786 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	08007601 	.word	0x08007601
 80075b0:	08007787 	.word	0x08007787
 80075b4:	08007787 	.word	0x08007787
 80075b8:	08007787 	.word	0x08007787
 80075bc:	08007641 	.word	0x08007641
 80075c0:	08007787 	.word	0x08007787
 80075c4:	08007787 	.word	0x08007787
 80075c8:	08007787 	.word	0x08007787
 80075cc:	08007683 	.word	0x08007683
 80075d0:	08007787 	.word	0x08007787
 80075d4:	08007787 	.word	0x08007787
 80075d8:	08007787 	.word	0x08007787
 80075dc:	080076c3 	.word	0x080076c3
 80075e0:	08007787 	.word	0x08007787
 80075e4:	08007787 	.word	0x08007787
 80075e8:	08007787 	.word	0x08007787
 80075ec:	08007705 	.word	0x08007705
 80075f0:	08007787 	.word	0x08007787
 80075f4:	08007787 	.word	0x08007787
 80075f8:	08007787 	.word	0x08007787
 80075fc:	08007745 	.word	0x08007745
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fc4e 	bl	8007ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0208 	orr.w	r2, r2, #8
 800761a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0204 	bic.w	r2, r2, #4
 800762a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6999      	ldr	r1, [r3, #24]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	619a      	str	r2, [r3, #24]
      break;
 800763e:	e0a5      	b.n	800778c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fcc8 	bl	8007fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6999      	ldr	r1, [r3, #24]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	619a      	str	r2, [r3, #24]
      break;
 8007680:	e084      	b.n	800778c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fd3b 	bl	8008104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0208 	orr.w	r2, r2, #8
 800769c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0204 	bic.w	r2, r2, #4
 80076ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69d9      	ldr	r1, [r3, #28]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	61da      	str	r2, [r3, #28]
      break;
 80076c0:	e064      	b.n	800778c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fdad 	bl	8008228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69d9      	ldr	r1, [r3, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	021a      	lsls	r2, r3, #8
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	61da      	str	r2, [r3, #28]
      break;
 8007702:	e043      	b.n	800778c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fe20 	bl	8008350 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0208 	orr.w	r2, r2, #8
 800771e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0204 	bic.w	r2, r2, #4
 800772e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007742:	e023      	b.n	800778c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fe6a 	bl	8008424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800775e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800776e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	021a      	lsls	r2, r3, #8
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007784:	e002      	b.n	800778c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
      break;
 800778a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop

080077a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIM_ConfigClockSource+0x1c>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e0f6      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x20a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80077da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a6f      	ldr	r2, [pc, #444]	; (80079b4 <HAL_TIM_ConfigClockSource+0x214>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	f000 80c1 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 80077fc:	4a6d      	ldr	r2, [pc, #436]	; (80079b4 <HAL_TIM_ConfigClockSource+0x214>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	f200 80c6 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007804:	4a6c      	ldr	r2, [pc, #432]	; (80079b8 <HAL_TIM_ConfigClockSource+0x218>)
 8007806:	4293      	cmp	r3, r2
 8007808:	f000 80b9 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800780c:	4a6a      	ldr	r2, [pc, #424]	; (80079b8 <HAL_TIM_ConfigClockSource+0x218>)
 800780e:	4293      	cmp	r3, r2
 8007810:	f200 80be 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007814:	4a69      	ldr	r2, [pc, #420]	; (80079bc <HAL_TIM_ConfigClockSource+0x21c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	f000 80b1 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800781c:	4a67      	ldr	r2, [pc, #412]	; (80079bc <HAL_TIM_ConfigClockSource+0x21c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	f200 80b6 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007824:	4a66      	ldr	r2, [pc, #408]	; (80079c0 <HAL_TIM_ConfigClockSource+0x220>)
 8007826:	4293      	cmp	r3, r2
 8007828:	f000 80a9 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800782c:	4a64      	ldr	r2, [pc, #400]	; (80079c0 <HAL_TIM_ConfigClockSource+0x220>)
 800782e:	4293      	cmp	r3, r2
 8007830:	f200 80ae 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007834:	4a63      	ldr	r2, [pc, #396]	; (80079c4 <HAL_TIM_ConfigClockSource+0x224>)
 8007836:	4293      	cmp	r3, r2
 8007838:	f000 80a1 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800783c:	4a61      	ldr	r2, [pc, #388]	; (80079c4 <HAL_TIM_ConfigClockSource+0x224>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f200 80a6 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007844:	4a60      	ldr	r2, [pc, #384]	; (80079c8 <HAL_TIM_ConfigClockSource+0x228>)
 8007846:	4293      	cmp	r3, r2
 8007848:	f000 8099 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800784c:	4a5e      	ldr	r2, [pc, #376]	; (80079c8 <HAL_TIM_ConfigClockSource+0x228>)
 800784e:	4293      	cmp	r3, r2
 8007850:	f200 809e 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007854:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007858:	f000 8091 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800785c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007860:	f200 8096 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007868:	f000 8089 	beq.w	800797e <HAL_TIM_ConfigClockSource+0x1de>
 800786c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007870:	f200 808e 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007878:	d03e      	beq.n	80078f8 <HAL_TIM_ConfigClockSource+0x158>
 800787a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800787e:	f200 8087 	bhi.w	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007886:	f000 8086 	beq.w	8007996 <HAL_TIM_ConfigClockSource+0x1f6>
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788e:	d87f      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007890:	2b70      	cmp	r3, #112	; 0x70
 8007892:	d01a      	beq.n	80078ca <HAL_TIM_ConfigClockSource+0x12a>
 8007894:	2b70      	cmp	r3, #112	; 0x70
 8007896:	d87b      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 8007898:	2b60      	cmp	r3, #96	; 0x60
 800789a:	d050      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x19e>
 800789c:	2b60      	cmp	r3, #96	; 0x60
 800789e:	d877      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 80078a0:	2b50      	cmp	r3, #80	; 0x50
 80078a2:	d03c      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x17e>
 80078a4:	2b50      	cmp	r3, #80	; 0x50
 80078a6:	d873      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d058      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x1be>
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	d86f      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 80078b0:	2b30      	cmp	r3, #48	; 0x30
 80078b2:	d064      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x1de>
 80078b4:	2b30      	cmp	r3, #48	; 0x30
 80078b6:	d86b      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d060      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x1de>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d867      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d05c      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x1de>
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d05a      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x1de>
 80078c8:	e062      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078da:	f000 fe8b 	bl	80085f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	609a      	str	r2, [r3, #8]
      break;
 80078f6:	e04f      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007908:	f000 fe74 	bl	80085f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800791a:	609a      	str	r2, [r3, #8]
      break;
 800791c:	e03c      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800792a:	461a      	mov	r2, r3
 800792c:	f000 fde6 	bl	80084fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2150      	movs	r1, #80	; 0x50
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fe3f 	bl	80085ba <TIM_ITRx_SetConfig>
      break;
 800793c:	e02c      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800794a:	461a      	mov	r2, r3
 800794c:	f000 fe05 	bl	800855a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2160      	movs	r1, #96	; 0x60
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fe2f 	bl	80085ba <TIM_ITRx_SetConfig>
      break;
 800795c:	e01c      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800796a:	461a      	mov	r2, r3
 800796c:	f000 fdc6 	bl	80084fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fe1f 	bl	80085ba <TIM_ITRx_SetConfig>
      break;
 800797c:	e00c      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f000 fe16 	bl	80085ba <TIM_ITRx_SetConfig>
      break;
 800798e:	e003      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
      break;
 8007994:	e000      	b.n	8007998 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	00100070 	.word	0x00100070
 80079b8:	00100060 	.word	0x00100060
 80079bc:	00100050 	.word	0x00100050
 80079c0:	00100040 	.word	0x00100040
 80079c4:	00100030 	.word	0x00100030
 80079c8:	00100020 	.word	0x00100020

080079cc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e14a      	b.n	8007d32 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	f040 80dd 	bne.w	8007c64 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	2b1f      	cmp	r3, #31
 8007aae:	f200 80d6 	bhi.w	8007c5e <HAL_TIM_RegisterCallback+0x1de>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <HAL_TIM_RegisterCallback+0x38>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007b39 	.word	0x08007b39
 8007abc:	08007b41 	.word	0x08007b41
 8007ac0:	08007b49 	.word	0x08007b49
 8007ac4:	08007b51 	.word	0x08007b51
 8007ac8:	08007b59 	.word	0x08007b59
 8007acc:	08007b61 	.word	0x08007b61
 8007ad0:	08007b69 	.word	0x08007b69
 8007ad4:	08007b71 	.word	0x08007b71
 8007ad8:	08007b79 	.word	0x08007b79
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007b89 	.word	0x08007b89
 8007ae4:	08007b91 	.word	0x08007b91
 8007ae8:	08007b99 	.word	0x08007b99
 8007aec:	08007ba1 	.word	0x08007ba1
 8007af0:	08007bab 	.word	0x08007bab
 8007af4:	08007bb5 	.word	0x08007bb5
 8007af8:	08007bbf 	.word	0x08007bbf
 8007afc:	08007bc9 	.word	0x08007bc9
 8007b00:	08007bd3 	.word	0x08007bd3
 8007b04:	08007bdd 	.word	0x08007bdd
 8007b08:	08007be7 	.word	0x08007be7
 8007b0c:	08007bf1 	.word	0x08007bf1
 8007b10:	08007bfb 	.word	0x08007bfb
 8007b14:	08007c05 	.word	0x08007c05
 8007b18:	08007c0f 	.word	0x08007c0f
 8007b1c:	08007c19 	.word	0x08007c19
 8007b20:	08007c23 	.word	0x08007c23
 8007b24:	08007c2d 	.word	0x08007c2d
 8007b28:	08007c37 	.word	0x08007c37
 8007b2c:	08007c41 	.word	0x08007c41
 8007b30:	08007c4b 	.word	0x08007c4b
 8007b34:	08007c55 	.word	0x08007c55
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007b3e:	e0f7      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007b46:	e0f3      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007b4e:	e0ef      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007b56:	e0eb      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007b5e:	e0e7      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007b66:	e0e3      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007b6e:	e0df      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007b76:	e0db      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007b7e:	e0d7      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007b86:	e0d3      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007b8e:	e0cf      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007b96:	e0cb      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007b9e:	e0c7      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007ba8:	e0c2      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8007bb2:	e0bd      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8007bbc:	e0b8      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8007bc6:	e0b3      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8007bd0:	e0ae      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8007bda:	e0a9      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007be4:	e0a4      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007bee:	e09f      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007bf8:	e09a      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007c02:	e095      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007c0c:	e090      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007c16:	e08b      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007c20:	e086      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8007c2a:	e081      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8007c34:	e07c      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8007c3e:	e077      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8007c48:	e072      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8007c52:	e06d      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8007c5c:	e068      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
        break;
 8007c62:	e065      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d15d      	bne.n	8007d2c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007c70:	7afb      	ldrb	r3, [r7, #11]
 8007c72:	2b0d      	cmp	r3, #13
 8007c74:	d857      	bhi.n	8007d26 <HAL_TIM_RegisterCallback+0x2a6>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <HAL_TIM_RegisterCallback+0x1fc>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cb5 	.word	0x08007cb5
 8007c80:	08007cbd 	.word	0x08007cbd
 8007c84:	08007cc5 	.word	0x08007cc5
 8007c88:	08007ccd 	.word	0x08007ccd
 8007c8c:	08007cd5 	.word	0x08007cd5
 8007c90:	08007cdd 	.word	0x08007cdd
 8007c94:	08007ce5 	.word	0x08007ce5
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007cf5 	.word	0x08007cf5
 8007ca0:	08007cfd 	.word	0x08007cfd
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007d15 	.word	0x08007d15
 8007cb0:	08007d1d 	.word	0x08007d1d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007cba:	e039      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007cc2:	e035      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007cca:	e031      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007cd2:	e02d      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007cda:	e029      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007ce2:	e025      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007cea:	e021      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007cf2:	e01d      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007cfa:	e019      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007d02:	e015      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007d0a:	e011      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007d12:	e00d      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007d1a:	e009      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007d24:	e004      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]
        break;
 8007d2a:	e001      	b.n	8007d30 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a4c      	ldr	r2, [pc, #304]	; (8007e84 <TIM_Base_SetConfig+0x144>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d017      	beq.n	8007d88 <TIM_Base_SetConfig+0x48>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5e:	d013      	beq.n	8007d88 <TIM_Base_SetConfig+0x48>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a49      	ldr	r2, [pc, #292]	; (8007e88 <TIM_Base_SetConfig+0x148>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00f      	beq.n	8007d88 <TIM_Base_SetConfig+0x48>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a48      	ldr	r2, [pc, #288]	; (8007e8c <TIM_Base_SetConfig+0x14c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00b      	beq.n	8007d88 <TIM_Base_SetConfig+0x48>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a47      	ldr	r2, [pc, #284]	; (8007e90 <TIM_Base_SetConfig+0x150>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d007      	beq.n	8007d88 <TIM_Base_SetConfig+0x48>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a46      	ldr	r2, [pc, #280]	; (8007e94 <TIM_Base_SetConfig+0x154>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_Base_SetConfig+0x48>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a45      	ldr	r2, [pc, #276]	; (8007e98 <TIM_Base_SetConfig+0x158>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d108      	bne.n	8007d9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a39      	ldr	r2, [pc, #228]	; (8007e84 <TIM_Base_SetConfig+0x144>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d023      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da8:	d01f      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a36      	ldr	r2, [pc, #216]	; (8007e88 <TIM_Base_SetConfig+0x148>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01b      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a35      	ldr	r2, [pc, #212]	; (8007e8c <TIM_Base_SetConfig+0x14c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d017      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a34      	ldr	r2, [pc, #208]	; (8007e90 <TIM_Base_SetConfig+0x150>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a33      	ldr	r2, [pc, #204]	; (8007e94 <TIM_Base_SetConfig+0x154>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00f      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a33      	ldr	r2, [pc, #204]	; (8007e9c <TIM_Base_SetConfig+0x15c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00b      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a32      	ldr	r2, [pc, #200]	; (8007ea0 <TIM_Base_SetConfig+0x160>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d007      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a31      	ldr	r2, [pc, #196]	; (8007ea4 <TIM_Base_SetConfig+0x164>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d003      	beq.n	8007dea <TIM_Base_SetConfig+0xaa>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <TIM_Base_SetConfig+0x158>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d108      	bne.n	8007dfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a18      	ldr	r2, [pc, #96]	; (8007e84 <TIM_Base_SetConfig+0x144>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d013      	beq.n	8007e50 <TIM_Base_SetConfig+0x110>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1a      	ldr	r2, [pc, #104]	; (8007e94 <TIM_Base_SetConfig+0x154>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00f      	beq.n	8007e50 <TIM_Base_SetConfig+0x110>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a1a      	ldr	r2, [pc, #104]	; (8007e9c <TIM_Base_SetConfig+0x15c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00b      	beq.n	8007e50 <TIM_Base_SetConfig+0x110>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a19      	ldr	r2, [pc, #100]	; (8007ea0 <TIM_Base_SetConfig+0x160>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d007      	beq.n	8007e50 <TIM_Base_SetConfig+0x110>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <TIM_Base_SetConfig+0x164>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_Base_SetConfig+0x110>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <TIM_Base_SetConfig+0x158>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d103      	bne.n	8007e58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d105      	bne.n	8007e76 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f023 0201 	bic.w	r2, r3, #1
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	611a      	str	r2, [r3, #16]
  }
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800
 8007e90:	40000c00 	.word	0x40000c00
 8007e94:	40013400 	.word	0x40013400
 8007e98:	40015000 	.word	0x40015000
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	40014400 	.word	0x40014400
 8007ea4:	40014800 	.word	0x40014800

08007ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f023 0201 	bic.w	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0303 	bic.w	r3, r3, #3
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f023 0302 	bic.w	r3, r3, #2
 8007ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a30      	ldr	r2, [pc, #192]	; (8007fc4 <TIM_OC1_SetConfig+0x11c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d013      	beq.n	8007f30 <TIM_OC1_SetConfig+0x88>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a2f      	ldr	r2, [pc, #188]	; (8007fc8 <TIM_OC1_SetConfig+0x120>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00f      	beq.n	8007f30 <TIM_OC1_SetConfig+0x88>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a2e      	ldr	r2, [pc, #184]	; (8007fcc <TIM_OC1_SetConfig+0x124>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00b      	beq.n	8007f30 <TIM_OC1_SetConfig+0x88>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a2d      	ldr	r2, [pc, #180]	; (8007fd0 <TIM_OC1_SetConfig+0x128>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d007      	beq.n	8007f30 <TIM_OC1_SetConfig+0x88>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a2c      	ldr	r2, [pc, #176]	; (8007fd4 <TIM_OC1_SetConfig+0x12c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC1_SetConfig+0x88>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a2b      	ldr	r2, [pc, #172]	; (8007fd8 <TIM_OC1_SetConfig+0x130>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10c      	bne.n	8007f4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f023 0308 	bic.w	r3, r3, #8
 8007f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f023 0304 	bic.w	r3, r3, #4
 8007f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <TIM_OC1_SetConfig+0x11c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <TIM_OC1_SetConfig+0xd2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1c      	ldr	r2, [pc, #112]	; (8007fc8 <TIM_OC1_SetConfig+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_OC1_SetConfig+0xd2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <TIM_OC1_SetConfig+0x124>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_OC1_SetConfig+0xd2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <TIM_OC1_SetConfig+0x128>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_OC1_SetConfig+0xd2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a19      	ldr	r2, [pc, #100]	; (8007fd4 <TIM_OC1_SetConfig+0x12c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_OC1_SetConfig+0xd2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a18      	ldr	r2, [pc, #96]	; (8007fd8 <TIM_OC1_SetConfig+0x130>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d111      	bne.n	8007f9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40013400 	.word	0x40013400
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800
 8007fd8:	40015000 	.word	0x40015000

08007fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800800a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0320 	bic.w	r3, r3, #32
 800802a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a2c      	ldr	r2, [pc, #176]	; (80080ec <TIM_OC2_SetConfig+0x110>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_OC2_SetConfig+0x74>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a2b      	ldr	r2, [pc, #172]	; (80080f0 <TIM_OC2_SetConfig+0x114>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_OC2_SetConfig+0x74>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a2a      	ldr	r2, [pc, #168]	; (80080f4 <TIM_OC2_SetConfig+0x118>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10d      	bne.n	800806c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1f      	ldr	r2, [pc, #124]	; (80080ec <TIM_OC2_SetConfig+0x110>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d013      	beq.n	800809c <TIM_OC2_SetConfig+0xc0>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <TIM_OC2_SetConfig+0x114>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00f      	beq.n	800809c <TIM_OC2_SetConfig+0xc0>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a1e      	ldr	r2, [pc, #120]	; (80080f8 <TIM_OC2_SetConfig+0x11c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00b      	beq.n	800809c <TIM_OC2_SetConfig+0xc0>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a1d      	ldr	r2, [pc, #116]	; (80080fc <TIM_OC2_SetConfig+0x120>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_OC2_SetConfig+0xc0>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a1c      	ldr	r2, [pc, #112]	; (8008100 <TIM_OC2_SetConfig+0x124>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_OC2_SetConfig+0xc0>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <TIM_OC2_SetConfig+0x118>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d113      	bne.n	80080c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40012c00 	.word	0x40012c00
 80080f0:	40013400 	.word	0x40013400
 80080f4:	40015000 	.word	0x40015000
 80080f8:	40014000 	.word	0x40014000
 80080fc:	40014400 	.word	0x40014400
 8008100:	40014800 	.word	0x40014800

08008104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0303 	bic.w	r3, r3, #3
 800813e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a2b      	ldr	r2, [pc, #172]	; (8008210 <TIM_OC3_SetConfig+0x10c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d007      	beq.n	8008176 <TIM_OC3_SetConfig+0x72>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <TIM_OC3_SetConfig+0x110>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC3_SetConfig+0x72>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a29      	ldr	r2, [pc, #164]	; (8008218 <TIM_OC3_SetConfig+0x114>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d10d      	bne.n	8008192 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800817c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <TIM_OC3_SetConfig+0x10c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <TIM_OC3_SetConfig+0xbe>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <TIM_OC3_SetConfig+0x110>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00f      	beq.n	80081c2 <TIM_OC3_SetConfig+0xbe>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a1d      	ldr	r2, [pc, #116]	; (800821c <TIM_OC3_SetConfig+0x118>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00b      	beq.n	80081c2 <TIM_OC3_SetConfig+0xbe>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <TIM_OC3_SetConfig+0x11c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d007      	beq.n	80081c2 <TIM_OC3_SetConfig+0xbe>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <TIM_OC3_SetConfig+0x120>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d003      	beq.n	80081c2 <TIM_OC3_SetConfig+0xbe>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a16      	ldr	r2, [pc, #88]	; (8008218 <TIM_OC3_SetConfig+0x114>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d113      	bne.n	80081ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	621a      	str	r2, [r3, #32]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	40012c00 	.word	0x40012c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40015000 	.word	0x40015000
 800821c:	40014000 	.word	0x40014000
 8008220:	40014400 	.word	0x40014400
 8008224:	40014800 	.word	0x40014800

08008228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	031b      	lsls	r3, r3, #12
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4313      	orrs	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a2c      	ldr	r2, [pc, #176]	; (8008338 <TIM_OC4_SetConfig+0x110>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d007      	beq.n	800829c <TIM_OC4_SetConfig+0x74>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a2b      	ldr	r2, [pc, #172]	; (800833c <TIM_OC4_SetConfig+0x114>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d003      	beq.n	800829c <TIM_OC4_SetConfig+0x74>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a2a      	ldr	r2, [pc, #168]	; (8008340 <TIM_OC4_SetConfig+0x118>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d10d      	bne.n	80082b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	031b      	lsls	r3, r3, #12
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a1f      	ldr	r2, [pc, #124]	; (8008338 <TIM_OC4_SetConfig+0x110>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <TIM_OC4_SetConfig+0xc0>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a1e      	ldr	r2, [pc, #120]	; (800833c <TIM_OC4_SetConfig+0x114>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00f      	beq.n	80082e8 <TIM_OC4_SetConfig+0xc0>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <TIM_OC4_SetConfig+0x11c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00b      	beq.n	80082e8 <TIM_OC4_SetConfig+0xc0>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a1d      	ldr	r2, [pc, #116]	; (8008348 <TIM_OC4_SetConfig+0x120>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d007      	beq.n	80082e8 <TIM_OC4_SetConfig+0xc0>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <TIM_OC4_SetConfig+0x124>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_OC4_SetConfig+0xc0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a17      	ldr	r2, [pc, #92]	; (8008340 <TIM_OC4_SetConfig+0x118>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d113      	bne.n	8008310 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	019b      	lsls	r3, r3, #6
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	019b      	lsls	r3, r3, #6
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	621a      	str	r2, [r3, #32]
}
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40012c00 	.word	0x40012c00
 800833c:	40013400 	.word	0x40013400
 8008340:	40015000 	.word	0x40015000
 8008344:	40014000 	.word	0x40014000
 8008348:	40014400 	.word	0x40014400
 800834c:	40014800 	.word	0x40014800

08008350 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008394:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	041b      	lsls	r3, r3, #16
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a19      	ldr	r2, [pc, #100]	; (800840c <TIM_OC5_SetConfig+0xbc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <TIM_OC5_SetConfig+0x82>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a18      	ldr	r2, [pc, #96]	; (8008410 <TIM_OC5_SetConfig+0xc0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00f      	beq.n	80083d2 <TIM_OC5_SetConfig+0x82>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a17      	ldr	r2, [pc, #92]	; (8008414 <TIM_OC5_SetConfig+0xc4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00b      	beq.n	80083d2 <TIM_OC5_SetConfig+0x82>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a16      	ldr	r2, [pc, #88]	; (8008418 <TIM_OC5_SetConfig+0xc8>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <TIM_OC5_SetConfig+0x82>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a15      	ldr	r2, [pc, #84]	; (800841c <TIM_OC5_SetConfig+0xcc>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d003      	beq.n	80083d2 <TIM_OC5_SetConfig+0x82>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a14      	ldr	r2, [pc, #80]	; (8008420 <TIM_OC5_SetConfig+0xd0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d109      	bne.n	80083e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	621a      	str	r2, [r3, #32]
}
 8008400:	bf00      	nop
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	40012c00 	.word	0x40012c00
 8008410:	40013400 	.word	0x40013400
 8008414:	40014000 	.word	0x40014000
 8008418:	40014400 	.word	0x40014400
 800841c:	40014800 	.word	0x40014800
 8008420:	40015000 	.word	0x40015000

08008424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800846a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	051b      	lsls	r3, r3, #20
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a1a      	ldr	r2, [pc, #104]	; (80084e4 <TIM_OC6_SetConfig+0xc0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d013      	beq.n	80084a8 <TIM_OC6_SetConfig+0x84>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a19      	ldr	r2, [pc, #100]	; (80084e8 <TIM_OC6_SetConfig+0xc4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00f      	beq.n	80084a8 <TIM_OC6_SetConfig+0x84>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a18      	ldr	r2, [pc, #96]	; (80084ec <TIM_OC6_SetConfig+0xc8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00b      	beq.n	80084a8 <TIM_OC6_SetConfig+0x84>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a17      	ldr	r2, [pc, #92]	; (80084f0 <TIM_OC6_SetConfig+0xcc>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d007      	beq.n	80084a8 <TIM_OC6_SetConfig+0x84>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <TIM_OC6_SetConfig+0xd0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC6_SetConfig+0x84>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <TIM_OC6_SetConfig+0xd4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d109      	bne.n	80084bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	029b      	lsls	r3, r3, #10
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800
 80084f8:	40015000 	.word	0x40015000

080084fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	f023 0201 	bic.w	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 030a 	bic.w	r3, r3, #10
 8008538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	621a      	str	r2, [r3, #32]
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855a:	b480      	push	{r7}
 800855c:	b087      	sub	sp, #28
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f023 0210 	bic.w	r2, r3, #16
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008596:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80085d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4313      	orrs	r3, r2
 80085dc:	f043 0307 	orr.w	r3, r3, #7
 80085e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	609a      	str	r2, [r3, #8]
}
 80085e8:	bf00      	nop
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800860e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	021a      	lsls	r2, r3, #8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	431a      	orrs	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	4313      	orrs	r3, r2
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	609a      	str	r2, [r3, #8]
}
 8008628:	bf00      	nop
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 031f 	and.w	r3, r3, #31
 8008646:	2201      	movs	r2, #1
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1a      	ldr	r2, [r3, #32]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	43db      	mvns	r3, r3
 8008656:	401a      	ands	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a1a      	ldr	r2, [r3, #32]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	fa01 f303 	lsl.w	r3, r1, r3
 800866c:	431a      	orrs	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
	...

08008680 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a26      	ldr	r2, [pc, #152]	; (8008724 <TIM_ResetCallback+0xa4>)
 800868c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a25      	ldr	r2, [pc, #148]	; (8008728 <TIM_ResetCallback+0xa8>)
 8008694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a24      	ldr	r2, [pc, #144]	; (800872c <TIM_ResetCallback+0xac>)
 800869c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a23      	ldr	r2, [pc, #140]	; (8008730 <TIM_ResetCallback+0xb0>)
 80086a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a22      	ldr	r2, [pc, #136]	; (8008734 <TIM_ResetCallback+0xb4>)
 80086ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a21      	ldr	r2, [pc, #132]	; (8008738 <TIM_ResetCallback+0xb8>)
 80086b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a20      	ldr	r2, [pc, #128]	; (800873c <TIM_ResetCallback+0xbc>)
 80086bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <TIM_ResetCallback+0xc0>)
 80086c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <TIM_ResetCallback+0xc4>)
 80086cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a1d      	ldr	r2, [pc, #116]	; (8008748 <TIM_ResetCallback+0xc8>)
 80086d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a1c      	ldr	r2, [pc, #112]	; (800874c <TIM_ResetCallback+0xcc>)
 80086dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <TIM_ResetCallback+0xd0>)
 80086e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <TIM_ResetCallback+0xd4>)
 80086ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a19      	ldr	r2, [pc, #100]	; (8008758 <TIM_ResetCallback+0xd8>)
 80086f4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a18      	ldr	r2, [pc, #96]	; (800875c <TIM_ResetCallback+0xdc>)
 80086fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a17      	ldr	r2, [pc, #92]	; (8008760 <TIM_ResetCallback+0xe0>)
 8008704:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a16      	ldr	r2, [pc, #88]	; (8008764 <TIM_ResetCallback+0xe4>)
 800870c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a15      	ldr	r2, [pc, #84]	; (8008768 <TIM_ResetCallback+0xe8>)
 8008714:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	08002d2d 	.word	0x08002d2d
 8008728:	080079cd 	.word	0x080079cd
 800872c:	08007a45 	.word	0x08007a45
 8008730:	08007a59 	.word	0x08007a59
 8008734:	080079f5 	.word	0x080079f5
 8008738:	08007a09 	.word	0x08007a09
 800873c:	080079e1 	.word	0x080079e1
 8008740:	08007a1d 	.word	0x08007a1d
 8008744:	08007a31 	.word	0x08007a31
 8008748:	08007a6d 	.word	0x08007a6d
 800874c:	08008899 	.word	0x08008899
 8008750:	080088ad 	.word	0x080088ad
 8008754:	080088c1 	.word	0x080088c1
 8008758:	080088d5 	.word	0x080088d5
 800875c:	080088e9 	.word	0x080088e9
 8008760:	080088fd 	.word	0x080088fd
 8008764:	08008911 	.word	0x08008911
 8008768:	08008925 	.word	0x08008925

0800876c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008780:	2302      	movs	r3, #2
 8008782:	e074      	b.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a34      	ldr	r2, [pc, #208]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d009      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a33      	ldr	r2, [pc, #204]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d004      	beq.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a31      	ldr	r2, [pc, #196]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d108      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a21      	ldr	r2, [pc, #132]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d022      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008804:	d01d      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d018      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1d      	ldr	r2, [pc, #116]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1c      	ldr	r2, [pc, #112]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00e      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d004      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a11      	ldr	r2, [pc, #68]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d10c      	bne.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4313      	orrs	r3, r2
 8008852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40012c00 	.word	0x40012c00
 8008880:	40013400 	.word	0x40013400
 8008884:	40015000 	.word	0x40015000
 8008888:	40000400 	.word	0x40000400
 800888c:	40000800 	.word	0x40000800
 8008890:	40000c00 	.word	0x40000c00
 8008894:	40014000 	.word	0x40014000

08008898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e050      	b.n	80089ec <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008950:	2b00      	cmp	r3, #0
 8008952:	d114      	bne.n	800897e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fdc5 	bl	80094ec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a21      	ldr	r2, [pc, #132]	; (80089f4 <HAL_UART_Init+0xbc>)
 8008970:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2224      	movs	r2, #36	; 0x24
 8008982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f8f2 	bl	8009b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fdf3 	bl	8009590 <UART_SetConfig>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e01b      	b.n	80089ec <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f971 	bl	8009ccc <UART_CheckIdleState>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	0800317d 	.word	0x0800317d

080089f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	460b      	mov	r3, r1
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d109      	bne.n	8008a24 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e09c      	b.n	8008b5e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d16c      	bne.n	8008b08 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	2b0c      	cmp	r3, #12
 8008a32:	d85e      	bhi.n	8008af2 <HAL_UART_RegisterCallback+0xfa>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <HAL_UART_RegisterCallback+0x44>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a71 	.word	0x08008a71
 8008a40:	08008a7b 	.word	0x08008a7b
 8008a44:	08008a85 	.word	0x08008a85
 8008a48:	08008a8f 	.word	0x08008a8f
 8008a4c:	08008a99 	.word	0x08008a99
 8008a50:	08008aa3 	.word	0x08008aa3
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008ab7 	.word	0x08008ab7
 8008a5c:	08008ac1 	.word	0x08008ac1
 8008a60:	08008acb 	.word	0x08008acb
 8008a64:	08008ad5 	.word	0x08008ad5
 8008a68:	08008adf 	.word	0x08008adf
 8008a6c:	08008ae9 	.word	0x08008ae9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008a78:	e070      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008a82:	e06b      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008a8c:	e066      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008a96:	e061      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008aa0:	e05c      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008aaa:	e057      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008ab4:	e052      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008abe:	e04d      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8008ac8:	e048      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8008ad2:	e043      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8008adc:	e03e      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8008ae6:	e039      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8008af0:	e034      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75fb      	strb	r3, [r7, #23]
        break;
 8008b06:	e029      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d11a      	bne.n	8008b48 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	2b0b      	cmp	r3, #11
 8008b16:	d002      	beq.n	8008b1e <HAL_UART_RegisterCallback+0x126>
 8008b18:	2b0c      	cmp	r3, #12
 8008b1a:	d005      	beq.n	8008b28 <HAL_UART_RegisterCallback+0x130>
 8008b1c:	e009      	b.n	8008b32 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8008b26:	e019      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8008b30:	e014      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
        break;
 8008b46:	e009      	b.n	8008b5c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	; 0x28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d167      	bne.n	8008c54 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_UART_Transmit_DMA+0x24>
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e060      	b.n	8008c56 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	88fa      	ldrh	r2, [r7, #6]
 8008b9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	88fa      	ldrh	r2, [r7, #6]
 8008ba6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2221      	movs	r2, #33	; 0x21
 8008bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d028      	beq.n	8008c14 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bc6:	4a26      	ldr	r2, [pc, #152]	; (8008c60 <HAL_UART_Transmit_DMA+0xf4>)
 8008bc8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bce:	4a25      	ldr	r2, [pc, #148]	; (8008c64 <HAL_UART_Transmit_DMA+0xf8>)
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd6:	4a24      	ldr	r2, [pc, #144]	; (8008c68 <HAL_UART_Transmit_DMA+0xfc>)
 8008bd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bde:	2200      	movs	r2, #0
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bea:	4619      	mov	r1, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3328      	adds	r3, #40	; 0x28
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	f7fc f9c7 	bl	8004f88 <HAL_DMA_Start_IT>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2210      	movs	r2, #16
 8008c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e020      	b.n	8008c56 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2240      	movs	r2, #64	; 0x40
 8008c1a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	623a      	str	r2, [r7, #32]
 8008c3e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	69f9      	ldr	r1, [r7, #28]
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e5      	bne.n	8008c1c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3728      	adds	r7, #40	; 0x28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	0800a197 	.word	0x0800a197
 8008c64:	0800a235 	.word	0x0800a235
 8008c68:	0800a3cf 	.word	0x0800a3cf

08008c6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08a      	sub	sp, #40	; 0x28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d137      	bne.n	8008cf4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_Receive_DMA+0x24>
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e030      	b.n	8008cf6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a18      	ldr	r2, [pc, #96]	; (8008d00 <HAL_UART_Receive_DMA+0x94>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d01f      	beq.n	8008ce4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d018      	beq.n	8008ce4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	623b      	str	r3, [r7, #32]
 8008cd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	69f9      	ldr	r1, [r7, #28]
 8008cd6:	6a3a      	ldr	r2, [r7, #32]
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e6      	bne.n	8008cb2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f001 f906 	bl	8009efc <UART_Start_Receive_DMA>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	e000      	b.n	8008cf6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	40008000 	.word	0x40008000

08008d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b0ba      	sub	sp, #232	; 0xe8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d32:	4013      	ands	r3, r2
 8008d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d11b      	bne.n	8008d78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d015      	beq.n	8008d78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d105      	bne.n	8008d64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 82f3 	beq.w	8009354 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
      }
      return;
 8008d76:	e2ed      	b.n	8009354 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8129 	beq.w	8008fd4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d86:	4b90      	ldr	r3, [pc, #576]	; (8008fc8 <HAL_UART_IRQHandler+0x2c4>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008d92:	4b8e      	ldr	r3, [pc, #568]	; (8008fcc <HAL_UART_IRQHandler+0x2c8>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 811c 	beq.w	8008fd4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d011      	beq.n	8008dcc <HAL_UART_IRQHandler+0xc8>
 8008da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2201      	movs	r2, #1
 8008dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc2:	f043 0201 	orr.w	r2, r3, #1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d011      	beq.n	8008dfc <HAL_UART_IRQHandler+0xf8>
 8008dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2202      	movs	r2, #2
 8008dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df2:	f043 0204 	orr.w	r2, r3, #4
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d011      	beq.n	8008e2c <HAL_UART_IRQHandler+0x128>
 8008e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2204      	movs	r2, #4
 8008e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e22:	f043 0202 	orr.w	r2, r3, #2
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e30:	f003 0308 	and.w	r3, r3, #8
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d017      	beq.n	8008e68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008e48:	4b5f      	ldr	r3, [pc, #380]	; (8008fc8 <HAL_UART_IRQHandler+0x2c4>)
 8008e4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2208      	movs	r2, #8
 8008e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5e:	f043 0208 	orr.w	r2, r3, #8
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d012      	beq.n	8008e9a <HAL_UART_IRQHandler+0x196>
 8008e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00c      	beq.n	8008e9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e90:	f043 0220 	orr.w	r2, r3, #32
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8259 	beq.w	8009358 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d013      	beq.n	8008eda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d105      	bne.n	8008eca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d007      	beq.n	8008eda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eee:	2b40      	cmp	r3, #64	; 0x40
 8008ef0:	d005      	beq.n	8008efe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ef6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d058      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 f8e3 	bl	800a0ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d148      	bne.n	8008fa4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1d9      	bne.n	8008f12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d017      	beq.n	8008f98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6e:	4a18      	ldr	r2, [pc, #96]	; (8008fd0 <HAL_UART_IRQHandler+0x2cc>)
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fc f8d9 	bl	8005130 <HAL_DMA_Abort_IT>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01f      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008f92:	4610      	mov	r0, r2
 8008f94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f96:	e015      	b.n	8008fc4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa2:	e00f      	b.n	8008fc4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fae:	e009      	b.n	8008fc4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008fc2:	e1c9      	b.n	8009358 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	bf00      	nop
    return;
 8008fc6:	e1c7      	b.n	8009358 <HAL_UART_IRQHandler+0x654>
 8008fc8:	10000001 	.word	0x10000001
 8008fcc:	04000120 	.word	0x04000120
 8008fd0:	0800a453 	.word	0x0800a453

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	f040 8157 	bne.w	800928c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	f003 0310 	and.w	r3, r3, #16
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8150 	beq.w	800928c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff0:	f003 0310 	and.w	r3, r3, #16
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8149 	beq.w	800928c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2210      	movs	r2, #16
 8009000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	f040 80bd 	bne.w	800918c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8199 	beq.w	800935c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009030:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009034:	429a      	cmp	r2, r3
 8009036:	f080 8191 	bcs.w	800935c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009040:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	f040 8087 	bne.w	8009166 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800906c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009086:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800908e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800909a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1da      	bne.n	8009058 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3308      	adds	r3, #8
 80090a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e1      	bne.n	80090a2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009102:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009104:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e3      	bne.n	80090de <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009134:	f023 0310 	bic.w	r3, r3, #16
 8009138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	461a      	mov	r2, r3
 8009142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009146:	65bb      	str	r3, [r7, #88]	; 0x58
 8009148:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800914c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e4      	bne.n	8009124 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009160:	4618      	mov	r0, r3
 8009162:	f7fb ff8c 	bl	800507e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2202      	movs	r2, #2
 800916a:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800917e:	b292      	uxth	r2, r2
 8009180:	1a8a      	subs	r2, r1, r2
 8009182:	b292      	uxth	r2, r2
 8009184:	4611      	mov	r1, r2
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800918a:	e0e7      	b.n	800935c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009198:	b29b      	uxth	r3, r3
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 80d9 	beq.w	8009360 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80091ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80d4 	beq.w	8009360 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091da:	647b      	str	r3, [r7, #68]	; 0x44
 80091dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e4      	bne.n	80091b8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	623b      	str	r3, [r7, #32]
   return(result);
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009216:	633a      	str	r2, [r7, #48]	; 0x30
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e1      	bne.n	80091ee <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	60fb      	str	r3, [r7, #12]
   return(result);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0310 	bic.w	r3, r3, #16
 8009252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	69b9      	ldr	r1, [r7, #24]
 8009266:	69fa      	ldr	r2, [r7, #28]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	617b      	str	r3, [r7, #20]
   return(result);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e4      	bne.n	800923e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009280:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009284:	4611      	mov	r1, r2
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800928a:	e069      	b.n	8009360 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800928c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d010      	beq.n	80092ba <HAL_UART_IRQHandler+0x5b6>
 8009298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800929c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092ac:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092b8:	e055      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80092ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d014      	beq.n	80092f0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80092c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d105      	bne.n	80092de <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03e      	beq.n	8009364 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
    }
    return;
 80092ee:	e039      	b.n	8009364 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <HAL_UART_IRQHandler+0x60c>
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	d003      	beq.n	8009310 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 f8ba 	bl	800a482 <UART_EndTransmit_IT>
    return;
 800930e:	e02a      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <HAL_UART_IRQHandler+0x630>
 800931c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009332:	e018      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d012      	beq.n	8009366 <HAL_UART_IRQHandler+0x662>
 8009340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009344:	2b00      	cmp	r3, #0
 8009346:	da0e      	bge.n	8009366 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009352:	e008      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
      return;
 8009354:	bf00      	nop
 8009356:	e006      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
    return;
 8009358:	bf00      	nop
 800935a:	e004      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
      return;
 800935c:	bf00      	nop
 800935e:	e002      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
      return;
 8009360:	bf00      	nop
 8009362:	e000      	b.n	8009366 <HAL_UART_IRQHandler+0x662>
    return;
 8009364:	bf00      	nop
  }
}
 8009366:	37e8      	adds	r7, #232	; 0xe8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a09      	ldr	r2, [pc, #36]	; (8009458 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d009      	beq.n	800944c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	615a      	str	r2, [r3, #20]
  }
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	40008000 	.word	0x40008000

0800945c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_UART_EnableReceiverTimeout+0x70>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d027      	beq.n	80094be <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009474:	2b20      	cmp	r3, #32
 8009476:	d120      	bne.n	80094ba <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009482:	2302      	movs	r3, #2
 8009484:	e01c      	b.n	80094c0 <HAL_UART_EnableReceiverTimeout+0x64>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2224      	movs	r2, #36	; 0x24
 8009492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80094a4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e002      	b.n	80094c0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80094ba:	2302      	movs	r3, #2
 80094bc:	e000      	b.n	80094c0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
  }
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	40008000 	.word	0x40008000

080094d0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1a      	ldr	r2, [pc, #104]	; (8009560 <UART_InitCallbacksToDefault+0x74>)
 80094f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a19      	ldr	r2, [pc, #100]	; (8009564 <UART_InitCallbacksToDefault+0x78>)
 8009500:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a18      	ldr	r2, [pc, #96]	; (8009568 <UART_InitCallbacksToDefault+0x7c>)
 8009508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a17      	ldr	r2, [pc, #92]	; (800956c <UART_InitCallbacksToDefault+0x80>)
 8009510:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a16      	ldr	r2, [pc, #88]	; (8009570 <UART_InitCallbacksToDefault+0x84>)
 8009518:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a15      	ldr	r2, [pc, #84]	; (8009574 <UART_InitCallbacksToDefault+0x88>)
 8009520:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a14      	ldr	r2, [pc, #80]	; (8009578 <UART_InitCallbacksToDefault+0x8c>)
 8009528:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a13      	ldr	r2, [pc, #76]	; (800957c <UART_InitCallbacksToDefault+0x90>)
 8009530:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a12      	ldr	r2, [pc, #72]	; (8009580 <UART_InitCallbacksToDefault+0x94>)
 8009538:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <UART_InitCallbacksToDefault+0x98>)
 8009540:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a10      	ldr	r2, [pc, #64]	; (8009588 <UART_InitCallbacksToDefault+0x9c>)
 8009548:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a0f      	ldr	r2, [pc, #60]	; (800958c <UART_InitCallbacksToDefault+0xa0>)
 8009550:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	08009381 	.word	0x08009381
 8009564:	0800936d 	.word	0x0800936d
 8009568:	080093a9 	.word	0x080093a9
 800956c:	08009395 	.word	0x08009395
 8009570:	080093bd 	.word	0x080093bd
 8009574:	080093d1 	.word	0x080093d1
 8009578:	080093e5 	.word	0x080093e5
 800957c:	080093f9 	.word	0x080093f9
 8009580:	0800a4dd 	.word	0x0800a4dd
 8009584:	0800a4f1 	.word	0x0800a4f1
 8009588:	0800a505 	.word	0x0800a505
 800958c:	0800940d 	.word	0x0800940d

08009590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009594:	b08c      	sub	sp, #48	; 0x30
 8009596:	af00      	add	r7, sp, #0
 8009598:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4baa      	ldr	r3, [pc, #680]	; (8009868 <UART_SetConfig+0x2d8>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a9f      	ldr	r2, [pc, #636]	; (800986c <UART_SetConfig+0x2dc>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095f8:	4313      	orrs	r3, r2
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009606:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009610:	430b      	orrs	r3, r1
 8009612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	f023 010f 	bic.w	r1, r3, #15
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a90      	ldr	r2, [pc, #576]	; (8009870 <UART_SetConfig+0x2e0>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d125      	bne.n	8009680 <UART_SetConfig+0xf0>
 8009634:	4b8f      	ldr	r3, [pc, #572]	; (8009874 <UART_SetConfig+0x2e4>)
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	2b03      	cmp	r3, #3
 8009640:	d81a      	bhi.n	8009678 <UART_SetConfig+0xe8>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <UART_SetConfig+0xb8>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009659 	.word	0x08009659
 800964c:	08009669 	.word	0x08009669
 8009650:	08009661 	.word	0x08009661
 8009654:	08009671 	.word	0x08009671
 8009658:	2301      	movs	r3, #1
 800965a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800965e:	e116      	b.n	800988e <UART_SetConfig+0x2fe>
 8009660:	2302      	movs	r3, #2
 8009662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009666:	e112      	b.n	800988e <UART_SetConfig+0x2fe>
 8009668:	2304      	movs	r3, #4
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966e:	e10e      	b.n	800988e <UART_SetConfig+0x2fe>
 8009670:	2308      	movs	r3, #8
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009676:	e10a      	b.n	800988e <UART_SetConfig+0x2fe>
 8009678:	2310      	movs	r3, #16
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967e:	e106      	b.n	800988e <UART_SetConfig+0x2fe>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a7c      	ldr	r2, [pc, #496]	; (8009878 <UART_SetConfig+0x2e8>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d138      	bne.n	80096fc <UART_SetConfig+0x16c>
 800968a:	4b7a      	ldr	r3, [pc, #488]	; (8009874 <UART_SetConfig+0x2e4>)
 800968c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009690:	f003 030c 	and.w	r3, r3, #12
 8009694:	2b0c      	cmp	r3, #12
 8009696:	d82d      	bhi.n	80096f4 <UART_SetConfig+0x164>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <UART_SetConfig+0x110>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096d5 	.word	0x080096d5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096f5 	.word	0x080096f5
 80096ac:	080096f5 	.word	0x080096f5
 80096b0:	080096e5 	.word	0x080096e5
 80096b4:	080096f5 	.word	0x080096f5
 80096b8:	080096f5 	.word	0x080096f5
 80096bc:	080096f5 	.word	0x080096f5
 80096c0:	080096dd 	.word	0x080096dd
 80096c4:	080096f5 	.word	0x080096f5
 80096c8:	080096f5 	.word	0x080096f5
 80096cc:	080096f5 	.word	0x080096f5
 80096d0:	080096ed 	.word	0x080096ed
 80096d4:	2300      	movs	r3, #0
 80096d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096da:	e0d8      	b.n	800988e <UART_SetConfig+0x2fe>
 80096dc:	2302      	movs	r3, #2
 80096de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e2:	e0d4      	b.n	800988e <UART_SetConfig+0x2fe>
 80096e4:	2304      	movs	r3, #4
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ea:	e0d0      	b.n	800988e <UART_SetConfig+0x2fe>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f2:	e0cc      	b.n	800988e <UART_SetConfig+0x2fe>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fa:	e0c8      	b.n	800988e <UART_SetConfig+0x2fe>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a5e      	ldr	r2, [pc, #376]	; (800987c <UART_SetConfig+0x2ec>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d125      	bne.n	8009752 <UART_SetConfig+0x1c2>
 8009706:	4b5b      	ldr	r3, [pc, #364]	; (8009874 <UART_SetConfig+0x2e4>)
 8009708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009710:	2b30      	cmp	r3, #48	; 0x30
 8009712:	d016      	beq.n	8009742 <UART_SetConfig+0x1b2>
 8009714:	2b30      	cmp	r3, #48	; 0x30
 8009716:	d818      	bhi.n	800974a <UART_SetConfig+0x1ba>
 8009718:	2b20      	cmp	r3, #32
 800971a:	d00a      	beq.n	8009732 <UART_SetConfig+0x1a2>
 800971c:	2b20      	cmp	r3, #32
 800971e:	d814      	bhi.n	800974a <UART_SetConfig+0x1ba>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <UART_SetConfig+0x19a>
 8009724:	2b10      	cmp	r3, #16
 8009726:	d008      	beq.n	800973a <UART_SetConfig+0x1aa>
 8009728:	e00f      	b.n	800974a <UART_SetConfig+0x1ba>
 800972a:	2300      	movs	r3, #0
 800972c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009730:	e0ad      	b.n	800988e <UART_SetConfig+0x2fe>
 8009732:	2302      	movs	r3, #2
 8009734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009738:	e0a9      	b.n	800988e <UART_SetConfig+0x2fe>
 800973a:	2304      	movs	r3, #4
 800973c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009740:	e0a5      	b.n	800988e <UART_SetConfig+0x2fe>
 8009742:	2308      	movs	r3, #8
 8009744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009748:	e0a1      	b.n	800988e <UART_SetConfig+0x2fe>
 800974a:	2310      	movs	r3, #16
 800974c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009750:	e09d      	b.n	800988e <UART_SetConfig+0x2fe>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a4a      	ldr	r2, [pc, #296]	; (8009880 <UART_SetConfig+0x2f0>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d125      	bne.n	80097a8 <UART_SetConfig+0x218>
 800975c:	4b45      	ldr	r3, [pc, #276]	; (8009874 <UART_SetConfig+0x2e4>)
 800975e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009762:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009766:	2bc0      	cmp	r3, #192	; 0xc0
 8009768:	d016      	beq.n	8009798 <UART_SetConfig+0x208>
 800976a:	2bc0      	cmp	r3, #192	; 0xc0
 800976c:	d818      	bhi.n	80097a0 <UART_SetConfig+0x210>
 800976e:	2b80      	cmp	r3, #128	; 0x80
 8009770:	d00a      	beq.n	8009788 <UART_SetConfig+0x1f8>
 8009772:	2b80      	cmp	r3, #128	; 0x80
 8009774:	d814      	bhi.n	80097a0 <UART_SetConfig+0x210>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <UART_SetConfig+0x1f0>
 800977a:	2b40      	cmp	r3, #64	; 0x40
 800977c:	d008      	beq.n	8009790 <UART_SetConfig+0x200>
 800977e:	e00f      	b.n	80097a0 <UART_SetConfig+0x210>
 8009780:	2300      	movs	r3, #0
 8009782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009786:	e082      	b.n	800988e <UART_SetConfig+0x2fe>
 8009788:	2302      	movs	r3, #2
 800978a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800978e:	e07e      	b.n	800988e <UART_SetConfig+0x2fe>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009796:	e07a      	b.n	800988e <UART_SetConfig+0x2fe>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800979e:	e076      	b.n	800988e <UART_SetConfig+0x2fe>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097a6:	e072      	b.n	800988e <UART_SetConfig+0x2fe>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a35      	ldr	r2, [pc, #212]	; (8009884 <UART_SetConfig+0x2f4>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d12a      	bne.n	8009808 <UART_SetConfig+0x278>
 80097b2:	4b30      	ldr	r3, [pc, #192]	; (8009874 <UART_SetConfig+0x2e4>)
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097c0:	d01a      	beq.n	80097f8 <UART_SetConfig+0x268>
 80097c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097c6:	d81b      	bhi.n	8009800 <UART_SetConfig+0x270>
 80097c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097cc:	d00c      	beq.n	80097e8 <UART_SetConfig+0x258>
 80097ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d2:	d815      	bhi.n	8009800 <UART_SetConfig+0x270>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <UART_SetConfig+0x250>
 80097d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097dc:	d008      	beq.n	80097f0 <UART_SetConfig+0x260>
 80097de:	e00f      	b.n	8009800 <UART_SetConfig+0x270>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097e6:	e052      	b.n	800988e <UART_SetConfig+0x2fe>
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ee:	e04e      	b.n	800988e <UART_SetConfig+0x2fe>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097f6:	e04a      	b.n	800988e <UART_SetConfig+0x2fe>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097fe:	e046      	b.n	800988e <UART_SetConfig+0x2fe>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009806:	e042      	b.n	800988e <UART_SetConfig+0x2fe>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a17      	ldr	r2, [pc, #92]	; (800986c <UART_SetConfig+0x2dc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d13a      	bne.n	8009888 <UART_SetConfig+0x2f8>
 8009812:	4b18      	ldr	r3, [pc, #96]	; (8009874 <UART_SetConfig+0x2e4>)
 8009814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009818:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800981c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009820:	d01a      	beq.n	8009858 <UART_SetConfig+0x2c8>
 8009822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009826:	d81b      	bhi.n	8009860 <UART_SetConfig+0x2d0>
 8009828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800982c:	d00c      	beq.n	8009848 <UART_SetConfig+0x2b8>
 800982e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009832:	d815      	bhi.n	8009860 <UART_SetConfig+0x2d0>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <UART_SetConfig+0x2b0>
 8009838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983c:	d008      	beq.n	8009850 <UART_SetConfig+0x2c0>
 800983e:	e00f      	b.n	8009860 <UART_SetConfig+0x2d0>
 8009840:	2300      	movs	r3, #0
 8009842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009846:	e022      	b.n	800988e <UART_SetConfig+0x2fe>
 8009848:	2302      	movs	r3, #2
 800984a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800984e:	e01e      	b.n	800988e <UART_SetConfig+0x2fe>
 8009850:	2304      	movs	r3, #4
 8009852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009856:	e01a      	b.n	800988e <UART_SetConfig+0x2fe>
 8009858:	2308      	movs	r3, #8
 800985a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800985e:	e016      	b.n	800988e <UART_SetConfig+0x2fe>
 8009860:	2310      	movs	r3, #16
 8009862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009866:	e012      	b.n	800988e <UART_SetConfig+0x2fe>
 8009868:	cfff69f3 	.word	0xcfff69f3
 800986c:	40008000 	.word	0x40008000
 8009870:	40013800 	.word	0x40013800
 8009874:	40021000 	.word	0x40021000
 8009878:	40004400 	.word	0x40004400
 800987c:	40004800 	.word	0x40004800
 8009880:	40004c00 	.word	0x40004c00
 8009884:	40005000 	.word	0x40005000
 8009888:	2310      	movs	r3, #16
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4aae      	ldr	r2, [pc, #696]	; (8009b4c <UART_SetConfig+0x5bc>)
 8009894:	4293      	cmp	r3, r2
 8009896:	f040 8097 	bne.w	80099c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800989a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d823      	bhi.n	80098ea <UART_SetConfig+0x35a>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <UART_SetConfig+0x318>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098cd 	.word	0x080098cd
 80098ac:	080098eb 	.word	0x080098eb
 80098b0:	080098d5 	.word	0x080098d5
 80098b4:	080098eb 	.word	0x080098eb
 80098b8:	080098db 	.word	0x080098db
 80098bc:	080098eb 	.word	0x080098eb
 80098c0:	080098eb 	.word	0x080098eb
 80098c4:	080098eb 	.word	0x080098eb
 80098c8:	080098e3 	.word	0x080098e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098cc:	f7fc fd20 	bl	8006310 <HAL_RCC_GetPCLK1Freq>
 80098d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098d2:	e010      	b.n	80098f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098d4:	4b9e      	ldr	r3, [pc, #632]	; (8009b50 <UART_SetConfig+0x5c0>)
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098d8:	e00d      	b.n	80098f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098da:	f7fc fcab 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80098de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098e0:	e009      	b.n	80098f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098e8:	e005      	b.n	80098f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80098f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8130 	beq.w	8009b5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	4a94      	ldr	r2, [pc, #592]	; (8009b54 <UART_SetConfig+0x5c4>)
 8009904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009908:	461a      	mov	r2, r3
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009910:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	4413      	add	r3, r2
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	429a      	cmp	r2, r3
 8009920:	d305      	bcc.n	800992e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	429a      	cmp	r2, r3
 800992c:	d903      	bls.n	8009936 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009934:	e113      	b.n	8009b5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	2200      	movs	r2, #0
 800993a:	60bb      	str	r3, [r7, #8]
 800993c:	60fa      	str	r2, [r7, #12]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	4a84      	ldr	r2, [pc, #528]	; (8009b54 <UART_SetConfig+0x5c4>)
 8009944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009948:	b29b      	uxth	r3, r3
 800994a:	2200      	movs	r2, #0
 800994c:	603b      	str	r3, [r7, #0]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009954:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009958:	f7f7 f9aa 	bl	8000cb0 <__aeabi_uldivmod>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	4610      	mov	r0, r2
 8009962:	4619      	mov	r1, r3
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	020b      	lsls	r3, r1, #8
 800996e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009972:	0202      	lsls	r2, r0, #8
 8009974:	6979      	ldr	r1, [r7, #20]
 8009976:	6849      	ldr	r1, [r1, #4]
 8009978:	0849      	lsrs	r1, r1, #1
 800997a:	2000      	movs	r0, #0
 800997c:	460c      	mov	r4, r1
 800997e:	4605      	mov	r5, r0
 8009980:	eb12 0804 	adds.w	r8, r2, r4
 8009984:	eb43 0905 	adc.w	r9, r3, r5
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	469a      	mov	sl, r3
 8009990:	4693      	mov	fp, r2
 8009992:	4652      	mov	r2, sl
 8009994:	465b      	mov	r3, fp
 8009996:	4640      	mov	r0, r8
 8009998:	4649      	mov	r1, r9
 800999a:	f7f7 f989 	bl	8000cb0 <__aeabi_uldivmod>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4613      	mov	r3, r2
 80099a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ac:	d308      	bcc.n	80099c0 <UART_SetConfig+0x430>
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099b4:	d204      	bcs.n	80099c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6a3a      	ldr	r2, [r7, #32]
 80099bc:	60da      	str	r2, [r3, #12]
 80099be:	e0ce      	b.n	8009b5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80099c6:	e0ca      	b.n	8009b5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d0:	d166      	bne.n	8009aa0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80099d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d827      	bhi.n	8009a2a <UART_SetConfig+0x49a>
 80099da:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <UART_SetConfig+0x450>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	08009a05 	.word	0x08009a05
 80099e4:	08009a0d 	.word	0x08009a0d
 80099e8:	08009a15 	.word	0x08009a15
 80099ec:	08009a2b 	.word	0x08009a2b
 80099f0:	08009a1b 	.word	0x08009a1b
 80099f4:	08009a2b 	.word	0x08009a2b
 80099f8:	08009a2b 	.word	0x08009a2b
 80099fc:	08009a2b 	.word	0x08009a2b
 8009a00:	08009a23 	.word	0x08009a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a04:	f7fc fc84 	bl	8006310 <HAL_RCC_GetPCLK1Freq>
 8009a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a0a:	e014      	b.n	8009a36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a0c:	f7fc fc96 	bl	800633c <HAL_RCC_GetPCLK2Freq>
 8009a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a12:	e010      	b.n	8009a36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a14:	4b4e      	ldr	r3, [pc, #312]	; (8009b50 <UART_SetConfig+0x5c0>)
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a18:	e00d      	b.n	8009a36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a1a:	f7fc fc0b 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 8009a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a20:	e009      	b.n	8009a36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a28:	e005      	b.n	8009a36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 8090 	beq.w	8009b5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	4a44      	ldr	r2, [pc, #272]	; (8009b54 <UART_SetConfig+0x5c4>)
 8009a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a50:	005a      	lsls	r2, r3, #1
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	085b      	lsrs	r3, r3, #1
 8009a58:	441a      	add	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	2b0f      	cmp	r3, #15
 8009a68:	d916      	bls.n	8009a98 <UART_SetConfig+0x508>
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a70:	d212      	bcs.n	8009a98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	f023 030f 	bic.w	r3, r3, #15
 8009a7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	8bfb      	ldrh	r3, [r7, #30]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	8bfa      	ldrh	r2, [r7, #30]
 8009a94:	60da      	str	r2, [r3, #12]
 8009a96:	e062      	b.n	8009b5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a9e:	e05e      	b.n	8009b5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d828      	bhi.n	8009afa <UART_SetConfig+0x56a>
 8009aa8:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <UART_SetConfig+0x520>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009ad5 	.word	0x08009ad5
 8009ab4:	08009add 	.word	0x08009add
 8009ab8:	08009ae5 	.word	0x08009ae5
 8009abc:	08009afb 	.word	0x08009afb
 8009ac0:	08009aeb 	.word	0x08009aeb
 8009ac4:	08009afb 	.word	0x08009afb
 8009ac8:	08009afb 	.word	0x08009afb
 8009acc:	08009afb 	.word	0x08009afb
 8009ad0:	08009af3 	.word	0x08009af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad4:	f7fc fc1c 	bl	8006310 <HAL_RCC_GetPCLK1Freq>
 8009ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ada:	e014      	b.n	8009b06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009adc:	f7fc fc2e 	bl	800633c <HAL_RCC_GetPCLK2Freq>
 8009ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ae2:	e010      	b.n	8009b06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ae4:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <UART_SetConfig+0x5c0>)
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ae8:	e00d      	b.n	8009b06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aea:	f7fc fba3 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 8009aee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009af0:	e009      	b.n	8009b06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009af8:	e005      	b.n	8009b06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b04:	bf00      	nop
    }

    if (pclk != 0U)
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d028      	beq.n	8009b5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b10:	4a10      	ldr	r2, [pc, #64]	; (8009b54 <UART_SetConfig+0x5c4>)
 8009b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	441a      	add	r2, r3
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	2b0f      	cmp	r3, #15
 8009b34:	d910      	bls.n	8009b58 <UART_SetConfig+0x5c8>
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b3c:	d20c      	bcs.n	8009b58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60da      	str	r2, [r3, #12]
 8009b48:	e009      	b.n	8009b5e <UART_SetConfig+0x5ce>
 8009b4a:	bf00      	nop
 8009b4c:	40008000 	.word	0x40008000
 8009b50:	00f42400 	.word	0x00f42400
 8009b54:	0800af78 	.word	0x0800af78
      }
      else
      {
        ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2200      	movs	r2, #0
 8009b72:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2200      	movs	r2, #0
 8009b78:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009b7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3730      	adds	r7, #48	; 0x30
 8009b82:	46bd      	mov	sp, r7
 8009b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01a      	beq.n	8009c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c86:	d10a      	bne.n	8009c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	605a      	str	r2, [r3, #4]
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b098      	sub	sp, #96	; 0x60
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cdc:	f7f9 fc2c 	bl	8003538 <HAL_GetTick>
 8009ce0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d12f      	bne.n	8009d50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f88e 	bl	8009e20 <UART_WaitOnFlagUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d022      	beq.n	8009d50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	e853 3f00 	ldrex	r3, [r3]
 8009d16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d28:	647b      	str	r3, [r7, #68]	; 0x44
 8009d2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d30:	e841 2300 	strex	r3, r2, [r1]
 8009d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e6      	bne.n	8009d0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e063      	b.n	8009e18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0304 	and.w	r3, r3, #4
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	d149      	bne.n	8009df2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d66:	2200      	movs	r2, #0
 8009d68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f857 	bl	8009e20 <UART_WaitOnFlagUntilTimeout>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d03c      	beq.n	8009df2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	623b      	str	r3, [r7, #32]
   return(result);
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d96:	633b      	str	r3, [r7, #48]	; 0x30
 8009d98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e6      	bne.n	8009d78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f023 0301 	bic.w	r3, r3, #1
 8009dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dca:	61fa      	str	r2, [r7, #28]
 8009dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	69b9      	ldr	r1, [r7, #24]
 8009dd0:	69fa      	ldr	r2, [r7, #28]
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e012      	b.n	8009e18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3758      	adds	r7, #88	; 0x58
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e30:	e04f      	b.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e38:	d04b      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e3a:	f7f9 fb7d 	bl	8003538 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d302      	bcc.n	8009e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e04e      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d037      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b80      	cmp	r3, #128	; 0x80
 8009e66:	d034      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b40      	cmp	r3, #64	; 0x40
 8009e6c:	d031      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f003 0308 	and.w	r3, r3, #8
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d110      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2208      	movs	r2, #8
 8009e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f920 	bl	800a0ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2208      	movs	r2, #8
 8009e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e029      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eac:	d111      	bne.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f906 	bl	800a0ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e00f      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4013      	ands	r3, r2
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	bf0c      	ite	eq
 8009ee2:	2301      	moveq	r3, #1
 8009ee4:	2300      	movne	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d0a0      	beq.n	8009e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b096      	sub	sp, #88	; 0x58
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	4613      	mov	r3, r2
 8009f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2222      	movs	r2, #34	; 0x22
 8009f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d02d      	beq.n	8009f8e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f38:	4a40      	ldr	r2, [pc, #256]	; (800a03c <UART_Start_Receive_DMA+0x140>)
 8009f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f42:	4a3f      	ldr	r2, [pc, #252]	; (800a040 <UART_Start_Receive_DMA+0x144>)
 8009f44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f4c:	4a3d      	ldr	r2, [pc, #244]	; (800a044 <UART_Start_Receive_DMA+0x148>)
 8009f4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f56:	2200      	movs	r2, #0
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3324      	adds	r3, #36	; 0x24
 8009f66:	4619      	mov	r1, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	f7fb f80a 	bl	8004f88 <HAL_DMA_Start_IT>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2210      	movs	r2, #16
 8009f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e051      	b.n	800a032 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d018      	beq.n	8009fc8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009faa:	657b      	str	r3, [r7, #84]	; 0x54
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fb6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e6      	bne.n	8009f96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3308      	adds	r3, #8
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	f043 0301 	orr.w	r3, r3, #1
 8009fde:	653b      	str	r3, [r7, #80]	; 0x50
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fe8:	637a      	str	r2, [r7, #52]	; 0x34
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e5      	bne.n	8009fc8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3308      	adds	r3, #8
 800a002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	613b      	str	r3, [r7, #16]
   return(result);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3308      	adds	r3, #8
 800a01a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a01c:	623a      	str	r2, [r7, #32]
 800a01e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	69f9      	ldr	r1, [r7, #28]
 800a022:	6a3a      	ldr	r2, [r7, #32]
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	61bb      	str	r3, [r7, #24]
   return(result);
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e5      	bne.n	8009ffc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3758      	adds	r7, #88	; 0x58
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	0800a255 	.word	0x0800a255
 800a040:	0800a389 	.word	0x0800a389
 800a044:	0800a3cf 	.word	0x0800a3cf

0800a048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b08f      	sub	sp, #60	; 0x3c
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a064:	637b      	str	r3, [r7, #52]	; 0x34
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a070:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e6      	bne.n	800a050 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	60bb      	str	r3, [r7, #8]
   return(result);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a098:	633b      	str	r3, [r7, #48]	; 0x30
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a2:	61ba      	str	r2, [r7, #24]
 800a0a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a6:	6979      	ldr	r1, [r7, #20]
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e5      	bne.n	800a082 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a0be:	bf00      	nop
 800a0c0:	373c      	adds	r7, #60	; 0x3c
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b095      	sub	sp, #84	; 0x54
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0f8:	e841 2300 	strex	r3, r2, [r1]
 800a0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1e6      	bne.n	800a0d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3308      	adds	r3, #8
 800a10a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	61fb      	str	r3, [r7, #28]
   return(result);
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a11a:	f023 0301 	bic.w	r3, r3, #1
 800a11e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3308      	adds	r3, #8
 800a126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a12a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e3      	bne.n	800a104 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a140:	2b01      	cmp	r3, #1
 800a142:	d118      	bne.n	800a176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	60bb      	str	r3, [r7, #8]
   return(result);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f023 0310 	bic.w	r3, r3, #16
 800a158:	647b      	str	r3, [r7, #68]	; 0x44
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6979      	ldr	r1, [r7, #20]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	613b      	str	r3, [r7, #16]
   return(result);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e6      	bne.n	800a144 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a18a:	bf00      	nop
 800a18c:	3754      	adds	r7, #84	; 0x54
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b090      	sub	sp, #64	; 0x40
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d137      	bne.n	800a222 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1da:	633a      	str	r2, [r7, #48]	; 0x30
 800a1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e5      	bne.n	800a1ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a202:	637b      	str	r3, [r7, #52]	; 0x34
 800a204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20c:	61fb      	str	r3, [r7, #28]
 800a20e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	69b9      	ldr	r1, [r7, #24]
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	617b      	str	r3, [r7, #20]
   return(result);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e6      	bne.n	800a1ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a220:	e004      	b.n	800a22c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a228:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a22a:	4798      	blx	r3
}
 800a22c:	bf00      	nop
 800a22e:	3740      	adds	r7, #64	; 0x40
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a24c:	bf00      	nop
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b09c      	sub	sp, #112	; 0x70
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d171      	bne.n	800a354 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a272:	2200      	movs	r2, #0
 800a274:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a28c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a296:	65bb      	str	r3, [r7, #88]	; 0x58
 800a298:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a29c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e6      	bne.n	800a278 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2bc:	f023 0301 	bic.w	r3, r3, #1
 800a2c0:	667b      	str	r3, [r7, #100]	; 0x64
 800a2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2ca:	647a      	str	r2, [r7, #68]	; 0x44
 800a2cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2d2:	e841 2300 	strex	r3, r2, [r1]
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1e5      	bne.n	800a2aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	e853 3f00 	ldrex	r3, [r3]
 800a2ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2f4:	663b      	str	r3, [r7, #96]	; 0x60
 800a2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e5      	bne.n	800a2de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a314:	2220      	movs	r2, #32
 800a316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d118      	bne.n	800a354 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0310 	bic.w	r3, r3, #16
 800a336:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	461a      	mov	r2, r3
 800a33e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	69b9      	ldr	r1, [r7, #24]
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	617b      	str	r3, [r7, #20]
   return(result);
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e6      	bne.n	800a322 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a356:	2200      	movs	r2, #0
 800a358:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d109      	bne.n	800a376 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a36a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a36e:	4611      	mov	r1, r2
 800a370:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a372:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a374:	e004      	b.n	800a380 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a37c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a37e:	4798      	blx	r3
}
 800a380:	bf00      	nop
 800a382:	3770      	adds	r7, #112	; 0x70
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a394:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d10b      	bne.n	800a3bc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a3b0:	0852      	lsrs	r2, r2, #1
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3ba:	e004      	b.n	800a3c6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	4798      	blx	r3
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b086      	sub	sp, #24
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f6:	2b80      	cmp	r3, #128	; 0x80
 800a3f8:	d109      	bne.n	800a40e <UART_DMAError+0x40>
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	2b21      	cmp	r3, #33	; 0x21
 800a3fe:	d106      	bne.n	800a40e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2200      	movs	r2, #0
 800a404:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a408:	6978      	ldr	r0, [r7, #20]
 800a40a:	f7ff fe1d 	bl	800a048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a418:	2b40      	cmp	r3, #64	; 0x40
 800a41a:	d109      	bne.n	800a430 <UART_DMAError+0x62>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b22      	cmp	r3, #34	; 0x22
 800a420:	d106      	bne.n	800a430 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2200      	movs	r2, #0
 800a426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a42a:	6978      	ldr	r0, [r7, #20]
 800a42c:	f7ff fe4d 	bl	800a0ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a436:	f043 0210 	orr.w	r2, r3, #16
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a44a:	bf00      	nop
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a47a:	bf00      	nop
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b088      	sub	sp, #32
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	60bb      	str	r3, [r7, #8]
   return(result);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a49e:	61fb      	str	r3, [r7, #28]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	61bb      	str	r3, [r7, #24]
 800a4aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6979      	ldr	r1, [r7, #20]
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e6      	bne.n	800a48a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d4:	bf00      	nop
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_UARTEx_DisableFifoMode+0x16>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e027      	b.n	800a57e <HAL_UARTEx_DisableFifoMode+0x66>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2224      	movs	r2, #36	; 0x24
 800a53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a55c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d101      	bne.n	800a5a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e02d      	b.n	800a5fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2224      	movs	r2, #36	; 0x24
 800a5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0201 	bic.w	r2, r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f850 	bl	800a684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a61a:	2302      	movs	r3, #2
 800a61c:	e02d      	b.n	800a67a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2224      	movs	r2, #36	; 0x24
 800a62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f812 	bl	800a684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a690:	2b00      	cmp	r3, #0
 800a692:	d108      	bne.n	800a6a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6a4:	e031      	b.n	800a70a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6a6:	2308      	movs	r3, #8
 800a6a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6aa:	2308      	movs	r3, #8
 800a6ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	0e5b      	lsrs	r3, r3, #25
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 0307 	and.w	r3, r3, #7
 800a6bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	0f5b      	lsrs	r3, r3, #29
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	7b3a      	ldrb	r2, [r7, #12]
 800a6d2:	4911      	ldr	r1, [pc, #68]	; (800a718 <UARTEx_SetNbDataToProcess+0x94>)
 800a6d4:	5c8a      	ldrb	r2, [r1, r2]
 800a6d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6da:	7b3a      	ldrb	r2, [r7, #12]
 800a6dc:	490f      	ldr	r1, [pc, #60]	; (800a71c <UARTEx_SetNbDataToProcess+0x98>)
 800a6de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	7b7a      	ldrb	r2, [r7, #13]
 800a6f0:	4909      	ldr	r1, [pc, #36]	; (800a718 <UARTEx_SetNbDataToProcess+0x94>)
 800a6f2:	5c8a      	ldrb	r2, [r1, r2]
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6f8:	7b7a      	ldrb	r2, [r7, #13]
 800a6fa:	4908      	ldr	r1, [pc, #32]	; (800a71c <UARTEx_SetNbDataToProcess+0x98>)
 800a6fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a702:	b29a      	uxth	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	0800af90 	.word	0x0800af90
 800a71c:	0800af98 	.word	0x0800af98

0800a720 <memset>:
 800a720:	4402      	add	r2, r0
 800a722:	4603      	mov	r3, r0
 800a724:	4293      	cmp	r3, r2
 800a726:	d100      	bne.n	800a72a <memset+0xa>
 800a728:	4770      	bx	lr
 800a72a:	f803 1b01 	strb.w	r1, [r3], #1
 800a72e:	e7f9      	b.n	800a724 <memset+0x4>

0800a730 <__errno>:
 800a730:	4b01      	ldr	r3, [pc, #4]	; (800a738 <__errno+0x8>)
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	20000274 	.word	0x20000274

0800a73c <__libc_init_array>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	4d0d      	ldr	r5, [pc, #52]	; (800a774 <__libc_init_array+0x38>)
 800a740:	4c0d      	ldr	r4, [pc, #52]	; (800a778 <__libc_init_array+0x3c>)
 800a742:	1b64      	subs	r4, r4, r5
 800a744:	10a4      	asrs	r4, r4, #2
 800a746:	2600      	movs	r6, #0
 800a748:	42a6      	cmp	r6, r4
 800a74a:	d109      	bne.n	800a760 <__libc_init_array+0x24>
 800a74c:	4d0b      	ldr	r5, [pc, #44]	; (800a77c <__libc_init_array+0x40>)
 800a74e:	4c0c      	ldr	r4, [pc, #48]	; (800a780 <__libc_init_array+0x44>)
 800a750:	f000 fbe8 	bl	800af24 <_init>
 800a754:	1b64      	subs	r4, r4, r5
 800a756:	10a4      	asrs	r4, r4, #2
 800a758:	2600      	movs	r6, #0
 800a75a:	42a6      	cmp	r6, r4
 800a75c:	d105      	bne.n	800a76a <__libc_init_array+0x2e>
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	f855 3b04 	ldr.w	r3, [r5], #4
 800a764:	4798      	blx	r3
 800a766:	3601      	adds	r6, #1
 800a768:	e7ee      	b.n	800a748 <__libc_init_array+0xc>
 800a76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76e:	4798      	blx	r3
 800a770:	3601      	adds	r6, #1
 800a772:	e7f2      	b.n	800a75a <__libc_init_array+0x1e>
 800a774:	0800afc0 	.word	0x0800afc0
 800a778:	0800afc0 	.word	0x0800afc0
 800a77c:	0800afc0 	.word	0x0800afc0
 800a780:	0800afc4 	.word	0x0800afc4

0800a784 <memcpy>:
 800a784:	440a      	add	r2, r1
 800a786:	4291      	cmp	r1, r2
 800a788:	f100 33ff 	add.w	r3, r0, #4294967295
 800a78c:	d100      	bne.n	800a790 <memcpy+0xc>
 800a78e:	4770      	bx	lr
 800a790:	b510      	push	{r4, lr}
 800a792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a79a:	4291      	cmp	r1, r2
 800a79c:	d1f9      	bne.n	800a792 <memcpy+0xe>
 800a79e:	bd10      	pop	{r4, pc}

0800a7a0 <powf>:
 800a7a0:	b508      	push	{r3, lr}
 800a7a2:	ed2d 8b04 	vpush	{d8-d9}
 800a7a6:	eeb0 8a60 	vmov.f32	s16, s1
 800a7aa:	eeb0 9a40 	vmov.f32	s18, s0
 800a7ae:	f000 f85b 	bl	800a868 <__ieee754_powf>
 800a7b2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ba:	eef0 8a40 	vmov.f32	s17, s0
 800a7be:	d63e      	bvs.n	800a83e <powf+0x9e>
 800a7c0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c8:	d112      	bne.n	800a7f0 <powf+0x50>
 800a7ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d2:	d039      	beq.n	800a848 <powf+0xa8>
 800a7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7d8:	f000 f839 	bl	800a84e <finitef>
 800a7dc:	b378      	cbz	r0, 800a83e <powf+0x9e>
 800a7de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	d52a      	bpl.n	800a83e <powf+0x9e>
 800a7e8:	f7ff ffa2 	bl	800a730 <__errno>
 800a7ec:	2322      	movs	r3, #34	; 0x22
 800a7ee:	e014      	b.n	800a81a <powf+0x7a>
 800a7f0:	f000 f82d 	bl	800a84e <finitef>
 800a7f4:	b998      	cbnz	r0, 800a81e <powf+0x7e>
 800a7f6:	eeb0 0a49 	vmov.f32	s0, s18
 800a7fa:	f000 f828 	bl	800a84e <finitef>
 800a7fe:	b170      	cbz	r0, 800a81e <powf+0x7e>
 800a800:	eeb0 0a48 	vmov.f32	s0, s16
 800a804:	f000 f823 	bl	800a84e <finitef>
 800a808:	b148      	cbz	r0, 800a81e <powf+0x7e>
 800a80a:	eef4 8a68 	vcmp.f32	s17, s17
 800a80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a812:	d7e9      	bvc.n	800a7e8 <powf+0x48>
 800a814:	f7ff ff8c 	bl	800a730 <__errno>
 800a818:	2321      	movs	r3, #33	; 0x21
 800a81a:	6003      	str	r3, [r0, #0]
 800a81c:	e00f      	b.n	800a83e <powf+0x9e>
 800a81e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a826:	d10a      	bne.n	800a83e <powf+0x9e>
 800a828:	eeb0 0a49 	vmov.f32	s0, s18
 800a82c:	f000 f80f 	bl	800a84e <finitef>
 800a830:	b128      	cbz	r0, 800a83e <powf+0x9e>
 800a832:	eeb0 0a48 	vmov.f32	s0, s16
 800a836:	f000 f80a 	bl	800a84e <finitef>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d1d4      	bne.n	800a7e8 <powf+0x48>
 800a83e:	eeb0 0a68 	vmov.f32	s0, s17
 800a842:	ecbd 8b04 	vpop	{d8-d9}
 800a846:	bd08      	pop	{r3, pc}
 800a848:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a84c:	e7f7      	b.n	800a83e <powf+0x9e>

0800a84e <finitef>:
 800a84e:	b082      	sub	sp, #8
 800a850:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a854:	9801      	ldr	r0, [sp, #4]
 800a856:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a85a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a85e:	bfac      	ite	ge
 800a860:	2000      	movge	r0, #0
 800a862:	2001      	movlt	r0, #1
 800a864:	b002      	add	sp, #8
 800a866:	4770      	bx	lr

0800a868 <__ieee754_powf>:
 800a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86c:	ee10 4a90 	vmov	r4, s1
 800a870:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a874:	ed2d 8b02 	vpush	{d8}
 800a878:	ee10 7a10 	vmov	r7, s0
 800a87c:	eeb0 8a40 	vmov.f32	s16, s0
 800a880:	eef0 8a60 	vmov.f32	s17, s1
 800a884:	d10c      	bne.n	800a8a0 <__ieee754_powf+0x38>
 800a886:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800a88a:	007f      	lsls	r7, r7, #1
 800a88c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800a890:	f240 8292 	bls.w	800adb8 <__ieee754_powf+0x550>
 800a894:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a898:	ecbd 8b02 	vpop	{d8}
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800a8a4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a8a8:	dcf4      	bgt.n	800a894 <__ieee754_powf+0x2c>
 800a8aa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a8ae:	dd08      	ble.n	800a8c2 <__ieee754_powf+0x5a>
 800a8b0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a8b4:	d1ee      	bne.n	800a894 <__ieee754_powf+0x2c>
 800a8b6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a8ba:	0064      	lsls	r4, r4, #1
 800a8bc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a8c0:	e7e6      	b.n	800a890 <__ieee754_powf+0x28>
 800a8c2:	2f00      	cmp	r7, #0
 800a8c4:	da20      	bge.n	800a908 <__ieee754_powf+0xa0>
 800a8c6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a8ca:	da2d      	bge.n	800a928 <__ieee754_powf+0xc0>
 800a8cc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a8d0:	f2c0 827b 	blt.w	800adca <__ieee754_powf+0x562>
 800a8d4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a8d8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a8dc:	fa48 f603 	asr.w	r6, r8, r3
 800a8e0:	fa06 f303 	lsl.w	r3, r6, r3
 800a8e4:	4543      	cmp	r3, r8
 800a8e6:	f040 8270 	bne.w	800adca <__ieee754_powf+0x562>
 800a8ea:	f006 0601 	and.w	r6, r6, #1
 800a8ee:	f1c6 0602 	rsb	r6, r6, #2
 800a8f2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a8f6:	d11f      	bne.n	800a938 <__ieee754_powf+0xd0>
 800a8f8:	2c00      	cmp	r4, #0
 800a8fa:	f280 8263 	bge.w	800adc4 <__ieee754_powf+0x55c>
 800a8fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a902:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a906:	e7c7      	b.n	800a898 <__ieee754_powf+0x30>
 800a908:	2600      	movs	r6, #0
 800a90a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a90e:	d1f0      	bne.n	800a8f2 <__ieee754_powf+0x8a>
 800a910:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a914:	f000 8250 	beq.w	800adb8 <__ieee754_powf+0x550>
 800a918:	dd08      	ble.n	800a92c <__ieee754_powf+0xc4>
 800a91a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ac20 <__ieee754_powf+0x3b8>
 800a91e:	2c00      	cmp	r4, #0
 800a920:	bfa8      	it	ge
 800a922:	eeb0 0a68 	vmovge.f32	s0, s17
 800a926:	e7b7      	b.n	800a898 <__ieee754_powf+0x30>
 800a928:	2602      	movs	r6, #2
 800a92a:	e7ee      	b.n	800a90a <__ieee754_powf+0xa2>
 800a92c:	2c00      	cmp	r4, #0
 800a92e:	f280 8246 	bge.w	800adbe <__ieee754_powf+0x556>
 800a932:	eeb1 0a68 	vneg.f32	s0, s17
 800a936:	e7af      	b.n	800a898 <__ieee754_powf+0x30>
 800a938:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a93c:	d102      	bne.n	800a944 <__ieee754_powf+0xdc>
 800a93e:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a942:	e7a9      	b.n	800a898 <__ieee754_powf+0x30>
 800a944:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a948:	eeb0 0a48 	vmov.f32	s0, s16
 800a94c:	d107      	bne.n	800a95e <__ieee754_powf+0xf6>
 800a94e:	2f00      	cmp	r7, #0
 800a950:	db05      	blt.n	800a95e <__ieee754_powf+0xf6>
 800a952:	ecbd 8b02 	vpop	{d8}
 800a956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	f000 badf 	b.w	800af1c <__ieee754_sqrtf>
 800a95e:	f000 fa4d 	bl	800adfc <fabsf>
 800a962:	b125      	cbz	r5, 800a96e <__ieee754_powf+0x106>
 800a964:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800a968:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a96c:	d115      	bne.n	800a99a <__ieee754_powf+0x132>
 800a96e:	2c00      	cmp	r4, #0
 800a970:	bfbc      	itt	lt
 800a972:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a976:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a97a:	2f00      	cmp	r7, #0
 800a97c:	da8c      	bge.n	800a898 <__ieee754_powf+0x30>
 800a97e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800a982:	4335      	orrs	r5, r6
 800a984:	d104      	bne.n	800a990 <__ieee754_powf+0x128>
 800a986:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a98a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a98e:	e783      	b.n	800a898 <__ieee754_powf+0x30>
 800a990:	2e01      	cmp	r6, #1
 800a992:	d181      	bne.n	800a898 <__ieee754_powf+0x30>
 800a994:	eeb1 0a40 	vneg.f32	s0, s0
 800a998:	e77e      	b.n	800a898 <__ieee754_powf+0x30>
 800a99a:	0ff8      	lsrs	r0, r7, #31
 800a99c:	3801      	subs	r0, #1
 800a99e:	ea56 0300 	orrs.w	r3, r6, r0
 800a9a2:	d104      	bne.n	800a9ae <__ieee754_powf+0x146>
 800a9a4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a9a8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a9ac:	e774      	b.n	800a898 <__ieee754_powf+0x30>
 800a9ae:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a9b2:	dd73      	ble.n	800aa9c <__ieee754_powf+0x234>
 800a9b4:	4b9b      	ldr	r3, [pc, #620]	; (800ac24 <__ieee754_powf+0x3bc>)
 800a9b6:	429d      	cmp	r5, r3
 800a9b8:	dc08      	bgt.n	800a9cc <__ieee754_powf+0x164>
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	da0b      	bge.n	800a9d6 <__ieee754_powf+0x16e>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	ecbd 8b02 	vpop	{d8}
 800a9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c8:	f000 baa2 	b.w	800af10 <__math_oflowf>
 800a9cc:	4b96      	ldr	r3, [pc, #600]	; (800ac28 <__ieee754_powf+0x3c0>)
 800a9ce:	429d      	cmp	r5, r3
 800a9d0:	dd08      	ble.n	800a9e4 <__ieee754_powf+0x17c>
 800a9d2:	2c00      	cmp	r4, #0
 800a9d4:	dcf3      	bgt.n	800a9be <__ieee754_powf+0x156>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	ecbd 8b02 	vpop	{d8}
 800a9dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	f000 ba90 	b.w	800af04 <__math_uflowf>
 800a9e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a9e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9ec:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800ac2c <__ieee754_powf+0x3c4>
 800a9f0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a9f4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a9f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a9fc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800aa00:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aa04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa08:	eddf 7a89 	vldr	s15, [pc, #548]	; 800ac30 <__ieee754_powf+0x3c8>
 800aa0c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800aa10:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800ac34 <__ieee754_powf+0x3cc>
 800aa14:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aa18:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800ac38 <__ieee754_powf+0x3d0>
 800aa1c:	eef0 6a67 	vmov.f32	s13, s15
 800aa20:	eee0 6a07 	vfma.f32	s13, s0, s14
 800aa24:	ee16 3a90 	vmov	r3, s13
 800aa28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aa2c:	f023 030f 	bic.w	r3, r3, #15
 800aa30:	ee06 3a90 	vmov	s13, r3
 800aa34:	eee0 6a47 	vfms.f32	s13, s0, s14
 800aa38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa3c:	3e01      	subs	r6, #1
 800aa3e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800aa42:	4306      	orrs	r6, r0
 800aa44:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aa48:	f024 040f 	bic.w	r4, r4, #15
 800aa4c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800aa50:	bf08      	it	eq
 800aa52:	eeb0 8a47 	vmoveq.f32	s16, s14
 800aa56:	ee07 4a10 	vmov	s14, r4
 800aa5a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800aa5e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eee7 0a27 	vfma.f32	s1, s14, s15
 800aa6a:	ee07 4a10 	vmov	s14, r4
 800aa6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa72:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800aa76:	ee17 1a10 	vmov	r1, s14
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa80:	f340 817c 	ble.w	800ad7c <__ieee754_powf+0x514>
 800aa84:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800aa88:	f340 80f8 	ble.w	800ac7c <__ieee754_powf+0x414>
 800aa8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa94:	bf4c      	ite	mi
 800aa96:	2001      	movmi	r0, #1
 800aa98:	2000      	movpl	r0, #0
 800aa9a:	e791      	b.n	800a9c0 <__ieee754_powf+0x158>
 800aa9c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800aaa0:	bf01      	itttt	eq
 800aaa2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800ac3c <__ieee754_powf+0x3d4>
 800aaa6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800aaaa:	f06f 0317 	mvneq.w	r3, #23
 800aaae:	ee17 5a90 	vmoveq	r5, s15
 800aab2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800aab6:	bf18      	it	ne
 800aab8:	2300      	movne	r3, #0
 800aaba:	3a7f      	subs	r2, #127	; 0x7f
 800aabc:	441a      	add	r2, r3
 800aabe:	4b60      	ldr	r3, [pc, #384]	; (800ac40 <__ieee754_powf+0x3d8>)
 800aac0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800aac4:	429d      	cmp	r5, r3
 800aac6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800aaca:	dd06      	ble.n	800aada <__ieee754_powf+0x272>
 800aacc:	4b5d      	ldr	r3, [pc, #372]	; (800ac44 <__ieee754_powf+0x3dc>)
 800aace:	429d      	cmp	r5, r3
 800aad0:	f340 80a4 	ble.w	800ac1c <__ieee754_powf+0x3b4>
 800aad4:	3201      	adds	r2, #1
 800aad6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800aada:	2500      	movs	r5, #0
 800aadc:	4b5a      	ldr	r3, [pc, #360]	; (800ac48 <__ieee754_powf+0x3e0>)
 800aade:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800aae2:	ee07 1a10 	vmov	s14, r1
 800aae6:	edd3 5a00 	vldr	s11, [r3]
 800aaea:	4b58      	ldr	r3, [pc, #352]	; (800ac4c <__ieee754_powf+0x3e4>)
 800aaec:	ee75 7a87 	vadd.f32	s15, s11, s14
 800aaf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaf4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800aaf8:	1049      	asrs	r1, r1, #1
 800aafa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800aafe:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ab02:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800ab06:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ab0a:	ee07 1a90 	vmov	s15, r1
 800ab0e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ab12:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ab16:	ee15 7a10 	vmov	r7, s10
 800ab1a:	401f      	ands	r7, r3
 800ab1c:	ee06 7a90 	vmov	s13, r7
 800ab20:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ab24:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ab28:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ab2c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ab30:	eddf 5a47 	vldr	s11, [pc, #284]	; 800ac50 <__ieee754_powf+0x3e8>
 800ab34:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ac54 <__ieee754_powf+0x3ec>
 800ab38:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ab3c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ac58 <__ieee754_powf+0x3f0>
 800ab40:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ab44:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ac2c <__ieee754_powf+0x3c4>
 800ab48:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ab4c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ac5c <__ieee754_powf+0x3f4>
 800ab50:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ab54:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ac60 <__ieee754_powf+0x3f8>
 800ab58:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ab5c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ab60:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ab64:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ab68:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ab6c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800ab70:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ab74:	eef0 5a67 	vmov.f32	s11, s15
 800ab78:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ab7c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ab80:	ee15 1a90 	vmov	r1, s11
 800ab84:	4019      	ands	r1, r3
 800ab86:	ee05 1a90 	vmov	s11, r1
 800ab8a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ab8e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ab92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab96:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ab9a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ab9e:	eeb0 6a67 	vmov.f32	s12, s15
 800aba2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800aba6:	ee16 1a10 	vmov	r1, s12
 800abaa:	4019      	ands	r1, r3
 800abac:	ee07 1a10 	vmov	s14, r1
 800abb0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800abb4:	ee06 1a10 	vmov	s12, r1
 800abb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abbc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ac64 <__ieee754_powf+0x3fc>
 800abc0:	4929      	ldr	r1, [pc, #164]	; (800ac68 <__ieee754_powf+0x400>)
 800abc2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ac6c <__ieee754_powf+0x404>
 800abc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abca:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ac70 <__ieee754_powf+0x408>
 800abce:	eee6 7a07 	vfma.f32	s15, s12, s14
 800abd2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800abd6:	ed91 7a00 	vldr	s14, [r1]
 800abda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abde:	ee07 2a10 	vmov	s14, r2
 800abe2:	eef0 6a67 	vmov.f32	s13, s15
 800abe6:	4a23      	ldr	r2, [pc, #140]	; (800ac74 <__ieee754_powf+0x40c>)
 800abe8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800abec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800abf0:	ed92 5a00 	vldr	s10, [r2]
 800abf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800abf8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800abfc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ac00:	ee16 2a90 	vmov	r2, s13
 800ac04:	4013      	ands	r3, r2
 800ac06:	ee06 3a90 	vmov	s13, r3
 800ac0a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ac0e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ac12:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ac16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac1a:	e70f      	b.n	800aa3c <__ieee754_powf+0x1d4>
 800ac1c:	2501      	movs	r5, #1
 800ac1e:	e75d      	b.n	800aadc <__ieee754_powf+0x274>
 800ac20:	00000000 	.word	0x00000000
 800ac24:	3f7ffff3 	.word	0x3f7ffff3
 800ac28:	3f800007 	.word	0x3f800007
 800ac2c:	3eaaaaab 	.word	0x3eaaaaab
 800ac30:	3fb8aa3b 	.word	0x3fb8aa3b
 800ac34:	36eca570 	.word	0x36eca570
 800ac38:	3fb8aa00 	.word	0x3fb8aa00
 800ac3c:	4b800000 	.word	0x4b800000
 800ac40:	001cc471 	.word	0x001cc471
 800ac44:	005db3d6 	.word	0x005db3d6
 800ac48:	0800afa0 	.word	0x0800afa0
 800ac4c:	fffff000 	.word	0xfffff000
 800ac50:	3e6c3255 	.word	0x3e6c3255
 800ac54:	3e53f142 	.word	0x3e53f142
 800ac58:	3e8ba305 	.word	0x3e8ba305
 800ac5c:	3edb6db7 	.word	0x3edb6db7
 800ac60:	3f19999a 	.word	0x3f19999a
 800ac64:	3f76384f 	.word	0x3f76384f
 800ac68:	0800afb0 	.word	0x0800afb0
 800ac6c:	3f763800 	.word	0x3f763800
 800ac70:	369dc3a0 	.word	0x369dc3a0
 800ac74:	0800afa8 	.word	0x0800afa8
 800ac78:	3338aa3c 	.word	0x3338aa3c
 800ac7c:	f040 8093 	bne.w	800ada6 <__ieee754_powf+0x53e>
 800ac80:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ac78 <__ieee754_powf+0x410>
 800ac84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac88:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ac8c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ac90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac94:	f73f aefa 	bgt.w	800aa8c <__ieee754_powf+0x224>
 800ac98:	15db      	asrs	r3, r3, #23
 800ac9a:	3b7e      	subs	r3, #126	; 0x7e
 800ac9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800aca0:	4118      	asrs	r0, r3
 800aca2:	4408      	add	r0, r1
 800aca4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aca8:	4a49      	ldr	r2, [pc, #292]	; (800add0 <__ieee754_powf+0x568>)
 800acaa:	3b7f      	subs	r3, #127	; 0x7f
 800acac:	411a      	asrs	r2, r3
 800acae:	4002      	ands	r2, r0
 800acb0:	ee07 2a10 	vmov	s14, r2
 800acb4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800acb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800acbc:	f1c3 0317 	rsb	r3, r3, #23
 800acc0:	4118      	asrs	r0, r3
 800acc2:	2900      	cmp	r1, #0
 800acc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acc8:	bfb8      	it	lt
 800acca:	4240      	neglt	r0, r0
 800accc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800acd0:	eddf 6a40 	vldr	s13, [pc, #256]	; 800add4 <__ieee754_powf+0x56c>
 800acd4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800add8 <__ieee754_powf+0x570>
 800acd8:	ee17 3a10 	vmov	r3, s14
 800acdc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ace0:	f023 030f 	bic.w	r3, r3, #15
 800ace4:	ee07 3a10 	vmov	s14, r3
 800ace8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800acf0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800acf4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800addc <__ieee754_powf+0x574>
 800acf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ad00:	eef0 6a67 	vmov.f32	s13, s15
 800ad04:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ad08:	eef0 5a66 	vmov.f32	s11, s13
 800ad0c:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ad10:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ad14:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ad18:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800ade0 <__ieee754_powf+0x578>
 800ad1c:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ade4 <__ieee754_powf+0x57c>
 800ad20:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ad24:	eddf 5a30 	vldr	s11, [pc, #192]	; 800ade8 <__ieee754_powf+0x580>
 800ad28:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ad2c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800adec <__ieee754_powf+0x584>
 800ad30:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ad34:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800adf0 <__ieee754_powf+0x588>
 800ad38:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ad3c:	eeb0 6a66 	vmov.f32	s12, s13
 800ad40:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ad44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad48:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ad4c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ad50:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ad54:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ad58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad60:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad64:	ee10 3a10 	vmov	r3, s0
 800ad68:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ad6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad70:	da1f      	bge.n	800adb2 <__ieee754_powf+0x54a>
 800ad72:	f000 f84b 	bl	800ae0c <scalbnf>
 800ad76:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ad7a:	e58d      	b.n	800a898 <__ieee754_powf+0x30>
 800ad7c:	4a1d      	ldr	r2, [pc, #116]	; (800adf4 <__ieee754_powf+0x58c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	dd07      	ble.n	800ad92 <__ieee754_powf+0x52a>
 800ad82:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ad86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8a:	bf4c      	ite	mi
 800ad8c:	2001      	movmi	r0, #1
 800ad8e:	2000      	movpl	r0, #0
 800ad90:	e622      	b.n	800a9d8 <__ieee754_powf+0x170>
 800ad92:	d108      	bne.n	800ada6 <__ieee754_powf+0x53e>
 800ad94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad98:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ad9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada0:	f6ff af7a 	blt.w	800ac98 <__ieee754_powf+0x430>
 800ada4:	e7ed      	b.n	800ad82 <__ieee754_powf+0x51a>
 800ada6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800adaa:	f73f af75 	bgt.w	800ac98 <__ieee754_powf+0x430>
 800adae:	2000      	movs	r0, #0
 800adb0:	e78c      	b.n	800accc <__ieee754_powf+0x464>
 800adb2:	ee00 3a10 	vmov	s0, r3
 800adb6:	e7de      	b.n	800ad76 <__ieee754_powf+0x50e>
 800adb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800adbc:	e56c      	b.n	800a898 <__ieee754_powf+0x30>
 800adbe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800adf8 <__ieee754_powf+0x590>
 800adc2:	e569      	b.n	800a898 <__ieee754_powf+0x30>
 800adc4:	eeb0 0a48 	vmov.f32	s0, s16
 800adc8:	e566      	b.n	800a898 <__ieee754_powf+0x30>
 800adca:	2600      	movs	r6, #0
 800adcc:	e591      	b.n	800a8f2 <__ieee754_powf+0x8a>
 800adce:	bf00      	nop
 800add0:	ff800000 	.word	0xff800000
 800add4:	3f317218 	.word	0x3f317218
 800add8:	3f317200 	.word	0x3f317200
 800addc:	35bfbe8c 	.word	0x35bfbe8c
 800ade0:	b5ddea0e 	.word	0xb5ddea0e
 800ade4:	3331bb4c 	.word	0x3331bb4c
 800ade8:	388ab355 	.word	0x388ab355
 800adec:	bb360b61 	.word	0xbb360b61
 800adf0:	3e2aaaab 	.word	0x3e2aaaab
 800adf4:	43160000 	.word	0x43160000
 800adf8:	00000000 	.word	0x00000000

0800adfc <fabsf>:
 800adfc:	ee10 3a10 	vmov	r3, s0
 800ae00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae04:	ee00 3a10 	vmov	s0, r3
 800ae08:	4770      	bx	lr
	...

0800ae0c <scalbnf>:
 800ae0c:	ee10 3a10 	vmov	r3, s0
 800ae10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ae14:	d02b      	beq.n	800ae6e <scalbnf+0x62>
 800ae16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ae1a:	d302      	bcc.n	800ae22 <scalbnf+0x16>
 800ae1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae20:	4770      	bx	lr
 800ae22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ae26:	d123      	bne.n	800ae70 <scalbnf+0x64>
 800ae28:	4b24      	ldr	r3, [pc, #144]	; (800aebc <scalbnf+0xb0>)
 800ae2a:	eddf 7a25 	vldr	s15, [pc, #148]	; 800aec0 <scalbnf+0xb4>
 800ae2e:	4298      	cmp	r0, r3
 800ae30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae34:	db17      	blt.n	800ae66 <scalbnf+0x5a>
 800ae36:	ee10 3a10 	vmov	r3, s0
 800ae3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae3e:	3a19      	subs	r2, #25
 800ae40:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ae44:	4288      	cmp	r0, r1
 800ae46:	dd15      	ble.n	800ae74 <scalbnf+0x68>
 800ae48:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800aec4 <scalbnf+0xb8>
 800ae4c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800aec8 <scalbnf+0xbc>
 800ae50:	ee10 3a10 	vmov	r3, s0
 800ae54:	eeb0 7a67 	vmov.f32	s14, s15
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfb8      	it	lt
 800ae5c:	eef0 7a66 	vmovlt.f32	s15, s13
 800ae60:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ae64:	4770      	bx	lr
 800ae66:	eddf 7a19 	vldr	s15, [pc, #100]	; 800aecc <scalbnf+0xc0>
 800ae6a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ae6e:	4770      	bx	lr
 800ae70:	0dd2      	lsrs	r2, r2, #23
 800ae72:	e7e5      	b.n	800ae40 <scalbnf+0x34>
 800ae74:	4410      	add	r0, r2
 800ae76:	28fe      	cmp	r0, #254	; 0xfe
 800ae78:	dce6      	bgt.n	800ae48 <scalbnf+0x3c>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	dd06      	ble.n	800ae8c <scalbnf+0x80>
 800ae7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae82:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ae86:	ee00 3a10 	vmov	s0, r3
 800ae8a:	4770      	bx	lr
 800ae8c:	f110 0f16 	cmn.w	r0, #22
 800ae90:	da09      	bge.n	800aea6 <scalbnf+0x9a>
 800ae92:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800aecc <scalbnf+0xc0>
 800ae96:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800aed0 <scalbnf+0xc4>
 800ae9a:	ee10 3a10 	vmov	r3, s0
 800ae9e:	eeb0 7a67 	vmov.f32	s14, s15
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	e7d9      	b.n	800ae5a <scalbnf+0x4e>
 800aea6:	3019      	adds	r0, #25
 800aea8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aeac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aeb0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800aed4 <scalbnf+0xc8>
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	e7d7      	b.n	800ae6a <scalbnf+0x5e>
 800aeba:	bf00      	nop
 800aebc:	ffff3cb0 	.word	0xffff3cb0
 800aec0:	4c000000 	.word	0x4c000000
 800aec4:	7149f2ca 	.word	0x7149f2ca
 800aec8:	f149f2ca 	.word	0xf149f2ca
 800aecc:	0da24260 	.word	0x0da24260
 800aed0:	8da24260 	.word	0x8da24260
 800aed4:	33000000 	.word	0x33000000

0800aed8 <with_errnof>:
 800aed8:	b513      	push	{r0, r1, r4, lr}
 800aeda:	4604      	mov	r4, r0
 800aedc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800aee0:	f7ff fc26 	bl	800a730 <__errno>
 800aee4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800aee8:	6004      	str	r4, [r0, #0]
 800aeea:	b002      	add	sp, #8
 800aeec:	bd10      	pop	{r4, pc}

0800aeee <xflowf>:
 800aeee:	b130      	cbz	r0, 800aefe <xflowf+0x10>
 800aef0:	eef1 7a40 	vneg.f32	s15, s0
 800aef4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aef8:	2022      	movs	r0, #34	; 0x22
 800aefa:	f7ff bfed 	b.w	800aed8 <with_errnof>
 800aefe:	eef0 7a40 	vmov.f32	s15, s0
 800af02:	e7f7      	b.n	800aef4 <xflowf+0x6>

0800af04 <__math_uflowf>:
 800af04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af0c <__math_uflowf+0x8>
 800af08:	f7ff bff1 	b.w	800aeee <xflowf>
 800af0c:	10000000 	.word	0x10000000

0800af10 <__math_oflowf>:
 800af10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af18 <__math_oflowf+0x8>
 800af14:	f7ff bfeb 	b.w	800aeee <xflowf>
 800af18:	70000000 	.word	0x70000000

0800af1c <__ieee754_sqrtf>:
 800af1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af20:	4770      	bx	lr
	...

0800af24 <_init>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr

0800af30 <_fini>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr
