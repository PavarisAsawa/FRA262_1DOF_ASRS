
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bfc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007dd4  08007dd4  00017dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e44  08007e44  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e4c  08007e4c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e4c  08007e4c  00017e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000018  08007e68  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08007e68  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d9c  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f08  00000000  00000000  00038e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108c  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002884b  00000000  00000000  0003e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189e6  00000000  00000000  00066b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011258d  00000000  00000000  0007f525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d50  00000000  00000000  00191ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00197804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007dbc 	.word	0x08007dbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08007dbc 	.word	0x08007dbc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	bf28      	it	cs
 8000b50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b54:	d2ed      	bcs.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b970 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9e08      	ldr	r6, [sp, #32]
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	460f      	mov	r7, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14a      	bne.n	8000d86 <__udivmoddi4+0xa6>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4694      	mov	ip, r2
 8000cf4:	d965      	bls.n	8000dc2 <__udivmoddi4+0xe2>
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	b143      	cbz	r3, 8000d0e <__udivmoddi4+0x2e>
 8000cfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d00:	f1c3 0220 	rsb	r2, r3, #32
 8000d04:	409f      	lsls	r7, r3
 8000d06:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0a:	4317      	orrs	r7, r2
 8000d0c:	409c      	lsls	r4, r3
 8000d0e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d12:	fa1f f58c 	uxth.w	r5, ip
 8000d16:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d1a:	0c22      	lsrs	r2, r4, #16
 8000d1c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d24:	fb01 f005 	mul.w	r0, r1, r5
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x62>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d34:	f080 811c 	bcs.w	8000f70 <__udivmoddi4+0x290>
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	f240 8119 	bls.w	8000f70 <__udivmoddi4+0x290>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4462      	add	r2, ip
 8000d42:	1a12      	subs	r2, r2, r0
 8000d44:	b2a4      	uxth	r4, r4
 8000d46:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d4e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d52:	fb00 f505 	mul.w	r5, r0, r5
 8000d56:	42a5      	cmp	r5, r4
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x90>
 8000d5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d62:	f080 8107 	bcs.w	8000f74 <__udivmoddi4+0x294>
 8000d66:	42a5      	cmp	r5, r4
 8000d68:	f240 8104 	bls.w	8000f74 <__udivmoddi4+0x294>
 8000d6c:	4464      	add	r4, ip
 8000d6e:	3802      	subs	r0, #2
 8000d70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d74:	1b64      	subs	r4, r4, r5
 8000d76:	2100      	movs	r1, #0
 8000d78:	b11e      	cbz	r6, 8000d82 <__udivmoddi4+0xa2>
 8000d7a:	40dc      	lsrs	r4, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0xbc>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	f000 80ed 	beq.w	8000f6a <__udivmoddi4+0x28a>
 8000d90:	2100      	movs	r1, #0
 8000d92:	e9c6 0500 	strd	r0, r5, [r6]
 8000d96:	4608      	mov	r0, r1
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	fab3 f183 	clz	r1, r3
 8000da0:	2900      	cmp	r1, #0
 8000da2:	d149      	bne.n	8000e38 <__udivmoddi4+0x158>
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	d302      	bcc.n	8000dae <__udivmoddi4+0xce>
 8000da8:	4282      	cmp	r2, r0
 8000daa:	f200 80f8 	bhi.w	8000f9e <__udivmoddi4+0x2be>
 8000dae:	1a84      	subs	r4, r0, r2
 8000db0:	eb65 0203 	sbc.w	r2, r5, r3
 8000db4:	2001      	movs	r0, #1
 8000db6:	4617      	mov	r7, r2
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d0e2      	beq.n	8000d82 <__udivmoddi4+0xa2>
 8000dbc:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc0:	e7df      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000dc2:	b902      	cbnz	r2, 8000dc6 <__udivmoddi4+0xe6>
 8000dc4:	deff      	udf	#255	; 0xff
 8000dc6:	fab2 f382 	clz	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x210>
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de0:	fb07 2015 	mls	r0, r7, r5, r2
 8000de4:	0c22      	lsrs	r2, r4, #16
 8000de6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dea:	fb0e f005 	mul.w	r0, lr, r5
 8000dee:	4290      	cmp	r0, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x124>
 8000df2:	eb1c 0202 	adds.w	r2, ip, r2
 8000df6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x122>
 8000dfc:	4290      	cmp	r0, r2
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2b8>
 8000e02:	4645      	mov	r5, r8
 8000e04:	1a12      	subs	r2, r2, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e0c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x14e>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x14c>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2c2>
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e36:	e79f      	b.n	8000d78 <__udivmoddi4+0x98>
 8000e38:	f1c1 0720 	rsb	r7, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e4e:	40fd      	lsrs	r5, r7
 8000e50:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e54:	4323      	orrs	r3, r4
 8000e56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e62:	0c1c      	lsrs	r4, r3, #16
 8000e64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e68:	fb08 f50e 	mul.w	r5, r8, lr
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	fa00 f001 	lsl.w	r0, r0, r1
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b0>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2b4>
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2b4>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4464      	add	r4, ip
 8000e90:	1b64      	subs	r4, r4, r5
 8000e92:	b29d      	uxth	r5, r3
 8000e94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e98:	fb09 4413 	mls	r4, r9, r3, r4
 8000e9c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1da>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2ac>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2ac>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	4464      	add	r4, ip
 8000eba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ebe:	fba3 9502 	umull	r9, r5, r3, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	42ac      	cmp	r4, r5
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46ae      	mov	lr, r5
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x29c>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x298>
 8000ed0:	b156      	cbz	r6, 8000ee8 <__udivmoddi4+0x208>
 8000ed2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ed6:	eb64 040e 	sbc.w	r4, r4, lr
 8000eda:	fa04 f707 	lsl.w	r7, r4, r7
 8000ede:	40ca      	lsrs	r2, r1
 8000ee0:	40cc      	lsrs	r4, r1
 8000ee2:	4317      	orrs	r7, r2
 8000ee4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	f1c3 0120 	rsb	r1, r3, #32
 8000ef4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef8:	fa20 f201 	lsr.w	r2, r0, r1
 8000efc:	fa25 f101 	lsr.w	r1, r5, r1
 8000f00:	409d      	lsls	r5, r3
 8000f02:	432a      	orrs	r2, r5
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f10:	fb07 1510 	mls	r5, r7, r0, r1
 8000f14:	0c11      	lsrs	r1, r2, #16
 8000f16:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f1a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f1e:	428d      	cmp	r5, r1
 8000f20:	fa04 f403 	lsl.w	r4, r4, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x258>
 8000f26:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b0>
 8000f30:	428d      	cmp	r5, r1
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b0>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4461      	add	r1, ip
 8000f38:	1b49      	subs	r1, r1, r5
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f40:	fb07 1115 	mls	r1, r7, r5, r1
 8000f44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f48:	fb05 f10e 	mul.w	r1, r5, lr
 8000f4c:	4291      	cmp	r1, r2
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x282>
 8000f50:	eb1c 0202 	adds.w	r2, ip, r2
 8000f54:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2a8>
 8000f5a:	4291      	cmp	r1, r2
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2a8>
 8000f5e:	3d02      	subs	r5, #2
 8000f60:	4462      	add	r2, ip
 8000f62:	1a52      	subs	r2, r2, r1
 8000f64:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0xfc>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000f70:	4639      	mov	r1, r7
 8000f72:	e6e6      	b.n	8000d42 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e6fb      	b.n	8000d70 <__udivmoddi4+0x90>
 8000f78:	4548      	cmp	r0, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f0>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f84:	3b01      	subs	r3, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f0>
 8000f88:	4645      	mov	r5, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x282>
 8000f8c:	462b      	mov	r3, r5
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1da>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x258>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b0>
 8000f98:	3d02      	subs	r5, #2
 8000f9a:	4462      	add	r2, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x124>
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	e70a      	b.n	8000db8 <__udivmoddi4+0xd8>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x14e>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <PIDController_Init>:
uint32_t Saturation = 1000;
extern TIM_HandleTypeDef htim4;
float tolerance = 0.005;

void PIDController_Init(PIDStructureTypeDef* PID,float FWKp ,float FWKi , float FWKd, float BWKp ,float BWKi , float BWKd)	// Initialize PID Variable
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	61f8      	str	r0, [r7, #28]
 8000fb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fbc:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fc0:	edc7 1a03 	vstr	s3, [r7, #12]
 8000fc4:	ed87 2a02 	vstr	s4, [r7, #8]
 8000fc8:	edc7 2a01 	vstr	s5, [r7, #4]
	PID->FWKp = FWKp;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	601a      	str	r2, [r3, #0]
	PID->FWKi = FWKi;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	605a      	str	r2, [r3, #4]
	PID->FWKd = FWKd;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	609a      	str	r2, [r3, #8]

	PID->BWKp = BWKp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	60da      	str	r2, [r3, #12]
	PID->BWKi = BWKi;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	611a      	str	r2, [r3, #16]
	PID->BWKd = BWKd;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	615a      	str	r2, [r3, #20]


	PID->Error[0] = 0;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
	PID->Error[2] = 0;
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
	PID->Command = 0;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
	PID->Command_1 = 0;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001018:	bf00      	nop
 800101a:	3724      	adds	r7, #36	; 0x24
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <Motor_Control>:

void Motor_Control(int32_t cmd)
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if(cmd > 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	dd05      	ble.n	800103e <Motor_Control+0x1a>
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <Motor_Control+0x54>)
 8001038:	f003 faca 	bl	80045d0 <HAL_GPIO_WritePin>
 800103c:	e007      	b.n	800104e <Motor_Control+0x2a>
	else if (cmd < 0)  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	da04      	bge.n	800104e <Motor_Control+0x2a>
 8001044:	2200      	movs	r2, #0
 8001046:	2110      	movs	r1, #16
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <Motor_Control+0x54>)
 800104a:	f003 fac1 	bl	80045d0 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,fabs(cmd));
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa34 	bl	80004bc <__aeabi_i2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4614      	mov	r4, r2
 800105a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <Motor_Control+0x58>)
 8001060:	681e      	ldr	r6, [r3, #0]
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff fca5 	bl	80009b4 <__aeabi_d2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	63b3      	str	r3, [r6, #56]	; 0x38
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001076:	bf00      	nop
 8001078:	48000800 	.word	0x48000800
 800107c:	200001a0 	.word	0x200001a0

08001080 <PIDControllerPosition_Command>:


void PIDControllerPosition_Command(PIDStructureTypeDef* PID,QEIStructureTypeDef* Feedback,float setpoint)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	ed87 0a01 	vstr	s0, [r7, #4]
	PID->Error[0] = setpoint - Feedback->LinearPosition;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001094:	ed97 7a01 	vldr	s14, [r7, #4]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	edc3 7a06 	vstr	s15, [r3, #24]
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]*/

	if (fabs(PID->Error[0]) > tolerance)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80010a8:	eeb0 7ae7 	vabs.f32	s14, s15
 80010ac:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <PIDControllerPosition_Command+0x198>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	dd7b      	ble.n	80011b4 <PIDControllerPosition_Command+0x134>
	{
		if (PID->Error[0] >= 0)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	edd3 7a06 	vldr	s15, [r3, #24]
 80010c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	db35      	blt.n	8001138 <PIDControllerPosition_Command+0xb8>
		 {
			PID->Command = PID->Command_1 +
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->FWKp + PID->FWKi + PID->FWKd)*PID->Error[0])
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 6a00 	vldr	s13, [r3]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edd3 7a01 	vldr	s15, [r3, #4]
 80010de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 80010f6:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->FWKp+(2*PID->FWKd))*PID->Error[1])
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 6a00 	vldr	s13, [r3]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	edd3 7a02 	vldr	s15, [r3, #8]
 8001106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	edd3 7a07 	vldr	s15, [r3, #28]
 8001114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001118:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->FWKd*PID->Error[2]);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a08 	vldr	s15, [r3, #32]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001136:	e041      	b.n	80011bc <PIDControllerPosition_Command+0x13c>
		 }
		else if (PID->Error[0] < 0)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	edd3 7a06 	vldr	s15, [r3, #24]
 800113e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d539      	bpl.n	80011bc <PIDControllerPosition_Command+0x13c>
		{
			PID->Command = PID->Command_1 +
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->BWKp + PID->BWKi + PID->BWKd)*PID->Error[0])
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 6a03 	vldr	s13, [r3, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edd3 7a04 	vldr	s15, [r3, #16]
 800115a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	edd3 7a05 	vldr	s15, [r3, #20]
 8001164:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	edd3 7a06 	vldr	s15, [r3, #24]
 800116e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 8001172:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->BWKp+(2*PID->BWKd))*PID->Error[1])
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 6a03 	vldr	s13, [r3, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001182:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001186:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001194:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->BWKd*PID->Error[2]);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	edd3 6a05 	vldr	s13, [r3, #20]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80011b2:	e003      	b.n	80011bc <PIDControllerPosition_Command+0x13c>
		}
	}
	else PID->Command = 0;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

	if(PID->Command >= 1000) PID->Command = 1000;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011c2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800121c <PIDControllerPosition_Command+0x19c>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	db03      	blt.n	80011d8 <PIDControllerPosition_Command+0x158>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <PIDControllerPosition_Command+0x1a0>)
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
 80011d6:	e00c      	b.n	80011f2 <PIDControllerPosition_Command+0x172>
	else if (PID->Command <= -1000) PID->Command = -1000;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011de:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001224 <PIDControllerPosition_Command+0x1a4>
 80011e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d802      	bhi.n	80011f2 <PIDControllerPosition_Command+0x172>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <PIDControllerPosition_Command+0x1a8>)
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
	// Implement PID Velocity Form Algorithm

	/* Update Variable */
	PID->Command_1 = PID->Command;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
	PID->Error[2] = PID->Error[1];
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	621a      	str	r2, [r3, #32]
	PID->Error[1] = PID->Error[0];
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	61da      	str	r2, [r3, #28]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000000 	.word	0x20000000
 800121c:	447a0000 	.word	0x447a0000
 8001220:	447a0000 	.word	0x447a0000
 8001224:	c47a0000 	.word	0xc47a0000
 8001228:	c47a0000 	.word	0xc47a0000

0800122c <PIDControllerVelocity_Command>:

void PIDControllerVelocity_Command(PIDStructureTypeDef* PID,QEIStructureTypeDef* Feedback,float setpoint)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
	PID->Error[0] = setpoint - Feedback->LinearVelocity;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001240:	ed97 7a01 	vldr	s14, [r7, #4]
 8001244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edc3 7a06 	vstr	s15, [r3, #24]
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */

//    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0)))


		if (PID->Error[0] >= 0)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	edd3 7a06 	vldr	s15, [r3, #24]
 8001254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	db35      	blt.n	80012ca <PIDControllerVelocity_Command+0x9e>
		 {
			PID->Command = PID->Command_1 +
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->FWKp + PID->FWKi + PID->FWKd)*PID->Error[0])
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	edd3 6a00 	vldr	s13, [r3]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001270:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	edd3 7a02 	vldr	s15, [r3, #8]
 800127a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	edd3 7a06 	vldr	s15, [r3, #24]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 8001288:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->FWKp+(2*PID->FWKd))*PID->Error[1])
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 6a00 	vldr	s13, [r3]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	edd3 7a02 	vldr	s15, [r3, #8]
 8001298:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800129c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80012a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012aa:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->FWKd*PID->Error[2]);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80012c8:	e03c      	b.n	8001344 <PIDControllerVelocity_Command+0x118>
		 }
		else if (PID->Error[0] < 0)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80012d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d534      	bpl.n	8001344 <PIDControllerVelocity_Command+0x118>
		{
			PID->Command = PID->Command_1 +
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->BWKp + PID->BWKi + PID->BWKd)*PID->Error[0])
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 8001304:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->BWKp+(2*PID->BWKd))*PID->Error[1])
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	edd3 6a03 	vldr	s13, [r3, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	edd3 7a05 	vldr	s15, [r3, #20]
 8001314:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001318:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001326:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->BWKd*PID->Error[2]);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	edd3 7a08 	vldr	s15, [r3, #32]
 8001336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		}


	// Implement PID Velocity Form Algorithm

	if(PID->Command >= 1000) PID->Command = 1000;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800134a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013a0 <PIDControllerVelocity_Command+0x174>
 800134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	db03      	blt.n	8001360 <PIDControllerVelocity_Command+0x134>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <PIDControllerVelocity_Command+0x178>)
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
 800135e:	e00c      	b.n	800137a <PIDControllerVelocity_Command+0x14e>
	else if (PID->Command <= -1000) PID->Command = -1000;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001366:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80013a8 <PIDControllerVelocity_Command+0x17c>
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	d802      	bhi.n	800137a <PIDControllerVelocity_Command+0x14e>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <PIDControllerVelocity_Command+0x180>)
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

	/* Update Variable */
	PID->Command_1 = PID->Command;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
	PID->Error[2] = PID->Error[1];
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	621a      	str	r2, [r3, #32]
	PID->Error[1] = PID->Error[0];
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	61da      	str	r2, [r3, #28]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	447a0000 	.word	0x447a0000
 80013a4:	447a0000 	.word	0x447a0000
 80013a8:	c47a0000 	.word	0xc47a0000
 80013ac:	c47a0000 	.word	0xc47a0000

080013b0 <PIDControllerCascade_Command>:

void PIDControllerCascade_Command(PIDStructureTypeDef *PIDposition , PIDStructureTypeDef *PIDvelocity ,QEIStructureTypeDef *QEI , float setpoint)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	ed87 0a00 	vstr	s0, [r7]
	PIDControllerPosition_Command(PIDposition, QEI, setpoint);
 80013c0:	ed97 0a00 	vldr	s0, [r7]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff fe5a 	bl	8001080 <PIDControllerPosition_Command>
	PIDControllerVelocity_Command(PIDvelocity, QEI, PIDposition->Command);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	68b8      	ldr	r0, [r7, #8]
 80013da:	f7ff ff27 	bl	800122c <PIDControllerVelocity_Command>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	213c      	movs	r1, #60	; 0x3c
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 fc97 	bl	8005d30 <HAL_TIM_Encoder_Start>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 8001410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001414:	b08e      	sub	sp, #56	; 0x38
 8001416:	af00      	add	r7, sp, #0
 8001418:	6278      	str	r0, [r7, #36]	; 0x24
 800141a:	6239      	str	r1, [r7, #32]
 800141c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8001420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001426:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	617a      	str	r2, [r7, #20]
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800143c:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800144c:	1a84      	subs	r4, r0, r2
 800144e:	eb61 0503 	sbc.w	r5, r1, r3
 8001452:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001462:	ebb0 0a02 	subs.w	sl, r0, r2
 8001466:	eb61 0b03 	sbc.w	fp, r1, r3
 800146a:	4650      	mov	r0, sl
 800146c:	4659      	mov	r1, fp
 800146e:	f7ff f859 	bl	8000524 <__aeabi_ul2d>
 8001472:	a368      	add	r3, pc, #416	; (adr r3, 8001614 <QEIEncoder_Update+0x204>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f88a 	bl	8000590 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fab6 	bl	80009f4 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 800148c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001490:	495b      	ldr	r1, [pc, #364]	; (8001600 <QEIEncoder_Update+0x1f0>)
 8001492:	428a      	cmp	r2, r1
 8001494:	f173 0300 	sbcs.w	r3, r3, #0
 8001498:	db08      	blt.n	80014ac <QEIEncoder_Update+0x9c>
 800149a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800149e:	1e59      	subs	r1, r3, #1
 80014a0:	60f9      	str	r1, [r7, #12]
 80014a2:	60ba      	str	r2, [r7, #8]
 80014a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 80014ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80014b4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80014b8:	da08      	bge.n	80014cc <QEIEncoder_Update+0xbc>
 80014ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	6079      	str	r1, [r7, #4]
 80014c2:	603a      	str	r2, [r7, #0]
 80014c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014c8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 80014cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014d0:	4622      	mov	r2, r4
 80014d2:	462b      	mov	r3, r5
 80014d4:	f04f 0000 	mov.w	r0, #0
 80014d8:	f04f 0100 	mov.w	r1, #0
 80014dc:	0119      	lsls	r1, r3, #4
 80014de:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80014e2:	0110      	lsls	r0, r2, #4
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ebb2 0804 	subs.w	r8, r2, r4
 80014ec:	eb63 0905 	sbc.w	r9, r3, r5
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80014fc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001500:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001504:	4690      	mov	r8, r2
 8001506:	4699      	mov	r9, r3
 8001508:	4642      	mov	r2, r8
 800150a:	464b      	mov	r3, r9
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb90 	bl	8000c34 <__aeabi_l2f>
 8001514:	ee06 0a90 	vmov	s13, r0
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <QEIEncoder_Update+0x1f4>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001524:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ffd0 	bl	80004e0 <__aeabi_f2d>
 8001540:	4604      	mov	r4, r0
 8001542:	460d      	mov	r5, r1
 8001544:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001548:	f7fe fff4 	bl	8000534 <__aeabi_l2d>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <QEIEncoder_Update+0x1f8>)
 8001552:	f7ff f81d 	bl	8000590 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4690      	mov	r8, r2
 800155c:	4699      	mov	r9, r3
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <QEIEncoder_Update+0x1f4>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffaa 	bl	80004bc <__aeabi_i2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4640      	mov	r0, r8
 800156e:	4649      	mov	r1, r9
 8001570:	f7ff f938 	bl	80007e4 <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe fe52 	bl	8000224 <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa34 	bl	80009f4 <__aeabi_d2f>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	edd3 7a08 	vldr	s15, [r3, #32]
 8001598:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800159c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015a0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800160c <QEIEncoder_Update+0x1fc>
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <QEIEncoder_Update+0x200>)
 80015b4:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <QEIEncoder_Update+0x200>)
 80015b8:	ed93 7a00 	vldr	s14, [r3]
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <QEIEncoder_Update+0x200>)
 80015be:	edd3 7a01 	vldr	s15, [r3, #4]
 80015c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <QEIEncoder_Update+0x200>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <QEIEncoder_Update+0x200>)
 80015f2:	6053      	str	r3, [r2, #4]
}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015fe:	bf00      	nop
 8001600:	80000001 	.word	0x80000001
 8001604:	20000004 	.word	0x20000004
 8001608:	40300000 	.word	0x40300000
 800160c:	42700000 	.word	0x42700000
 8001610:	20000034 	.word	0x20000034
 8001614:	a0b5ed8d 	.word	0xa0b5ed8d
 8001618:	3eb0c6f7 	.word	0x3eb0c6f7

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f000 feda 	bl	80023da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f8b3 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f000 fb45 	bl	8001cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800162e:	f000 fb19 	bl	8001c64 <MX_DMA_Init>
  MX_TIM5_Init();
 8001632:	f000 fa75 	bl	8001b20 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001636:	f000 f97d 	bl	8001934 <MX_TIM2_Init>
  MX_TIM3_Init();
 800163a:	f000 f9c9 	bl	80019d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800163e:	f000 fac5 	bl	8001bcc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001642:	f000 fa13 	bl	8001a6c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001646:	f000 f8ed 	bl	8001824 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 800164a:	4842      	ldr	r0, [pc, #264]	; (8001754 <main+0x138>)
 800164c:	f004 f8e8 	bl	8005820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 8001650:	4841      	ldr	r0, [pc, #260]	; (8001758 <main+0x13c>)
 8001652:	f004 f8e5 	bl	8005820 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim4);							// Initialize PMW Signal Timer
 8001656:	4841      	ldr	r0, [pc, #260]	; (800175c <main+0x140>)
 8001658:	f004 f872 	bl	8005740 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800165c:	2104      	movs	r1, #4
 800165e:	483f      	ldr	r0, [pc, #252]	; (800175c <main+0x140>)
 8001660:	f004 f9ae 	bl	80059c0 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, Joystick.XYBuffer, 200);
 8001664:	22c8      	movs	r2, #200	; 0xc8
 8001666:	493e      	ldr	r1, [pc, #248]	; (8001760 <main+0x144>)
 8001668:	483e      	ldr	r0, [pc, #248]	; (8001764 <main+0x148>)
 800166a:	f001 fb23 	bl	8002cb4 <HAL_ADC_Start_DMA>

  float PID_P_up[3] = {1.472 ,0.00000000495, 0}; //{1.42 ,0.0000000052, 0}
 800166e:	4a3e      	ldr	r2, [pc, #248]	; (8001768 <main+0x14c>)
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	ca07      	ldmia	r2, {r0, r1, r2}
 8001676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_P_down[3] = {1.6 ,0.000000067, 0}; //{1.38 ,0.000000072, 0}
 800167a:	4a3c      	ldr	r2, [pc, #240]	; (800176c <main+0x150>)
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	ca07      	ldmia	r2, {r0, r1, r2}
 8001682:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float PID_V_up[3] = {3.7 ,0.0013, 0.00000054}; //{4.38 ,0.005, 0.0000039}  {4.35 ,0.0038, 0.0000039}
 8001686:	4a3a      	ldr	r2, [pc, #232]	; (8001770 <main+0x154>)
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	ca07      	ldmia	r2, {r0, r1, r2}
 800168e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_V_down[3] = {3.4 ,0.00085, 0.00000054};
 8001692:	4a38      	ldr	r2, [pc, #224]	; (8001774 <main+0x158>)
 8001694:	463b      	mov	r3, r7
 8001696:	ca07      	ldmia	r2, {r0, r1, r2}
 8001698:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 800169c:	4936      	ldr	r1, [pc, #216]	; (8001778 <main+0x15c>)
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <main+0x160>)
 80016a0:	f7ff fea1 	bl	80013e6 <QEIEncoder_Init>
  PIDController_Init(&PIDp, PID_P_up[0], PID_P_up[1], PID_P_up[2] , PID_P_down[0], PID_P_down[1], PID_P_down[2]);	// Initialize Position Controller
 80016a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80016b0:	ed97 6a06 	vldr	s12, [r7, #24]
 80016b4:	edd7 5a07 	vldr	s11, [r7, #28]
 80016b8:	ed97 5a08 	vldr	s10, [r7, #32]
 80016bc:	eef0 2a45 	vmov.f32	s5, s10
 80016c0:	eeb0 2a65 	vmov.f32	s4, s11
 80016c4:	eef0 1a46 	vmov.f32	s3, s12
 80016c8:	eeb0 1a66 	vmov.f32	s2, s13
 80016cc:	eef0 0a47 	vmov.f32	s1, s14
 80016d0:	eeb0 0a67 	vmov.f32	s0, s15
 80016d4:	482a      	ldr	r0, [pc, #168]	; (8001780 <main+0x164>)
 80016d6:	f7ff fc69 	bl	8000fac <PIDController_Init>
  PIDController_Init(&PIDv, PID_V_up[0], PID_V_up[1], PID_V_up[2] , PID_V_down[0], PID_V_down[1], PID_V_down[2]);	// Initialize Velocity Controller
 80016da:	edd7 7a03 	vldr	s15, [r7, #12]
 80016de:	ed97 7a04 	vldr	s14, [r7, #16]
 80016e2:	edd7 6a05 	vldr	s13, [r7, #20]
 80016e6:	ed97 6a00 	vldr	s12, [r7]
 80016ea:	edd7 5a01 	vldr	s11, [r7, #4]
 80016ee:	ed97 5a02 	vldr	s10, [r7, #8]
 80016f2:	eef0 2a45 	vmov.f32	s5, s10
 80016f6:	eeb0 2a65 	vmov.f32	s4, s11
 80016fa:	eef0 1a46 	vmov.f32	s3, s12
 80016fe:	eeb0 1a66 	vmov.f32	s2, s13
 8001702:	eef0 0a47 	vmov.f32	s1, s14
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	481e      	ldr	r0, [pc, #120]	; (8001784 <main+0x168>)
 800170c:	f7ff fc4e 	bl	8000fac <PIDController_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// SET to UPWARD
 8001710:	2201      	movs	r2, #1
 8001712:	2110      	movs	r1, #16
 8001714:	481c      	ldr	r0, [pc, #112]	; (8001788 <main+0x16c>)
 8001716:	f002 ff5b 	bl	80045d0 <HAL_GPIO_WritePin>
  tempSetpoint = 0;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <main+0x170>)
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  HAL_Delay(2000);
 8001722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001726:	f000 fec9 	bl	80024bc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PIDControllerCascade_Command(&PIDp, &PIDv, &QEI,tempSetpoint);
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <main+0x170>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <main+0x160>)
 8001736:	4913      	ldr	r1, [pc, #76]	; (8001784 <main+0x168>)
 8001738:	4811      	ldr	r0, [pc, #68]	; (8001780 <main+0x164>)
 800173a:	f7ff fe39 	bl	80013b0 <PIDControllerCascade_Command>
	  Motor_Control((PIDv.Command));
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <main+0x168>)
 8001740:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001748:	ee17 0a90 	vmov	r0, s15
 800174c:	f7ff fc6a 	bl	8001024 <Motor_Control>
	  PIDControllerCascade_Command(&PIDp, &PIDv, &QEI,tempSetpoint);
 8001750:	e7eb      	b.n	800172a <main+0x10e>
 8001752:	bf00      	nop
 8001754:	20000108 	.word	0x20000108
 8001758:	20000154 	.word	0x20000154
 800175c:	200001a0 	.word	0x200001a0
 8001760:	20000368 	.word	0x20000368
 8001764:	2000003c 	.word	0x2000003c
 8001768:	08007dd4 	.word	0x08007dd4
 800176c:	08007de0 	.word	0x08007de0
 8001770:	08007dec 	.word	0x08007dec
 8001774:	08007df8 	.word	0x08007df8
 8001778:	200001ec 	.word	0x200001ec
 800177c:	200002d8 	.word	0x200002d8
 8001780:	20000310 	.word	0x20000310
 8001784:	2000033c 	.word	0x2000033c
 8001788:	48000800 	.word	0x48000800
 800178c:	20000518 	.word	0x20000518

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f006 fae0 	bl	8007d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f002 ff3c 	bl	8004630 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	2303      	movs	r3, #3
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80017ca:	2306      	movs	r3, #6
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017ce:	2355      	movs	r3, #85	; 0x55
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 ffd8 	bl	8004798 <HAL_RCC_OscConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80017ee:	f000 fb5d 	bl	8001eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
 80017f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f6:	2303      	movs	r3, #3
 80017f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2104      	movs	r1, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fad6 	bl	8004dbc <HAL_RCC_ClockConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001816:	f000 fb49 	bl	8001eac <Error_Handler>
  }
}
 800181a:	bf00      	nop
 800181c:	3750      	adds	r7, #80	; 0x50
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2220      	movs	r2, #32
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f006 fa91 	bl	8007d64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <MX_ADC1_Init+0x104>)
 8001844:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <MX_ADC1_Init+0x104>)
 800184c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001850:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <MX_ADC1_Init+0x104>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <MX_ADC1_Init+0x104>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <MX_ADC1_Init+0x104>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001864:	4b30      	ldr	r3, [pc, #192]	; (8001928 <MX_ADC1_Init+0x104>)
 8001866:	2201      	movs	r2, #1
 8001868:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186a:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <MX_ADC1_Init+0x104>)
 800186c:	2204      	movs	r2, #4
 800186e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <MX_ADC1_Init+0x104>)
 8001872:	2200      	movs	r2, #0
 8001874:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_ADC1_Init+0x104>)
 8001878:	2201      	movs	r2, #1
 800187a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <MX_ADC1_Init+0x104>)
 800187e:	2202      	movs	r2, #2
 8001880:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <MX_ADC1_Init+0x104>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_ADC1_Init+0x104>)
 800188c:	2200      	movs	r2, #0
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_ADC1_Init+0x104>)
 8001892:	2200      	movs	r2, #0
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <MX_ADC1_Init+0x104>)
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <MX_ADC1_Init+0x104>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <MX_ADC1_Init+0x104>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	481e      	ldr	r0, [pc, #120]	; (8001928 <MX_ADC1_Init+0x104>)
 80018ae:	f001 f845 	bl	800293c <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80018b8:	f000 faf8 	bl	8001eac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4818      	ldr	r0, [pc, #96]	; (8001928 <MX_ADC1_Init+0x104>)
 80018c8:	f002 f876 	bl	80039b8 <HAL_ADCEx_MultiModeConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018d2:	f000 faeb 	bl	8001eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_ADC1_Init+0x108>)
 80018d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018da:	2306      	movs	r3, #6
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80018de:	2307      	movs	r3, #7
 80018e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018e2:	237f      	movs	r3, #127	; 0x7f
 80018e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018e6:	2304      	movs	r3, #4
 80018e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_ADC1_Init+0x104>)
 80018f4:	f001 fad0 	bl	8002e98 <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018fe:	f000 fad5 	bl	8001eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_ADC1_Init+0x10c>)
 8001904:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001906:	230c      	movs	r3, #12
 8001908:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <MX_ADC1_Init+0x104>)
 8001910:	f001 fac2 	bl	8002e98 <HAL_ADC_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800191a:	f000 fac7 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000003c 	.word	0x2000003c
 800192c:	1d500080 	.word	0x1d500080
 8001930:	3ef08000 	.word	0x3ef08000

08001934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_TIM2_Init+0x98>)
 8001954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_TIM2_Init+0x98>)
 800195c:	22a9      	movs	r2, #169	; 0xa9
 800195e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM2_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MX_TIM2_Init+0x98>)
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <MX_TIM2_Init+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_TIM2_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <MX_TIM2_Init+0x98>)
 800197c:	f003 fe88 	bl	8005690 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001986:	f000 fa91 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_TIM2_Init+0x98>)
 8001998:	f004 fcbc 	bl	8006314 <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019a2:	f000 fa83 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_TIM2_Init+0x98>)
 80019b4:	f005 fa8c 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019be:	f000 fa75 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000108 	.word	0x20000108

080019d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM3_Init+0x94>)
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <MX_TIM3_Init+0x98>)
 80019f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_TIM3_Init+0x94>)
 80019f6:	22a9      	movs	r2, #169	; 0xa9
 80019f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM3_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM3_Init+0x94>)
 8001a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_TIM3_Init+0x94>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM3_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <MX_TIM3_Init+0x94>)
 8001a16:	f003 fe3b 	bl	8005690 <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a20:	f000 fa44 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM3_Init+0x94>)
 8001a32:	f004 fc6f 	bl	8006314 <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a3c:	f000 fa36 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM3_Init+0x94>)
 8001a4e:	f005 fa3f 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 fa28 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000154 	.word	0x20000154
 8001a68:	40000400 	.word	0x40000400

08001a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001a92:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <MX_TIM4_Init+0xb0>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001a98:	22a9      	movs	r2, #169	; 0xa9
 8001a9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ab6:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001ab8:	f003 ff2a 	bl	8005910 <HAL_TIM_PWM_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001ac2:	f000 f9f3 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4810      	ldr	r0, [pc, #64]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001ad6:	f005 f9fb 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001ae0:	f000 f9e4 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae4:	2360      	movs	r3, #96	; 0x60
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	2204      	movs	r2, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001afc:	f004 faf6 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b06:	f000 f9d1 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM4_Init+0xac>)
 8001b0c:	f000 fb40 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200001a0 	.word	0x200001a0
 8001b1c:	40000800 	.word	0x40000800

08001b20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	2224      	movs	r2, #36	; 0x24
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f006 f918 	bl	8007d64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <MX_TIM5_Init+0xa8>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b52:	f04f 32ff 	mov.w	r2, #4294967295
 8001b56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b64:	2303      	movs	r3, #3
 8001b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001b90:	f004 f828 	bl	8005be4 <HAL_TIM_Encoder_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001b9a:	f000 f987 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_TIM5_Init+0xa4>)
 8001bac:	f005 f990 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001bb6:	f000 f979 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3730      	adds	r7, #48	; 0x30
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200001ec 	.word	0x200001ec
 8001bc8:	40000c00 	.word	0x40000c00

08001bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001bd2:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <MX_USART2_UART_Init+0x94>)
 8001bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c16:	f005 fa37 	bl	8007088 <HAL_UART_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c20:	f000 f944 	bl	8001eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c28:	f005 ffd2 	bl	8007bd0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c32:	f000 f93b 	bl	8001eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c36:	2100      	movs	r1, #0
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c3a:	f006 f807 	bl	8007c4c <HAL_UARTEx_SetRxFifoThreshold>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c44:	f000 f932 	bl	8001eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_USART2_UART_Init+0x90>)
 8001c4a:	f005 ff88 	bl	8007b5e <HAL_UARTEx_DisableFifoMode>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c54:	f000 f92a 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000238 	.word	0x20000238
 8001c60:	40004400 	.word	0x40004400

08001c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_DMA_Init+0x50>)
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <MX_DMA_Init+0x50>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6493      	str	r3, [r2, #72]	; 0x48
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_DMA_Init+0x50>)
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_DMA_Init+0x50>)
 8001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <MX_DMA_Init+0x50>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_DMA_Init+0x50>)
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	200b      	movs	r0, #11
 8001ca0:	f002 f86d 	bl	8003d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ca4:	200b      	movs	r0, #11
 8001ca6:	f002 f884 	bl	8003db2 <HAL_NVIC_EnableIRQ>

}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a45      	ldr	r2, [pc, #276]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce6:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a39      	ldr	r2, [pc, #228]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a33      	ldr	r2, [pc, #204]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <MX_GPIO_Init+0x130>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d36:	f002 fc4b 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	482b      	ldr	r0, [pc, #172]	; (8001dec <MX_GPIO_Init+0x134>)
 8001d40:	f002 fc46 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4824      	ldr	r0, [pc, #144]	; (8001dec <MX_GPIO_Init+0x134>)
 8001d5c:	f002 fab6 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d60:	2320      	movs	r3, #32
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7a:	f002 faa7 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4815      	ldr	r0, [pc, #84]	; (8001dec <MX_GPIO_Init+0x134>)
 8001d96:	f002 fa99 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001d9a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4810      	ldr	r0, [pc, #64]	; (8001df0 <MX_GPIO_Init+0x138>)
 8001db0:	f002 fa8c 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dcc:	f002 fa7e 	bl	80042cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2028      	movs	r0, #40	; 0x28
 8001dd6:	f001 ffd2 	bl	8003d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dda:	2028      	movs	r0, #40	; 0x28
 8001ddc:	f001 ffe9 	bl	8003db2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48000800 	.word	0x48000800
 8001df0:	48000400 	.word	0x48000400

08001df4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	1c54      	adds	r4, r2, #1
 8001e0c:	f143 0500 	adc.w	r5, r3, #0
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e12:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3) // [1 microseconds]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		QEIEncoder_Update(&QEI,&htim5,micros());
 8001e1e:	f000 f82b 	bl	8001e78 <micros>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4907      	ldr	r1, [pc, #28]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e28:	4807      	ldr	r0, [pc, #28]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e2a:	f7ff faf1 	bl	8001410 <QEIEncoder_Update>
	}
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000108 	.word	0x20000108
 8001e3c:	200002d0 	.word	0x200002d0
 8001e40:	20000154 	.word	0x20000154
 8001e44:	200001ec 	.word	0x200001ec
 8001e48:	200002d8 	.word	0x200002d8

08001e4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)			// Blue Switch
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e5c:	d102      	bne.n	8001e64 <HAL_GPIO_EXTI_Callback+0x18>
	{
//		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
//		tempSetpoint = 0;
//		QEIEncoder_SetHome(&QEI);
		tempSetpoint = -600;
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_GPIO_EXTI_Callback+0x24>)
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e62:	601a      	str	r2, [r3, #0]
	}
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20000518 	.word	0x20000518
 8001e74:	c4160000 	.word	0xc4160000

08001e78 <micros>:

uint64_t micros()	// System Time
{
 8001e78:	b4b0      	push	{r4, r5, r7}
 8001e7a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <micros+0x2c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2200      	movs	r2, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	4611      	mov	r1, r2
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <micros+0x30>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	1884      	adds	r4, r0, r2
 8001e90:	eb41 0503 	adc.w	r5, r1, r3
 8001e94:	4622      	mov	r2, r4
 8001e96:	462b      	mov	r3, r5
}
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bcb0      	pop	{r4, r5, r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000108 	.word	0x20000108
 8001ea8:	200002d0 	.word	0x200002d0

08001eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <Error_Handler+0x8>
	...

08001eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x44>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_MspInit+0x44>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_MspInit+0x44>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <HAL_MspInit+0x44>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001eee:	f002 fc43 	bl	8004778 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a0      	sub	sp, #128	; 0x80
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	2254      	movs	r2, #84	; 0x54
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f005 ff1f 	bl	8007d64 <memset>
  if(hadc->Instance==ADC1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f2e:	d176      	bne.n	800201e <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3c:	f107 0318 	add.w	r3, r7, #24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 f957 	bl	80051f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f4c:	f7ff ffae 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_ADC_MspInit+0x128>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4820      	ldr	r0, [pc, #128]	; (800202c <HAL_ADC_MspInit+0x12c>)
 8001fac:	f002 f98e 	bl	80042cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481b      	ldr	r0, [pc, #108]	; (8002030 <HAL_ADC_MspInit+0x130>)
 8001fc4:	f002 f982 	bl	80042cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001fca:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_ADC_MspInit+0x138>)
 8001fcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8002004:	f001 fef0 	bl	8003de8 <HAL_DMA_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 800200e:	f7ff ff4d 	bl	8001eac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_ADC_MspInit+0x134>)
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_ADC_MspInit+0x134>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3780      	adds	r7, #128	; 0x80
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	48000800 	.word	0x48000800
 8002030:	48000400 	.word	0x48000400
 8002034:	200000a8 	.word	0x200000a8
 8002038:	40020008 	.word	0x40020008

0800203c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d114      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_TIM_Base_MspInit+0x78>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_TIM_Base_MspInit+0x78>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_TIM_Base_MspInit+0x78>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201c      	movs	r0, #28
 800206c:	f001 fe87 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002070:	201c      	movs	r0, #28
 8002072:	f001 fe9e 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002076:	e018      	b.n	80020aa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_TIM_Base_MspInit+0x7c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_TIM_Base_MspInit+0x78>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <HAL_TIM_Base_MspInit+0x78>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_TIM_Base_MspInit+0x78>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	201d      	movs	r0, #29
 80020a0:	f001 fe6d 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020a4:	201d      	movs	r0, #29
 80020a6:	f001 fe84 	bl	8003db2 <HAL_NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40000400 	.word	0x40000400

080020bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_TIM_PWM_MspInit+0x38>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10b      	bne.n	80020e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_TIM_Encoder_MspInit+0x8c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d130      	bne.n	8002180 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_TIM_Encoder_MspInit+0x90>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_TIM_Encoder_MspInit+0x90>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_TIM_Encoder_MspInit+0x90>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_TIM_Encoder_MspInit+0x90>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_TIM_Encoder_MspInit+0x90>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_TIM_Encoder_MspInit+0x90>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800214e:	2303      	movs	r3, #3
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800215e:	2302      	movs	r3, #2
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f002 f8ae 	bl	80042cc <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2032      	movs	r0, #50	; 0x32
 8002176:	f001 fe02 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800217a:	2032      	movs	r0, #50	; 0x32
 800217c:	f001 fe19 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40000c00 	.word	0x40000c00
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d11d      	bne.n	80021ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80021dc:	230a      	movs	r3, #10
 80021de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f002 f86f 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b09e      	sub	sp, #120	; 0x78
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};  if(huart->Instance==USART2)
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	2254      	movs	r2, #84	; 0x54
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f005 fd9f 	bl	8007d64 <memset>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <HAL_UART_MspInit+0xa8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d137      	bne.n	80022a0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f002 ffd9 	bl	80051f4 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002248:	f7ff fe30 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_UART_MspInit+0xac>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_UART_MspInit+0xac>)
 8002252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_UART_MspInit+0xac>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_UART_MspInit+0xac>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_UART_MspInit+0xac>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_UART_MspInit+0xac>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800227c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002280:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228e:	2307      	movs	r3, #7
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229c:	f002 f816 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022a0:	bf00      	nop
 80022a2:	3778      	adds	r7, #120	; 0x78
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40004400 	.word	0x40004400
 80022ac:	40021000 	.word	0x40021000

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b4:	e7fe      	b.n	80022b4 <NMI_Handler+0x4>

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <UsageFault_Handler+0x4>

080022ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fc:	f000 f8c0 	bl	8002480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}

08002304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <DMA1_Channel1_IRQHandler+0x10>)
 800230a:	f001 fe90 	bl	800402e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200000a8 	.word	0x200000a8

08002318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <TIM2_IRQHandler+0x10>)
 800231e:	f003 fd95 	bl	8005e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000108 	.word	0x20000108

0800232c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM3_IRQHandler+0x10>)
 8002332:	f003 fd8b 	bl	8005e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000154 	.word	0x20000154

08002340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002344:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002348:	f002 f95a 	bl	8004600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM5_IRQHandler+0x10>)
 8002356:	f003 fd79 	bl	8005e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200001ec 	.word	0x200001ec

08002364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <SystemInit+0x20>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <SystemInit+0x20>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800238a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800238c:	f7ff ffea 	bl	8002364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002392:	490d      	ldr	r1, [pc, #52]	; (80023c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <LoopForever+0xe>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <LoopForever+0x16>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b6:	f005 fcdd 	bl	8007d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ba:	f7ff f92f 	bl	800161c <main>

080023be <LoopForever>:

LoopForever:
    b LoopForever
 80023be:	e7fe      	b.n	80023be <LoopForever>
  ldr   r0, =_estack
 80023c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80023cc:	08007e54 	.word	0x08007e54
  ldr r2, =_sbss
 80023d0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80023d4:	20000520 	.word	0x20000520

080023d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC1_2_IRQHandler>

080023da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f001 fcbf 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ea:	2000      	movs	r0, #0
 80023ec:	f000 f80e 	bl	800240c <HAL_InitTick>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	e001      	b.n	8002400 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023fc:	f7ff fd5c 	bl	8001eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002400:	79fb      	ldrb	r3, [r7, #7]

}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_InitTick+0x68>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d022      	beq.n	8002466 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_InitTick+0x6c>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_InitTick+0x68>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800242c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fcca 	bl	8003dce <HAL_SYSTICK_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d809      	bhi.n	800245a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002446:	2200      	movs	r2, #0
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	f001 fc96 	bl	8003d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_InitTick+0x70>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e007      	b.n	800246a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e004      	b.n	800246a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e001      	b.n	800246a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000010 	.word	0x20000010
 8002478:	20000008 	.word	0x20000008
 800247c:	2000000c 	.word	0x2000000c

08002480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x1c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_IncTick+0x20>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4413      	add	r3, r2
 800248e:	4a03      	ldr	r2, [pc, #12]	; (800249c <HAL_IncTick+0x1c>)
 8002490:	6013      	str	r3, [r2, #0]
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	2000051c 	.word	0x2000051c
 80024a0:	20000010 	.word	0x20000010

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	2000051c 	.word	0x2000051c

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d004      	beq.n	80024e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_Delay+0x40>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e0:	bf00      	nop
 80024e2:	f7ff ffdf 	bl	80024a4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d8f7      	bhi.n	80024e2 <HAL_Delay+0x26>
  {
  }
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000010 	.word	0x20000010

08002500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <LL_ADC_SetOffset+0x44>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	03fff000 	.word	0x03fff000

080025b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3360      	adds	r3, #96	; 0x60
 80025be:	461a      	mov	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3360      	adds	r3, #96	; 0x60
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3360      	adds	r3, #96	; 0x60
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3360      	adds	r3, #96	; 0x60
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	615a      	str	r2, [r3, #20]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3330      	adds	r3, #48	; 0x30
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	211f      	movs	r1, #31
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	f003 011f 	and.w	r1, r3, #31
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002722:	b480      	push	{r7}
 8002724:	b087      	sub	sp, #28
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3314      	adds	r3, #20
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0e5b      	lsrs	r3, r3, #25
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2107      	movs	r1, #7
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	401a      	ands	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0d1b      	lsrs	r3, r3, #20
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	431a      	orrs	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0318 	and.w	r3, r3, #24
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800279c:	40d9      	lsrs	r1, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	400b      	ands	r3, r1
 80027a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	0007ffff 	.word	0x0007ffff

080027c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 031f 	and.w	r3, r3, #31
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6093      	str	r3, [r2, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002814:	d101      	bne.n	800281a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800283c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002864:	d101      	bne.n	800286a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_IsEnabled+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_IsEnabled+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028da:	f043 0204 	orr.w	r2, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d101      	bne.n	8002906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b08      	cmp	r3, #8
 8002926:	d101      	bne.n	800292c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1a9      	b.n	8002caa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff facb 	bl	8001f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff3f 	bl	8002800 <LL_ADC_IsDeepPowerDownEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff25 	bl	80027dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff5a 	bl	8002850 <LL_ADC_IsInternalRegulatorEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d115      	bne.n	80029ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff3e 	bl	8002828 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ac:	4b9c      	ldr	r3, [pc, #624]	; (8002c20 <HAL_ADC_Init+0x2e4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	4a9c      	ldr	r2, [pc, #624]	; (8002c24 <HAL_ADC_Init+0x2e8>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff3c 	bl	8002850 <LL_ADC_IsInternalRegulatorEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff75 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 8142 	bne.w	8002c98 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 813e 	bne.w	8002c98 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a24:	f043 0202 	orr.w	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff35 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d141      	bne.n	8002ac0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a44:	d004      	beq.n	8002a50 <HAL_ADC_Init+0x114>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a77      	ldr	r2, [pc, #476]	; (8002c28 <HAL_ADC_Init+0x2ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10f      	bne.n	8002a70 <HAL_ADC_Init+0x134>
 8002a50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a54:	f7ff ff24 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	4873      	ldr	r0, [pc, #460]	; (8002c28 <HAL_ADC_Init+0x2ec>)
 8002a5c:	f7ff ff20 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4323      	orrs	r3, r4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e012      	b.n	8002a96 <HAL_ADC_Init+0x15a>
 8002a70:	486e      	ldr	r0, [pc, #440]	; (8002c2c <HAL_ADC_Init+0x2f0>)
 8002a72:	f7ff ff15 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a76:	4604      	mov	r4, r0
 8002a78:	486d      	ldr	r0, [pc, #436]	; (8002c30 <HAL_ADC_Init+0x2f4>)
 8002a7a:	f7ff ff11 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	431c      	orrs	r4, r3
 8002a82:	486c      	ldr	r0, [pc, #432]	; (8002c34 <HAL_ADC_Init+0x2f8>)
 8002a84:	f7ff ff0c 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4323      	orrs	r3, r4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d012      	beq.n	8002ac0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_Init+0x172>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <HAL_ADC_Init+0x2ec>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Init+0x176>
 8002aae:	4a62      	ldr	r2, [pc, #392]	; (8002c38 <HAL_ADC_Init+0x2fc>)
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_Init+0x178>
 8002ab2:	4a62      	ldr	r2, [pc, #392]	; (8002c3c <HAL_ADC_Init+0x300>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f7ff fd20 	bl	8002500 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7f5b      	ldrb	r3, [r3, #29]
 8002ac4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ad0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ad6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ade:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d106      	bne.n	8002afc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	045b      	lsls	r3, r3, #17
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <HAL_ADC_Init+0x304>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fee4 	bl	8002914 <LL_ADC_INJ_IsConversionOngoing>
 8002b4c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d17f      	bne.n	8002c54 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d17c      	bne.n	8002c54 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b5e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b66:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	f023 0302 	bic.w	r3, r3, #2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d017      	beq.n	8002bbc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ba4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6911      	ldr	r1, [r2, #16]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002bba:	e013      	b.n	8002be4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d12a      	bne.n	8002c44 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c04:	4311      	orrs	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c10:	430a      	orrs	r2, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]
 8002c1e:	e019      	b.n	8002c54 <HAL_ADC_Init+0x318>
 8002c20:	20000008 	.word	0x20000008
 8002c24:	053e2d63 	.word	0x053e2d63
 8002c28:	50000100 	.word	0x50000100
 8002c2c:	50000400 	.word	0x50000400
 8002c30:	50000500 	.word	0x50000500
 8002c34:	50000600 	.word	0x50000600
 8002c38:	50000300 	.word	0x50000300
 8002c3c:	50000700 	.word	0x50000700
 8002c40:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10c      	bne.n	8002c76 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f023 010f 	bic.w	r1, r3, #15
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
 8002c74:	e007      	b.n	8002c86 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 020f 	bic.w	r2, r2, #15
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c96:	e007      	b.n	8002ca8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	bf00      	nop

08002cb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_Start_DMA+0x20>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5a      	ldr	r2, [pc, #360]	; (8002e38 <HAL_ADC_Start_DMA+0x184>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_Start_DMA+0x24>
 8002cd4:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_ADC_Start_DMA+0x188>)
 8002cd6:	e000      	b.n	8002cda <HAL_ADC_Start_DMA+0x26>
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_ADC_Start_DMA+0x18c>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd70 	bl	80027c0 <LL_ADC_GetMultimode>
 8002ce0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fe01 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 809b 	bne.w	8002e2a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_Start_DMA+0x4e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e096      	b.n	8002e30 <HAL_ADC_Start_DMA+0x17c>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4d      	ldr	r2, [pc, #308]	; (8002e44 <HAL_ADC_Start_DMA+0x190>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d008      	beq.n	8002d26 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d002      	beq.n	8002d26 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	d17a      	bne.n	8002e1c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fcf6 	bl	8003718 <ADC_Enable>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d16d      	bne.n	8002e12 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_ADC_Start_DMA+0x184>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_ADC_Start_DMA+0xb4>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <HAL_ADC_Start_DMA+0x194>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d002      	beq.n	8002d64 <HAL_ADC_Start_DMA+0xb0>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_Start_DMA+0xb8>
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_ADC_Start_DMA+0x198>)
 8002d66:	e001      	b.n	8002d6c <HAL_ADC_Start_DMA+0xb8>
 8002d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d002      	beq.n	8002d7a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	f023 0206 	bic.w	r2, r3, #6
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	661a      	str	r2, [r3, #96]	; 0x60
 8002d9e:	e002      	b.n	8002da6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_ADC_Start_DMA+0x19c>)
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <HAL_ADC_Start_DMA+0x1a0>)
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_ADC_Start_DMA+0x1a4>)
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	221c      	movs	r2, #28
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0210 	orr.w	r2, r2, #16
 8002ddc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0201 	orr.w	r2, r2, #1
 8002dec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3340      	adds	r3, #64	; 0x40
 8002df8:	4619      	mov	r1, r3
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f001 f89b 	bl	8003f38 <HAL_DMA_Start_IT>
 8002e02:	4603      	mov	r3, r0
 8002e04:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fd5b 	bl	80028c6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e10:	e00d      	b.n	8002e2e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002e1a:	e008      	b.n	8002e2e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e28:	e001      	b.n	8002e2e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	50000100 	.word	0x50000100
 8002e3c:	50000300 	.word	0x50000300
 8002e40:	50000700 	.word	0x50000700
 8002e44:	50000600 	.word	0x50000600
 8002e48:	50000500 	.word	0x50000500
 8002e4c:	50000400 	.word	0x50000400
 8002e50:	08003845 	.word	0x08003845
 8002e54:	0800391d 	.word	0x0800391d
 8002e58:	08003939 	.word	0x08003939

08002e5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b0b6      	sub	sp, #216	; 0xd8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d102      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x24>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f000 bc13 	b.w	80036e2 <HAL_ADC_ConfigChannel+0x84a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fd10 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 83f3 	bne.w	80036bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f7ff fbf1 	bl	80026ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fcfe 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fd0a 	bl	8002914 <LL_ADC_INJ_IsConversionOngoing>
 8002f00:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 81d9 	bne.w	80032c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 81d4 	bne.w	80032c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f20:	d10f      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7ff fbf8 	bl	8002722 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fb9f 	bl	800267e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f40:	e00e      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7ff fbe7 	bl	8002722 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fb8f 	bl	800267e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d022      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f92:	f7ff fae9 	bl	8002568 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6919      	ldr	r1, [r3, #16]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f7ff fb35 	bl	8002612 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x126>
 8002fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fbc:	e000      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x128>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f7ff fb41 	bl	8002648 <LL_ADC_SetOffsetSaturation>
 8002fc6:	e17b      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff faee 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x15c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fae3 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 021f 	and.w	r2, r3, #31
 8002ff2:	e01e      	b.n	8003032 <HAL_ADC_ConfigChannel+0x19a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fad8 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800301a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e004      	b.n	8003030 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_ADC_ConfigChannel+0x1b2>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	e018      	b.n	800307c <HAL_ADC_ConfigChannel+0x1e4>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800305e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800306e:	2320      	movs	r3, #32
 8003070:	e004      	b.n	800307c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff faa7 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fa8b 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x222>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fa80 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80030b0:	4603      	mov	r3, r0
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	e01e      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x260>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fa75 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e004      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80030ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x278>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	e018      	b.n	8003142 <HAL_ADC_ConfigChannel+0x2aa>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003124:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800312c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e004      	b.n	8003142 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003142:	429a      	cmp	r2, r3
 8003144:	d106      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fa44 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2102      	movs	r1, #2
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fa28 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003160:	4603      	mov	r3, r0
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x2e8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fa1d 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 021f 	and.w	r2, r3, #31
 800317e:	e01e      	b.n	80031be <HAL_ADC_ConfigChannel+0x326>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fa12 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800319e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031ae:	2320      	movs	r3, #32
 80031b0:	e004      	b.n	80031bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x33e>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	e016      	b.n	8003204 <HAL_ADC_ConfigChannel+0x36c>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e004      	b.n	8003204 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003204:	429a      	cmp	r2, r3
 8003206:	d106      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff f9e3 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2103      	movs	r1, #3
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f9c7 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x3aa>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2103      	movs	r1, #3
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f9bc 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003238:	4603      	mov	r3, r0
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	e017      	b.n	8003272 <HAL_ADC_ConfigChannel+0x3da>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2103      	movs	r1, #3
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f9b1 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800325a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800325e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003264:	2320      	movs	r3, #32
 8003266:	e003      	b.n	8003270 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_ADC_ConfigChannel+0x3f2>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0e9b      	lsrs	r3, r3, #26
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	e011      	b.n	80032ae <HAL_ADC_ConfigChannel+0x416>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e003      	b.n	80032ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d106      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2103      	movs	r1, #3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff f98e 	bl	80025dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff faeb 	bl	80028a0 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 813d 	bne.w	800354c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fa4a 	bl	8002778 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4aa2      	ldr	r2, [pc, #648]	; (8003574 <HAL_ADC_ConfigChannel+0x6dc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f040 812e 	bne.w	800354c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x480>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	3301      	adds	r3, #1
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2b09      	cmp	r3, #9
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e019      	b.n	800334c <HAL_ADC_ConfigChannel+0x4b4>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003328:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800332a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e003      	b.n	800333c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2b09      	cmp	r3, #9
 8003344:	bf94      	ite	ls
 8003346:	2301      	movls	r3, #1
 8003348:	2300      	movhi	r3, #0
 800334a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800334c:	2b00      	cmp	r3, #0
 800334e:	d079      	beq.n	8003444 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_ADC_ConfigChannel+0x4d4>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	3301      	adds	r3, #1
 8003364:	069b      	lsls	r3, r3, #26
 8003366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336a:	e015      	b.n	8003398 <HAL_ADC_ConfigChannel+0x500>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800337a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e003      	b.n	8003390 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3301      	adds	r3, #1
 8003392:	069b      	lsls	r3, r3, #26
 8003394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x520>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	3301      	adds	r3, #1
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	e017      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x550>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	ea42 0103 	orr.w	r1, r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <HAL_ADC_ConfigChannel+0x576>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	3301      	adds	r3, #1
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	051b      	lsls	r3, r3, #20
 800340c:	e018      	b.n	8003440 <HAL_ADC_ConfigChannel+0x5a8>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003440:	430b      	orrs	r3, r1
 8003442:	e07e      	b.n	8003542 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x5c8>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	3301      	adds	r3, #1
 8003458:	069b      	lsls	r3, r3, #26
 800345a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800345e:	e015      	b.n	800348c <HAL_ADC_ConfigChannel+0x5f4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	069b      	lsls	r3, r3, #26
 8003488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x614>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	e017      	b.n	80034dc <HAL_ADC_ConfigChannel+0x644>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	61fb      	str	r3, [r7, #28]
  return result;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	ea42 0103 	orr.w	r1, r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x670>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	3b1e      	subs	r3, #30
 8003500:	051b      	lsls	r3, r3, #20
 8003502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003506:	e01b      	b.n	8003540 <HAL_ADC_ConfigChannel+0x6a8>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	613b      	str	r3, [r7, #16]
  return result;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f003 021f 	and.w	r2, r3, #31
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	3b1e      	subs	r3, #30
 800353a:	051b      	lsls	r3, r3, #20
 800353c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff f8eb 	bl	8002722 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_ADC_ConfigChannel+0x6e0>)
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80be 	beq.w	80036d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003562:	d004      	beq.n	800356e <HAL_ADC_ConfigChannel+0x6d6>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_ADC_ConfigChannel+0x6e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10a      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x6ec>
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_ADC_ConfigChannel+0x6e8>)
 8003570:	e009      	b.n	8003586 <HAL_ADC_ConfigChannel+0x6ee>
 8003572:	bf00      	nop
 8003574:	407f0000 	.word	0x407f0000
 8003578:	80080000 	.word	0x80080000
 800357c:	50000100 	.word	0x50000100
 8003580:	50000300 	.word	0x50000300
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_ADC_ConfigChannel+0x854>)
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe ffe0 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 800358c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a56      	ldr	r2, [pc, #344]	; (80036f0 <HAL_ADC_ConfigChannel+0x858>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x70c>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a55      	ldr	r2, [pc, #340]	; (80036f4 <HAL_ADC_ConfigChannel+0x85c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d13a      	bne.n	800361a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d134      	bne.n	800361a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b8:	d005      	beq.n	80035c6 <HAL_ADC_ConfigChannel+0x72e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a4e      	ldr	r2, [pc, #312]	; (80036f8 <HAL_ADC_ConfigChannel+0x860>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	f040 8085 	bne.w	80036d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ce:	d004      	beq.n	80035da <HAL_ADC_ConfigChannel+0x742>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a49      	ldr	r2, [pc, #292]	; (80036fc <HAL_ADC_ConfigChannel+0x864>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x746>
 80035da:	4a49      	ldr	r2, [pc, #292]	; (8003700 <HAL_ADC_ConfigChannel+0x868>)
 80035dc:	e000      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x748>
 80035de:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_ADC_ConfigChannel+0x854>)
 80035e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7fe ff9b 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f0:	4b44      	ldr	r3, [pc, #272]	; (8003704 <HAL_ADC_ConfigChannel+0x86c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	4a44      	ldr	r2, [pc, #272]	; (8003708 <HAL_ADC_ConfigChannel+0x870>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800360a:	e002      	b.n	8003612 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3b01      	subs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f9      	bne.n	800360c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003618:	e05a      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <HAL_ADC_ConfigChannel+0x874>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d125      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11f      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_ADC_ConfigChannel+0x864>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d104      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x7ac>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a34      	ldr	r2, [pc, #208]	; (8003710 <HAL_ADC_ConfigChannel+0x878>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d047      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800364c:	d004      	beq.n	8003658 <HAL_ADC_ConfigChannel+0x7c0>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_ADC_ConfigChannel+0x864>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x7c4>
 8003658:	4a29      	ldr	r2, [pc, #164]	; (8003700 <HAL_ADC_ConfigChannel+0x868>)
 800365a:	e000      	b.n	800365e <HAL_ADC_ConfigChannel+0x7c6>
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_ADC_ConfigChannel+0x854>)
 800365e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe ff5c 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800366e:	e031      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_ADC_ConfigChannel+0x87c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d12d      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800367a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d127      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_ADC_ConfigChannel+0x864>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003698:	d004      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x80c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a17      	ldr	r2, [pc, #92]	; (80036fc <HAL_ADC_ConfigChannel+0x864>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x810>
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <HAL_ADC_ConfigChannel+0x868>)
 80036a6:	e000      	b.n	80036aa <HAL_ADC_ConfigChannel+0x812>
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_ADC_ConfigChannel+0x854>)
 80036aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe ff36 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
 80036ba:	e00c      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80036ce:	e002      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	37d8      	adds	r7, #216	; 0xd8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	50000700 	.word	0x50000700
 80036f0:	c3210000 	.word	0xc3210000
 80036f4:	90c00010 	.word	0x90c00010
 80036f8:	50000600 	.word	0x50000600
 80036fc:	50000100 	.word	0x50000100
 8003700:	50000300 	.word	0x50000300
 8003704:	20000008 	.word	0x20000008
 8003708:	053e2d63 	.word	0x053e2d63
 800370c:	c7520000 	.word	0xc7520000
 8003710:	50000500 	.word	0x50000500
 8003714:	cb840000 	.word	0xcb840000

08003718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff f8b9 	bl	80028a0 <LL_ADC_IsEnabled>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d176      	bne.n	8003822 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	4b3c      	ldr	r3, [pc, #240]	; (800382c <ADC_Enable+0x114>)
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e062      	b.n	8003824 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f888 	bl	8002878 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003770:	d004      	beq.n	800377c <ADC_Enable+0x64>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <ADC_Enable+0x118>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <ADC_Enable+0x68>
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <ADC_Enable+0x11c>)
 800377e:	e000      	b.n	8003782 <ADC_Enable+0x6a>
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <ADC_Enable+0x120>)
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fee2 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 8003788:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800378a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800378e:	2b00      	cmp	r3, #0
 8003790:	d013      	beq.n	80037ba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <ADC_Enable+0x124>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <ADC_Enable+0x128>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037ac:	e002      	b.n	80037b4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f9      	bne.n	80037ae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037ba:	f7fe fe73 	bl	80024a4 <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c0:	e028      	b.n	8003814 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f86a 	bl	80028a0 <LL_ADC_IsEnabled>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d104      	bne.n	80037dc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f84e 	bl	8002878 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037dc:	f7fe fe62 	bl	80024a4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d914      	bls.n	8003814 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d00d      	beq.n	8003814 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	f043 0210 	orr.w	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e007      	b.n	8003824 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d1cf      	bne.n	80037c2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	8000003f 	.word	0x8000003f
 8003830:	50000100 	.word	0x50000100
 8003834:	50000300 	.word	0x50000300
 8003838:	50000700 	.word	0x50000700
 800383c:	20000008 	.word	0x20000008
 8003840:	053e2d63 	.word	0x053e2d63

08003844 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14b      	bne.n	80038f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d021      	beq.n	80038bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe ff11 	bl	80026a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d12b      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11f      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ba:	e018      	b.n	80038ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d111      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff fab4 	bl	8002e5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038f4:	e00e      	b.n	8003914 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fabe 	bl	8002e84 <HAL_ADC_ErrorCallback>
}
 8003908:	e004      	b.n	8003914 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff faa0 	bl	8002e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fa90 	bl	8002e84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <LL_ADC_IsEnabled>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <LL_ADC_IsEnabled+0x18>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <LL_ADC_IsEnabled+0x1a>
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_ADC_REG_IsConversionOngoing>:
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d101      	bne.n	80039aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b0a1      	sub	sp, #132	; 0x84
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0e7      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039de:	2300      	movs	r3, #0
 80039e0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039e2:	2300      	movs	r3, #0
 80039e4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ee:	d102      	bne.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	e009      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6e      	ldr	r2, [pc, #440]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d102      	bne.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003a00:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	e001      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0be      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ffb1 	bl	8003992 <LL_ADC_REG_IsConversionOngoing>
 8003a30:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffab 	bl	8003992 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 80a0 	bne.w	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 809c 	bne.w	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a54:	d004      	beq.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a60:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a62:	e000      	b.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a64:	4b56      	ldr	r3, [pc, #344]	; (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d04b      	beq.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a82:	035b      	lsls	r3, r3, #13
 8003a84:	430b      	orrs	r3, r1
 8003a86:	431a      	orrs	r2, r3
 8003a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a94:	d004      	beq.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a45      	ldr	r2, [pc, #276]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10f      	bne.n	8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003aa0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003aa4:	f7ff ff62 	bl	800396c <LL_ADC_IsEnabled>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4841      	ldr	r0, [pc, #260]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aac:	f7ff ff5e 	bl	800396c <LL_ADC_IsEnabled>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4323      	orrs	r3, r4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e012      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ac0:	483c      	ldr	r0, [pc, #240]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ac2:	f7ff ff53 	bl	800396c <LL_ADC_IsEnabled>
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	483b      	ldr	r0, [pc, #236]	; (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003aca:	f7ff ff4f 	bl	800396c <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	431c      	orrs	r4, r3
 8003ad2:	483c      	ldr	r0, [pc, #240]	; (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ad4:	f7ff ff4a 	bl	800396c <LL_ADC_IsEnabled>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4323      	orrs	r3, r4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d056      	beq.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003af2:	f023 030f 	bic.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	6892      	ldr	r2, [r2, #8]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	431a      	orrs	r2, r3
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b06:	e047      	b.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d10f      	bne.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b2c:	f7ff ff1e 	bl	800396c <LL_ADC_IsEnabled>
 8003b30:	4604      	mov	r4, r0
 8003b32:	481f      	ldr	r0, [pc, #124]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b34:	f7ff ff1a 	bl	800396c <LL_ADC_IsEnabled>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4323      	orrs	r3, r4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e012      	b.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b48:	481a      	ldr	r0, [pc, #104]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b4a:	f7ff ff0f 	bl	800396c <LL_ADC_IsEnabled>
 8003b4e:	4604      	mov	r4, r0
 8003b50:	4819      	ldr	r0, [pc, #100]	; (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b52:	f7ff ff0b 	bl	800396c <LL_ADC_IsEnabled>
 8003b56:	4603      	mov	r3, r0
 8003b58:	431c      	orrs	r4, r3
 8003b5a:	481a      	ldr	r0, [pc, #104]	; (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b5c:	f7ff ff06 	bl	800396c <LL_ADC_IsEnabled>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4323      	orrs	r3, r4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b82:	e009      	b.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b96:	e000      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ba2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3784      	adds	r7, #132	; 0x84
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	50000100 	.word	0x50000100
 8003bb4:	50000400 	.word	0x50000400
 8003bb8:	50000500 	.word	0x50000500
 8003bbc:	50000300 	.word	0x50000300
 8003bc0:	50000700 	.word	0x50000700
 8003bc4:	50000600 	.word	0x50000600

08003bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be4:	4013      	ands	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfa:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	60d3      	str	r3, [r2, #12]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <__NVIC_GetPriorityGrouping+0x18>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 0307 	and.w	r3, r3, #7
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	db0b      	blt.n	8003c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	f003 021f 	and.w	r2, r3, #31
 8003c44:	4907      	ldr	r1, [pc, #28]	; (8003c64 <__NVIC_EnableIRQ+0x38>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0a      	blt.n	8003c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	490c      	ldr	r1, [pc, #48]	; (8003cb4 <__NVIC_SetPriority+0x4c>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c90:	e00a      	b.n	8003ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4908      	ldr	r1, [pc, #32]	; (8003cb8 <__NVIC_SetPriority+0x50>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	761a      	strb	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000e100 	.word	0xe000e100
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf28      	it	cs
 8003cda:	2304      	movcs	r3, #4
 8003cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d902      	bls.n	8003cec <NVIC_EncodePriority+0x30>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3b03      	subs	r3, #3
 8003cea:	e000      	b.n	8003cee <NVIC_EncodePriority+0x32>
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43d9      	mvns	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	4313      	orrs	r3, r2
         );
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f7ff ff8e 	bl	8003c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff29 	bl	8003bc8 <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d8c:	f7ff ff40 	bl	8003c10 <__NVIC_GetPriorityGrouping>
 8003d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f7ff ff90 	bl	8003cbc <NVIC_EncodePriority>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff5f 	bl	8003c68 <__NVIC_SetPriority>
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff33 	bl	8003c2c <__NVIC_EnableIRQ>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ffa4 	bl	8003d24 <SysTick_Config>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e08d      	b.n	8003f16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <HAL_DMA_Init+0x138>)
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d80f      	bhi.n	8003e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b45      	ldr	r3, [pc, #276]	; (8003f24 <HAL_DMA_Init+0x13c>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a45      	ldr	r2, [pc, #276]	; (8003f28 <HAL_DMA_Init+0x140>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	009a      	lsls	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a42      	ldr	r2, [pc, #264]	; (8003f2c <HAL_DMA_Init+0x144>)
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
 8003e24:	e00e      	b.n	8003e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <HAL_DMA_Init+0x148>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a3d      	ldr	r2, [pc, #244]	; (8003f28 <HAL_DMA_Init+0x140>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	009a      	lsls	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <HAL_DMA_Init+0x14c>)
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9b6 	bl	8004208 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea4:	d102      	bne.n	8003eac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ec0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_DMA_Init+0x104>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d80c      	bhi.n	8003eec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9d6 	bl	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	e008      	b.n	8003efe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40020407 	.word	0x40020407
 8003f24:	bffdfff8 	.word	0xbffdfff8
 8003f28:	cccccccd 	.word	0xcccccccd
 8003f2c:	40020000 	.word	0x40020000
 8003f30:	bffdfbf8 	.word	0xbffdfbf8
 8003f34:	40020400 	.word	0x40020400

08003f38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_DMA_Start_IT+0x20>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e066      	b.n	8004026 <HAL_DMA_Start_IT+0xee>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d155      	bne.n	8004018 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f8fb 	bl	800418c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 020e 	orr.w	r2, r2, #14
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e00f      	b.n	8003fd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 020a 	orr.w	r2, r2, #10
 8003fce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004004:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e005      	b.n	8004024 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004020:	2302      	movs	r3, #2
 8004022:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2204      	movs	r2, #4
 8004050:	409a      	lsls	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d026      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x7a>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d021      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0204 	bic.w	r2, r2, #4
 8004080:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f003 021f 	and.w	r2, r3, #31
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2104      	movs	r1, #4
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d071      	beq.n	8004182 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040a6:	e06c      	b.n	8004182 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2202      	movs	r2, #2
 80040b2:	409a      	lsls	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d02e      	beq.n	800411a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d029      	beq.n	800411a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 020a 	bic.w	r2, r2, #10
 80040e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2102      	movs	r1, #2
 80040fa:	fa01 f202 	lsl.w	r2, r1, r2
 80040fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d038      	beq.n	8004182 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004118:	e033      	b.n	8004182 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2208      	movs	r2, #8
 8004124:	409a      	lsls	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02a      	beq.n	8004184 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d025      	beq.n	8004184 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 020e 	bic.w	r2, r2, #14
 8004146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f202 	lsl.w	r2, r1, r2
 800415a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004182:	bf00      	nop
 8004184:	bf00      	nop
}
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f003 021f 	and.w	r2, r3, #31
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f202 	lsl.w	r2, r1, r2
 80041c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d108      	bne.n	80041ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041ea:	e007      	b.n	80041fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	60da      	str	r2, [r3, #12]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004218:	429a      	cmp	r2, r3
 800421a:	d802      	bhi.n	8004222 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e001      	b.n	8004226 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004224:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3b08      	subs	r3, #8
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4413      	add	r3, r2
 8004248:	461a      	mov	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004252:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2201      	movs	r2, #1
 800425c:	409a      	lsls	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40020407 	.word	0x40020407
 8004274:	40020800 	.word	0x40020800
 8004278:	40020820 	.word	0x40020820
 800427c:	cccccccd 	.word	0xcccccccd
 8004280:	40020880 	.word	0x40020880

08004284 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2201      	movs	r2, #1
 80042b2:	409a      	lsls	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	1000823f 	.word	0x1000823f
 80042c8:	40020940 	.word	0x40020940

080042cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042da:	e15a      	b.n	8004592 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2101      	movs	r1, #1
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 814c 	beq.w	800458c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d005      	beq.n	800430c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004308:	2b02      	cmp	r3, #2
 800430a:	d130      	bne.n	800436e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004342:	2201      	movs	r2, #1
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f003 0201 	and.w	r2, r3, #1
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b03      	cmp	r3, #3
 8004378:	d017      	beq.n	80043aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	2203      	movs	r2, #3
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d123      	bne.n	80043fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	08da      	lsrs	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3208      	adds	r2, #8
 80043be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	08da      	lsrs	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3208      	adds	r2, #8
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	2203      	movs	r2, #3
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 0203 	and.w	r2, r3, #3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80a6 	beq.w	800458c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004440:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <HAL_GPIO_Init+0x2e4>)
 8004442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004444:	4a5a      	ldr	r2, [pc, #360]	; (80045b0 <HAL_GPIO_Init+0x2e4>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6613      	str	r3, [r2, #96]	; 0x60
 800444c:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <HAL_GPIO_Init+0x2e4>)
 800444e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004458:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <HAL_GPIO_Init+0x2e8>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	220f      	movs	r2, #15
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004482:	d01f      	beq.n	80044c4 <HAL_GPIO_Init+0x1f8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a4c      	ldr	r2, [pc, #304]	; (80045b8 <HAL_GPIO_Init+0x2ec>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d019      	beq.n	80044c0 <HAL_GPIO_Init+0x1f4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <HAL_GPIO_Init+0x2f0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_GPIO_Init+0x1f0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a4a      	ldr	r2, [pc, #296]	; (80045c0 <HAL_GPIO_Init+0x2f4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00d      	beq.n	80044b8 <HAL_GPIO_Init+0x1ec>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a49      	ldr	r2, [pc, #292]	; (80045c4 <HAL_GPIO_Init+0x2f8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <HAL_GPIO_Init+0x1e8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a48      	ldr	r2, [pc, #288]	; (80045c8 <HAL_GPIO_Init+0x2fc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_GPIO_Init+0x1e4>
 80044ac:	2305      	movs	r3, #5
 80044ae:	e00a      	b.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044b0:	2306      	movs	r3, #6
 80044b2:	e008      	b.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044b4:	2304      	movs	r3, #4
 80044b6:	e006      	b.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044b8:	2303      	movs	r3, #3
 80044ba:	e004      	b.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044bc:	2302      	movs	r3, #2
 80044be:	e002      	b.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_GPIO_Init+0x1fa>
 80044c4:	2300      	movs	r3, #0
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	f002 0203 	and.w	r2, r2, #3
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	4093      	lsls	r3, r2
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d6:	4937      	ldr	r1, [pc, #220]	; (80045b4 <HAL_GPIO_Init+0x2e8>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_GPIO_Init+0x300>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004508:	4a30      	ldr	r2, [pc, #192]	; (80045cc <HAL_GPIO_Init+0x300>)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_GPIO_Init+0x300>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004532:	4a26      	ldr	r2, [pc, #152]	; (80045cc <HAL_GPIO_Init+0x300>)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_GPIO_Init+0x300>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_GPIO_Init+0x300>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_GPIO_Init+0x300>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004586:	4a11      	ldr	r2, [pc, #68]	; (80045cc <HAL_GPIO_Init+0x300>)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3301      	adds	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	f47f ae9d 	bne.w	80042dc <HAL_GPIO_Init+0x10>
  }
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40010000 	.word	0x40010000
 80045b8:	48000400 	.word	0x48000400
 80045bc:	48000800 	.word	0x48000800
 80045c0:	48000c00 	.word	0x48000c00
 80045c4:	48001000 	.word	0x48001000
 80045c8:	48001400 	.word	0x48001400
 80045cc:	40010400 	.word	0x40010400

080045d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]
 80045dc:	4613      	mov	r3, r2
 80045de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045e0:	787b      	ldrb	r3, [r7, #1]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045ec:	e002      	b.n	80045f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004616:	4a05      	ldr	r2, [pc, #20]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fc14 	bl	8001e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40010400 	.word	0x40010400

08004630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d141      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800463e:	4b4b      	ldr	r3, [pc, #300]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d131      	bne.n	80046b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800464c:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004652:	4a46      	ldr	r2, [pc, #280]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004664:	4a41      	ldr	r2, [pc, #260]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800466a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800466c:	4b40      	ldr	r3, [pc, #256]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2232      	movs	r2, #50	; 0x32
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	4a3f      	ldr	r2, [pc, #252]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	0c9b      	lsrs	r3, r3, #18
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004682:	e002      	b.n	800468a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b01      	subs	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	d102      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f2      	bne.n	8004684 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800469e:	4b33      	ldr	r3, [pc, #204]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d158      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e057      	b.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b0:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c0:	e04d      	b.n	800475e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d141      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ca:	4b28      	ldr	r3, [pc, #160]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d131      	bne.n	800473c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046d8:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046de:	4a23      	ldr	r2, [pc, #140]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f0:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2232      	movs	r2, #50	; 0x32
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	0c9b      	lsrs	r3, r3, #18
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800470e:	e002      	b.n	8004716 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3b01      	subs	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004722:	d102      	bne.n	800472a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f2      	bne.n	8004710 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	d112      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e011      	b.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004742:	4a0a      	ldr	r2, [pc, #40]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800474c:	e007      	b.n	800475e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004756:	4a05      	ldr	r2, [pc, #20]	; (800476c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40007000 	.word	0x40007000
 8004770:	20000008 	.word	0x20000008
 8004774:	431bde83 	.word	0x431bde83

08004778 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a04      	ldr	r2, [pc, #16]	; (8004794 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004786:	6093      	str	r3, [r2, #8]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40007000 	.word	0x40007000

08004798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e2fe      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d075      	beq.n	80048a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b6:	4b97      	ldr	r3, [pc, #604]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c0:	4b94      	ldr	r3, [pc, #592]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	d102      	bne.n	80047d6 <HAL_RCC_OscConfig+0x3e>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_OscConfig+0x44>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d10b      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d05b      	beq.n	80048a0 <HAL_RCC_OscConfig+0x108>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d157      	bne.n	80048a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e2d9      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d106      	bne.n	800480c <HAL_RCC_OscConfig+0x74>
 80047fe:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a84      	ldr	r2, [pc, #528]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e01d      	b.n	8004848 <HAL_RCC_OscConfig+0xb0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0x98>
 8004816:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7e      	ldr	r2, [pc, #504]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800481c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b7c      	ldr	r3, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7b      	ldr	r2, [pc, #492]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e00b      	b.n	8004848 <HAL_RCC_OscConfig+0xb0>
 8004830:	4b78      	ldr	r3, [pc, #480]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a77      	ldr	r2, [pc, #476]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b75      	ldr	r3, [pc, #468]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a74      	ldr	r2, [pc, #464]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd fe28 	bl	80024a4 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fd fe24 	bl	80024a4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e29e      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0xc0>
 8004876:	e014      	b.n	80048a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd fe14 	bl	80024a4 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fd fe10 	bl	80024a4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e28a      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004892:	4b60      	ldr	r3, [pc, #384]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0xe8>
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d075      	beq.n	800499a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ae:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b8:	4b56      	ldr	r3, [pc, #344]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d102      	bne.n	80048ce <HAL_RCC_OscConfig+0x136>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_OscConfig+0x13c>
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d11f      	bne.n	8004914 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d4:	4b4f      	ldr	r3, [pc, #316]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_OscConfig+0x154>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e25d      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	4946      	ldr	r1, [pc, #280]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004900:	4b45      	ldr	r3, [pc, #276]	; (8004a18 <HAL_RCC_OscConfig+0x280>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd fd81 	bl	800240c <HAL_InitTick>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d043      	beq.n	8004998 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e249      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d023      	beq.n	8004964 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491c:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fdbc 	bl	80024a4 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004930:	f7fd fdb8 	bl	80024a4 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e232      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	492d      	ldr	r1, [pc, #180]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	604b      	str	r3, [r1, #4]
 8004962:	e01a      	b.n	800499a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800496a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fd98 	bl	80024a4 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004978:	f7fd fd94 	bl	80024a4 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e20e      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x1e0>
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d041      	beq.n	8004a2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01c      	beq.n	80049e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b4:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7fd fd71 	bl	80024a4 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c6:	f7fd fd6d 	bl	80024a4 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e1e7      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80049da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ef      	beq.n	80049c6 <HAL_RCC_OscConfig+0x22e>
 80049e6:	e020      	b.n	8004a2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80049ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd fd54 	bl	80024a4 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049fe:	e00d      	b.n	8004a1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a00:	f7fd fd50 	bl	80024a4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d906      	bls.n	8004a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1ca      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a1c:	4b8c      	ldr	r3, [pc, #560]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ea      	bne.n	8004a00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 80a6 	beq.w	8004b84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a3c:	4b84      	ldr	r3, [pc, #528]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2b4>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x2b6>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	4b7f      	ldr	r3, [pc, #508]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	4a7e      	ldr	r2, [pc, #504]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6e:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <HAL_RCC_OscConfig+0x4bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7a:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x4bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x4bc>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fd fd0d 	bl	80024a4 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fd fd09 	bl	80024a4 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e183      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa0:	4b6c      	ldr	r3, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x4bc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d108      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x32e>
 8004ab4:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac4:	e024      	b.n	8004b10 <HAL_RCC_OscConfig+0x378>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d110      	bne.n	8004af0 <HAL_RCC_OscConfig+0x358>
 8004ace:	4b60      	ldr	r3, [pc, #384]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ade:	4b5c      	ldr	r3, [pc, #368]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	4a5a      	ldr	r2, [pc, #360]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aee:	e00f      	b.n	8004b10 <HAL_RCC_OscConfig+0x378>
 8004af0:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	4a56      	ldr	r2, [pc, #344]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	4a52      	ldr	r2, [pc, #328]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d016      	beq.n	8004b46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b18:	f7fd fcc4 	bl	80024a4 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b20:	f7fd fcc0 	bl	80024a4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e138      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b36:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ed      	beq.n	8004b20 <HAL_RCC_OscConfig+0x388>
 8004b44:	e015      	b.n	8004b72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b46:	f7fd fcad 	bl	80024a4 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fd fca9 	bl	80024a4 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e121      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b64:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ed      	bne.n	8004b4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b72:	7ffb      	ldrb	r3, [r7, #31]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d105      	bne.n	8004b84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b78:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	4a34      	ldr	r2, [pc, #208]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03c      	beq.n	8004c0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01c      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b98:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b9e:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fd fc7c 	bl	80024a4 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb0:	f7fd fc78 	bl	80024a4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e0f2      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc2:	4b23      	ldr	r3, [pc, #140]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ef      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x418>
 8004bd0:	e01b      	b.n	8004c0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd fc5f 	bl	80024a4 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bea:	f7fd fc5b 	bl	80024a4 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e0d5      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bfc:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1ef      	bne.n	8004bea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80c9 	beq.w	8004da6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	f000 8083 	beq.w	8004d28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d15e      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fd fc35 	bl	80024a4 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3c:	e00c      	b.n	8004c58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd fc31 	bl	80024a4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d905      	bls.n	8004c58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0ab      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c58:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ec      	bne.n	8004c3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c64:	4b52      	ldr	r3, [pc, #328]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	4b52      	ldr	r3, [pc, #328]	; (8004db4 <HAL_RCC_OscConfig+0x61c>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6a11      	ldr	r1, [r2, #32]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c74:	3a01      	subs	r2, #1
 8004c76:	0112      	lsls	r2, r2, #4
 8004c78:	4311      	orrs	r1, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c7e:	0212      	lsls	r2, r2, #8
 8004c80:	4311      	orrs	r1, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c86:	0852      	lsrs	r2, r2, #1
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	0552      	lsls	r2, r2, #21
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c92:	0852      	lsrs	r2, r2, #1
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0652      	lsls	r2, r2, #25
 8004c98:	4311      	orrs	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c9e:	06d2      	lsls	r2, r2, #27
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	4943      	ldr	r1, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a40      	ldr	r2, [pc, #256]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a3d      	ldr	r2, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fbf0 	bl	80024a4 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fd fbec 	bl	80024a4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e066      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cda:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x530>
 8004ce6:	e05e      	b.n	8004da6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a30      	ldr	r2, [pc, #192]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fbd6 	bl	80024a4 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fd fbd2 	bl	80024a4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e04c      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	4924      	ldr	r1, [pc, #144]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004d20:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_RCC_OscConfig+0x620>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	60cb      	str	r3, [r1, #12]
 8004d26:	e03e      	b.n	8004da6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e039      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCC_OscConfig+0x618>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0203 	and.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d12c      	bne.n	8004da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	3b01      	subs	r3, #1
 8004d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d123      	bne.n	8004da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d11b      	bne.n	8004da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d113      	bne.n	8004da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40021000 	.word	0x40021000
 8004db4:	019f800c 	.word	0x019f800c
 8004db8:	feeefffc 	.word	0xfeeefffc

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e11e      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b91      	ldr	r3, [pc, #580]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d910      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b8e      	ldr	r3, [pc, #568]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	498c      	ldr	r1, [pc, #560]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b8a      	ldr	r3, [pc, #552]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e106      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d073      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d129      	bne.n	8004e6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e18:	4b81      	ldr	r3, [pc, #516]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0f4      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e28:	f000 f99e 	bl	8005168 <RCC_GetSysClockFreqFromPLLSource>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4a7c      	ldr	r2, [pc, #496]	; (8005024 <HAL_RCC_ClockConfig+0x268>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d93f      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e36:	4b7a      	ldr	r3, [pc, #488]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d033      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d12f      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e56:	4b72      	ldr	r3, [pc, #456]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e5e:	4a70      	ldr	r2, [pc, #448]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e024      	b.n	8004eb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e74:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0c6      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e84:	4b66      	ldr	r3, [pc, #408]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0be      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e94:	f000 f8ce 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4a61      	ldr	r2, [pc, #388]	; (8005024 <HAL_RCC_ClockConfig+0x268>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d909      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ea2:	4b5f      	ldr	r3, [pc, #380]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	4a5d      	ldr	r2, [pc, #372]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eb6:	4b5a      	ldr	r3, [pc, #360]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 0203 	bic.w	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4957      	ldr	r1, [pc, #348]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fd faec 	bl	80024a4 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed0:	f7fd fae8 	bl	80024a4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e095      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	4b4e      	ldr	r3, [pc, #312]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 020c 	and.w	r2, r3, #12
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d1eb      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d023      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a42      	ldr	r2, [pc, #264]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f28:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f30:	4a3b      	ldr	r2, [pc, #236]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f38:	4b39      	ldr	r3, [pc, #228]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4936      	ldr	r1, [pc, #216]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b80      	cmp	r3, #128	; 0x80
 8004f50:	d105      	bne.n	8004f5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f52:	4b33      	ldr	r3, [pc, #204]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4a32      	ldr	r2, [pc, #200]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5e:	4b2f      	ldr	r3, [pc, #188]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d21d      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f023 020f 	bic.w	r2, r3, #15
 8004f74:	4929      	ldr	r1, [pc, #164]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd fa92 	bl	80024a4 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f84:	f7fd fa8e 	bl	80024a4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e03b      	b.n	8005012 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_ClockConfig+0x260>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1ed      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4917      	ldr	r1, [pc, #92]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490f      	ldr	r1, [pc, #60]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fe6:	f000 f825 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <HAL_RCC_ClockConfig+0x264>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490c      	ldr	r1, [pc, #48]	; (8005028 <HAL_RCC_ClockConfig+0x26c>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <HAL_RCC_ClockConfig+0x270>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCC_ClockConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd f9fe 	bl	800240c <HAL_InitTick>
 8005010:	4603      	mov	r3, r0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40022000 	.word	0x40022000
 8005020:	40021000 	.word	0x40021000
 8005024:	04c4b400 	.word	0x04c4b400
 8005028:	08007e04 	.word	0x08007e04
 800502c:	20000008 	.word	0x20000008
 8005030:	2000000c 	.word	0x2000000c

08005034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800503a:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d102      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	e047      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800504c:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b08      	cmp	r3, #8
 8005056:	d102      	bne.n	800505e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005058:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	e03e      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800505e:	4b23      	ldr	r3, [pc, #140]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d136      	bne.n	80050d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005074:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	3301      	adds	r3, #1
 8005080:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d10c      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005088:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	4a16      	ldr	r2, [pc, #88]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005092:	68d2      	ldr	r2, [r2, #12]
 8005094:	0a12      	lsrs	r2, r2, #8
 8005096:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	617b      	str	r3, [r7, #20]
      break;
 80050a0:	e00c      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	4a10      	ldr	r2, [pc, #64]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ac:	68d2      	ldr	r2, [r2, #12]
 80050ae:	0a12      	lsrs	r2, r2, #8
 80050b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
      break;
 80050ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	0e5b      	lsrs	r3, r3, #25
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	3301      	adds	r3, #1
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	e001      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050dc:	693b      	ldr	r3, [r7, #16]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
 80050f0:	00f42400 	.word	0x00f42400
 80050f4:	016e3600 	.word	0x016e3600

080050f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_GetHCLKFreq+0x14>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20000008 	.word	0x20000008

08005110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005114:	f7ff fff0 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40021000 	.word	0x40021000
 8005138:	08007e14 	.word	0x08007e14

0800513c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005140:	f7ff ffda 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	0adb      	lsrs	r3, r3, #11
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000
 8005164:	08007e14 	.word	0x08007e14

08005168 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005178:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	3301      	adds	r3, #1
 8005184:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d10c      	bne.n	80051a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005196:	68d2      	ldr	r2, [r2, #12]
 8005198:	0a12      	lsrs	r2, r2, #8
 800519a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	617b      	str	r3, [r7, #20]
    break;
 80051a4:	e00c      	b.n	80051c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051a6:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b0:	68d2      	ldr	r2, [r2, #12]
 80051b2:	0a12      	lsrs	r2, r2, #8
 80051b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]
    break;
 80051be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	0e5b      	lsrs	r3, r3, #25
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	3301      	adds	r3, #1
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051da:	687b      	ldr	r3, [r7, #4]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40021000 	.word	0x40021000
 80051ec:	016e3600 	.word	0x016e3600
 80051f0:	00f42400 	.word	0x00f42400

080051f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051fc:	2300      	movs	r3, #0
 80051fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005200:	2300      	movs	r3, #0
 8005202:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8098 	beq.w	8005342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005216:	4b43      	ldr	r3, [pc, #268]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	4a3f      	ldr	r2, [pc, #252]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6593      	str	r3, [r2, #88]	; 0x58
 800522e:	4b3d      	ldr	r3, [pc, #244]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523a:	2301      	movs	r3, #1
 800523c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800523e:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a39      	ldr	r2, [pc, #228]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524a:	f7fd f92b 	bl	80024a4 <HAL_GetTick>
 800524e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005250:	e009      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005252:	f7fd f927 	bl	80024a4 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d902      	bls.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	74fb      	strb	r3, [r7, #19]
        break;
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005266:	4b30      	ldr	r3, [pc, #192]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ef      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d159      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01e      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	429a      	cmp	r2, r3
 8005292:	d019      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005294:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a0:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b6:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052c0:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d2:	f7fd f8e7 	bl	80024a4 <HAL_GetTick>
 80052d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d8:	e00b      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fd f8e3 	bl	80024a4 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d902      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	74fb      	strb	r3, [r7, #19]
            break;
 80052f0:	e006      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ec      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	4903      	ldr	r1, [pc, #12]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800531c:	e008      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800531e:	7cfb      	ldrb	r3, [r7, #19]
 8005320:	74bb      	strb	r3, [r7, #18]
 8005322:	e005      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005330:	7c7b      	ldrb	r3, [r7, #17]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005336:	4ba7      	ldr	r3, [pc, #668]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	4aa6      	ldr	r2, [pc, #664]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005340:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800534e:	4ba1      	ldr	r3, [pc, #644]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f023 0203 	bic.w	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	499d      	ldr	r1, [pc, #628]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005370:	4b98      	ldr	r3, [pc, #608]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f023 020c 	bic.w	r2, r3, #12
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	4995      	ldr	r1, [pc, #596]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005392:	4b90      	ldr	r3, [pc, #576]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	498c      	ldr	r1, [pc, #560]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b4:	4b87      	ldr	r3, [pc, #540]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	4984      	ldr	r1, [pc, #528]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053d6:	4b7f      	ldr	r3, [pc, #508]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	497b      	ldr	r1, [pc, #492]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f8:	4b76      	ldr	r3, [pc, #472]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	4973      	ldr	r1, [pc, #460]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800541a:	4b6e      	ldr	r3, [pc, #440]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	496a      	ldr	r1, [pc, #424]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800543c:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	4962      	ldr	r1, [pc, #392]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800545e:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	4959      	ldr	r1, [pc, #356]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005480:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	f023 0203 	bic.w	r2, r3, #3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	4951      	ldr	r1, [pc, #324]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a2:	4b4c      	ldr	r3, [pc, #304]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4948      	ldr	r1, [pc, #288]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c4:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	4940      	ldr	r1, [pc, #256]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e2:	d105      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e4:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a3a      	ldr	r2, [pc, #232]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d015      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054fc:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	4932      	ldr	r1, [pc, #200]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551c:	4b2d      	ldr	r3, [pc, #180]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d015      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	4924      	ldr	r1, [pc, #144]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005552:	d105      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005554:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800555e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d015      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	4916      	ldr	r1, [pc, #88]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005596:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d019      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	4908      	ldr	r1, [pc, #32]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c2:	d109      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a02      	ldr	r2, [pc, #8]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ce:	60d3      	str	r3, [r2, #12]
 80055d0:	e002      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055e4:	4b29      	ldr	r3, [pc, #164]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	4926      	ldr	r1, [pc, #152]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800561c:	4b1b      	ldr	r3, [pc, #108]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	4918      	ldr	r1, [pc, #96]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563a:	d105      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a12      	ldr	r2, [pc, #72]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005646:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d015      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005654:	4b0d      	ldr	r3, [pc, #52]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800565a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	490a      	ldr	r1, [pc, #40]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005672:	d105      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005680:	7cbb      	ldrb	r3, [r7, #18]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000

08005690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e049      	b.n	8005736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fc fcc0 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 ff5e 	bl	8006590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e04c      	b.n	80057f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_TIM_Base_Start+0xc0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d022      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d01d      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a22      	ldr	r2, [pc, #136]	; (8005804 <HAL_TIM_Base_Start+0xc4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d018      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a21      	ldr	r2, [pc, #132]	; (8005808 <HAL_TIM_Base_Start+0xc8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_TIM_Base_Start+0xcc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00e      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <HAL_TIM_Base_Start+0xd0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d009      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_TIM_Base_Start+0xd4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_TIM_Base_Start+0x70>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <HAL_TIM_Base_Start+0xd8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d115      	bne.n	80057dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_TIM_Base_Start+0xdc>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d015      	beq.n	80057ee <HAL_TIM_Base_Start+0xae>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d011      	beq.n	80057ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0201 	orr.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057da:	e008      	b.n	80057ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e000      	b.n	80057f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40013400 	.word	0x40013400
 8005814:	40014000 	.word	0x40014000
 8005818:	40015000 	.word	0x40015000
 800581c:	00010007 	.word	0x00010007

08005820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	d001      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e054      	b.n	80058e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d01d      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_TIM_Base_Start_IT+0xdc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_TIM_Base_Start_IT+0xe0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <HAL_TIM_Base_Start_IT+0xe4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_TIM_Base_Start_IT+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d115      	bne.n	80058cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_TIM_Base_Start_IT+0xec>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d015      	beq.n	80058de <HAL_TIM_Base_Start_IT+0xbe>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d011      	beq.n	80058de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	e008      	b.n	80058de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40013400 	.word	0x40013400
 8005904:	40014000 	.word	0x40014000
 8005908:	40015000 	.word	0x40015000
 800590c:	00010007 	.word	0x00010007

08005910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc fbc0 	bl	80020bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fe1e 	bl	8006590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_TIM_PWM_Start+0x24>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e03c      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d109      	bne.n	80059fe <HAL_TIM_PWM_Start+0x3e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e02f      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d109      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x58>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e022      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d109      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x72>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e015      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d109      	bne.n	8005a4c <HAL_TIM_PWM_Start+0x8c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e008      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0a6      	b.n	8005bb4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xb6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	e023      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xc6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a84:	e01b      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0xd6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a94:	e013      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xe6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa4:	e00b      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xf6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab4:	e003      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f9dc 	bl	8006e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_TIM_PWM_Start+0x1fc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a39      	ldr	r2, [pc, #228]	; (8005bc0 <HAL_TIM_PWM_Start+0x200>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a37      	ldr	r2, [pc, #220]	; (8005bc4 <HAL_TIM_PWM_Start+0x204>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a36      	ldr	r2, [pc, #216]	; (8005bc8 <HAL_TIM_PWM_Start+0x208>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <HAL_TIM_PWM_Start+0x20c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_TIM_PWM_Start+0x210>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x14c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0x14e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <HAL_TIM_PWM_Start+0x1fc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d022      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d01d      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <HAL_TIM_PWM_Start+0x214>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d018      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a24      	ldr	r2, [pc, #144]	; (8005bd8 <HAL_TIM_PWM_Start+0x218>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_TIM_PWM_Start+0x21c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <HAL_TIM_PWM_Start+0x200>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_TIM_PWM_Start+0x204>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x1b2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <HAL_TIM_PWM_Start+0x210>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d115      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <HAL_TIM_PWM_Start+0x220>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d015      	beq.n	8005bb0 <HAL_TIM_PWM_Start+0x1f0>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8a:	d011      	beq.n	8005bb0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9c:	e008      	b.n	8005bb0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e000      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800
 8005bd0:	40015000 	.word	0x40015000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	00010007 	.word	0x00010007

08005be4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e097      	b.n	8005d28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fc fa75 	bl	80020fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f000 fca9 	bl	8006590 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	4313      	orrs	r3, r2
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c84:	f023 030c 	bic.w	r3, r3, #12
 8005c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	031b      	lsls	r3, r3, #12
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d110      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d102      	bne.n	8005d6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d66:	7b7b      	ldrb	r3, [r7, #13]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e069      	b.n	8005e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d80:	e031      	b.n	8005de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d110      	bne.n	8005daa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d8e:	7b3b      	ldrb	r3, [r7, #12]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e055      	b.n	8005e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da8:	e01d      	b.n	8005de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d108      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d105      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db6:	7b7b      	ldrb	r3, [r7, #13]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d102      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dbc:	7b3b      	ldrb	r3, [r7, #12]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d001      	beq.n	8005dc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e03e      	b.n	8005e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_TIM_Encoder_Start+0xc4>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d008      	beq.n	8005e04 <HAL_TIM_Encoder_Start+0xd4>
 8005df2:	e00f      	b.n	8005e14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f841 	bl	8006e84 <TIM_CCxChannelCmd>
      break;
 8005e02:	e016      	b.n	8005e32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2104      	movs	r1, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f839 	bl	8006e84 <TIM_CCxChannelCmd>
      break;
 8005e12:	e00e      	b.n	8005e32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 f831 	bl	8006e84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2201      	movs	r2, #1
 8005e28:	2104      	movs	r1, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f82a 	bl	8006e84 <TIM_CCxChannelCmd>
      break;
 8005e30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d020      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0202 	mvn.w	r2, #2
 8005e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb5c 	bl	8006554 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fb4e 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb5f 	bl	8006568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0204 	mvn.w	r2, #4
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fb36 	bl	8006554 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fb28 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fb39 	bl	8006568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0208 	mvn.w	r2, #8
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb10 	bl	8006554 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb02 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fb13 	bl	8006568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 faea 	bl	8006554 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fadc 	bl	8006540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 faed 	bl	8006568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0201 	mvn.w	r2, #1
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fb ff1e 	bl	8001df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f815 	bl	8007010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00c      	beq.n	800600a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f80d 	bl	8007024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00c      	beq.n	800602e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 faa7 	bl	800657c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0220 	mvn.w	r2, #32
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 ffd5 	bl	8006ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 ffe1 	bl	8007038 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00c      	beq.n	800609a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 ffd9 	bl	800704c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 ffd1 	bl	8007060 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80060da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 ffc9 	bl	8007074 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006106:	2302      	movs	r3, #2
 8006108:	e0ff      	b.n	800630a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b14      	cmp	r3, #20
 8006116:	f200 80f0 	bhi.w	80062fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006175 	.word	0x08006175
 8006124:	080062fb 	.word	0x080062fb
 8006128:	080062fb 	.word	0x080062fb
 800612c:	080062fb 	.word	0x080062fb
 8006130:	080061b5 	.word	0x080061b5
 8006134:	080062fb 	.word	0x080062fb
 8006138:	080062fb 	.word	0x080062fb
 800613c:	080062fb 	.word	0x080062fb
 8006140:	080061f7 	.word	0x080061f7
 8006144:	080062fb 	.word	0x080062fb
 8006148:	080062fb 	.word	0x080062fb
 800614c:	080062fb 	.word	0x080062fb
 8006150:	08006237 	.word	0x08006237
 8006154:	080062fb 	.word	0x080062fb
 8006158:	080062fb 	.word	0x080062fb
 800615c:	080062fb 	.word	0x080062fb
 8006160:	08006279 	.word	0x08006279
 8006164:	080062fb 	.word	0x080062fb
 8006168:	080062fb 	.word	0x080062fb
 800616c:	080062fb 	.word	0x080062fb
 8006170:	080062b9 	.word	0x080062b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fabc 	bl	80066f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0208 	orr.w	r2, r2, #8
 800618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	619a      	str	r2, [r3, #24]
      break;
 80061b2:	e0a5      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fb36 	bl	800682c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6999      	ldr	r1, [r3, #24]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	021a      	lsls	r2, r3, #8
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	619a      	str	r2, [r3, #24]
      break;
 80061f4:	e084      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fba9 	bl	8006954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0208 	orr.w	r2, r2, #8
 8006210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0204 	bic.w	r2, r2, #4
 8006220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	61da      	str	r2, [r3, #28]
      break;
 8006234:	e064      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fc1b 	bl	8006a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	021a      	lsls	r2, r3, #8
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	61da      	str	r2, [r3, #28]
      break;
 8006276:	e043      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fc8e 	bl	8006ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062b6:	e023      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fcd8 	bl	8006c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062f8:	e002      	b.n	8006300 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	75fb      	strb	r3, [r7, #23]
      break;
 80062fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop

08006314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIM_ConfigClockSource+0x1c>
 800632c:	2302      	movs	r3, #2
 800632e:	e0f6      	b.n	800651e <HAL_TIM_ConfigClockSource+0x20a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800634e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a6f      	ldr	r2, [pc, #444]	; (8006528 <HAL_TIM_ConfigClockSource+0x214>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f000 80c1 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006370:	4a6d      	ldr	r2, [pc, #436]	; (8006528 <HAL_TIM_ConfigClockSource+0x214>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f200 80c6 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006378:	4a6c      	ldr	r2, [pc, #432]	; (800652c <HAL_TIM_ConfigClockSource+0x218>)
 800637a:	4293      	cmp	r3, r2
 800637c:	f000 80b9 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006380:	4a6a      	ldr	r2, [pc, #424]	; (800652c <HAL_TIM_ConfigClockSource+0x218>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f200 80be 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006388:	4a69      	ldr	r2, [pc, #420]	; (8006530 <HAL_TIM_ConfigClockSource+0x21c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f000 80b1 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006390:	4a67      	ldr	r2, [pc, #412]	; (8006530 <HAL_TIM_ConfigClockSource+0x21c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	f200 80b6 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006398:	4a66      	ldr	r2, [pc, #408]	; (8006534 <HAL_TIM_ConfigClockSource+0x220>)
 800639a:	4293      	cmp	r3, r2
 800639c:	f000 80a9 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 80063a0:	4a64      	ldr	r2, [pc, #400]	; (8006534 <HAL_TIM_ConfigClockSource+0x220>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	f200 80ae 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a8:	4a63      	ldr	r2, [pc, #396]	; (8006538 <HAL_TIM_ConfigClockSource+0x224>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f000 80a1 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 80063b0:	4a61      	ldr	r2, [pc, #388]	; (8006538 <HAL_TIM_ConfigClockSource+0x224>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f200 80a6 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b8:	4a60      	ldr	r2, [pc, #384]	; (800653c <HAL_TIM_ConfigClockSource+0x228>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	f000 8099 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 80063c0:	4a5e      	ldr	r2, [pc, #376]	; (800653c <HAL_TIM_ConfigClockSource+0x228>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f200 809e 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 80063c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063cc:	f000 8091 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 80063d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063d4:	f200 8096 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 80063d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063dc:	f000 8089 	beq.w	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 80063e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e4:	f200 808e 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ec:	d03e      	beq.n	800646c <HAL_TIM_ConfigClockSource+0x158>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f2:	f200 8087 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fa:	f000 8086 	beq.w	800650a <HAL_TIM_ConfigClockSource+0x1f6>
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d87f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006404:	2b70      	cmp	r3, #112	; 0x70
 8006406:	d01a      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x12a>
 8006408:	2b70      	cmp	r3, #112	; 0x70
 800640a:	d87b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 800640c:	2b60      	cmp	r3, #96	; 0x60
 800640e:	d050      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x19e>
 8006410:	2b60      	cmp	r3, #96	; 0x60
 8006412:	d877      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006414:	2b50      	cmp	r3, #80	; 0x50
 8006416:	d03c      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x17e>
 8006418:	2b50      	cmp	r3, #80	; 0x50
 800641a:	d873      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d058      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x1be>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d86f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006424:	2b30      	cmp	r3, #48	; 0x30
 8006426:	d064      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006428:	2b30      	cmp	r3, #48	; 0x30
 800642a:	d86b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d060      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d867      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d05c      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d05a      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x1de>
 800643c:	e062      	b.n	8006504 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800644e:	f000 fcf9 	bl	8006e44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	609a      	str	r2, [r3, #8]
      break;
 800646a:	e04f      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800647c:	f000 fce2 	bl	8006e44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800648e:	609a      	str	r2, [r3, #8]
      break;
 8006490:	e03c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	461a      	mov	r2, r3
 80064a0:	f000 fc54 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2150      	movs	r1, #80	; 0x50
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fcad 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 80064b0:	e02c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 fc73 	bl	8006daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2160      	movs	r1, #96	; 0x60
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fc9d 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 80064d0:	e01c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 fc34 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2140      	movs	r1, #64	; 0x40
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fc8d 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 80064f0:	e00c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f000 fc84 	bl	8006e0a <TIM_ITRx_SetConfig>
      break;
 8006502:	e003      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
      break;
 8006508:	e000      	b.n	800650c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800650a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	00100070 	.word	0x00100070
 800652c:	00100060 	.word	0x00100060
 8006530:	00100050 	.word	0x00100050
 8006534:	00100040 	.word	0x00100040
 8006538:	00100030 	.word	0x00100030
 800653c:	00100020 	.word	0x00100020

08006540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a4c      	ldr	r2, [pc, #304]	; (80066d4 <TIM_Base_SetConfig+0x144>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d017      	beq.n	80065d8 <TIM_Base_SetConfig+0x48>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d013      	beq.n	80065d8 <TIM_Base_SetConfig+0x48>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a49      	ldr	r2, [pc, #292]	; (80066d8 <TIM_Base_SetConfig+0x148>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00f      	beq.n	80065d8 <TIM_Base_SetConfig+0x48>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a48      	ldr	r2, [pc, #288]	; (80066dc <TIM_Base_SetConfig+0x14c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_Base_SetConfig+0x48>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a47      	ldr	r2, [pc, #284]	; (80066e0 <TIM_Base_SetConfig+0x150>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_Base_SetConfig+0x48>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a46      	ldr	r2, [pc, #280]	; (80066e4 <TIM_Base_SetConfig+0x154>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_Base_SetConfig+0x48>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a45      	ldr	r2, [pc, #276]	; (80066e8 <TIM_Base_SetConfig+0x158>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d108      	bne.n	80065ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a39      	ldr	r2, [pc, #228]	; (80066d4 <TIM_Base_SetConfig+0x144>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d023      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f8:	d01f      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a36      	ldr	r2, [pc, #216]	; (80066d8 <TIM_Base_SetConfig+0x148>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01b      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a35      	ldr	r2, [pc, #212]	; (80066dc <TIM_Base_SetConfig+0x14c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d017      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a34      	ldr	r2, [pc, #208]	; (80066e0 <TIM_Base_SetConfig+0x150>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a33      	ldr	r2, [pc, #204]	; (80066e4 <TIM_Base_SetConfig+0x154>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00f      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a33      	ldr	r2, [pc, #204]	; (80066ec <TIM_Base_SetConfig+0x15c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00b      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a32      	ldr	r2, [pc, #200]	; (80066f0 <TIM_Base_SetConfig+0x160>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a31      	ldr	r2, [pc, #196]	; (80066f4 <TIM_Base_SetConfig+0x164>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_Base_SetConfig+0xaa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <TIM_Base_SetConfig+0x158>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d108      	bne.n	800664c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <TIM_Base_SetConfig+0x144>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <TIM_Base_SetConfig+0x110>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <TIM_Base_SetConfig+0x154>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00f      	beq.n	80066a0 <TIM_Base_SetConfig+0x110>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <TIM_Base_SetConfig+0x15c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0x110>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <TIM_Base_SetConfig+0x160>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0x110>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <TIM_Base_SetConfig+0x164>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0x110>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <TIM_Base_SetConfig+0x158>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d103      	bne.n	80066a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]
  }
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40015000 	.word	0x40015000
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800

080066f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f023 0201 	bic.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f023 0302 	bic.w	r3, r3, #2
 8006744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a30      	ldr	r2, [pc, #192]	; (8006814 <TIM_OC1_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d013      	beq.n	8006780 <TIM_OC1_SetConfig+0x88>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2f      	ldr	r2, [pc, #188]	; (8006818 <TIM_OC1_SetConfig+0x120>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00f      	beq.n	8006780 <TIM_OC1_SetConfig+0x88>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2e      	ldr	r2, [pc, #184]	; (800681c <TIM_OC1_SetConfig+0x124>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00b      	beq.n	8006780 <TIM_OC1_SetConfig+0x88>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2d      	ldr	r2, [pc, #180]	; (8006820 <TIM_OC1_SetConfig+0x128>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d007      	beq.n	8006780 <TIM_OC1_SetConfig+0x88>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <TIM_OC1_SetConfig+0x12c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC1_SetConfig+0x88>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <TIM_OC1_SetConfig+0x130>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10c      	bne.n	800679a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0308 	bic.w	r3, r3, #8
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <TIM_OC1_SetConfig+0x11c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d013      	beq.n	80067ca <TIM_OC1_SetConfig+0xd2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <TIM_OC1_SetConfig+0x120>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00f      	beq.n	80067ca <TIM_OC1_SetConfig+0xd2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	; (800681c <TIM_OC1_SetConfig+0x124>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_OC1_SetConfig+0xd2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <TIM_OC1_SetConfig+0x128>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC1_SetConfig+0xd2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_OC1_SetConfig+0x12c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC1_SetConfig+0xd2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_OC1_SetConfig+0x130>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d111      	bne.n	80067ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	621a      	str	r2, [r3, #32]
}
 8006808:	bf00      	nop
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800
 8006828:	40015000 	.word	0x40015000

0800682c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f023 0210 	bic.w	r2, r3, #16
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0320 	bic.w	r3, r3, #32
 800687a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2c      	ldr	r2, [pc, #176]	; (800693c <TIM_OC2_SetConfig+0x110>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <TIM_OC2_SetConfig+0x74>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a2b      	ldr	r2, [pc, #172]	; (8006940 <TIM_OC2_SetConfig+0x114>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_OC2_SetConfig+0x74>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2a      	ldr	r2, [pc, #168]	; (8006944 <TIM_OC2_SetConfig+0x118>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10d      	bne.n	80068bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a1f      	ldr	r2, [pc, #124]	; (800693c <TIM_OC2_SetConfig+0x110>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d013      	beq.n	80068ec <TIM_OC2_SetConfig+0xc0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <TIM_OC2_SetConfig+0x114>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_OC2_SetConfig+0xc0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <TIM_OC2_SetConfig+0x11c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00b      	beq.n	80068ec <TIM_OC2_SetConfig+0xc0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a1d      	ldr	r2, [pc, #116]	; (800694c <TIM_OC2_SetConfig+0x120>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_OC2_SetConfig+0xc0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a1c      	ldr	r2, [pc, #112]	; (8006950 <TIM_OC2_SetConfig+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0xc0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a17      	ldr	r2, [pc, #92]	; (8006944 <TIM_OC2_SetConfig+0x118>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d113      	bne.n	8006914 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40013400 	.word	0x40013400
 8006944:	40015000 	.word	0x40015000
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <TIM_OC3_SetConfig+0x10c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <TIM_OC3_SetConfig+0x72>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <TIM_OC3_SetConfig+0x110>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_OC3_SetConfig+0x72>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <TIM_OC3_SetConfig+0x114>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d10d      	bne.n	80069e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <TIM_OC3_SetConfig+0x10c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <TIM_OC3_SetConfig+0xbe>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <TIM_OC3_SetConfig+0x110>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00f      	beq.n	8006a12 <TIM_OC3_SetConfig+0xbe>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <TIM_OC3_SetConfig+0x118>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <TIM_OC3_SetConfig+0xbe>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <TIM_OC3_SetConfig+0x11c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_OC3_SetConfig+0xbe>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <TIM_OC3_SetConfig+0x120>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC3_SetConfig+0xbe>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a16      	ldr	r2, [pc, #88]	; (8006a68 <TIM_OC3_SetConfig+0x114>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d113      	bne.n	8006a3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	621a      	str	r2, [r3, #32]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	40015000 	.word	0x40015000
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800

08006a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	031b      	lsls	r3, r3, #12
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a2c      	ldr	r2, [pc, #176]	; (8006b88 <TIM_OC4_SetConfig+0x110>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_OC4_SetConfig+0x74>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a2b      	ldr	r2, [pc, #172]	; (8006b8c <TIM_OC4_SetConfig+0x114>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_OC4_SetConfig+0x74>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a2a      	ldr	r2, [pc, #168]	; (8006b90 <TIM_OC4_SetConfig+0x118>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d10d      	bne.n	8006b08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1f      	ldr	r2, [pc, #124]	; (8006b88 <TIM_OC4_SetConfig+0x110>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <TIM_OC4_SetConfig+0xc0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a1e      	ldr	r2, [pc, #120]	; (8006b8c <TIM_OC4_SetConfig+0x114>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00f      	beq.n	8006b38 <TIM_OC4_SetConfig+0xc0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <TIM_OC4_SetConfig+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00b      	beq.n	8006b38 <TIM_OC4_SetConfig+0xc0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <TIM_OC4_SetConfig+0x120>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d007      	beq.n	8006b38 <TIM_OC4_SetConfig+0xc0>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <TIM_OC4_SetConfig+0x124>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_OC4_SetConfig+0xc0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <TIM_OC4_SetConfig+0x118>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d113      	bne.n	8006b60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	019b      	lsls	r3, r3, #6
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	019b      	lsls	r3, r3, #6
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40013400 	.word	0x40013400
 8006b90:	40015000 	.word	0x40015000
 8006b94:	40014000 	.word	0x40014000
 8006b98:	40014400 	.word	0x40014400
 8006b9c:	40014800 	.word	0x40014800

08006ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006be4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a19      	ldr	r2, [pc, #100]	; (8006c5c <TIM_OC5_SetConfig+0xbc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <TIM_OC5_SetConfig+0x82>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <TIM_OC5_SetConfig+0xc0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_OC5_SetConfig+0x82>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <TIM_OC5_SetConfig+0xc4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_OC5_SetConfig+0x82>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <TIM_OC5_SetConfig+0xc8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_OC5_SetConfig+0x82>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <TIM_OC5_SetConfig+0xcc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC5_SetConfig+0x82>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <TIM_OC5_SetConfig+0xd0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d109      	bne.n	8006c36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	621a      	str	r2, [r3, #32]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	40012c00 	.word	0x40012c00
 8006c60:	40013400 	.word	0x40013400
 8006c64:	40014000 	.word	0x40014000
 8006c68:	40014400 	.word	0x40014400
 8006c6c:	40014800 	.word	0x40014800
 8006c70:	40015000 	.word	0x40015000

08006c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	051b      	lsls	r3, r3, #20
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <TIM_OC6_SetConfig+0xc0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d013      	beq.n	8006cf8 <TIM_OC6_SetConfig+0x84>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a19      	ldr	r2, [pc, #100]	; (8006d38 <TIM_OC6_SetConfig+0xc4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00f      	beq.n	8006cf8 <TIM_OC6_SetConfig+0x84>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <TIM_OC6_SetConfig+0xc8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <TIM_OC6_SetConfig+0x84>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a17      	ldr	r2, [pc, #92]	; (8006d40 <TIM_OC6_SetConfig+0xcc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d007      	beq.n	8006cf8 <TIM_OC6_SetConfig+0x84>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <TIM_OC6_SetConfig+0xd0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC6_SetConfig+0x84>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <TIM_OC6_SetConfig+0xd4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d109      	bne.n	8006d0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	029b      	lsls	r3, r3, #10
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	40014400 	.word	0x40014400
 8006d44:	40014800 	.word	0x40014800
 8006d48:	40015000 	.word	0x40015000

08006d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 030a 	bic.w	r3, r3, #10
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f023 0210 	bic.w	r2, r3, #16
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006de6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	621a      	str	r2, [r3, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f043 0307 	orr.w	r3, r3, #7
 8006e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	021a      	lsls	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	2201      	movs	r2, #1
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1a      	ldr	r2, [r3, #32]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	401a      	ands	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a1a      	ldr	r2, [r3, #32]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e074      	b.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a34      	ldr	r2, [pc, #208]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a33      	ldr	r2, [pc, #204]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a31      	ldr	r2, [pc, #196]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d108      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d022      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f68:	d01d      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1f      	ldr	r2, [pc, #124]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d018      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1d      	ldr	r2, [pc, #116]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00e      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d009      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40013400 	.word	0x40013400
 8006fe8:	40015000 	.word	0x40015000
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40014000 	.word	0x40014000

08006ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e042      	b.n	8007120 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fb f8a7 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb24 	bl	8007720 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f825 	bl	8007128 <UART_SetConfig>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e01b      	b.n	8007120 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fba3 	bl	8007864 <UART_CheckIdleState>
 800711e:	4603      	mov	r3, r0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800712c:	b08c      	sub	sp, #48	; 0x30
 800712e:	af00      	add	r7, sp, #0
 8007130:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4baa      	ldr	r3, [pc, #680]	; (8007400 <UART_SetConfig+0x2d8>)
 8007158:	4013      	ands	r3, r2
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007160:	430b      	orrs	r3, r1
 8007162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a9f      	ldr	r2, [pc, #636]	; (8007404 <UART_SetConfig+0x2dc>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007190:	4313      	orrs	r3, r2
 8007192:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800719e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a8:	430b      	orrs	r3, r1
 80071aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	f023 010f 	bic.w	r1, r3, #15
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a90      	ldr	r2, [pc, #576]	; (8007408 <UART_SetConfig+0x2e0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d125      	bne.n	8007218 <UART_SetConfig+0xf0>
 80071cc:	4b8f      	ldr	r3, [pc, #572]	; (800740c <UART_SetConfig+0x2e4>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d81a      	bhi.n	8007210 <UART_SetConfig+0xe8>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0xb8>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007201 	.word	0x08007201
 80071e8:	080071f9 	.word	0x080071f9
 80071ec:	08007209 	.word	0x08007209
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f6:	e116      	b.n	8007426 <UART_SetConfig+0x2fe>
 80071f8:	2302      	movs	r3, #2
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fe:	e112      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007206:	e10e      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720e:	e10a      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e106      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a7c      	ldr	r2, [pc, #496]	; (8007410 <UART_SetConfig+0x2e8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d138      	bne.n	8007294 <UART_SetConfig+0x16c>
 8007222:	4b7a      	ldr	r3, [pc, #488]	; (800740c <UART_SetConfig+0x2e4>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d82d      	bhi.n	800728c <UART_SetConfig+0x164>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <UART_SetConfig+0x110>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800726d 	.word	0x0800726d
 800723c:	0800728d 	.word	0x0800728d
 8007240:	0800728d 	.word	0x0800728d
 8007244:	0800728d 	.word	0x0800728d
 8007248:	0800727d 	.word	0x0800727d
 800724c:	0800728d 	.word	0x0800728d
 8007250:	0800728d 	.word	0x0800728d
 8007254:	0800728d 	.word	0x0800728d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800728d 	.word	0x0800728d
 8007260:	0800728d 	.word	0x0800728d
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007285 	.word	0x08007285
 800726c:	2300      	movs	r3, #0
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e0d8      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007274:	2302      	movs	r3, #2
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e0d4      	b.n	8007426 <UART_SetConfig+0x2fe>
 800727c:	2304      	movs	r3, #4
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e0d0      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007284:	2308      	movs	r3, #8
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e0cc      	b.n	8007426 <UART_SetConfig+0x2fe>
 800728c:	2310      	movs	r3, #16
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e0c8      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a5e      	ldr	r2, [pc, #376]	; (8007414 <UART_SetConfig+0x2ec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d125      	bne.n	80072ea <UART_SetConfig+0x1c2>
 800729e:	4b5b      	ldr	r3, [pc, #364]	; (800740c <UART_SetConfig+0x2e4>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072a8:	2b30      	cmp	r3, #48	; 0x30
 80072aa:	d016      	beq.n	80072da <UART_SetConfig+0x1b2>
 80072ac:	2b30      	cmp	r3, #48	; 0x30
 80072ae:	d818      	bhi.n	80072e2 <UART_SetConfig+0x1ba>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d00a      	beq.n	80072ca <UART_SetConfig+0x1a2>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d814      	bhi.n	80072e2 <UART_SetConfig+0x1ba>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <UART_SetConfig+0x19a>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d008      	beq.n	80072d2 <UART_SetConfig+0x1aa>
 80072c0:	e00f      	b.n	80072e2 <UART_SetConfig+0x1ba>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c8:	e0ad      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072ca:	2302      	movs	r3, #2
 80072cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d0:	e0a9      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072d2:	2304      	movs	r3, #4
 80072d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d8:	e0a5      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072da:	2308      	movs	r3, #8
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e0:	e0a1      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072e2:	2310      	movs	r3, #16
 80072e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e8:	e09d      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4a      	ldr	r2, [pc, #296]	; (8007418 <UART_SetConfig+0x2f0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d125      	bne.n	8007340 <UART_SetConfig+0x218>
 80072f4:	4b45      	ldr	r3, [pc, #276]	; (800740c <UART_SetConfig+0x2e4>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007300:	d016      	beq.n	8007330 <UART_SetConfig+0x208>
 8007302:	2bc0      	cmp	r3, #192	; 0xc0
 8007304:	d818      	bhi.n	8007338 <UART_SetConfig+0x210>
 8007306:	2b80      	cmp	r3, #128	; 0x80
 8007308:	d00a      	beq.n	8007320 <UART_SetConfig+0x1f8>
 800730a:	2b80      	cmp	r3, #128	; 0x80
 800730c:	d814      	bhi.n	8007338 <UART_SetConfig+0x210>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <UART_SetConfig+0x1f0>
 8007312:	2b40      	cmp	r3, #64	; 0x40
 8007314:	d008      	beq.n	8007328 <UART_SetConfig+0x200>
 8007316:	e00f      	b.n	8007338 <UART_SetConfig+0x210>
 8007318:	2300      	movs	r3, #0
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731e:	e082      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007326:	e07e      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732e:	e07a      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007336:	e076      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733e:	e072      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a35      	ldr	r2, [pc, #212]	; (800741c <UART_SetConfig+0x2f4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d12a      	bne.n	80073a0 <UART_SetConfig+0x278>
 800734a:	4b30      	ldr	r3, [pc, #192]	; (800740c <UART_SetConfig+0x2e4>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007358:	d01a      	beq.n	8007390 <UART_SetConfig+0x268>
 800735a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800735e:	d81b      	bhi.n	8007398 <UART_SetConfig+0x270>
 8007360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007364:	d00c      	beq.n	8007380 <UART_SetConfig+0x258>
 8007366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800736a:	d815      	bhi.n	8007398 <UART_SetConfig+0x270>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <UART_SetConfig+0x250>
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x260>
 8007376:	e00f      	b.n	8007398 <UART_SetConfig+0x270>
 8007378:	2300      	movs	r3, #0
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737e:	e052      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007386:	e04e      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738e:	e04a      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e046      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e042      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a17      	ldr	r2, [pc, #92]	; (8007404 <UART_SetConfig+0x2dc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d13a      	bne.n	8007420 <UART_SetConfig+0x2f8>
 80073aa:	4b18      	ldr	r3, [pc, #96]	; (800740c <UART_SetConfig+0x2e4>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b8:	d01a      	beq.n	80073f0 <UART_SetConfig+0x2c8>
 80073ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073be:	d81b      	bhi.n	80073f8 <UART_SetConfig+0x2d0>
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c4:	d00c      	beq.n	80073e0 <UART_SetConfig+0x2b8>
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ca:	d815      	bhi.n	80073f8 <UART_SetConfig+0x2d0>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <UART_SetConfig+0x2b0>
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	d008      	beq.n	80073e8 <UART_SetConfig+0x2c0>
 80073d6:	e00f      	b.n	80073f8 <UART_SetConfig+0x2d0>
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073de:	e022      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073e0:	2302      	movs	r3, #2
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e6:	e01e      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e01a      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e016      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e012      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007400:	cfff69f3 	.word	0xcfff69f3
 8007404:	40008000 	.word	0x40008000
 8007408:	40013800 	.word	0x40013800
 800740c:	40021000 	.word	0x40021000
 8007410:	40004400 	.word	0x40004400
 8007414:	40004800 	.word	0x40004800
 8007418:	40004c00 	.word	0x40004c00
 800741c:	40005000 	.word	0x40005000
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4aae      	ldr	r2, [pc, #696]	; (80076e4 <UART_SetConfig+0x5bc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	f040 8097 	bne.w	8007560 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007436:	2b08      	cmp	r3, #8
 8007438:	d823      	bhi.n	8007482 <UART_SetConfig+0x35a>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <UART_SetConfig+0x318>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007465 	.word	0x08007465
 8007444:	08007483 	.word	0x08007483
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007483 	.word	0x08007483
 8007450:	08007473 	.word	0x08007473
 8007454:	08007483 	.word	0x08007483
 8007458:	08007483 	.word	0x08007483
 800745c:	08007483 	.word	0x08007483
 8007460:	0800747b 	.word	0x0800747b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fd fe54 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746a:	e010      	b.n	800748e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800746c:	4b9e      	ldr	r3, [pc, #632]	; (80076e8 <UART_SetConfig+0x5c0>)
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007470:	e00d      	b.n	800748e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007472:	f7fd fddf 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007478:	e009      	b.n	800748e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007480:	e005      	b.n	800748e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800748c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8130 	beq.w	80076f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	4a94      	ldr	r2, [pc, #592]	; (80076ec <UART_SetConfig+0x5c4>)
 800749c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d305      	bcc.n	80074c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d903      	bls.n	80074ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074cc:	e113      	b.n	80076f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2200      	movs	r2, #0
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	60fa      	str	r2, [r7, #12]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	4a84      	ldr	r2, [pc, #528]	; (80076ec <UART_SetConfig+0x5c4>)
 80074dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2200      	movs	r2, #0
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074f0:	f7f9 fbde 	bl	8000cb0 <__aeabi_uldivmod>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4610      	mov	r0, r2
 80074fa:	4619      	mov	r1, r3
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	020b      	lsls	r3, r1, #8
 8007506:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800750a:	0202      	lsls	r2, r0, #8
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	6849      	ldr	r1, [r1, #4]
 8007510:	0849      	lsrs	r1, r1, #1
 8007512:	2000      	movs	r0, #0
 8007514:	460c      	mov	r4, r1
 8007516:	4605      	mov	r5, r0
 8007518:	eb12 0804 	adds.w	r8, r2, r4
 800751c:	eb43 0905 	adc.w	r9, r3, r5
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	469a      	mov	sl, r3
 8007528:	4693      	mov	fp, r2
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 fbbd 	bl	8000cb0 <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4613      	mov	r3, r2
 800753c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007544:	d308      	bcc.n	8007558 <UART_SetConfig+0x430>
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754c:	d204      	bcs.n	8007558 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	e0ce      	b.n	80076f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800755e:	e0ca      	b.n	80076f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007568:	d166      	bne.n	8007638 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800756a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800756e:	2b08      	cmp	r3, #8
 8007570:	d827      	bhi.n	80075c2 <UART_SetConfig+0x49a>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x450>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075ad 	.word	0x080075ad
 8007584:	080075c3 	.word	0x080075c3
 8007588:	080075b3 	.word	0x080075b3
 800758c:	080075c3 	.word	0x080075c3
 8007590:	080075c3 	.word	0x080075c3
 8007594:	080075c3 	.word	0x080075c3
 8007598:	080075bb 	.word	0x080075bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759c:	f7fd fdb8 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 80075a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075a2:	e014      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a4:	f7fd fdca 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 80075a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075aa:	e010      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ac:	4b4e      	ldr	r3, [pc, #312]	; (80076e8 <UART_SetConfig+0x5c0>)
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075b0:	e00d      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fd fd3f 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075b8:	e009      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c0:	e005      	b.n	80075ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8090 	beq.w	80076f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	4a44      	ldr	r2, [pc, #272]	; (80076ec <UART_SetConfig+0x5c4>)
 80075dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e8:	005a      	lsls	r2, r3, #1
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	441a      	add	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d916      	bls.n	8007630 <UART_SetConfig+0x508>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007608:	d212      	bcs.n	8007630 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f023 030f 	bic.w	r3, r3, #15
 8007612:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	b29b      	uxth	r3, r3
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	b29a      	uxth	r2, r3
 8007620:	8bfb      	ldrh	r3, [r7, #30]
 8007622:	4313      	orrs	r3, r2
 8007624:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8bfa      	ldrh	r2, [r7, #30]
 800762c:	60da      	str	r2, [r3, #12]
 800762e:	e062      	b.n	80076f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007636:	e05e      	b.n	80076f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800763c:	2b08      	cmp	r3, #8
 800763e:	d828      	bhi.n	8007692 <UART_SetConfig+0x56a>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x520>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007675 	.word	0x08007675
 8007650:	0800767d 	.word	0x0800767d
 8007654:	08007693 	.word	0x08007693
 8007658:	08007683 	.word	0x08007683
 800765c:	08007693 	.word	0x08007693
 8007660:	08007693 	.word	0x08007693
 8007664:	08007693 	.word	0x08007693
 8007668:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fd fd50 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 8007670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007672:	e014      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007674:	f7fd fd62 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <UART_SetConfig+0x5c0>)
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fd fcd7 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800769c:	bf00      	nop
    }

    if (pclk != 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d028      	beq.n	80076f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	4a10      	ldr	r2, [pc, #64]	; (80076ec <UART_SetConfig+0x5c4>)
 80076aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	441a      	add	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d910      	bls.n	80076f0 <UART_SetConfig+0x5c8>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d20c      	bcs.n	80076f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60da      	str	r2, [r3, #12]
 80076e0:	e009      	b.n	80076f6 <UART_SetConfig+0x5ce>
 80076e2:	bf00      	nop
 80076e4:	40008000 	.word	0x40008000
 80076e8:	00f42400 	.word	0x00f42400
 80076ec:	08007e1c 	.word	0x08007e1c
      }
      else
      {
        ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2201      	movs	r2, #1
 8007702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2200      	movs	r2, #0
 800770a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007712:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007716:	4618      	mov	r0, r3
 8007718:	3730      	adds	r7, #48	; 0x30
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01a      	beq.n	8007836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800781e:	d10a      	bne.n	8007836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b098      	sub	sp, #96	; 0x60
 8007868:	af02      	add	r7, sp, #8
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007874:	f7fa fe16 	bl	80024a4 <HAL_GetTick>
 8007878:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b08      	cmp	r3, #8
 8007886:	d12f      	bne.n	80078e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007890:	2200      	movs	r2, #0
 8007892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f88e 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d022      	beq.n	80078e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b6:	653b      	str	r3, [r7, #80]	; 0x50
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c0:	647b      	str	r3, [r7, #68]	; 0x44
 80078c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e063      	b.n	80079b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d149      	bne.n	800798a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078fe:	2200      	movs	r2, #0
 8007900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f857 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03c      	beq.n	800798a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	623b      	str	r3, [r7, #32]
   return(result);
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792e:	633b      	str	r3, [r7, #48]	; 0x30
 8007930:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e6      	bne.n	8007910 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	60fb      	str	r3, [r7, #12]
   return(result);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	64bb      	str	r3, [r7, #72]	; 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007962:	61fa      	str	r2, [r7, #28]
 8007964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	69b9      	ldr	r1, [r7, #24]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	617b      	str	r3, [r7, #20]
   return(result);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e012      	b.n	80079b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3758      	adds	r7, #88	; 0x58
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	e04f      	b.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d04b      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fa fd67 	bl	80024a4 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e04e      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d037      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b80      	cmp	r3, #128	; 0x80
 80079fe:	d034      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d031      	beq.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d110      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f838 	bl	8007a92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2208      	movs	r2, #8
 8007a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e029      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a44:	d111      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f81e 	bl	8007a92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e00f      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4013      	ands	r3, r2
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d0a0      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b095      	sub	sp, #84	; 0x54
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e3      	bne.n	8007acc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d118      	bne.n	8007b3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	647b      	str	r3, [r7, #68]	; 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	613b      	str	r3, [r7, #16]
   return(result);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b52:	bf00      	nop
 8007b54:	3754      	adds	r7, #84	; 0x54
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e027      	b.n	8007bc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2224      	movs	r2, #36	; 0x24
 8007b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0201 	bic.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ba2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e02d      	b.n	8007c44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2224      	movs	r2, #36	; 0x24
 8007bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0201 	bic.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f84f 	bl	8007cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e02d      	b.n	8007cc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0201 	bic.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f811 	bl	8007cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ce8:	e031      	b.n	8007d4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cea:	2308      	movs	r3, #8
 8007cec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cee:	2308      	movs	r3, #8
 8007cf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	0e5b      	lsrs	r3, r3, #25
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	0f5b      	lsrs	r3, r3, #29
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	7b3a      	ldrb	r2, [r7, #12]
 8007d16:	4911      	ldr	r1, [pc, #68]	; (8007d5c <UARTEx_SetNbDataToProcess+0x94>)
 8007d18:	5c8a      	ldrb	r2, [r1, r2]
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d1e:	7b3a      	ldrb	r2, [r7, #12]
 8007d20:	490f      	ldr	r1, [pc, #60]	; (8007d60 <UARTEx_SetNbDataToProcess+0x98>)
 8007d22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	7b7a      	ldrb	r2, [r7, #13]
 8007d34:	4909      	ldr	r1, [pc, #36]	; (8007d5c <UARTEx_SetNbDataToProcess+0x94>)
 8007d36:	5c8a      	ldrb	r2, [r1, r2]
 8007d38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d3c:	7b7a      	ldrb	r2, [r7, #13]
 8007d3e:	4908      	ldr	r1, [pc, #32]	; (8007d60 <UARTEx_SetNbDataToProcess+0x98>)
 8007d40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d4e:	bf00      	nop
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	08007e34 	.word	0x08007e34
 8007d60:	08007e3c 	.word	0x08007e3c

08007d64 <memset>:
 8007d64:	4402      	add	r2, r0
 8007d66:	4603      	mov	r3, r0
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d100      	bne.n	8007d6e <memset+0xa>
 8007d6c:	4770      	bx	lr
 8007d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d72:	e7f9      	b.n	8007d68 <memset+0x4>

08007d74 <__libc_init_array>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4d0d      	ldr	r5, [pc, #52]	; (8007dac <__libc_init_array+0x38>)
 8007d78:	4c0d      	ldr	r4, [pc, #52]	; (8007db0 <__libc_init_array+0x3c>)
 8007d7a:	1b64      	subs	r4, r4, r5
 8007d7c:	10a4      	asrs	r4, r4, #2
 8007d7e:	2600      	movs	r6, #0
 8007d80:	42a6      	cmp	r6, r4
 8007d82:	d109      	bne.n	8007d98 <__libc_init_array+0x24>
 8007d84:	4d0b      	ldr	r5, [pc, #44]	; (8007db4 <__libc_init_array+0x40>)
 8007d86:	4c0c      	ldr	r4, [pc, #48]	; (8007db8 <__libc_init_array+0x44>)
 8007d88:	f000 f818 	bl	8007dbc <_init>
 8007d8c:	1b64      	subs	r4, r4, r5
 8007d8e:	10a4      	asrs	r4, r4, #2
 8007d90:	2600      	movs	r6, #0
 8007d92:	42a6      	cmp	r6, r4
 8007d94:	d105      	bne.n	8007da2 <__libc_init_array+0x2e>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9c:	4798      	blx	r3
 8007d9e:	3601      	adds	r6, #1
 8007da0:	e7ee      	b.n	8007d80 <__libc_init_array+0xc>
 8007da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da6:	4798      	blx	r3
 8007da8:	3601      	adds	r6, #1
 8007daa:	e7f2      	b.n	8007d92 <__libc_init_array+0x1e>
 8007dac:	08007e4c 	.word	0x08007e4c
 8007db0:	08007e4c 	.word	0x08007e4c
 8007db4:	08007e4c 	.word	0x08007e4c
 8007db8:	08007e50 	.word	0x08007e50

08007dbc <_init>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr

08007dc8 <_fini>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr
