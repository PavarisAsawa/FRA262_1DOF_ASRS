
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008634  08008634  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800863c  0800863c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08008644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  20000068  080086a8  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  080086a8  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001918a  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003027  00000000  00000000  00039261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a6  00000000  00000000  0003d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a73  00000000  00000000  0003e88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019357  00000000  00000000  00067301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112713  00000000  00000000  00080658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060dc  00000000  00000000  00192d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00198e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080085a0 	.word	0x080085a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	080085a0 	.word	0x080085a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	; 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	bf28      	it	cs
 8000b10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b14:	d2ed      	bcs.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b970 	b.w	8000f68 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9e08      	ldr	r6, [sp, #32]
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4604      	mov	r4, r0
 8000caa:	460f      	mov	r7, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14a      	bne.n	8000d46 <__udivmoddi4+0xa6>
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	4694      	mov	ip, r2
 8000cb4:	d965      	bls.n	8000d82 <__udivmoddi4+0xe2>
 8000cb6:	fab2 f382 	clz	r3, r2
 8000cba:	b143      	cbz	r3, 8000cce <__udivmoddi4+0x2e>
 8000cbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc0:	f1c3 0220 	rsb	r2, r3, #32
 8000cc4:	409f      	lsls	r7, r3
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	4317      	orrs	r7, r2
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd2:	fa1f f58c 	uxth.w	r5, ip
 8000cd6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cda:	0c22      	lsrs	r2, r4, #16
 8000cdc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	fb01 f005 	mul.w	r0, r1, r5
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x62>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf4:	f080 811c 	bcs.w	8000f30 <__udivmoddi4+0x290>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f240 8119 	bls.w	8000f30 <__udivmoddi4+0x290>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4462      	add	r2, ip
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	b2a4      	uxth	r4, r4
 8000d06:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d12:	fb00 f505 	mul.w	r5, r0, r5
 8000d16:	42a5      	cmp	r5, r4
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x90>
 8000d1a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d22:	f080 8107 	bcs.w	8000f34 <__udivmoddi4+0x294>
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	f240 8104 	bls.w	8000f34 <__udivmoddi4+0x294>
 8000d2c:	4464      	add	r4, ip
 8000d2e:	3802      	subs	r0, #2
 8000d30:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	2100      	movs	r1, #0
 8000d38:	b11e      	cbz	r6, 8000d42 <__udivmoddi4+0xa2>
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0xbc>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	f000 80ed 	beq.w	8000f2a <__udivmoddi4+0x28a>
 8000d50:	2100      	movs	r1, #0
 8000d52:	e9c6 0500 	strd	r0, r5, [r6]
 8000d56:	4608      	mov	r0, r1
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	fab3 f183 	clz	r1, r3
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d149      	bne.n	8000df8 <__udivmoddi4+0x158>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d302      	bcc.n	8000d6e <__udivmoddi4+0xce>
 8000d68:	4282      	cmp	r2, r0
 8000d6a:	f200 80f8 	bhi.w	8000f5e <__udivmoddi4+0x2be>
 8000d6e:	1a84      	subs	r4, r0, r2
 8000d70:	eb65 0203 	sbc.w	r2, r5, r3
 8000d74:	2001      	movs	r0, #1
 8000d76:	4617      	mov	r7, r2
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d0e2      	beq.n	8000d42 <__udivmoddi4+0xa2>
 8000d7c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d80:	e7df      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000d82:	b902      	cbnz	r2, 8000d86 <__udivmoddi4+0xe6>
 8000d84:	deff      	udf	#255	; 0xff
 8000d86:	fab2 f382 	clz	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8090 	bne.w	8000eb0 <__udivmoddi4+0x210>
 8000d90:	1a8a      	subs	r2, r1, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da0:	fb07 2015 	mls	r0, r7, r5, r2
 8000da4:	0c22      	lsrs	r2, r4, #16
 8000da6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000daa:	fb0e f005 	mul.w	r0, lr, r5
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x124>
 8000db2:	eb1c 0202 	adds.w	r2, ip, r2
 8000db6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x122>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2b8>
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	1a12      	subs	r2, r2, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x14e>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x14c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2c2>
 8000dec:	4610      	mov	r0, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000df6:	e79f      	b.n	8000d38 <__udivmoddi4+0x98>
 8000df8:	f1c1 0720 	rsb	r7, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e0e:	40fd      	lsrs	r5, r7
 8000e10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e14:	4323      	orrs	r3, r4
 8000e16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e28:	fb08 f50e 	mul.w	r5, r8, lr
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	fa00 f001 	lsl.w	r0, r0, r1
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b0>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2b4>
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2b4>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4464      	add	r4, ip
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	b29d      	uxth	r5, r3
 8000e54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e58:	fb09 4413 	mls	r4, r9, r3, r4
 8000e5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e60:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1da>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2ac>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2ac>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4464      	add	r4, ip
 8000e7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e7e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46ae      	mov	lr, r5
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x29c>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x298>
 8000e90:	b156      	cbz	r6, 8000ea8 <__udivmoddi4+0x208>
 8000e92:	ebb0 0208 	subs.w	r2, r0, r8
 8000e96:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9e:	40ca      	lsrs	r2, r1
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	4317      	orrs	r7, r2
 8000ea4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	f1c3 0120 	rsb	r1, r3, #32
 8000eb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ebc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec0:	409d      	lsls	r5, r3
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed4:	0c11      	lsrs	r1, r2, #16
 8000ed6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eda:	fb00 f50e 	mul.w	r5, r0, lr
 8000ede:	428d      	cmp	r5, r1
 8000ee0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x258>
 8000ee6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef0:	428d      	cmp	r5, r1
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	1b49      	subs	r1, r1, r5
 8000efa:	b292      	uxth	r2, r2
 8000efc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f00:	fb07 1115 	mls	r1, r7, r5, r1
 8000f04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f08:	fb05 f10e 	mul.w	r1, r5, lr
 8000f0c:	4291      	cmp	r1, r2
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x282>
 8000f10:	eb1c 0202 	adds.w	r2, ip, r2
 8000f14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1a:	4291      	cmp	r1, r2
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1e:	3d02      	subs	r5, #2
 8000f20:	4462      	add	r2, ip
 8000f22:	1a52      	subs	r2, r2, r1
 8000f24:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0xfc>
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000f30:	4639      	mov	r1, r7
 8000f32:	e6e6      	b.n	8000d02 <__udivmoddi4+0x62>
 8000f34:	4610      	mov	r0, r2
 8000f36:	e6fb      	b.n	8000d30 <__udivmoddi4+0x90>
 8000f38:	4548      	cmp	r0, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f0>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f44:	3b01      	subs	r3, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f0>
 8000f48:	4645      	mov	r5, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x282>
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1da>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x258>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b0>
 8000f58:	3d02      	subs	r5, #2
 8000f5a:	4462      	add	r2, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x124>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e70a      	b.n	8000d78 <__udivmoddi4+0xd8>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x14e>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <PIDController_Init>:
uint32_t Saturation = 1000;
extern TIM_HandleTypeDef htim4;
float tolerance = 0.005;

void PIDController_Init(PIDStructureTypeDef* PID,float FWKp ,float FWKi , float FWKd, float BWKp ,float BWKi , float BWKd)	// Initialize PID Variable
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	61f8      	str	r0, [r7, #28]
 8000f74:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f78:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f7c:	ed87 1a04 	vstr	s2, [r7, #16]
 8000f80:	edc7 1a03 	vstr	s3, [r7, #12]
 8000f84:	ed87 2a02 	vstr	s4, [r7, #8]
 8000f88:	edc7 2a01 	vstr	s5, [r7, #4]
	PID->FWKp = FWKp;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	601a      	str	r2, [r3, #0]
	PID->FWKi = FWKi;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	605a      	str	r2, [r3, #4]
	PID->FWKd = FWKd;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	609a      	str	r2, [r3, #8]

	PID->BWKp = BWKp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	60da      	str	r2, [r3, #12]
	PID->BWKi = BWKi;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	611a      	str	r2, [r3, #16]
	PID->BWKd = BWKd;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	615a      	str	r2, [r3, #20]


	PID->Error[0] = 0;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
	PID->Error[2] = 0;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
	PID->Command = 0;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
	PID->Command_1 = 0;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd8:	bf00      	nop
 8000fda:	3724      	adds	r7, #36	; 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	213c      	movs	r1, #60	; 0x3c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fec2 	bl	8005d84 <HAL_TIM_Encoder_Start>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 8001008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800100c:	b08e      	sub	sp, #56	; 0x38
 800100e:	af00      	add	r7, sp, #0
 8001010:	6278      	str	r0, [r7, #36]	; 0x24
 8001012:	6239      	str	r1, [r7, #32]
 8001014:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8001018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800101a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800101e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2200      	movs	r2, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001034:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001044:	1a84      	subs	r4, r0, r2
 8001046:	eb61 0503 	sbc.w	r5, r1, r3
 800104a:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800105a:	ebb0 0a02 	subs.w	sl, r0, r2
 800105e:	eb61 0b03 	sbc.w	fp, r1, r3
 8001062:	4650      	mov	r0, sl
 8001064:	4659      	mov	r1, fp
 8001066:	f7ff fa5d 	bl	8000524 <__aeabi_ul2d>
 800106a:	a368      	add	r3, pc, #416	; (adr r3, 800120c <QEIEncoder_Update+0x204>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fa8e 	bl	8000590 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fc9a 	bl	80009b4 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 8001084:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001088:	495b      	ldr	r1, [pc, #364]	; (80011f8 <QEIEncoder_Update+0x1f0>)
 800108a:	428a      	cmp	r2, r1
 800108c:	f173 0300 	sbcs.w	r3, r3, #0
 8001090:	db08      	blt.n	80010a4 <QEIEncoder_Update+0x9c>
 8001092:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001096:	1e59      	subs	r1, r3, #1
 8001098:	60f9      	str	r1, [r7, #12]
 800109a:	60ba      	str	r2, [r7, #8]
 800109c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010a0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 80010a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80010ac:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80010b0:	da08      	bge.n	80010c4 <QEIEncoder_Update+0xbc>
 80010b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010b6:	1c59      	adds	r1, r3, #1
 80010b8:	6079      	str	r1, [r7, #4]
 80010ba:	603a      	str	r2, [r7, #0]
 80010bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010c0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 80010c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80010c8:	4622      	mov	r2, r4
 80010ca:	462b      	mov	r3, r5
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	f04f 0100 	mov.w	r1, #0
 80010d4:	0119      	lsls	r1, r3, #4
 80010d6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80010da:	0110      	lsls	r0, r2, #4
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ebb2 0804 	subs.w	r8, r2, r4
 80010e4:	eb63 0905 	sbc.w	r9, r3, r5
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80010f4:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80010f8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80010fc:	4690      	mov	r8, r2
 80010fe:	4699      	mov	r9, r3
 8001100:	4642      	mov	r2, r8
 8001102:	464b      	mov	r3, r9
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fd74 	bl	8000bf4 <__aeabi_l2f>
 800110c:	ee06 0a90 	vmov	s13, r0
 8001110:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <QEIEncoder_Update+0x1f4>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9d4 	bl	80004e0 <__aeabi_f2d>
 8001138:	4604      	mov	r4, r0
 800113a:	460d      	mov	r5, r1
 800113c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001140:	f7ff f9f8 	bl	8000534 <__aeabi_l2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <QEIEncoder_Update+0x1f8>)
 800114a:	f7ff fa21 	bl	8000590 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <QEIEncoder_Update+0x1f4>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9ae 	bl	80004bc <__aeabi_i2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4640      	mov	r0, r8
 8001166:	4649      	mov	r1, r9
 8001168:	f7ff fb3c 	bl	80007e4 <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff f856 	bl	8000224 <__adddf3>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fc18 	bl	80009b4 <__aeabi_d2f>
 8001184:	4602      	mov	r2, r0
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001190:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001198:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001204 <QEIEncoder_Update+0x1fc>
 800119c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <QEIEncoder_Update+0x200>)
 80011ac:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <QEIEncoder_Update+0x200>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <QEIEncoder_Update+0x200>)
 80011b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <QEIEncoder_Update+0x200>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <QEIEncoder_Update+0x200>)
 80011ea:	6053      	str	r3, [r2, #4]
}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	; 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011f6:	bf00      	nop
 80011f8:	80000001 	.word	0x80000001
 80011fc:	20000000 	.word	0x20000000
 8001200:	40300000 	.word	0x40300000
 8001204:	42700000 	.word	0x42700000
 8001208:	20000084 	.word	0x20000084
 800120c:	a0b5ed8d 	.word	0xa0b5ed8d
 8001210:	3eb0c6f7 	.word	0x3eb0c6f7

08001214 <QuinticTrajectory_Init>:
}state;

float period = 0.001;

void QuinticTrajectory_Init(QuinticTypeDef *q)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	q->Pi = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
	q->Pf = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
	q->t = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
	q->tf = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
	q->Position = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
	q->Velocity = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
	q->Acceleration = 0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	609a      	str	r2, [r3, #8]

}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <QuinticTrajectory_Generator>:

void QuinticTrajectory_Generator(QuinticTypeDef *q, float pi ,float pf , float tf)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	ed2d 8b02 	vpush	{d8}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	ed87 0a02 	vstr	s0, [r7, #8]
 8001278:	edc7 0a01 	vstr	s1, [r7, #4]
 800127c:	ed87 1a00 	vstr	s2, [r7]
	switch(q->STATE)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001286:	2b03      	cmp	r3, #3
 8001288:	f200 81c8 	bhi.w	800161c <QuinticTrajectory_Generator+0x3b4>
 800128c:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <QuinticTrajectory_Generator+0x2c>)
 800128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001292:	bf00      	nop
 8001294:	080012a5 	.word	0x080012a5
 8001298:	080012af 	.word	0x080012af
 800129c:	080013f1 	.word	0x080013f1
 80012a0:	08001603 	.word	0x08001603
	{
	case READY:
//		if(q->Pi != q->Pf) q->STATE = CALCULATE;
		q->STATE = CALCULATE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80012ac:	e1b6      	b.n	800161c <QuinticTrajectory_Generator+0x3b4>
	case CALCULATE:
		q->t = 0;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]

		q->Pi = pi;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	61da      	str	r2, [r3, #28]
		q->Pf = pf;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	621a      	str	r2, [r3, #32]
		q->tf = tf;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	619a      	str	r2, [r3, #24]

		float s = pf - pi;
 80012c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80012cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d4:	edc7 7a05 	vstr	s15, [r7, #20]
		/*Coefficient Calculated*/
		q->c[0] = q->Pi;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	69da      	ldr	r2, [r3, #28]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
		q->c[1] = 0;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
		q->c[2] = 0;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
		q->c[3] = 10.0*s/powf(q->tf,3);
 80012f0:	6978      	ldr	r0, [r7, #20]
 80012f2:	f7ff f8f5 	bl	80004e0 <__aeabi_f2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4bcb      	ldr	r3, [pc, #812]	; (8001628 <QuinticTrajectory_Generator+0x3c0>)
 80012fc:	f7ff f948 	bl	8000590 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	461d      	mov	r5, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	edd3 7a06 	vldr	s15, [r3, #24]
 800130e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	f006 fd81 	bl	8007e1c <powf>
 800131a:	ee10 3a10 	vmov	r3, s0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f8de 	bl	80004e0 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7ff fa5a 	bl	80007e4 <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fb3c 	bl	80009b4 <__aeabi_d2f>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
		q->c[4] = -15.0*s/powf(q->tf,4);
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff f8cc 	bl	80004e0 <__aeabi_f2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4bb7      	ldr	r3, [pc, #732]	; (800162c <QuinticTrajectory_Generator+0x3c4>)
 800134e:	f7ff f91f 	bl	8000590 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001360:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	f006 fd58 	bl	8007e1c <powf>
 800136c:	ee10 3a10 	vmov	r3, s0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8b5 	bl	80004e0 <__aeabi_f2d>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7ff fa31 	bl	80007e4 <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fb13 	bl	80009b4 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
		q->c[5] = 6.0*s/powf(q->tf,5);
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff f8a3 	bl	80004e0 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4ba4      	ldr	r3, [pc, #656]	; (8001630 <QuinticTrajectory_Generator+0x3c8>)
 80013a0:	f7ff f8f6 	bl	8000590 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80013b2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	f006 fd2f 	bl	8007e1c <powf>
 80013be:	ee10 3a10 	vmov	r3, s0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f88c 	bl	80004e0 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff fa08 	bl	80007e4 <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff faea 	bl	80009b4 <__aeabi_d2f>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38

		q->STATE = WORKING;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2202      	movs	r2, #2
 80013ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80013ee:	e115      	b.n	800161c <QuinticTrajectory_Generator+0x3b4>

	case WORKING:
		q->Position = q->c[0] +
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q->Position = q->c[0] +
 8001406:	ee37 8a27 	vadd.f32	s16, s14, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	edd3 7a05 	vldr	s15, [r3, #20]
 8001416:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	f006 fcfd 	bl	8007e1c <powf>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800142a:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[3]*powf(q->t,3) +
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	f006 fceb 	bl	8007e1c <powf>
 8001446:	eef0 7a40 	vmov.f32	s15, s0
 800144a:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 800144e:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[4]*powf(q->t,4) +
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	edd3 7a05 	vldr	s15, [r3, #20]
 800145e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	f006 fcd9 	bl	8007e1c <powf>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[3]*powf(q->t,3) +
 8001472:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[5]*powf(q->t,5);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001482:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	f006 fcc7 	bl	8007e1c <powf>
 800148e:	eef0 7a40 	vmov.f32	s15, s0
 8001492:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[4]*powf(q->t,4) +
 8001496:	ee78 7a27 	vadd.f32	s15, s16, s15
		q->Position = q->c[0] +
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	edc3 7a00 	vstr	s15, [r3]

		q->Velocity = q->c[1] + 2*q->c[2]*q->t + 3*q->c[3]*powf(q->t,2) + 4*q->c[4]*powf(q->t,3) + 5*q->c[5]*powf(q->t,4);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80014b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ba:	ee37 8a27 	vadd.f32	s16, s14, s15
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80014c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014c8:	ee67 8a87 	vmul.f32	s17, s15, s14
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	f006 fc9f 	bl	8007e1c <powf>
 80014de:	eef0 7a40 	vmov.f32	s15, s0
 80014e2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80014e6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80014f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80014f4:	ee67 8a87 	vmul.f32	s17, s15, s14
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80014fe:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	f006 fc89 	bl	8007e1c <powf>
 800150a:	eef0 7a40 	vmov.f32	s15, s0
 800150e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001512:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800151c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001520:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edd3 7a05 	vldr	s15, [r3, #20]
 800152a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	f006 fc73 	bl	8007e1c <powf>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800153e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	edc3 7a01 	vstr	s15, [r3, #4]
		q->Acceleration = 2*q->c[2] + 6*q->c[3]*q->t + 12*q->c[4]*powf(q->t,2) + 20*q->c[5]*powf(q->t,3);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800154e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001558:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800155c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a05 	vldr	s15, [r3, #20]
 8001566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156a:	ee37 8a27 	vadd.f32	s16, s14, s15
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001574:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001578:	ee67 8a87 	vmul.f32	s17, s15, s14
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001582:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	f006 fc47 	bl	8007e1c <powf>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001596:	ee38 8a27 	vadd.f32	s16, s16, s15
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015a0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015a4:	ee67 8a87 	vmul.f32	s17, s15, s14
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ae:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	f006 fc31 	bl	8007e1c <powf>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80015c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	edc3 7a02 	vstr	s15, [r3, #8]
		q->t += period;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <QuinticTrajectory_Generator+0x3cc>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	edc3 7a05 	vstr	s15, [r3, #20]
		if(q->t >= tf) q->STATE = FINISH;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e8:	ed97 7a00 	vldr	s14, [r7]
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d900      	bls.n	80015f8 <QuinticTrajectory_Generator+0x390>
		break;
 80015f6:	e011      	b.n	800161c <QuinticTrajectory_Generator+0x3b4>
		if(q->t >= tf) q->STATE = FINISH;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 8001600:	e00c      	b.n	800161c <QuinticTrajectory_Generator+0x3b4>

	case FINISH:
		q->Velocity = 0;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
		q->Acceleration = 0;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
		q->Pi = q->Pf;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	61da      	str	r2, [r3, #28]
		break;
 800161a:	bf00      	nop
	}
}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	ecbd 8b02 	vpop	{d8}
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	40240000 	.word	0x40240000
 800162c:	c02e0000 	.word	0xc02e0000
 8001630:	40180000 	.word	0x40180000
 8001634:	20000004 	.word	0x20000004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800163c:	b08c      	sub	sp, #48	; 0x30
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001640:	f000 feff 	bl	8002442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001644:	f000 f8b8 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001648:	f000 fb4a 	bl	8001ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 800164c:	f000 fb1e 	bl	8001c8c <MX_DMA_Init>
  MX_TIM5_Init();
 8001650:	f000 fa7a 	bl	8001b48 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001654:	f000 f982 	bl	800195c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001658:	f000 f9ce 	bl	80019f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800165c:	f000 faca 	bl	8001bf4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001660:	f000 fa18 	bl	8001a94 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001664:	f000 f8f2 	bl	800184c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 8001668:	4842      	ldr	r0, [pc, #264]	; (8001774 <main+0x13c>)
 800166a:	f004 f903 	bl	8005874 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 800166e:	4842      	ldr	r0, [pc, #264]	; (8001778 <main+0x140>)
 8001670:	f004 f900 	bl	8005874 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim4);							// Initialize PMW Signal Timer
 8001674:	4841      	ldr	r0, [pc, #260]	; (800177c <main+0x144>)
 8001676:	f004 f88d 	bl	8005794 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800167a:	2104      	movs	r1, #4
 800167c:	483f      	ldr	r0, [pc, #252]	; (800177c <main+0x144>)
 800167e:	f004 f9c9 	bl	8005a14 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, Joystick.XYBuffer, 200);
 8001682:	22c8      	movs	r2, #200	; 0xc8
 8001684:	493e      	ldr	r1, [pc, #248]	; (8001780 <main+0x148>)
 8001686:	483f      	ldr	r0, [pc, #252]	; (8001784 <main+0x14c>)
 8001688:	f001 fb26 	bl	8002cd8 <HAL_ADC_Start_DMA>

  float PID_P_up[3] = {0.94 ,0.00003, 0}; //{0.84 ,0.0000023, 0};
 800168c:	4a3e      	ldr	r2, [pc, #248]	; (8001788 <main+0x150>)
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	ca07      	ldmia	r2, {r0, r1, r2}
 8001694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_P_down[3] = {0.94 ,0.00003, 0}; //{1.6 ,0.000000067, 0}
 8001698:	4a3b      	ldr	r2, [pc, #236]	; (8001788 <main+0x150>)
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float PID_V_up[3] = {3.7 ,0.0013, 0.00000054}; //{4.38 ,0.005, 0.0000039}  {4.35 ,0.0038, 0.0000039}
 80016a4:	4a39      	ldr	r2, [pc, #228]	; (800178c <main+0x154>)
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_V_down[3] = {3.4 ,0.00085, 0.00000054};
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <main+0x158>)
 80016b2:	463b      	mov	r3, r7
 80016b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 80016ba:	4936      	ldr	r1, [pc, #216]	; (8001794 <main+0x15c>)
 80016bc:	4836      	ldr	r0, [pc, #216]	; (8001798 <main+0x160>)
 80016be:	f7ff fc91 	bl	8000fe4 <QEIEncoder_Init>
  PIDController_Init(&PIDp, PID_P_up[0], PID_P_up[1], PID_P_up[2] , PID_P_down[0], PID_P_down[1], PID_P_down[2]);	// Initialize Position Controller
 80016c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016ca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80016ce:	ed97 6a06 	vldr	s12, [r7, #24]
 80016d2:	edd7 5a07 	vldr	s11, [r7, #28]
 80016d6:	ed97 5a08 	vldr	s10, [r7, #32]
 80016da:	eef0 2a45 	vmov.f32	s5, s10
 80016de:	eeb0 2a65 	vmov.f32	s4, s11
 80016e2:	eef0 1a46 	vmov.f32	s3, s12
 80016e6:	eeb0 1a66 	vmov.f32	s2, s13
 80016ea:	eef0 0a47 	vmov.f32	s1, s14
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	482a      	ldr	r0, [pc, #168]	; (800179c <main+0x164>)
 80016f4:	f7ff fc3a 	bl	8000f6c <PIDController_Init>
  PIDController_Init(&PIDv, PID_V_up[0], PID_V_up[1], PID_V_up[2] , PID_V_down[0], PID_V_down[1], PID_V_down[2]);	// Initialize Velocity Controller
 80016f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001700:	edd7 6a05 	vldr	s13, [r7, #20]
 8001704:	ed97 6a00 	vldr	s12, [r7]
 8001708:	edd7 5a01 	vldr	s11, [r7, #4]
 800170c:	ed97 5a02 	vldr	s10, [r7, #8]
 8001710:	eef0 2a45 	vmov.f32	s5, s10
 8001714:	eeb0 2a65 	vmov.f32	s4, s11
 8001718:	eef0 1a46 	vmov.f32	s3, s12
 800171c:	eeb0 1a66 	vmov.f32	s2, s13
 8001720:	eef0 0a47 	vmov.f32	s1, s14
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	481d      	ldr	r0, [pc, #116]	; (80017a0 <main+0x168>)
 800172a:	f7ff fc1f 	bl	8000f6c <PIDController_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// SET to UPWARD
 800172e:	2201      	movs	r2, #1
 8001730:	2110      	movs	r1, #16
 8001732:	481c      	ldr	r0, [pc, #112]	; (80017a4 <main+0x16c>)
 8001734:	f002 ff76 	bl	8004624 <HAL_GPIO_WritePin>

  QuinticTrajectory_Init(&quintic);
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <main+0x170>)
 800173a:	f7ff fd6b 	bl	8001214 <QuinticTrajectory_Init>

    /* USER CODE BEGIN 3 */
//	PIDControllerCascade_Command2(&PIDp, &PIDv, &QEI, quintic.Position, quintic.Velocity);
//	Motor_Control(PIDv.Command);

	  photoUP = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	481a      	ldr	r0, [pc, #104]	; (80017ac <main+0x174>)
 8001744:	f002 ff56 	bl	80045f4 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2200      	movs	r2, #0
 800174e:	4698      	mov	r8, r3
 8001750:	4691      	mov	r9, r2
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <main+0x178>)
 8001754:	e9c3 8900 	strd	r8, r9, [r3]
	  photoDOWN = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <main+0x174>)
 800175e:	f002 ff49 	bl	80045f4 <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2200      	movs	r2, #0
 8001768:	461c      	mov	r4, r3
 800176a:	4615      	mov	r5, r2
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <main+0x17c>)
 800176e:	e9c3 4500 	strd	r4, r5, [r3]
	  photoUP = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001772:	e7e4      	b.n	800173e <main+0x106>
 8001774:	20000158 	.word	0x20000158
 8001778:	200001a4 	.word	0x200001a4
 800177c:	200001f0 	.word	0x200001f0
 8001780:	200003b8 	.word	0x200003b8
 8001784:	2000008c 	.word	0x2000008c
 8001788:	080085b8 	.word	0x080085b8
 800178c:	080085c4 	.word	0x080085c4
 8001790:	080085d0 	.word	0x080085d0
 8001794:	2000023c 	.word	0x2000023c
 8001798:	20000328 	.word	0x20000328
 800179c:	20000360 	.word	0x20000360
 80017a0:	2000038c 	.word	0x2000038c
 80017a4:	48000800 	.word	0x48000800
 80017a8:	20000568 	.word	0x20000568
 80017ac:	48000400 	.word	0x48000400
 80017b0:	200005a8 	.word	0x200005a8
 80017b4:	200005b0 	.word	0x200005b0

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	2238      	movs	r2, #56	; 0x38
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 faf6 	bl	8007db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017da:	2000      	movs	r0, #0
 80017dc:	f002 ff52 	bl	8004684 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	2303      	movs	r3, #3
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80017f2:	2306      	movs	r3, #6
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017f6:	2355      	movs	r3, #85	; 0x55
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017fe:	2302      	movs	r3, #2
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001802:	2302      	movs	r3, #2
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	4618      	mov	r0, r3
 800180c:	f002 ffee 	bl	80047ec <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001816:	f000 fb7d 	bl	8001f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2303      	movs	r3, #3
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2104      	movs	r1, #4
 8001832:	4618      	mov	r0, r3
 8001834:	f003 faec 	bl	8004e10 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800183e:	f000 fb69 	bl	8001f14 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	; 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2220      	movs	r2, #32
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f006 faa7 	bl	8007db8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <MX_ADC1_Init+0x104>)
 800186c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001870:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <MX_ADC1_Init+0x104>)
 8001874:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <MX_ADC1_Init+0x104>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <MX_ADC1_Init+0x104>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <MX_ADC1_Init+0x104>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <MX_ADC1_Init+0x104>)
 800188e:	2201      	movs	r2, #1
 8001890:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <MX_ADC1_Init+0x104>)
 8001894:	2204      	movs	r2, #4
 8001896:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <MX_ADC1_Init+0x104>)
 800189a:	2200      	movs	r2, #0
 800189c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <MX_ADC1_Init+0x104>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <MX_ADC1_Init+0x104>)
 80018a6:	2202      	movs	r2, #2
 80018a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <MX_ADC1_Init+0x104>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <MX_ADC1_Init+0x104>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <MX_ADC1_Init+0x104>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <MX_ADC1_Init+0x104>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_ADC1_Init+0x104>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_ADC1_Init+0x104>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d4:	481e      	ldr	r0, [pc, #120]	; (8001950 <MX_ADC1_Init+0x104>)
 80018d6:	f001 f843 	bl	8002960 <HAL_ADC_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80018e0:	f000 fb18 	bl	8001f14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <MX_ADC1_Init+0x104>)
 80018f0:	f002 f874 	bl	80039dc <HAL_ADCEx_MultiModeConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018fa:	f000 fb0b 	bl	8001f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_ADC1_Init+0x108>)
 8001900:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001902:	2306      	movs	r3, #6
 8001904:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001906:	2307      	movs	r3, #7
 8001908:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800190a:	237f      	movs	r3, #127	; 0x7f
 800190c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800190e:	2304      	movs	r3, #4
 8001910:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_ADC1_Init+0x104>)
 800191c:	f001 face 	bl	8002ebc <HAL_ADC_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001926:	f000 faf5 	bl	8001f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_ADC1_Init+0x10c>)
 800192c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800192e:	230c      	movs	r3, #12
 8001930:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <MX_ADC1_Init+0x104>)
 8001938:	f001 fac0 	bl	8002ebc <HAL_ADC_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001942:	f000 fae7 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3730      	adds	r7, #48	; 0x30
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000008c 	.word	0x2000008c
 8001954:	1d500080 	.word	0x1d500080
 8001958:	3ef08000 	.word	0x3ef08000

0800195c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <MX_TIM2_Init+0x98>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_TIM2_Init+0x98>)
 8001984:	22a9      	movs	r2, #169	; 0xa9
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_TIM2_Init+0x98>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_TIM2_Init+0x98>)
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_TIM2_Init+0x98>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_TIM2_Init+0x98>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <MX_TIM2_Init+0x98>)
 80019a4:	f003 fe9e 	bl	80056e4 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019ae:	f000 fab1 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_TIM2_Init+0x98>)
 80019c0:	f004 fcd2 	bl	8006368 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019ca:	f000 faa3 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_TIM2_Init+0x98>)
 80019dc:	f005 faa2 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019e6:	f000 fa95 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000158 	.word	0x20000158

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a1e:	22a9      	movs	r2, #169	; 0xa9
 8001a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a3e:	f003 fe51 	bl	80056e4 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a48:	f000 fa64 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a5a:	f004 fc85 	bl	8006368 <HAL_TIM_ConfigClockSource>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a64:	f000 fa56 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a76:	f005 fa55 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a80:	f000 fa48 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200001a4 	.word	0x200001a4
 8001a90:	40000400 	.word	0x40000400

08001a94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <MX_TIM4_Init+0xb0>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001ac0:	22a9      	movs	r2, #169	; 0xa9
 8001ac2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ade:	4818      	ldr	r0, [pc, #96]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001ae0:	f003 ff40 	bl	8005964 <HAL_TIM_PWM_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001aea:	f000 fa13 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4810      	ldr	r0, [pc, #64]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001afe:	f005 fa11 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b08:	f000 fa04 	bl	8001f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0c:	2360      	movs	r3, #96	; 0x60
 8001b0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001b24:	f004 fb0c 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b2e:	f000 f9f1 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MX_TIM4_Init+0xac>)
 8001b34:	f000 fb60 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200001f0 	.word	0x200001f0
 8001b44:	40000800 	.word	0x40000800

08001b48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2224      	movs	r2, #36	; 0x24
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 f92e 	bl	8007db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <MX_TIM5_Init+0xa8>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001bb8:	f004 f83e 	bl	8005c38 <HAL_TIM_Encoder_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001bc2:	f000 f9a7 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <MX_TIM5_Init+0xa4>)
 8001bd4:	f005 f9a6 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001bde:	f000 f999 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	; 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000023c 	.word	0x2000023c
 8001bf0:	40000c00 	.word	0x40000c00

08001bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <MX_USART2_UART_Init+0x94>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3c:	4811      	ldr	r0, [pc, #68]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c3e:	f005 fa4d 	bl	80070dc <HAL_UART_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c48:	f000 f964 	bl	8001f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c50:	f005 ffe8 	bl	8007c24 <HAL_UARTEx_SetTxFifoThreshold>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c5a:	f000 f95b 	bl	8001f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c62:	f006 f81d 	bl	8007ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c6c:	f000 f952 	bl	8001f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_USART2_UART_Init+0x90>)
 8001c72:	f005 ff9e 	bl	8007bb2 <HAL_UARTEx_DisableFifoMode>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c7c:	f000 f94a 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000288 	.word	0x20000288
 8001c88:	40004400 	.word	0x40004400

08001c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_DMA_Init+0x50>)
 8001c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c96:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <MX_DMA_Init+0x50>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_DMA_Init+0x50>)
 8001ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_DMA_Init+0x50>)
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <MX_DMA_Init+0x50>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6493      	str	r3, [r2, #72]	; 0x48
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_DMA_Init+0x50>)
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	200b      	movs	r0, #11
 8001cc8:	f002 f86b 	bl	8003da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ccc:	200b      	movs	r0, #11
 8001cce:	f002 f882 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a4c      	ldr	r2, [pc, #304]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a46      	ldr	r2, [pc, #280]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a40      	ldr	r2, [pc, #256]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <MX_GPIO_Init+0x164>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2120      	movs	r1, #32
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5e:	f002 fc61 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2110      	movs	r1, #16
 8001d66:	4838      	ldr	r0, [pc, #224]	; (8001e48 <MX_GPIO_Init+0x168>)
 8001d68:	f002 fc5c 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4831      	ldr	r0, [pc, #196]	; (8001e48 <MX_GPIO_Init+0x168>)
 8001d84:	f002 fab4 	bl	80042f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da2:	f002 faa5 	bl	80042f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001da6:	2310      	movs	r3, #16
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4822      	ldr	r0, [pc, #136]	; (8001e48 <MX_GPIO_Init+0x168>)
 8001dbe:	f002 fa97 	bl	80042f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001dc2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481d      	ldr	r0, [pc, #116]	; (8001e4c <MX_GPIO_Init+0x16c>)
 8001dd8:	f002 fa8a 	bl	80042f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ddc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4816      	ldr	r0, [pc, #88]	; (8001e4c <MX_GPIO_Init+0x16c>)
 8001df2:	f002 fa7d 	bl	80042f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	480f      	ldr	r0, [pc, #60]	; (8001e48 <MX_GPIO_Init+0x168>)
 8001e0a:	f002 fa71 	bl	80042f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f002 fa63 	bl	80042f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2028      	movs	r0, #40	; 0x28
 8001e30:	f001 ffb7 	bl	8003da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e34:	2028      	movs	r0, #40	; 0x28
 8001e36:	f001 ffce 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	48000400 	.word	0x48000400

08001e50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	1c54      	adds	r4, r2, #1
 8001e68:	f143 0500 	adc.w	r5, r3, #0
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e6e:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3) // [1 microseconds]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		QEIEncoder_Update(&QEI, &htim5, micros());
 8001e7a:	f000 f831 	bl	8001ee0 <micros>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	490d      	ldr	r1, [pc, #52]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e86:	f7ff f8bf 	bl	8001008 <QEIEncoder_Update>
		QuinticTrajectory_Generator(&quintic, QEI.LinearPosition, -500, 2);
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e8c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e90:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8001e94:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8001ec0 <HAL_TIM_PeriodElapsedCallback+0x70>
 8001e98:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9c:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e9e:	f7ff f9e3 	bl	8001268 <QuinticTrajectory_Generator>
	}
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000158 	.word	0x20000158
 8001eb0:	20000320 	.word	0x20000320
 8001eb4:	200001a4 	.word	0x200001a4
 8001eb8:	2000023c 	.word	0x2000023c
 8001ebc:	20000328 	.word	0x20000328
 8001ec0:	c3fa0000 	.word	0xc3fa0000
 8001ec4:	20000568 	.word	0x20000568

08001ec8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)			// Blue Switch
	{

	}
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <micros>:

uint64_t micros()	// System Time
{
 8001ee0:	b4b0      	push	{r4, r5, r7}
 8001ee2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <micros+0x2c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2200      	movs	r2, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <micros+0x30>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	1884      	adds	r4, r0, r2
 8001ef8:	eb41 0503 	adc.w	r5, r1, r3
 8001efc:	4622      	mov	r2, r4
 8001efe:	462b      	mov	r3, r5
}
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bcb0      	pop	{r4, r5, r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000158 	.word	0x20000158
 8001f10:	20000320 	.word	0x20000320

08001f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f18:	b672      	cpsid	i
}
 8001f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <Error_Handler+0x8>
	...

08001f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_MspInit+0x44>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_MspInit+0x44>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6613      	str	r3, [r2, #96]	; 0x60
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_MspInit+0x44>)
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_MspInit+0x44>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x44>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x44>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f56:	f002 fc39 	bl	80047cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0a0      	sub	sp, #128	; 0x80
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	2254      	movs	r2, #84	; 0x54
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 ff15 	bl	8007db8 <memset>
  if(hadc->Instance==ADC1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f96:	d176      	bne.n	8002086 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f9e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa4:	f107 0318 	add.w	r3, r7, #24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f94d 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001fb4:	f7ff ffae 	bl	8001f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	4a34      	ldr	r2, [pc, #208]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fec:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_ADC_MspInit+0x128>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002000:	2302      	movs	r3, #2
 8002002:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002004:	2303      	movs	r3, #3
 8002006:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002010:	4619      	mov	r1, r3
 8002012:	4820      	ldr	r0, [pc, #128]	; (8002094 <HAL_ADC_MspInit+0x12c>)
 8002014:	f002 f96c 	bl	80042f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002018:	2301      	movs	r3, #1
 800201a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201c:	2303      	movs	r3, #3
 800201e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002028:	4619      	mov	r1, r3
 800202a:	481b      	ldr	r0, [pc, #108]	; (8002098 <HAL_ADC_MspInit+0x130>)
 800202c:	f002 f960 	bl	80042f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_ADC_MspInit+0x138>)
 8002034:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002038:	2205      	movs	r2, #5
 800203a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_ADC_MspInit+0x134>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_ADC_MspInit+0x134>)
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002054:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002060:	2220      	movs	r2, #32
 8002062:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800206a:	480c      	ldr	r0, [pc, #48]	; (800209c <HAL_ADC_MspInit+0x134>)
 800206c:	f001 fece 	bl	8003e0c <HAL_DMA_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8002076:	f7ff ff4d 	bl	8001f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_ADC_MspInit+0x134>)
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_ADC_MspInit+0x134>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3780      	adds	r7, #128	; 0x80
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	48000800 	.word	0x48000800
 8002098:	48000400 	.word	0x48000400
 800209c:	200000f8 	.word	0x200000f8
 80020a0:	40020008 	.word	0x40020008

080020a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d114      	bne.n	80020e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_TIM_Base_MspInit+0x78>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_TIM_Base_MspInit+0x78>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_TIM_Base_MspInit+0x78>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	201c      	movs	r0, #28
 80020d4:	f001 fe65 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d8:	201c      	movs	r0, #28
 80020da:	f001 fe7c 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020de:	e018      	b.n	8002112 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_TIM_Base_MspInit+0x7c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d113      	bne.n	8002112 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_TIM_Base_MspInit+0x78>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_TIM_Base_MspInit+0x78>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_TIM_Base_MspInit+0x78>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	201d      	movs	r0, #29
 8002108:	f001 fe4b 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800210c:	201d      	movs	r0, #29
 800210e:	f001 fe62 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_TIM_PWM_MspInit+0x38>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10b      	bne.n	800214e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_PWM_MspInit+0x3c>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <HAL_TIM_PWM_MspInit+0x3c>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_TIM_PWM_MspInit+0x3c>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40000800 	.word	0x40000800
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d130      	bne.n	80021e8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x90>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x90>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x90>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x90>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021b6:	2303      	movs	r3, #3
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021c6:	2302      	movs	r3, #2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f002 f88c 	bl	80042f0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f001 fde0 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021e2:	2032      	movs	r0, #50	; 0x32
 80021e4:	f001 fdf7 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <HAL_TIM_MspPostInit+0x68>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d11d      	bne.n	8002256 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_TIM_MspPostInit+0x6c>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_TIM_MspPostInit+0x6c>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_TIM_MspPostInit+0x6c>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002244:	230a      	movs	r3, #10
 8002246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f002 f84d 	bl	80042f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40000800 	.word	0x40000800
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b09e      	sub	sp, #120	; 0x78
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	2254      	movs	r2, #84	; 0x54
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f005 fd95 	bl	8007db8 <memset>
  if(huart->Instance==USART2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_UART_MspInit+0xa8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d137      	bne.n	8002308 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 ffcf 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022b0:	f7ff fe30 	bl	8001f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_UART_MspInit+0xac>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a16      	ldr	r2, [pc, #88]	; (8002314 <HAL_UART_MspInit+0xac>)
 80022ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_UART_MspInit+0xac>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_UART_MspInit+0xac>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_UART_MspInit+0xac>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_UART_MspInit+0xac>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80022e4:	f248 0304 	movw	r3, #32772	; 0x8004
 80022e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f6:	2307      	movs	r3, #7
 80022f8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f001 fff4 	bl	80042f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3778      	adds	r7, #120	; 0x78
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40004400 	.word	0x40004400
 8002314:	40021000 	.word	0x40021000

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f000 f8c0 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Channel1_IRQHandler+0x10>)
 8002372:	f001 fe6e 	bl	8004052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200000f8 	.word	0x200000f8

08002380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <TIM2_IRQHandler+0x10>)
 8002386:	f003 fd8b 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000158 	.word	0x20000158

08002394 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <TIM3_IRQHandler+0x10>)
 800239a:	f003 fd81 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200001a4 	.word	0x200001a4

080023a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80023ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023b0:	f002 f950 	bl	8004654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM5_IRQHandler+0x10>)
 80023be:	f003 fd6f 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000023c 	.word	0x2000023c

080023cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f4:	f7ff ffea 	bl	80023cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <LoopForever+0x6>)
  ldr r1, =_edata
 80023fa:	490d      	ldr	r1, [pc, #52]	; (8002430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <LoopForever+0xe>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002410:	4c0a      	ldr	r4, [pc, #40]	; (800243c <LoopForever+0x16>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241e:	f005 fcd9 	bl	8007dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002422:	f7ff f909 	bl	8001638 <main>

08002426 <LoopForever>:

LoopForever:
    b LoopForever
 8002426:	e7fe      	b.n	8002426 <LoopForever>
  ldr   r0, =_estack
 8002428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002434:	08008644 	.word	0x08008644
  ldr r2, =_sbss
 8002438:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800243c:	200006f4 	.word	0x200006f4

08002440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC1_2_IRQHandler>

08002442 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f001 fc9d 	bl	8003d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f80e 	bl	8002474 <HAL_InitTick>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	e001      	b.n	8002468 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002464:	f7ff fd5c 	bl	8001f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002468:	79fb      	ldrb	r3, [r7, #7]

}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_InitTick+0x68>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d022      	beq.n	80024ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_InitTick+0x6c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_InitTick+0x68>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002494:	fbb1 f3f3 	udiv	r3, r1, r3
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fca8 	bl	8003df2 <HAL_SYSTICK_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d809      	bhi.n	80024c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ae:	2200      	movs	r2, #0
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	f04f 30ff 	mov.w	r0, #4294967295
 80024b6:	f001 fc74 	bl	8003da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_InitTick+0x70>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e007      	b.n	80024d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e004      	b.n	80024d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000010 	.word	0x20000010
 80024e0:	20000008 	.word	0x20000008
 80024e4:	2000000c 	.word	0x2000000c

080024e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_IncTick+0x1c>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_IncTick+0x20>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a03      	ldr	r2, [pc, #12]	; (8002504 <HAL_IncTick+0x1c>)
 80024f8:	6013      	str	r3, [r2, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	200005b8 	.word	0x200005b8
 8002508:	20000010 	.word	0x20000010

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200005b8 	.word	0x200005b8

08002524 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <LL_ADC_SetOffset+0x44>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	03fff000 	.word	0x03fff000

080025d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3360      	adds	r3, #96	; 0x60
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3360      	adds	r3, #96	; 0x60
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002636:	b480      	push	{r7}
 8002638:	b087      	sub	sp, #28
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3360      	adds	r3, #96	; 0x60
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	431a      	orrs	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3360      	adds	r3, #96	; 0x60
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	431a      	orrs	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	615a      	str	r2, [r3, #20]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3330      	adds	r3, #48	; 0x30
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	4413      	add	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	211f      	movs	r1, #31
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	401a      	ands	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	f003 011f 	and.w	r1, r3, #31
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3314      	adds	r3, #20
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0e5b      	lsrs	r3, r3, #25
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	0d1b      	lsrs	r3, r3, #20
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2107      	movs	r1, #7
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	0d1b      	lsrs	r3, r3, #20
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	431a      	orrs	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0318 	and.w	r3, r3, #24
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027c0:	40d9      	lsrs	r1, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	400b      	ands	r3, r1
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	0007ffff 	.word	0x0007ffff

080027e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 031f 	and.w	r3, r3, #31
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6093      	str	r3, [r2, #8]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002838:	d101      	bne.n	800283e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800285c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002888:	d101      	bne.n	800288e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <LL_ADC_IsEnabled+0x18>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <LL_ADC_IsEnabled+0x1a>
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d101      	bne.n	800292a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b08      	cmp	r3, #8
 800294a:	d101      	bne.n	8002950 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1a9      	b.n	8002cce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff faed 	bl	8001f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff3f 	bl	8002824 <LL_ADC_IsDeepPowerDownEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff25 	bl	8002800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff5a 	bl	8002874 <LL_ADC_IsInternalRegulatorEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff3e 	bl	800284c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d0:	4b9c      	ldr	r3, [pc, #624]	; (8002c44 <HAL_ADC_Init+0x2e4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	4a9c      	ldr	r2, [pc, #624]	; (8002c48 <HAL_ADC_Init+0x2e8>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff3c 	bl	8002874 <LL_ADC_IsInternalRegulatorEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff75 	bl	8002912 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8142 	bne.w	8002cbc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 813e 	bne.w	8002cbc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff35 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d141      	bne.n	8002ae4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a68:	d004      	beq.n	8002a74 <HAL_ADC_Init+0x114>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a77      	ldr	r2, [pc, #476]	; (8002c4c <HAL_ADC_Init+0x2ec>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10f      	bne.n	8002a94 <HAL_ADC_Init+0x134>
 8002a74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a78:	f7ff ff24 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	4873      	ldr	r0, [pc, #460]	; (8002c4c <HAL_ADC_Init+0x2ec>)
 8002a80:	f7ff ff20 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4323      	orrs	r3, r4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e012      	b.n	8002aba <HAL_ADC_Init+0x15a>
 8002a94:	486e      	ldr	r0, [pc, #440]	; (8002c50 <HAL_ADC_Init+0x2f0>)
 8002a96:	f7ff ff15 	bl	80028c4 <LL_ADC_IsEnabled>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	486d      	ldr	r0, [pc, #436]	; (8002c54 <HAL_ADC_Init+0x2f4>)
 8002a9e:	f7ff ff11 	bl	80028c4 <LL_ADC_IsEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	431c      	orrs	r4, r3
 8002aa6:	486c      	ldr	r0, [pc, #432]	; (8002c58 <HAL_ADC_Init+0x2f8>)
 8002aa8:	f7ff ff0c 	bl	80028c4 <LL_ADC_IsEnabled>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4323      	orrs	r3, r4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d012      	beq.n	8002ae4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_Init+0x172>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5f      	ldr	r2, [pc, #380]	; (8002c4c <HAL_ADC_Init+0x2ec>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_Init+0x176>
 8002ad2:	4a62      	ldr	r2, [pc, #392]	; (8002c5c <HAL_ADC_Init+0x2fc>)
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADC_Init+0x178>
 8002ad6:	4a62      	ldr	r2, [pc, #392]	; (8002c60 <HAL_ADC_Init+0x300>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7ff fd20 	bl	8002524 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7f5b      	ldrb	r3, [r3, #29]
 8002ae8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002af4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002afa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	045b      	lsls	r3, r3, #17
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_ADC_Init+0x304>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fee4 	bl	8002938 <LL_ADC_INJ_IsConversionOngoing>
 8002b70:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d17f      	bne.n	8002c78 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d17c      	bne.n	8002c78 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b82:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9a:	f023 0302 	bic.w	r3, r3, #2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d017      	beq.n	8002be0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6911      	ldr	r1, [r2, #16]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002bde:	e013      	b.n	8002c08 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d12a      	bne.n	8002c68 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c34:	430a      	orrs	r2, r1
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	611a      	str	r2, [r3, #16]
 8002c42:	e019      	b.n	8002c78 <HAL_ADC_Init+0x318>
 8002c44:	20000008 	.word	0x20000008
 8002c48:	053e2d63 	.word	0x053e2d63
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000400 	.word	0x50000400
 8002c54:	50000500 	.word	0x50000500
 8002c58:	50000600 	.word	0x50000600
 8002c5c:	50000300 	.word	0x50000300
 8002c60:	50000700 	.word	0x50000700
 8002c64:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10c      	bne.n	8002c9a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f023 010f 	bic.w	r1, r3, #15
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	1e5a      	subs	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
 8002c98:	e007      	b.n	8002caa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 020f 	bic.w	r2, r2, #15
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cba:	e007      	b.n	8002ccc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	bf00      	nop

08002cd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_Start_DMA+0x20>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_ADC_Start_DMA+0x184>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_Start_DMA+0x24>
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_ADC_Start_DMA+0x188>)
 8002cfa:	e000      	b.n	8002cfe <HAL_ADC_Start_DMA+0x26>
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_ADC_Start_DMA+0x18c>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fd70 	bl	80027e4 <LL_ADC_GetMultimode>
 8002d04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fe01 	bl	8002912 <LL_ADC_REG_IsConversionOngoing>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 809b 	bne.w	8002e4e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_Start_DMA+0x4e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e096      	b.n	8002e54 <HAL_ADC_Start_DMA+0x17c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a4d      	ldr	r2, [pc, #308]	; (8002e68 <HAL_ADC_Start_DMA+0x190>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d008      	beq.n	8002d4a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d002      	beq.n	8002d4a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d17a      	bne.n	8002e40 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fcf6 	bl	800373c <ADC_Enable>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d16d      	bne.n	8002e36 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <HAL_ADC_Start_DMA+0x184>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_ADC_Start_DMA+0xb4>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <HAL_ADC_Start_DMA+0x194>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d002      	beq.n	8002d88 <HAL_ADC_Start_DMA+0xb0>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_Start_DMA+0xb8>
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_ADC_Start_DMA+0x198>)
 8002d8a:	e001      	b.n	8002d90 <HAL_ADC_Start_DMA+0xb8>
 8002d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d002      	beq.n	8002d9e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	f023 0206 	bic.w	r2, r3, #6
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	661a      	str	r2, [r3, #96]	; 0x60
 8002dc2:	e002      	b.n	8002dca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_ADC_Start_DMA+0x19c>)
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <HAL_ADC_Start_DMA+0x1a0>)
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <HAL_ADC_Start_DMA+0x1a4>)
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	221c      	movs	r2, #28
 8002de8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0210 	orr.w	r2, r2, #16
 8002e00:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3340      	adds	r3, #64	; 0x40
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f001 f89b 	bl	8003f5c <HAL_DMA_Start_IT>
 8002e26:	4603      	mov	r3, r0
 8002e28:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd5b 	bl	80028ea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e34:	e00d      	b.n	8002e52 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002e3e:	e008      	b.n	8002e52 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e4c:	e001      	b.n	8002e52 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	50000100 	.word	0x50000100
 8002e60:	50000300 	.word	0x50000300
 8002e64:	50000700 	.word	0x50000700
 8002e68:	50000600 	.word	0x50000600
 8002e6c:	50000500 	.word	0x50000500
 8002e70:	50000400 	.word	0x50000400
 8002e74:	08003869 	.word	0x08003869
 8002e78:	08003941 	.word	0x08003941
 8002e7c:	0800395d 	.word	0x0800395d

08002e80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0b6      	sub	sp, #216	; 0xd8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x24>
 8002eda:	2302      	movs	r3, #2
 8002edc:	f000 bc13 	b.w	8003706 <HAL_ADC_ConfigChannel+0x84a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd10 	bl	8002912 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 83f3 	bne.w	80036e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f7ff fbf1 	bl	80026ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fcfe 	bl	8002912 <LL_ADC_REG_IsConversionOngoing>
 8002f16:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fd0a 	bl	8002938 <LL_ADC_INJ_IsConversionOngoing>
 8002f24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 81d9 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 81d4 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f44:	d10f      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7ff fbf8 	bl	8002746 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fb9f 	bl	80026a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f64:	e00e      	b.n	8002f84 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7ff fbe7 	bl	8002746 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fb8f 	bl	80026a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	08db      	lsrs	r3, r3, #3
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d022      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6919      	ldr	r1, [r3, #16]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fb6:	f7ff fae9 	bl	800258c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6919      	ldr	r1, [r3, #16]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7ff fb35 	bl	8002636 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x126>
 8002fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x128>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f7ff fb41 	bl	800266c <LL_ADC_SetOffsetSaturation>
 8002fea:	e17b      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff faee 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x15c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fae3 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 800300e:	4603      	mov	r3, r0
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	f003 021f 	and.w	r2, r3, #31
 8003016:	e01e      	b.n	8003056 <HAL_ADC_ConfigChannel+0x19a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fad8 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800303a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800303e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e004      	b.n	8003054 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800304a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_ADC_ConfigChannel+0x1b2>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	e018      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x1e4>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800308a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e004      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d106      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff faa7 	bl	8002600 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fa8b 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <HAL_ADC_ConfigChannel+0x222>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fa80 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	e01e      	b.n	800311c <HAL_ADC_ConfigChannel+0x260>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fa75 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e004      	b.n	800311a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x278>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	e018      	b.n	8003166 <HAL_ADC_ConfigChannel+0x2aa>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003148:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800314c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800315c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003166:	429a      	cmp	r2, r3
 8003168:	d106      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fa44 	bl	8002600 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fa28 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x2e8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fa1d 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	f003 021f 	and.w	r2, r3, #31
 80031a2:	e01e      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x326>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2102      	movs	r1, #2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fa12 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031d2:	2320      	movs	r3, #32
 80031d4:	e004      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x33e>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0e9b      	lsrs	r3, r3, #26
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	e016      	b.n	8003228 <HAL_ADC_ConfigChannel+0x36c>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800320c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800320e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e004      	b.n	8003228 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800321e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003228:	429a      	cmp	r2, r3
 800322a:	d106      	bne.n	800323a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2200      	movs	r2, #0
 8003232:	2102      	movs	r1, #2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f9e3 	bl	8002600 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2103      	movs	r1, #3
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f9c7 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x3aa>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2103      	movs	r1, #3
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f9bc 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	e017      	b.n	8003296 <HAL_ADC_ConfigChannel+0x3da>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2103      	movs	r1, #3
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f9b1 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800327e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003280:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	e003      	b.n	8003294 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800328c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x3f2>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	e011      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x416>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032c6:	2320      	movs	r3, #32
 80032c8:	e003      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d106      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	2103      	movs	r1, #3
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f98e 	bl	8002600 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff faeb 	bl	80028c4 <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 813d 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f7ff fa4a 	bl	800279c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4aa2      	ldr	r2, [pc, #648]	; (8003598 <HAL_ADC_ConfigChannel+0x6dc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	f040 812e 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_ADC_ConfigChannel+0x480>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0e9b      	lsrs	r3, r3, #26
 800332a:	3301      	adds	r3, #1
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2b09      	cmp	r3, #9
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e019      	b.n	8003370 <HAL_ADC_ConfigChannel+0x4b4>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800334e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e003      	b.n	8003360 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2b09      	cmp	r3, #9
 8003368:	bf94      	ite	ls
 800336a:	2301      	movls	r3, #1
 800336c:	2300      	movhi	r3, #0
 800336e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003370:	2b00      	cmp	r3, #0
 8003372:	d079      	beq.n	8003468 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x4d4>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	069b      	lsls	r3, r3, #26
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	e015      	b.n	80033bc <HAL_ADC_ConfigChannel+0x500>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	069b      	lsls	r3, r3, #26
 80033b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x520>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	e017      	b.n	800340c <HAL_ADC_ConfigChannel+0x550>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	ea42 0103 	orr.w	r1, r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x576>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	3301      	adds	r3, #1
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	051b      	lsls	r3, r3, #20
 8003430:	e018      	b.n	8003464 <HAL_ADC_ConfigChannel+0x5a8>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800344a:	2320      	movs	r3, #32
 800344c:	e003      	b.n	8003456 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3301      	adds	r3, #1
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003464:	430b      	orrs	r3, r1
 8003466:	e07e      	b.n	8003566 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x5c8>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	069b      	lsls	r3, r3, #26
 800347e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003482:	e015      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x5f4>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	069b      	lsls	r3, r3, #26
 80034ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x614>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	e017      	b.n	8003500 <HAL_ADC_ConfigChannel+0x644>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	61fb      	str	r3, [r7, #28]
  return result;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e003      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	ea42 0103 	orr.w	r1, r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <HAL_ADC_ConfigChannel+0x670>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	3301      	adds	r3, #1
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	3b1e      	subs	r3, #30
 8003524:	051b      	lsls	r3, r3, #20
 8003526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800352a:	e01b      	b.n	8003564 <HAL_ADC_ConfigChannel+0x6a8>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	613b      	str	r3, [r7, #16]
  return result;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e003      	b.n	8003550 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f003 021f 	and.w	r2, r3, #31
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	3b1e      	subs	r3, #30
 800355e:	051b      	lsls	r3, r3, #20
 8003560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003564:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356a:	4619      	mov	r1, r3
 800356c:	f7ff f8eb 	bl	8002746 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_ADC_ConfigChannel+0x6e0>)
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80be 	beq.w	80036fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003586:	d004      	beq.n	8003592 <HAL_ADC_ConfigChannel+0x6d6>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10a      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x6ec>
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003594:	e009      	b.n	80035aa <HAL_ADC_ConfigChannel+0x6ee>
 8003596:	bf00      	nop
 8003598:	407f0000 	.word	0x407f0000
 800359c:	80080000 	.word	0x80080000
 80035a0:	50000100 	.word	0x50000100
 80035a4:	50000300 	.word	0x50000300
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_ADC_ConfigChannel+0x854>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ffe0 	bl	8002570 <LL_ADC_GetCommonPathInternalCh>
 80035b0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_ADC_ConfigChannel+0x858>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x70c>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_ADC_ConfigChannel+0x85c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d13a      	bne.n	800363e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d134      	bne.n	800363e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035dc:	d005      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x72e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4e      	ldr	r2, [pc, #312]	; (800371c <HAL_ADC_ConfigChannel+0x860>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	f040 8085 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f2:	d004      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x742>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a49      	ldr	r2, [pc, #292]	; (8003720 <HAL_ADC_ConfigChannel+0x864>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x746>
 80035fe:	4a49      	ldr	r2, [pc, #292]	; (8003724 <HAL_ADC_ConfigChannel+0x868>)
 8003600:	e000      	b.n	8003604 <HAL_ADC_ConfigChannel+0x748>
 8003602:	4a43      	ldr	r2, [pc, #268]	; (8003710 <HAL_ADC_ConfigChannel+0x854>)
 8003604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7fe ff9b 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003614:	4b44      	ldr	r3, [pc, #272]	; (8003728 <HAL_ADC_ConfigChannel+0x86c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	4a44      	ldr	r2, [pc, #272]	; (800372c <HAL_ADC_ConfigChannel+0x870>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800362e:	e002      	b.n	8003636 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3b01      	subs	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f9      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800363c:	e05a      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_ADC_ConfigChannel+0x874>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d125      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800364c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11f      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_ADC_ConfigChannel+0x864>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d104      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x7ac>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a34      	ldr	r2, [pc, #208]	; (8003734 <HAL_ADC_ConfigChannel+0x878>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d047      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003670:	d004      	beq.n	800367c <HAL_ADC_ConfigChannel+0x7c0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <HAL_ADC_ConfigChannel+0x864>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x7c4>
 800367c:	4a29      	ldr	r2, [pc, #164]	; (8003724 <HAL_ADC_ConfigChannel+0x868>)
 800367e:	e000      	b.n	8003682 <HAL_ADC_ConfigChannel+0x7c6>
 8003680:	4a23      	ldr	r2, [pc, #140]	; (8003710 <HAL_ADC_ConfigChannel+0x854>)
 8003682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f7fe ff5c 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003692:	e031      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_ADC_ConfigChannel+0x87c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d12d      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800369e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d127      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_ADC_ConfigChannel+0x864>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0x80c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <HAL_ADC_ConfigChannel+0x864>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x810>
 80036c8:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_ADC_ConfigChannel+0x868>)
 80036ca:	e000      	b.n	80036ce <HAL_ADC_ConfigChannel+0x812>
 80036cc:	4a10      	ldr	r2, [pc, #64]	; (8003710 <HAL_ADC_ConfigChannel+0x854>)
 80036ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f7fe ff36 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
 80036de:	e00c      	b.n	80036fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80036f2:	e002      	b.n	80036fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003702:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003706:	4618      	mov	r0, r3
 8003708:	37d8      	adds	r7, #216	; 0xd8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	50000700 	.word	0x50000700
 8003714:	c3210000 	.word	0xc3210000
 8003718:	90c00010 	.word	0x90c00010
 800371c:	50000600 	.word	0x50000600
 8003720:	50000100 	.word	0x50000100
 8003724:	50000300 	.word	0x50000300
 8003728:	20000008 	.word	0x20000008
 800372c:	053e2d63 	.word	0x053e2d63
 8003730:	c7520000 	.word	0xc7520000
 8003734:	50000500 	.word	0x50000500
 8003738:	cb840000 	.word	0xcb840000

0800373c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f8b9 	bl	80028c4 <LL_ADC_IsEnabled>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d176      	bne.n	8003846 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <ADC_Enable+0x114>)
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f043 0210 	orr.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e062      	b.n	8003848 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f888 	bl	800289c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d004      	beq.n	80037a0 <ADC_Enable+0x64>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <ADC_Enable+0x118>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <ADC_Enable+0x68>
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <ADC_Enable+0x11c>)
 80037a2:	e000      	b.n	80037a6 <ADC_Enable+0x6a>
 80037a4:	4b2d      	ldr	r3, [pc, #180]	; (800385c <ADC_Enable+0x120>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fee2 	bl	8002570 <LL_ADC_GetCommonPathInternalCh>
 80037ac:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d013      	beq.n	80037de <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <ADC_Enable+0x124>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <ADC_Enable+0x128>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037d0:	e002      	b.n	80037d8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f9      	bne.n	80037d2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037de:	f7fe fe95 	bl	800250c <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e4:	e028      	b.n	8003838 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f86a 	bl	80028c4 <LL_ADC_IsEnabled>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f84e 	bl	800289c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003800:	f7fe fe84 	bl	800250c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d914      	bls.n	8003838 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00d      	beq.n	8003838 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	f043 0210 	orr.w	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d1cf      	bne.n	80037e6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	8000003f 	.word	0x8000003f
 8003854:	50000100 	.word	0x50000100
 8003858:	50000300 	.word	0x50000300
 800385c:	50000700 	.word	0x50000700
 8003860:	20000008 	.word	0x20000008
 8003864:	053e2d63 	.word	0x053e2d63

08003868 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d14b      	bne.n	800391a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d021      	beq.n	80038e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe ff11 	bl	80026c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d032      	beq.n	8003912 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d12b      	bne.n	8003912 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11f      	bne.n	8003912 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80038de:	e018      	b.n	8003912 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d111      	bne.n	8003912 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff fab4 	bl	8002e80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003918:	e00e      	b.n	8003938 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff fabe 	bl	8002ea8 <HAL_ADC_ErrorCallback>
}
 800392c:	e004      	b.n	8003938 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff faa0 	bl	8002e94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff fa90 	bl	8002ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <LL_ADC_IsEnabled>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <LL_ADC_IsEnabled+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_ADC_IsEnabled+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d101      	bne.n	80039ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b0a1      	sub	sp, #132	; 0x84
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0e7      	b.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a02:	2300      	movs	r3, #0
 8003a04:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a06:	2300      	movs	r3, #0
 8003a08:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a12:	d102      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a14:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	e009      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6e      	ldr	r2, [pc, #440]	; (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d102      	bne.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003a24:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e001      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0be      	b.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ffb1 	bl	80039b6 <LL_ADC_REG_IsConversionOngoing>
 8003a54:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ffab 	bl	80039b6 <LL_ADC_REG_IsConversionOngoing>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80a0 	bne.w	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 809c 	bne.w	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a78:	d004      	beq.n	8003a84 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a55      	ldr	r2, [pc, #340]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a84:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a86:	e000      	b.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a88:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a8a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d04b      	beq.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa6:	035b      	lsls	r3, r3, #13
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab8:	d004      	beq.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a45      	ldr	r2, [pc, #276]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003ac4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ac8:	f7ff ff62 	bl	8003990 <LL_ADC_IsEnabled>
 8003acc:	4604      	mov	r4, r0
 8003ace:	4841      	ldr	r0, [pc, #260]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ad0:	f7ff ff5e 	bl	8003990 <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4323      	orrs	r3, r4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e012      	b.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ae4:	483c      	ldr	r0, [pc, #240]	; (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ae6:	f7ff ff53 	bl	8003990 <LL_ADC_IsEnabled>
 8003aea:	4604      	mov	r4, r0
 8003aec:	483b      	ldr	r0, [pc, #236]	; (8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003aee:	f7ff ff4f 	bl	8003990 <LL_ADC_IsEnabled>
 8003af2:	4603      	mov	r3, r0
 8003af4:	431c      	orrs	r4, r3
 8003af6:	483c      	ldr	r0, [pc, #240]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003af8:	f7ff ff4a 	bl	8003990 <LL_ADC_IsEnabled>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4323      	orrs	r3, r4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d056      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b16:	f023 030f 	bic.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	6811      	ldr	r1, [r2, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	6892      	ldr	r2, [r2, #8]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b28:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b2a:	e047      	b.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b40:	d004      	beq.n	8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10f      	bne.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b50:	f7ff ff1e 	bl	8003990 <LL_ADC_IsEnabled>
 8003b54:	4604      	mov	r4, r0
 8003b56:	481f      	ldr	r0, [pc, #124]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b58:	f7ff ff1a 	bl	8003990 <LL_ADC_IsEnabled>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4323      	orrs	r3, r4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e012      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b6c:	481a      	ldr	r0, [pc, #104]	; (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b6e:	f7ff ff0f 	bl	8003990 <LL_ADC_IsEnabled>
 8003b72:	4604      	mov	r4, r0
 8003b74:	4819      	ldr	r0, [pc, #100]	; (8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b76:	f7ff ff0b 	bl	8003990 <LL_ADC_IsEnabled>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	431c      	orrs	r4, r3
 8003b7e:	481a      	ldr	r0, [pc, #104]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b80:	f7ff ff06 	bl	8003990 <LL_ADC_IsEnabled>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4323      	orrs	r3, r4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b9e:	f023 030f 	bic.w	r3, r3, #15
 8003ba2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ba4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba6:	e009      	b.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bba:	e000      	b.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3784      	adds	r7, #132	; 0x84
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000400 	.word	0x50000400
 8003bdc:	50000500 	.word	0x50000500
 8003be0:	50000300 	.word	0x50000300
 8003be4:	50000700 	.word	0x50000700
 8003be8:	50000600 	.word	0x50000600

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0b      	blt.n	8003c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4907      	ldr	r1, [pc, #28]	; (8003c88 <__NVIC_EnableIRQ+0x38>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2001      	movs	r0, #1
 8003c72:	fa00 f202 	lsl.w	r2, r0, r2
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	db0a      	blt.n	8003cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <__NVIC_SetPriority+0x4c>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb4:	e00a      	b.n	8003ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4908      	ldr	r1, [pc, #32]	; (8003cdc <__NVIC_SetPriority+0x50>)
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	440b      	add	r3, r1
 8003cca:	761a      	strb	r2, [r3, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000e100 	.word	0xe000e100
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f1c3 0307 	rsb	r3, r3, #7
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	bf28      	it	cs
 8003cfe:	2304      	movcs	r3, #4
 8003d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d902      	bls.n	8003d10 <NVIC_EncodePriority+0x30>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3b03      	subs	r3, #3
 8003d0e:	e000      	b.n	8003d12 <NVIC_EncodePriority+0x32>
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	401a      	ands	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	43d9      	mvns	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	4313      	orrs	r3, r2
         );
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d58:	d301      	bcc.n	8003d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00f      	b.n	8003d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <SysTick_Config+0x40>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d66:	210f      	movs	r1, #15
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	f7ff ff8e 	bl	8003c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <SysTick_Config+0x40>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <SysTick_Config+0x40>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000e010 	.word	0xe000e010

08003d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff29 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003db0:	f7ff ff40 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff ff90 	bl	8003ce0 <NVIC_EncodePriority>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff5f 	bl	8003c8c <__NVIC_SetPriority>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff33 	bl	8003c50 <__NVIC_EnableIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffa4 	bl	8003d48 <SysTick_Config>
 8003e00:	4603      	mov	r3, r0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e08d      	b.n	8003f3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_DMA_Init+0x138>)
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d80f      	bhi.n	8003e4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <HAL_DMA_Init+0x13c>)
 8003e32:	4413      	add	r3, r2
 8003e34:	4a45      	ldr	r2, [pc, #276]	; (8003f4c <HAL_DMA_Init+0x140>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	009a      	lsls	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a42      	ldr	r2, [pc, #264]	; (8003f50 <HAL_DMA_Init+0x144>)
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
 8003e48:	e00e      	b.n	8003e68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_DMA_Init+0x148>)
 8003e52:	4413      	add	r3, r2
 8003e54:	4a3d      	ldr	r2, [pc, #244]	; (8003f4c <HAL_DMA_Init+0x140>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	009a      	lsls	r2, r3, #2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <HAL_DMA_Init+0x14c>)
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9b6 	bl	800422c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ee4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d010      	beq.n	8003f10 <HAL_DMA_Init+0x104>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d80c      	bhi.n	8003f10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9d6 	bl	80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e008      	b.n	8003f22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40020407 	.word	0x40020407
 8003f48:	bffdfff8 	.word	0xbffdfff8
 8003f4c:	cccccccd 	.word	0xcccccccd
 8003f50:	40020000 	.word	0x40020000
 8003f54:	bffdfbf8 	.word	0xbffdfbf8
 8003f58:	40020400 	.word	0x40020400

08003f5c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_DMA_Start_IT+0x20>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e066      	b.n	800404a <HAL_DMA_Start_IT+0xee>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d155      	bne.n	800403c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8fb 	bl	80041b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 020e 	orr.w	r2, r2, #14
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e00f      	b.n	8003ff4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 020a 	orr.w	r2, r2, #10
 8003ff2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004010:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e005      	b.n	8004048 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004044:	2302      	movs	r3, #2
 8004046:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2204      	movs	r2, #4
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d026      	beq.n	80040cc <HAL_DMA_IRQHandler+0x7a>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d021      	beq.n	80040cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0204 	bic.w	r2, r2, #4
 80040a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f003 021f 	and.w	r2, r3, #31
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2104      	movs	r1, #4
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d071      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040ca:	e06c      	b.n	80041a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2202      	movs	r2, #2
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02e      	beq.n	800413e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d029      	beq.n	800413e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020a 	bic.w	r2, r2, #10
 8004106:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2102      	movs	r1, #2
 800411e:	fa01 f202 	lsl.w	r2, r1, r2
 8004122:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d038      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800413c:	e033      	b.n	80041a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2208      	movs	r2, #8
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02a      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d025      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 020e 	bic.w	r2, r2, #14
 800416a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2101      	movs	r1, #1
 800417a:	fa01 f202 	lsl.w	r2, r1, r2
 800417e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
}
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f003 021f 	and.w	r2, r3, #31
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2101      	movs	r1, #1
 80041e8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d108      	bne.n	8004210 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800420e:	e007      	b.n	8004220 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4b16      	ldr	r3, [pc, #88]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d802      	bhi.n	8004246 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004240:	4b15      	ldr	r3, [pc, #84]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e001      	b.n	800424a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004248:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	3b08      	subs	r3, #8
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004276:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2201      	movs	r2, #1
 8004280:	409a      	lsls	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40020407 	.word	0x40020407
 8004298:	40020800 	.word	0x40020800
 800429c:	40020820 	.word	0x40020820
 80042a0:	cccccccd 	.word	0xcccccccd
 80042a4:	40020880 	.word	0x40020880

080042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	461a      	mov	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	1000823f 	.word	0x1000823f
 80042ec:	40020940 	.word	0x40020940

080042f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042fe:	e15a      	b.n	80045b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2101      	movs	r1, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	4013      	ands	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 814c 	beq.w	80045b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d005      	beq.n	8004330 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800432c:	2b02      	cmp	r3, #2
 800432e:	d130      	bne.n	8004392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004366:	2201      	movs	r2, #1
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0201 	and.w	r2, r3, #1
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b03      	cmp	r3, #3
 800439c:	d017      	beq.n	80043ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d123      	bne.n	8004422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	08da      	lsrs	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3208      	adds	r2, #8
 80043e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	220f      	movs	r2, #15
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	6939      	ldr	r1, [r7, #16]
 800441e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	2203      	movs	r2, #3
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80a6 	beq.w	80045b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004464:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <HAL_GPIO_Init+0x2e4>)
 8004466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004468:	4a5a      	ldr	r2, [pc, #360]	; (80045d4 <HAL_GPIO_Init+0x2e4>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6613      	str	r3, [r2, #96]	; 0x60
 8004470:	4b58      	ldr	r3, [pc, #352]	; (80045d4 <HAL_GPIO_Init+0x2e4>)
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800447c:	4a56      	ldr	r2, [pc, #344]	; (80045d8 <HAL_GPIO_Init+0x2e8>)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	220f      	movs	r2, #15
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044a6:	d01f      	beq.n	80044e8 <HAL_GPIO_Init+0x1f8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a4c      	ldr	r2, [pc, #304]	; (80045dc <HAL_GPIO_Init+0x2ec>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d019      	beq.n	80044e4 <HAL_GPIO_Init+0x1f4>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a4b      	ldr	r2, [pc, #300]	; (80045e0 <HAL_GPIO_Init+0x2f0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_GPIO_Init+0x1f0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <HAL_GPIO_Init+0x2f4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00d      	beq.n	80044dc <HAL_GPIO_Init+0x1ec>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_GPIO_Init+0x2f8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <HAL_GPIO_Init+0x1e8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_GPIO_Init+0x2fc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_GPIO_Init+0x1e4>
 80044d0:	2305      	movs	r3, #5
 80044d2:	e00a      	b.n	80044ea <HAL_GPIO_Init+0x1fa>
 80044d4:	2306      	movs	r3, #6
 80044d6:	e008      	b.n	80044ea <HAL_GPIO_Init+0x1fa>
 80044d8:	2304      	movs	r3, #4
 80044da:	e006      	b.n	80044ea <HAL_GPIO_Init+0x1fa>
 80044dc:	2303      	movs	r3, #3
 80044de:	e004      	b.n	80044ea <HAL_GPIO_Init+0x1fa>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e002      	b.n	80044ea <HAL_GPIO_Init+0x1fa>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_GPIO_Init+0x1fa>
 80044e8:	2300      	movs	r3, #0
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	f002 0203 	and.w	r2, r2, #3
 80044f0:	0092      	lsls	r2, r2, #2
 80044f2:	4093      	lsls	r3, r2
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044fa:	4937      	ldr	r1, [pc, #220]	; (80045d8 <HAL_GPIO_Init+0x2e8>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004508:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_GPIO_Init+0x300>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	43db      	mvns	r3, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800452c:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <HAL_GPIO_Init+0x300>)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004532:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <HAL_GPIO_Init+0x300>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004556:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <HAL_GPIO_Init+0x300>)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_GPIO_Init+0x300>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_GPIO_Init+0x300>)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_GPIO_Init+0x300>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045aa:	4a11      	ldr	r2, [pc, #68]	; (80045f0 <HAL_GPIO_Init+0x300>)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3301      	adds	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f ae9d 	bne.w	8004300 <HAL_GPIO_Init+0x10>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40010000 	.word	0x40010000
 80045dc:	48000400 	.word	0x48000400
 80045e0:	48000800 	.word	0x48000800
 80045e4:	48000c00 	.word	0x48000c00
 80045e8:	48001000 	.word	0x48001000
 80045ec:	48001400 	.word	0x48001400
 80045f0:	40010400 	.word	0x40010400

080045f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e001      	b.n	8004616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
 8004630:	4613      	mov	r3, r2
 8004632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004634:	787b      	ldrb	r3, [r7, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004640:	e002      	b.n	8004648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fc28 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d141      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004692:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d131      	bne.n	8004704 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046a0:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a6:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046b8:	4a41      	ldr	r2, [pc, #260]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2232      	movs	r2, #50	; 0x32
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d6:	e002      	b.n	80046de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3b01      	subs	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046de:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d102      	bne.n	80046f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f2      	bne.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f2:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fe:	d158      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e057      	b.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004704:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470a:	4a2d      	ldr	r2, [pc, #180]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004714:	e04d      	b.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471c:	d141      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800471e:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472a:	d131      	bne.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800472c:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004732:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800473c:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2232      	movs	r2, #50	; 0x32
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	0c9b      	lsrs	r3, r3, #18
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004762:	e002      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3b01      	subs	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d102      	bne.n	800477e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f2      	bne.n	8004764 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478a:	d112      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e011      	b.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047a0:	e007      	b.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40007000 	.word	0x40007000
 80047c4:	20000008 	.word	0x20000008
 80047c8:	431bde83 	.word	0x431bde83

080047cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047da:	6093      	str	r3, [r2, #8]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000

080047ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e2fe      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d075      	beq.n	80048f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480a:	4b97      	ldr	r3, [pc, #604]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004814:	4b94      	ldr	r3, [pc, #592]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d102      	bne.n	800482a <HAL_RCC_OscConfig+0x3e>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b03      	cmp	r3, #3
 8004828:	d002      	beq.n	8004830 <HAL_RCC_OscConfig+0x44>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10b      	bne.n	8004848 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	4b8d      	ldr	r3, [pc, #564]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d05b      	beq.n	80048f4 <HAL_RCC_OscConfig+0x108>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d157      	bne.n	80048f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e2d9      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d106      	bne.n	8004860 <HAL_RCC_OscConfig+0x74>
 8004852:	4b85      	ldr	r3, [pc, #532]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a84      	ldr	r2, [pc, #528]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e01d      	b.n	800489c <HAL_RCC_OscConfig+0xb0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x98>
 800486a:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7e      	ldr	r2, [pc, #504]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4b7c      	ldr	r3, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7b      	ldr	r2, [pc, #492]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 800487c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e00b      	b.n	800489c <HAL_RCC_OscConfig+0xb0>
 8004884:	4b78      	ldr	r3, [pc, #480]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a77      	ldr	r2, [pc, #476]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 800488a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a74      	ldr	r2, [pc, #464]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d013      	beq.n	80048cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd fe32 	bl	800250c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ac:	f7fd fe2e 	bl	800250c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	; 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e29e      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048be:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0xc0>
 80048ca:	e014      	b.n	80048f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fd fe1e 	bl	800250c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d4:	f7fd fe1a 	bl	800250c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	; 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e28a      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e6:	4b60      	ldr	r3, [pc, #384]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0xe8>
 80048f2:	e000      	b.n	80048f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d075      	beq.n	80049ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004902:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800490c:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d102      	bne.n	8004922 <HAL_RCC_OscConfig+0x136>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d002      	beq.n	8004928 <HAL_RCC_OscConfig+0x13c>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d11f      	bne.n	8004968 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004928:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_OscConfig+0x154>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e25d      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004940:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	4946      	ldr	r1, [pc, #280]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004954:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <HAL_RCC_OscConfig+0x280>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd fd8b 	bl	8002474 <HAL_InitTick>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d043      	beq.n	80049ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e249      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d023      	beq.n	80049b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004970:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3c      	ldr	r2, [pc, #240]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd fdc6 	bl	800250c <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004984:	f7fd fdc2 	bl	800250c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e232      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	492d      	ldr	r1, [pc, #180]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e01a      	b.n	80049ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80049be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd fda2 	bl	800250c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fd fd9e 	bl	800250c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e20e      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1e0>
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d041      	beq.n	8004a7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a02:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a12:	f7fd fd7b 	bl	800250c <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1a:	f7fd fd77 	bl	800250c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1e7      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ef      	beq.n	8004a1a <HAL_RCC_OscConfig+0x22e>
 8004a3a:	e020      	b.n	8004a7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd fd5e 	bl	800250c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a52:	e00d      	b.n	8004a70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fd fd5a 	bl	800250c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d906      	bls.n	8004a70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e1ca      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a70:	4b8c      	ldr	r3, [pc, #560]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ea      	bne.n	8004a54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80a6 	beq.w	8004bd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a90:	4b84      	ldr	r3, [pc, #528]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x2b4>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCC_OscConfig+0x2b6>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa6:	4b7f      	ldr	r3, [pc, #508]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	4a7e      	ldr	r2, [pc, #504]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab2:	4b7c      	ldr	r3, [pc, #496]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac2:	4b79      	ldr	r3, [pc, #484]	; (8004ca8 <HAL_RCC_OscConfig+0x4bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d118      	bne.n	8004b00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ace:	4b76      	ldr	r3, [pc, #472]	; (8004ca8 <HAL_RCC_OscConfig+0x4bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a75      	ldr	r2, [pc, #468]	; (8004ca8 <HAL_RCC_OscConfig+0x4bc>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ada:	f7fd fd17 	bl	800250c <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae2:	f7fd fd13 	bl	800250c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e183      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af4:	4b6c      	ldr	r3, [pc, #432]	; (8004ca8 <HAL_RCC_OscConfig+0x4bc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d108      	bne.n	8004b1a <HAL_RCC_OscConfig+0x32e>
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b18:	e024      	b.n	8004b64 <HAL_RCC_OscConfig+0x378>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d110      	bne.n	8004b44 <HAL_RCC_OscConfig+0x358>
 8004b22:	4b60      	ldr	r3, [pc, #384]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	4a5e      	ldr	r2, [pc, #376]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b32:	4b5c      	ldr	r3, [pc, #368]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	4a5a      	ldr	r2, [pc, #360]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b42:	e00f      	b.n	8004b64 <HAL_RCC_OscConfig+0x378>
 8004b44:	4b57      	ldr	r3, [pc, #348]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	4a56      	ldr	r2, [pc, #344]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d016      	beq.n	8004b9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd fcce 	bl	800250c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b74:	f7fd fcca 	bl	800250c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e138      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b8a:	4b46      	ldr	r3, [pc, #280]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ed      	beq.n	8004b74 <HAL_RCC_OscConfig+0x388>
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fcb7 	bl	800250c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd fcb3 	bl	800250c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e121      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb8:	4b3a      	ldr	r3, [pc, #232]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ed      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bc6:	7ffb      	ldrb	r3, [r7, #31]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d03c      	beq.n	8004c5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01c      	beq.n	8004c26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bec:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fd fc86 	bl	800250c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c04:	f7fd fc82 	bl	800250c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0f2      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ef      	beq.n	8004c04 <HAL_RCC_OscConfig+0x418>
 8004c24:	e01b      	b.n	8004c5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c26:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7fd fc69 	bl	800250c <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c3e:	f7fd fc65 	bl	800250c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0d5      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ef      	bne.n	8004c3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80c9 	beq.w	8004dfa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	f000 8083 	beq.w	8004d7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d15e      	bne.n	8004d3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8a:	f7fd fc3f 	bl	800250c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c90:	e00c      	b.n	8004cac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fd fc3b 	bl	800250c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d905      	bls.n	8004cac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0ab      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cac:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ec      	bne.n	8004c92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb8:	4b52      	ldr	r3, [pc, #328]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <HAL_RCC_OscConfig+0x61c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6a11      	ldr	r1, [r2, #32]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cd2:	0212      	lsls	r2, r2, #8
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cda:	0852      	lsrs	r2, r2, #1
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	0552      	lsls	r2, r2, #21
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce6:	0852      	lsrs	r2, r2, #1
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	0652      	lsls	r2, r2, #25
 8004cec:	4311      	orrs	r1, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cf2:	06d2      	lsls	r2, r2, #27
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	4943      	ldr	r1, [pc, #268]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cfc:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a40      	ldr	r2, [pc, #256]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a3d      	ldr	r2, [pc, #244]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd fbfa 	bl	800250c <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1c:	f7fd fbf6 	bl	800250c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e066      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2e:	4b35      	ldr	r3, [pc, #212]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x530>
 8004d3a:	e05e      	b.n	8004dfa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3c:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd fbe0 	bl	800250c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fd fbdc 	bl	800250c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e04c      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d62:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d6e:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	4924      	ldr	r1, [pc, #144]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d74:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_RCC_OscConfig+0x620>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60cb      	str	r3, [r1, #12]
 8004d7a:	e03e      	b.n	8004dfa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e039      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d88:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <HAL_RCC_OscConfig+0x618>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 0203 	and.w	r2, r3, #3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d12c      	bne.n	8004df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	3b01      	subs	r3, #1
 8004da8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d123      	bne.n	8004df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d11b      	bne.n	8004df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d113      	bne.n	8004df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d109      	bne.n	8004df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	3b01      	subs	r3, #1
 8004df0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	019f800c 	.word	0x019f800c
 8004e0c:	feeefffc 	.word	0xfeeefffc

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e11e      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e28:	4b91      	ldr	r3, [pc, #580]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d910      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e36:	4b8e      	ldr	r3, [pc, #568]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 020f 	bic.w	r2, r3, #15
 8004e3e:	498c      	ldr	r1, [pc, #560]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b8a      	ldr	r3, [pc, #552]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e106      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d073      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d129      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6c:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0f4      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e7c:	f000 f99e 	bl	80051bc <RCC_GetSysClockFreqFromPLLSource>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4a7c      	ldr	r2, [pc, #496]	; (8005078 <HAL_RCC_ClockConfig+0x268>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d93f      	bls.n	8004f0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d033      	beq.n	8004f0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d12f      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eaa:	4b72      	ldr	r3, [pc, #456]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb2:	4a70      	ldr	r2, [pc, #448]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e024      	b.n	8004f0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec8:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0c6      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed8:	4b66      	ldr	r3, [pc, #408]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0be      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ee8:	f000 f8ce 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4a61      	ldr	r2, [pc, #388]	; (8005078 <HAL_RCC_ClockConfig+0x268>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d909      	bls.n	8004f0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efe:	4a5d      	ldr	r2, [pc, #372]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f0a:	4b5a      	ldr	r3, [pc, #360]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4957      	ldr	r1, [pc, #348]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1c:	f7fd faf6 	bl	800250c <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f24:	f7fd faf2 	bl	800250c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e095      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	4b4e      	ldr	r3, [pc, #312]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 020c 	and.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1eb      	bne.n	8004f24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f64:	4b43      	ldr	r3, [pc, #268]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4a42      	ldr	r2, [pc, #264]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f84:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f8c:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4936      	ldr	r1, [pc, #216]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d105      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fa6:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	4a32      	ldr	r2, [pc, #200]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d21d      	bcs.n	8004ffc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 020f 	bic.w	r2, r3, #15
 8004fc8:	4929      	ldr	r1, [pc, #164]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fd0:	f7fd fa9c 	bl	800250c <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd8:	f7fd fa98 	bl	800250c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e03b      	b.n	8005066 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <HAL_RCC_ClockConfig+0x260>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1ed      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4917      	ldr	r1, [pc, #92]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8005016:	4313      	orrs	r3, r2
 8005018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	490f      	ldr	r1, [pc, #60]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800503a:	f000 f825 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 800503e:	4602      	mov	r2, r0
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_ClockConfig+0x264>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	490c      	ldr	r1, [pc, #48]	; (800507c <HAL_RCC_ClockConfig+0x26c>)
 800504c:	5ccb      	ldrb	r3, [r1, r3]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <HAL_RCC_ClockConfig+0x270>)
 8005058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_RCC_ClockConfig+0x274>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fa08 	bl	8002474 <HAL_InitTick>
 8005064:	4603      	mov	r3, r0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40022000 	.word	0x40022000
 8005074:	40021000 	.word	0x40021000
 8005078:	04c4b400 	.word	0x04c4b400
 800507c:	080085dc 	.word	0x080085dc
 8005080:	20000008 	.word	0x20000008
 8005084:	2000000c 	.word	0x2000000c

08005088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800508e:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b04      	cmp	r3, #4
 8005098:	d102      	bne.n	80050a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800509a:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <HAL_RCC_GetSysClockFreq+0xbc>)
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	e047      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050a0:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 030c 	and.w	r3, r3, #12
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d102      	bne.n	80050b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e03e      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d136      	bne.n	800512c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3301      	adds	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d10c      	bne.n	80050f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050dc:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050e6:	68d2      	ldr	r2, [r2, #12]
 80050e8:	0a12      	lsrs	r2, r2, #8
 80050ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	617b      	str	r3, [r7, #20]
      break;
 80050f4:	e00c      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050f6:	4a13      	ldr	r2, [pc, #76]	; (8005144 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4a10      	ldr	r2, [pc, #64]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005100:	68d2      	ldr	r2, [r2, #12]
 8005102:	0a12      	lsrs	r2, r2, #8
 8005104:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
      break;
 800510e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	0e5b      	lsrs	r3, r3, #25
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	3301      	adds	r3, #1
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e001      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005130:	693b      	ldr	r3, [r7, #16]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000
 8005144:	00f42400 	.word	0x00f42400
 8005148:	016e3600 	.word	0x016e3600

0800514c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCC_GetHCLKFreq+0x14>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000008 	.word	0x20000008

08005164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005168:	f7ff fff0 	bl	800514c <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4904      	ldr	r1, [pc, #16]	; (800518c <HAL_RCC_GetPCLK1Freq+0x28>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	080085ec 	.word	0x080085ec

08005190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005194:	f7ff ffda 	bl	800514c <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	0adb      	lsrs	r3, r3, #11
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4904      	ldr	r1, [pc, #16]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	080085ec 	.word	0x080085ec

080051bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d10c      	bne.n	80051fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051e0:	4a17      	ldr	r2, [pc, #92]	; (8005240 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	4a14      	ldr	r2, [pc, #80]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ea:	68d2      	ldr	r2, [r2, #12]
 80051ec:	0a12      	lsrs	r2, r2, #8
 80051ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	617b      	str	r3, [r7, #20]
    break;
 80051f8:	e00c      	b.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051fa:	4a12      	ldr	r2, [pc, #72]	; (8005244 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	4a0e      	ldr	r2, [pc, #56]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005204:	68d2      	ldr	r2, [r2, #12]
 8005206:	0a12      	lsrs	r2, r2, #8
 8005208:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	617b      	str	r3, [r7, #20]
    break;
 8005212:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	0e5b      	lsrs	r3, r3, #25
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	3301      	adds	r3, #1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800522e:	687b      	ldr	r3, [r7, #4]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40021000 	.word	0x40021000
 8005240:	016e3600 	.word	0x016e3600
 8005244:	00f42400 	.word	0x00f42400

08005248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005250:	2300      	movs	r3, #0
 8005252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005254:	2300      	movs	r3, #0
 8005256:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8098 	beq.w	8005396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b43      	ldr	r3, [pc, #268]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b40      	ldr	r3, [pc, #256]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	4a3f      	ldr	r2, [pc, #252]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	; 0x58
 8005282:	4b3d      	ldr	r3, [pc, #244]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528e:	2301      	movs	r3, #1
 8005290:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a39      	ldr	r2, [pc, #228]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800529e:	f7fd f935 	bl	800250c <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a4:	e009      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fd f931 	bl	800250c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d902      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	74fb      	strb	r3, [r7, #19]
        break;
 80052b8:	e005      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ef      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d159      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052cc:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d019      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052e8:	4b23      	ldr	r3, [pc, #140]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005304:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005314:	4a18      	ldr	r2, [pc, #96]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd f8f1 	bl	800250c <HAL_GetTick>
 800532a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532c:	e00b      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fd f8ed 	bl	800250c <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d902      	bls.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	74fb      	strb	r3, [r7, #19]
            break;
 8005344:	e006      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ec      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535a:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005370:	e008      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
 8005376:	e005      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005378:	40021000 	.word	0x40021000
 800537c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005384:	7c7b      	ldrb	r3, [r7, #17]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	4ba7      	ldr	r3, [pc, #668]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4aa6      	ldr	r2, [pc, #664]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053a2:	4ba1      	ldr	r3, [pc, #644]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f023 0203 	bic.w	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	499d      	ldr	r1, [pc, #628]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053c4:	4b98      	ldr	r3, [pc, #608]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f023 020c 	bic.w	r2, r3, #12
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4995      	ldr	r1, [pc, #596]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053e6:	4b90      	ldr	r3, [pc, #576]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	498c      	ldr	r1, [pc, #560]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005408:	4b87      	ldr	r3, [pc, #540]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4984      	ldr	r1, [pc, #528]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800542a:	4b7f      	ldr	r3, [pc, #508]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	497b      	ldr	r1, [pc, #492]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800544c:	4b76      	ldr	r3, [pc, #472]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	4973      	ldr	r1, [pc, #460]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800546e:	4b6e      	ldr	r3, [pc, #440]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	496a      	ldr	r1, [pc, #424]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005490:	4b65      	ldr	r3, [pc, #404]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	4962      	ldr	r1, [pc, #392]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b2:	4b5d      	ldr	r3, [pc, #372]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	4959      	ldr	r1, [pc, #356]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054d4:	4b54      	ldr	r3, [pc, #336]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054da:	f023 0203 	bic.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	4951      	ldr	r1, [pc, #324]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f6:	4b4c      	ldr	r3, [pc, #304]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	4948      	ldr	r1, [pc, #288]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005514:	2b00      	cmp	r3, #0
 8005516:	d015      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005518:	4b43      	ldr	r3, [pc, #268]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	4940      	ldr	r1, [pc, #256]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005536:	d105      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005538:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a3a      	ldr	r2, [pc, #232]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005542:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005550:	4b35      	ldr	r3, [pc, #212]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	4932      	ldr	r1, [pc, #200]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556e:	d105      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005570:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005588:	4b27      	ldr	r3, [pc, #156]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	4924      	ldr	r1, [pc, #144]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055a6:	d105      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a8:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	4916      	ldr	r1, [pc, #88]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a10      	ldr	r2, [pc, #64]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d019      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	4908      	ldr	r1, [pc, #32]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005616:	d109      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a02      	ldr	r2, [pc, #8]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005622:	60d3      	str	r3, [r2, #12]
 8005624:	e002      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005638:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	4926      	ldr	r1, [pc, #152]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005658:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a20      	ldr	r2, [pc, #128]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800565e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005662:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567e:	4918      	ldr	r1, [pc, #96]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005690:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	490a      	ldr	r1, [pc, #40]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056c6:	d105      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000

080056e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e049      	b.n	800578a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fc fcca 	bl	80020a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f000 ff5e 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e04c      	b.n	8005846 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a26      	ldr	r2, [pc, #152]	; (8005854 <HAL_TIM_Base_Start+0xc0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d022      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d01d      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <HAL_TIM_Base_Start+0xc4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <HAL_TIM_Base_Start+0xc8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <HAL_TIM_Base_Start+0xcc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_TIM_Base_Start+0xd0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <HAL_TIM_Base_Start+0xd4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_Base_Start+0x70>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIM_Base_Start+0xd8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d115      	bne.n	8005830 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_TIM_Base_Start+0xdc>)
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d015      	beq.n	8005842 <HAL_TIM_Base_Start+0xae>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d011      	beq.n	8005842 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582e:	e008      	b.n	8005842 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e000      	b.n	8005844 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40000c00 	.word	0x40000c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40015000 	.word	0x40015000
 8005870:	00010007 	.word	0x00010007

08005874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d001      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e054      	b.n	8005936 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a26      	ldr	r2, [pc, #152]	; (8005944 <HAL_TIM_Base_Start_IT+0xd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b6:	d01d      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a22      	ldr	r2, [pc, #136]	; (8005948 <HAL_TIM_Base_Start_IT+0xd4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <HAL_TIM_Base_Start_IT+0xd8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <HAL_TIM_Base_Start_IT+0xe0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_TIM_Base_Start_IT+0xe4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x80>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_TIM_Base_Start_IT+0xe8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d115      	bne.n	8005920 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	4b19      	ldr	r3, [pc, #100]	; (8005960 <HAL_TIM_Base_Start_IT+0xec>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b06      	cmp	r3, #6
 8005904:	d015      	beq.n	8005932 <HAL_TIM_Base_Start_IT+0xbe>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d011      	beq.n	8005932 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0201 	orr.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591e:	e008      	b.n	8005932 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e000      	b.n	8005934 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40014000 	.word	0x40014000
 800595c:	40015000 	.word	0x40015000
 8005960:	00010007 	.word	0x00010007

08005964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e049      	b.n	8005a0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc fbca 	bl	8002124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f000 fe1e 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_TIM_PWM_Start+0x24>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e03c      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x9e>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d109      	bne.n	8005a52 <HAL_TIM_PWM_Start+0x3e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e02f      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x9e>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d109      	bne.n	8005a6c <HAL_TIM_PWM_Start+0x58>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e022      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x9e>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d109      	bne.n	8005a86 <HAL_TIM_PWM_Start+0x72>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e015      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x9e>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0x8c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x9e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0a6      	b.n	8005c08 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_PWM_Start+0xb6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	e023      	b.n	8005b12 <HAL_TIM_PWM_Start+0xfe>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_PWM_Start+0xc6>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	e01b      	b.n	8005b12 <HAL_TIM_PWM_Start+0xfe>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_PWM_Start+0xd6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae8:	e013      	b.n	8005b12 <HAL_TIM_PWM_Start+0xfe>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_PWM_Start+0xe6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_PWM_Start+0xfe>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_PWM_Start+0xf6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b08:	e003      	b.n	8005b12 <HAL_TIM_PWM_Start+0xfe>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 f9dc 	bl	8006ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a3a      	ldr	r2, [pc, #232]	; (8005c10 <HAL_TIM_PWM_Start+0x1fc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x148>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a39      	ldr	r2, [pc, #228]	; (8005c14 <HAL_TIM_PWM_Start+0x200>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x148>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <HAL_TIM_PWM_Start+0x204>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00e      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x148>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a36      	ldr	r2, [pc, #216]	; (8005c1c <HAL_TIM_PWM_Start+0x208>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x148>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a34      	ldr	r2, [pc, #208]	; (8005c20 <HAL_TIM_PWM_Start+0x20c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x148>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a33      	ldr	r2, [pc, #204]	; (8005c24 <HAL_TIM_PWM_Start+0x210>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIM_PWM_Start+0x14c>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_TIM_PWM_Start+0x14e>
 8005b60:	2300      	movs	r3, #0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <HAL_TIM_PWM_Start+0x1fc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b88:	d01d      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a26      	ldr	r2, [pc, #152]	; (8005c28 <HAL_TIM_PWM_Start+0x214>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <HAL_TIM_PWM_Start+0x218>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a23      	ldr	r2, [pc, #140]	; (8005c30 <HAL_TIM_PWM_Start+0x21c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <HAL_TIM_PWM_Start+0x200>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <HAL_TIM_PWM_Start+0x204>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x1b2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_TIM_PWM_Start+0x210>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d115      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <HAL_TIM_PWM_Start+0x220>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d015      	beq.n	8005c04 <HAL_TIM_PWM_Start+0x1f0>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bde:	d011      	beq.n	8005c04 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf0:	e008      	b.n	8005c04 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e000      	b.n	8005c06 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800
 8005c24:	40015000 	.word	0x40015000
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	00010007 	.word	0x00010007

08005c38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e097      	b.n	8005d7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fc fa7f 	bl	8002164 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f000 fca9 	bl	80065e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cd8:	f023 030c 	bic.w	r3, r3, #12
 8005cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	031b      	lsls	r3, r3, #12
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005da4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d102      	bne.n	8005dc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e069      	b.n	8005e98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	e031      	b.n	8005e3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d110      	bne.n	8005dfe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d102      	bne.n	8005de8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005de2:	7b3b      	ldrb	r3, [r7, #12]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d001      	beq.n	8005dec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e055      	b.n	8005e98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dfc:	e01d      	b.n	8005e3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d108      	bne.n	8005e16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d105      	bne.n	8005e16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0a:	7b7b      	ldrb	r3, [r7, #13]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d102      	bne.n	8005e16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e10:	7b3b      	ldrb	r3, [r7, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e03e      	b.n	8005e98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_TIM_Encoder_Start+0xc4>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d008      	beq.n	8005e58 <HAL_TIM_Encoder_Start+0xd4>
 8005e46:	e00f      	b.n	8005e68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 f841 	bl	8006ed8 <TIM_CCxChannelCmd>
      break;
 8005e56:	e016      	b.n	8005e86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2104      	movs	r1, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f839 	bl	8006ed8 <TIM_CCxChannelCmd>
      break;
 8005e66:	e00e      	b.n	8005e86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 f831 	bl	8006ed8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	2104      	movs	r1, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 f82a 	bl	8006ed8 <TIM_CCxChannelCmd>
      break;
 8005e84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d020      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0202 	mvn.w	r2, #2
 8005ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fb5c 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fb4e 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fb5f 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d020      	beq.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0204 	mvn.w	r2, #4
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb36 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fb28 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fb39 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0208 	mvn.w	r2, #8
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb10 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fb02 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb13 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d020      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0210 	mvn.w	r2, #16
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 faea 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fadc 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 faed 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0201 	mvn.w	r2, #1
 8006004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fb ff22 	bl	8001e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f815 	bl	8007064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00c      	beq.n	800605e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f80d 	bl	8007078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 faa7 	bl	80065d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0220 	mvn.w	r2, #32
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 ffd5 	bl	8007050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 ffe1 	bl	800708c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 ffd9 	bl	80070a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 ffd1 	bl	80070b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00c      	beq.n	8006136 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800612e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 ffc9 	bl	80070c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800615a:	2302      	movs	r3, #2
 800615c:	e0ff      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b14      	cmp	r3, #20
 800616a:	f200 80f0 	bhi.w	800634e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	080061c9 	.word	0x080061c9
 8006178:	0800634f 	.word	0x0800634f
 800617c:	0800634f 	.word	0x0800634f
 8006180:	0800634f 	.word	0x0800634f
 8006184:	08006209 	.word	0x08006209
 8006188:	0800634f 	.word	0x0800634f
 800618c:	0800634f 	.word	0x0800634f
 8006190:	0800634f 	.word	0x0800634f
 8006194:	0800624b 	.word	0x0800624b
 8006198:	0800634f 	.word	0x0800634f
 800619c:	0800634f 	.word	0x0800634f
 80061a0:	0800634f 	.word	0x0800634f
 80061a4:	0800628b 	.word	0x0800628b
 80061a8:	0800634f 	.word	0x0800634f
 80061ac:	0800634f 	.word	0x0800634f
 80061b0:	0800634f 	.word	0x0800634f
 80061b4:	080062cd 	.word	0x080062cd
 80061b8:	0800634f 	.word	0x0800634f
 80061bc:	0800634f 	.word	0x0800634f
 80061c0:	0800634f 	.word	0x0800634f
 80061c4:	0800630d 	.word	0x0800630d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fabc 	bl	800674c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0208 	orr.w	r2, r2, #8
 80061e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0204 	bic.w	r2, r2, #4
 80061f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6999      	ldr	r1, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	619a      	str	r2, [r3, #24]
      break;
 8006206:	e0a5      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fb36 	bl	8006880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6999      	ldr	r1, [r3, #24]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	619a      	str	r2, [r3, #24]
      break;
 8006248:	e084      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fba9 	bl	80069a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0208 	orr.w	r2, r2, #8
 8006264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0204 	bic.w	r2, r2, #4
 8006274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69d9      	ldr	r1, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	61da      	str	r2, [r3, #28]
      break;
 8006288:	e064      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fc1b 	bl	8006acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	021a      	lsls	r2, r3, #8
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	61da      	str	r2, [r3, #28]
      break;
 80062ca:	e043      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fc8e 	bl	8006bf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800630a:	e023      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fcd8 	bl	8006cc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006326:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800634c:	e002      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
      break;
 8006352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800635c:	7dfb      	ldrb	r3, [r7, #23]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_TIM_ConfigClockSource+0x1c>
 8006380:	2302      	movs	r3, #2
 8006382:	e0f6      	b.n	8006572 <HAL_TIM_ConfigClockSource+0x20a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80063a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a6f      	ldr	r2, [pc, #444]	; (800657c <HAL_TIM_ConfigClockSource+0x214>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f000 80c1 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 80063c4:	4a6d      	ldr	r2, [pc, #436]	; (800657c <HAL_TIM_ConfigClockSource+0x214>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	f200 80c6 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 80063cc:	4a6c      	ldr	r2, [pc, #432]	; (8006580 <HAL_TIM_ConfigClockSource+0x218>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	f000 80b9 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 80063d4:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_TIM_ConfigClockSource+0x218>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	f200 80be 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 80063dc:	4a69      	ldr	r2, [pc, #420]	; (8006584 <HAL_TIM_ConfigClockSource+0x21c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	f000 80b1 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 80063e4:	4a67      	ldr	r2, [pc, #412]	; (8006584 <HAL_TIM_ConfigClockSource+0x21c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f200 80b6 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 80063ec:	4a66      	ldr	r2, [pc, #408]	; (8006588 <HAL_TIM_ConfigClockSource+0x220>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f000 80a9 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 80063f4:	4a64      	ldr	r2, [pc, #400]	; (8006588 <HAL_TIM_ConfigClockSource+0x220>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f200 80ae 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 80063fc:	4a63      	ldr	r2, [pc, #396]	; (800658c <HAL_TIM_ConfigClockSource+0x224>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f000 80a1 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 8006404:	4a61      	ldr	r2, [pc, #388]	; (800658c <HAL_TIM_ConfigClockSource+0x224>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f200 80a6 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 800640c:	4a60      	ldr	r2, [pc, #384]	; (8006590 <HAL_TIM_ConfigClockSource+0x228>)
 800640e:	4293      	cmp	r3, r2
 8006410:	f000 8099 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 8006414:	4a5e      	ldr	r2, [pc, #376]	; (8006590 <HAL_TIM_ConfigClockSource+0x228>)
 8006416:	4293      	cmp	r3, r2
 8006418:	f200 809e 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 800641c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006420:	f000 8091 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 8006424:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006428:	f200 8096 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 800642c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006430:	f000 8089 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 8006434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006438:	f200 808e 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 800643c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006440:	d03e      	beq.n	80064c0 <HAL_TIM_ConfigClockSource+0x158>
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006446:	f200 8087 	bhi.w	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644e:	f000 8086 	beq.w	800655e <HAL_TIM_ConfigClockSource+0x1f6>
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d87f      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006458:	2b70      	cmp	r3, #112	; 0x70
 800645a:	d01a      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x12a>
 800645c:	2b70      	cmp	r3, #112	; 0x70
 800645e:	d87b      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006460:	2b60      	cmp	r3, #96	; 0x60
 8006462:	d050      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x19e>
 8006464:	2b60      	cmp	r3, #96	; 0x60
 8006466:	d877      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006468:	2b50      	cmp	r3, #80	; 0x50
 800646a:	d03c      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x17e>
 800646c:	2b50      	cmp	r3, #80	; 0x50
 800646e:	d873      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d058      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x1be>
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d86f      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	d064      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d86b      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d060      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d867      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d05c      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 800648c:	2b10      	cmp	r3, #16
 800648e:	d05a      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x1de>
 8006490:	e062      	b.n	8006558 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064a2:	f000 fcf9 	bl	8006e98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	609a      	str	r2, [r3, #8]
      break;
 80064be:	e04f      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064d0:	f000 fce2 	bl	8006e98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e2:	609a      	str	r2, [r3, #8]
      break;
 80064e4:	e03c      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f2:	461a      	mov	r2, r3
 80064f4:	f000 fc54 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2150      	movs	r1, #80	; 0x50
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fcad 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006504:	e02c      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006512:	461a      	mov	r2, r3
 8006514:	f000 fc73 	bl	8006dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2160      	movs	r1, #96	; 0x60
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fc9d 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006524:	e01c      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006532:	461a      	mov	r2, r3
 8006534:	f000 fc34 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fc8d 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006544:	e00c      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f000 fc84 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006556:	e003      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	e000      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800655e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	00100070 	.word	0x00100070
 8006580:	00100060 	.word	0x00100060
 8006584:	00100050 	.word	0x00100050
 8006588:	00100040 	.word	0x00100040
 800658c:	00100030 	.word	0x00100030
 8006590:	00100020 	.word	0x00100020

08006594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a4c      	ldr	r2, [pc, #304]	; (8006728 <TIM_Base_SetConfig+0x144>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d017      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006602:	d013      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a49      	ldr	r2, [pc, #292]	; (800672c <TIM_Base_SetConfig+0x148>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a48      	ldr	r2, [pc, #288]	; (8006730 <TIM_Base_SetConfig+0x14c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a47      	ldr	r2, [pc, #284]	; (8006734 <TIM_Base_SetConfig+0x150>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a46      	ldr	r2, [pc, #280]	; (8006738 <TIM_Base_SetConfig+0x154>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a45      	ldr	r2, [pc, #276]	; (800673c <TIM_Base_SetConfig+0x158>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a39      	ldr	r2, [pc, #228]	; (8006728 <TIM_Base_SetConfig+0x144>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d023      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664c:	d01f      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a36      	ldr	r2, [pc, #216]	; (800672c <TIM_Base_SetConfig+0x148>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a35      	ldr	r2, [pc, #212]	; (8006730 <TIM_Base_SetConfig+0x14c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a34      	ldr	r2, [pc, #208]	; (8006734 <TIM_Base_SetConfig+0x150>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a33      	ldr	r2, [pc, #204]	; (8006738 <TIM_Base_SetConfig+0x154>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a33      	ldr	r2, [pc, #204]	; (8006740 <TIM_Base_SetConfig+0x15c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a32      	ldr	r2, [pc, #200]	; (8006744 <TIM_Base_SetConfig+0x160>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a31      	ldr	r2, [pc, #196]	; (8006748 <TIM_Base_SetConfig+0x164>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2c      	ldr	r2, [pc, #176]	; (800673c <TIM_Base_SetConfig+0x158>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <TIM_Base_SetConfig+0x144>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <TIM_Base_SetConfig+0x154>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00f      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <TIM_Base_SetConfig+0x15c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <TIM_Base_SetConfig+0x160>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <TIM_Base_SetConfig+0x164>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <TIM_Base_SetConfig+0x158>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d103      	bne.n	80066fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b01      	cmp	r3, #1
 800670c:	d105      	bne.n	800671a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f023 0201 	bic.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	611a      	str	r2, [r3, #16]
  }
}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40013400 	.word	0x40013400
 800673c:	40015000 	.word	0x40015000
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800

0800674c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f023 0201 	bic.w	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0302 	bic.w	r3, r3, #2
 8006798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a30      	ldr	r2, [pc, #192]	; (8006868 <TIM_OC1_SetConfig+0x11c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <TIM_OC1_SetConfig+0x88>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a2f      	ldr	r2, [pc, #188]	; (800686c <TIM_OC1_SetConfig+0x120>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00f      	beq.n	80067d4 <TIM_OC1_SetConfig+0x88>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a2e      	ldr	r2, [pc, #184]	; (8006870 <TIM_OC1_SetConfig+0x124>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <TIM_OC1_SetConfig+0x88>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a2d      	ldr	r2, [pc, #180]	; (8006874 <TIM_OC1_SetConfig+0x128>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_OC1_SetConfig+0x88>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <TIM_OC1_SetConfig+0x12c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC1_SetConfig+0x88>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a2b      	ldr	r2, [pc, #172]	; (800687c <TIM_OC1_SetConfig+0x130>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10c      	bne.n	80067ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0308 	bic.w	r3, r3, #8
 80067da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0304 	bic.w	r3, r3, #4
 80067ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <TIM_OC1_SetConfig+0x11c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <TIM_OC1_SetConfig+0xd2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1c      	ldr	r2, [pc, #112]	; (800686c <TIM_OC1_SetConfig+0x120>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00f      	beq.n	800681e <TIM_OC1_SetConfig+0xd2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <TIM_OC1_SetConfig+0x124>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00b      	beq.n	800681e <TIM_OC1_SetConfig+0xd2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <TIM_OC1_SetConfig+0x128>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d007      	beq.n	800681e <TIM_OC1_SetConfig+0xd2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <TIM_OC1_SetConfig+0x12c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC1_SetConfig+0xd2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a18      	ldr	r2, [pc, #96]	; (800687c <TIM_OC1_SetConfig+0x130>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d111      	bne.n	8006842 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800682c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40013400 	.word	0x40013400
 8006870:	40014000 	.word	0x40014000
 8006874:	40014400 	.word	0x40014400
 8006878:	40014800 	.word	0x40014800
 800687c:	40015000 	.word	0x40015000

08006880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f023 0210 	bic.w	r2, r3, #16
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0320 	bic.w	r3, r3, #32
 80068ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <TIM_OC2_SetConfig+0x110>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d007      	beq.n	80068f4 <TIM_OC2_SetConfig+0x74>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <TIM_OC2_SetConfig+0x114>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC2_SetConfig+0x74>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <TIM_OC2_SetConfig+0x118>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d10d      	bne.n	8006910 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <TIM_OC2_SetConfig+0x110>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <TIM_OC2_SetConfig+0xc0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <TIM_OC2_SetConfig+0x114>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC2_SetConfig+0xc0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1e      	ldr	r2, [pc, #120]	; (800699c <TIM_OC2_SetConfig+0x11c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC2_SetConfig+0xc0>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <TIM_OC2_SetConfig+0x120>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC2_SetConfig+0xc0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <TIM_OC2_SetConfig+0x124>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC2_SetConfig+0xc0>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <TIM_OC2_SetConfig+0x118>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d113      	bne.n	8006968 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800694e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40015000 	.word	0x40015000
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800

080069a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2b      	ldr	r2, [pc, #172]	; (8006ab4 <TIM_OC3_SetConfig+0x10c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_OC3_SetConfig+0x72>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <TIM_OC3_SetConfig+0x110>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC3_SetConfig+0x72>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a29      	ldr	r2, [pc, #164]	; (8006abc <TIM_OC3_SetConfig+0x114>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10d      	bne.n	8006a36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <TIM_OC3_SetConfig+0x10c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <TIM_OC3_SetConfig+0xbe>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <TIM_OC3_SetConfig+0x110>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00f      	beq.n	8006a66 <TIM_OC3_SetConfig+0xbe>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <TIM_OC3_SetConfig+0x118>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <TIM_OC3_SetConfig+0xbe>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <TIM_OC3_SetConfig+0x11c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d007      	beq.n	8006a66 <TIM_OC3_SetConfig+0xbe>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1b      	ldr	r2, [pc, #108]	; (8006ac8 <TIM_OC3_SetConfig+0x120>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_OC3_SetConfig+0xbe>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a16      	ldr	r2, [pc, #88]	; (8006abc <TIM_OC3_SetConfig+0x114>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d113      	bne.n	8006a8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	621a      	str	r2, [r3, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40013400 	.word	0x40013400
 8006abc:	40015000 	.word	0x40015000
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800

08006acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	031b      	lsls	r3, r3, #12
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <TIM_OC4_SetConfig+0x110>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d007      	beq.n	8006b40 <TIM_OC4_SetConfig+0x74>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <TIM_OC4_SetConfig+0x114>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC4_SetConfig+0x74>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <TIM_OC4_SetConfig+0x118>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10d      	bne.n	8006b5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1f      	ldr	r2, [pc, #124]	; (8006bdc <TIM_OC4_SetConfig+0x110>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <TIM_OC4_SetConfig+0xc0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <TIM_OC4_SetConfig+0x114>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00f      	beq.n	8006b8c <TIM_OC4_SetConfig+0xc0>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a1e      	ldr	r2, [pc, #120]	; (8006be8 <TIM_OC4_SetConfig+0x11c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00b      	beq.n	8006b8c <TIM_OC4_SetConfig+0xc0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1d      	ldr	r2, [pc, #116]	; (8006bec <TIM_OC4_SetConfig+0x120>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_OC4_SetConfig+0xc0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <TIM_OC4_SetConfig+0x124>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_OC4_SetConfig+0xc0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <TIM_OC4_SetConfig+0x118>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d113      	bne.n	8006bb4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	019b      	lsls	r3, r3, #6
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40015000 	.word	0x40015000
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800

08006bf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <TIM_OC5_SetConfig+0xbc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_OC5_SetConfig+0x82>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <TIM_OC5_SetConfig+0xc0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_OC5_SetConfig+0x82>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <TIM_OC5_SetConfig+0xc4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_OC5_SetConfig+0x82>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <TIM_OC5_SetConfig+0xc8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_OC5_SetConfig+0x82>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <TIM_OC5_SetConfig+0xcc>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_OC5_SetConfig+0x82>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <TIM_OC5_SetConfig+0xd0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d109      	bne.n	8006c8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40015000 	.word	0x40015000

08006cc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	051b      	lsls	r3, r3, #20
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	; (8006d88 <TIM_OC6_SetConfig+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <TIM_OC6_SetConfig+0x84>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <TIM_OC6_SetConfig+0xc4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00f      	beq.n	8006d4c <TIM_OC6_SetConfig+0x84>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <TIM_OC6_SetConfig+0xc8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC6_SetConfig+0x84>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <TIM_OC6_SetConfig+0xcc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC6_SetConfig+0x84>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <TIM_OC6_SetConfig+0xd0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC6_SetConfig+0x84>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <TIM_OC6_SetConfig+0xd4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d109      	bne.n	8006d60 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800
 8006d9c:	40015000 	.word	0x40015000

08006da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 030a 	bic.w	r3, r3, #10
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b087      	sub	sp, #28
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f023 0210 	bic.w	r2, r3, #16
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f043 0307 	orr.w	r3, r3, #7
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	609a      	str	r2, [r3, #8]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	021a      	lsls	r2, r3, #8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	2201      	movs	r2, #1
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	401a      	ands	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f10:	431a      	orrs	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e074      	b.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a34      	ldr	r2, [pc, #208]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a33      	ldr	r2, [pc, #204]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a31      	ldr	r2, [pc, #196]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d108      	bne.n	8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a21      	ldr	r2, [pc, #132]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d022      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d01d      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d018      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1c      	ldr	r2, [pc, #112]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00e      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a11      	ldr	r2, [pc, #68]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d10c      	bne.n	8007014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4313      	orrs	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40015000 	.word	0x40015000
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40014000 	.word	0x40014000

08007050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e042      	b.n	8007174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d106      	bne.n	8007106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fb f8b1 	bl	8002268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2224      	movs	r2, #36	; 0x24
 800710a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb24 	bl	8007774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f825 	bl	800717c <UART_SetConfig>
 8007132:	4603      	mov	r3, r0
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e01b      	b.n	8007174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800714a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800715a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fba3 	bl	80078b8 <UART_CheckIdleState>
 8007172:	4603      	mov	r3, r0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800717c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007180:	b08c      	sub	sp, #48	; 0x30
 8007182:	af00      	add	r7, sp, #0
 8007184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	431a      	orrs	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	431a      	orrs	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	4baa      	ldr	r3, [pc, #680]	; (8007454 <UART_SetConfig+0x2d8>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b4:	430b      	orrs	r3, r1
 80071b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a9f      	ldr	r2, [pc, #636]	; (8007458 <UART_SetConfig+0x2dc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e4:	4313      	orrs	r3, r2
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	f023 010f 	bic.w	r1, r3, #15
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a90      	ldr	r2, [pc, #576]	; (800745c <UART_SetConfig+0x2e0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d125      	bne.n	800726c <UART_SetConfig+0xf0>
 8007220:	4b8f      	ldr	r3, [pc, #572]	; (8007460 <UART_SetConfig+0x2e4>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d81a      	bhi.n	8007264 <UART_SetConfig+0xe8>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0xb8>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007245 	.word	0x08007245
 8007238:	08007255 	.word	0x08007255
 800723c:	0800724d 	.word	0x0800724d
 8007240:	0800725d 	.word	0x0800725d
 8007244:	2301      	movs	r3, #1
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724a:	e116      	b.n	800747a <UART_SetConfig+0x2fe>
 800724c:	2302      	movs	r3, #2
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007252:	e112      	b.n	800747a <UART_SetConfig+0x2fe>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725a:	e10e      	b.n	800747a <UART_SetConfig+0x2fe>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e10a      	b.n	800747a <UART_SetConfig+0x2fe>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e106      	b.n	800747a <UART_SetConfig+0x2fe>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a7c      	ldr	r2, [pc, #496]	; (8007464 <UART_SetConfig+0x2e8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d138      	bne.n	80072e8 <UART_SetConfig+0x16c>
 8007276:	4b7a      	ldr	r3, [pc, #488]	; (8007460 <UART_SetConfig+0x2e4>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	f003 030c 	and.w	r3, r3, #12
 8007280:	2b0c      	cmp	r3, #12
 8007282:	d82d      	bhi.n	80072e0 <UART_SetConfig+0x164>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x110>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072c1 	.word	0x080072c1
 8007290:	080072e1 	.word	0x080072e1
 8007294:	080072e1 	.word	0x080072e1
 8007298:	080072e1 	.word	0x080072e1
 800729c:	080072d1 	.word	0x080072d1
 80072a0:	080072e1 	.word	0x080072e1
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072e1 	.word	0x080072e1
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072e1 	.word	0x080072e1
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	2300      	movs	r3, #0
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e0d8      	b.n	800747a <UART_SetConfig+0x2fe>
 80072c8:	2302      	movs	r3, #2
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e0d4      	b.n	800747a <UART_SetConfig+0x2fe>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e0d0      	b.n	800747a <UART_SetConfig+0x2fe>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e0cc      	b.n	800747a <UART_SetConfig+0x2fe>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e6:	e0c8      	b.n	800747a <UART_SetConfig+0x2fe>
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <UART_SetConfig+0x2ec>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d125      	bne.n	800733e <UART_SetConfig+0x1c2>
 80072f2:	4b5b      	ldr	r3, [pc, #364]	; (8007460 <UART_SetConfig+0x2e4>)
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072fc:	2b30      	cmp	r3, #48	; 0x30
 80072fe:	d016      	beq.n	800732e <UART_SetConfig+0x1b2>
 8007300:	2b30      	cmp	r3, #48	; 0x30
 8007302:	d818      	bhi.n	8007336 <UART_SetConfig+0x1ba>
 8007304:	2b20      	cmp	r3, #32
 8007306:	d00a      	beq.n	800731e <UART_SetConfig+0x1a2>
 8007308:	2b20      	cmp	r3, #32
 800730a:	d814      	bhi.n	8007336 <UART_SetConfig+0x1ba>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <UART_SetConfig+0x19a>
 8007310:	2b10      	cmp	r3, #16
 8007312:	d008      	beq.n	8007326 <UART_SetConfig+0x1aa>
 8007314:	e00f      	b.n	8007336 <UART_SetConfig+0x1ba>
 8007316:	2300      	movs	r3, #0
 8007318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731c:	e0ad      	b.n	800747a <UART_SetConfig+0x2fe>
 800731e:	2302      	movs	r3, #2
 8007320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007324:	e0a9      	b.n	800747a <UART_SetConfig+0x2fe>
 8007326:	2304      	movs	r3, #4
 8007328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732c:	e0a5      	b.n	800747a <UART_SetConfig+0x2fe>
 800732e:	2308      	movs	r3, #8
 8007330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007334:	e0a1      	b.n	800747a <UART_SetConfig+0x2fe>
 8007336:	2310      	movs	r3, #16
 8007338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733c:	e09d      	b.n	800747a <UART_SetConfig+0x2fe>
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4a      	ldr	r2, [pc, #296]	; (800746c <UART_SetConfig+0x2f0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d125      	bne.n	8007394 <UART_SetConfig+0x218>
 8007348:	4b45      	ldr	r3, [pc, #276]	; (8007460 <UART_SetConfig+0x2e4>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007352:	2bc0      	cmp	r3, #192	; 0xc0
 8007354:	d016      	beq.n	8007384 <UART_SetConfig+0x208>
 8007356:	2bc0      	cmp	r3, #192	; 0xc0
 8007358:	d818      	bhi.n	800738c <UART_SetConfig+0x210>
 800735a:	2b80      	cmp	r3, #128	; 0x80
 800735c:	d00a      	beq.n	8007374 <UART_SetConfig+0x1f8>
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d814      	bhi.n	800738c <UART_SetConfig+0x210>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <UART_SetConfig+0x1f0>
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d008      	beq.n	800737c <UART_SetConfig+0x200>
 800736a:	e00f      	b.n	800738c <UART_SetConfig+0x210>
 800736c:	2300      	movs	r3, #0
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007372:	e082      	b.n	800747a <UART_SetConfig+0x2fe>
 8007374:	2302      	movs	r3, #2
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e07e      	b.n	800747a <UART_SetConfig+0x2fe>
 800737c:	2304      	movs	r3, #4
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e07a      	b.n	800747a <UART_SetConfig+0x2fe>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738a:	e076      	b.n	800747a <UART_SetConfig+0x2fe>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007392:	e072      	b.n	800747a <UART_SetConfig+0x2fe>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a35      	ldr	r2, [pc, #212]	; (8007470 <UART_SetConfig+0x2f4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d12a      	bne.n	80073f4 <UART_SetConfig+0x278>
 800739e:	4b30      	ldr	r3, [pc, #192]	; (8007460 <UART_SetConfig+0x2e4>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ac:	d01a      	beq.n	80073e4 <UART_SetConfig+0x268>
 80073ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b2:	d81b      	bhi.n	80073ec <UART_SetConfig+0x270>
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b8:	d00c      	beq.n	80073d4 <UART_SetConfig+0x258>
 80073ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073be:	d815      	bhi.n	80073ec <UART_SetConfig+0x270>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <UART_SetConfig+0x250>
 80073c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c8:	d008      	beq.n	80073dc <UART_SetConfig+0x260>
 80073ca:	e00f      	b.n	80073ec <UART_SetConfig+0x270>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d2:	e052      	b.n	800747a <UART_SetConfig+0x2fe>
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073da:	e04e      	b.n	800747a <UART_SetConfig+0x2fe>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e2:	e04a      	b.n	800747a <UART_SetConfig+0x2fe>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ea:	e046      	b.n	800747a <UART_SetConfig+0x2fe>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f2:	e042      	b.n	800747a <UART_SetConfig+0x2fe>
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a17      	ldr	r2, [pc, #92]	; (8007458 <UART_SetConfig+0x2dc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d13a      	bne.n	8007474 <UART_SetConfig+0x2f8>
 80073fe:	4b18      	ldr	r3, [pc, #96]	; (8007460 <UART_SetConfig+0x2e4>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800740c:	d01a      	beq.n	8007444 <UART_SetConfig+0x2c8>
 800740e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007412:	d81b      	bhi.n	800744c <UART_SetConfig+0x2d0>
 8007414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007418:	d00c      	beq.n	8007434 <UART_SetConfig+0x2b8>
 800741a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741e:	d815      	bhi.n	800744c <UART_SetConfig+0x2d0>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <UART_SetConfig+0x2b0>
 8007424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007428:	d008      	beq.n	800743c <UART_SetConfig+0x2c0>
 800742a:	e00f      	b.n	800744c <UART_SetConfig+0x2d0>
 800742c:	2300      	movs	r3, #0
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007432:	e022      	b.n	800747a <UART_SetConfig+0x2fe>
 8007434:	2302      	movs	r3, #2
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800743a:	e01e      	b.n	800747a <UART_SetConfig+0x2fe>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007442:	e01a      	b.n	800747a <UART_SetConfig+0x2fe>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744a:	e016      	b.n	800747a <UART_SetConfig+0x2fe>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007452:	e012      	b.n	800747a <UART_SetConfig+0x2fe>
 8007454:	cfff69f3 	.word	0xcfff69f3
 8007458:	40008000 	.word	0x40008000
 800745c:	40013800 	.word	0x40013800
 8007460:	40021000 	.word	0x40021000
 8007464:	40004400 	.word	0x40004400
 8007468:	40004800 	.word	0x40004800
 800746c:	40004c00 	.word	0x40004c00
 8007470:	40005000 	.word	0x40005000
 8007474:	2310      	movs	r3, #16
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4aae      	ldr	r2, [pc, #696]	; (8007738 <UART_SetConfig+0x5bc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	f040 8097 	bne.w	80075b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800748a:	2b08      	cmp	r3, #8
 800748c:	d823      	bhi.n	80074d6 <UART_SetConfig+0x35a>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <UART_SetConfig+0x318>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074d7 	.word	0x080074d7
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074d7 	.word	0x080074d7
 80074a4:	080074c7 	.word	0x080074c7
 80074a8:	080074d7 	.word	0x080074d7
 80074ac:	080074d7 	.word	0x080074d7
 80074b0:	080074d7 	.word	0x080074d7
 80074b4:	080074cf 	.word	0x080074cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b8:	f7fd fe54 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 80074bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074be:	e010      	b.n	80074e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c0:	4b9e      	ldr	r3, [pc, #632]	; (800773c <UART_SetConfig+0x5c0>)
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074c4:	e00d      	b.n	80074e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c6:	f7fd fddf 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 80074ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074cc:	e009      	b.n	80074e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074d4:	e005      	b.n	80074e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8130 	beq.w	800774a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	4a94      	ldr	r2, [pc, #592]	; (8007740 <UART_SetConfig+0x5c4>)
 80074f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	429a      	cmp	r2, r3
 800750c:	d305      	bcc.n	800751a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	429a      	cmp	r2, r3
 8007518:	d903      	bls.n	8007522 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007520:	e113      	b.n	800774a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	2200      	movs	r2, #0
 8007526:	60bb      	str	r3, [r7, #8]
 8007528:	60fa      	str	r2, [r7, #12]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	4a84      	ldr	r2, [pc, #528]	; (8007740 <UART_SetConfig+0x5c4>)
 8007530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007534:	b29b      	uxth	r3, r3
 8007536:	2200      	movs	r2, #0
 8007538:	603b      	str	r3, [r7, #0]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007544:	f7f9 fb94 	bl	8000c70 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4610      	mov	r0, r2
 800754e:	4619      	mov	r1, r3
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	020b      	lsls	r3, r1, #8
 800755a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800755e:	0202      	lsls	r2, r0, #8
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	6849      	ldr	r1, [r1, #4]
 8007564:	0849      	lsrs	r1, r1, #1
 8007566:	2000      	movs	r0, #0
 8007568:	460c      	mov	r4, r1
 800756a:	4605      	mov	r5, r0
 800756c:	eb12 0804 	adds.w	r8, r2, r4
 8007570:	eb43 0905 	adc.w	r9, r3, r5
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	469a      	mov	sl, r3
 800757c:	4693      	mov	fp, r2
 800757e:	4652      	mov	r2, sl
 8007580:	465b      	mov	r3, fp
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 fb73 	bl	8000c70 <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4613      	mov	r3, r2
 8007590:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007598:	d308      	bcc.n	80075ac <UART_SetConfig+0x430>
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a0:	d204      	bcs.n	80075ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	e0ce      	b.n	800774a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075b2:	e0ca      	b.n	800774a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075bc:	d166      	bne.n	800768c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80075be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d827      	bhi.n	8007616 <UART_SetConfig+0x49a>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x450>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	080075f9 	.word	0x080075f9
 80075d4:	08007601 	.word	0x08007601
 80075d8:	08007617 	.word	0x08007617
 80075dc:	08007607 	.word	0x08007607
 80075e0:	08007617 	.word	0x08007617
 80075e4:	08007617 	.word	0x08007617
 80075e8:	08007617 	.word	0x08007617
 80075ec:	0800760f 	.word	0x0800760f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f0:	f7fd fdb8 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 80075f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075f6:	e014      	b.n	8007622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075f8:	f7fd fdca 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 80075fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075fe:	e010      	b.n	8007622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007600:	4b4e      	ldr	r3, [pc, #312]	; (800773c <UART_SetConfig+0x5c0>)
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007604:	e00d      	b.n	8007622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007606:	f7fd fd3f 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 800760a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800760c:	e009      	b.n	8007622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007614:	e005      	b.n	8007622 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8090 	beq.w	800774a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	4a44      	ldr	r2, [pc, #272]	; (8007740 <UART_SetConfig+0x5c4>)
 8007630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007634:	461a      	mov	r2, r3
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	fbb3 f3f2 	udiv	r3, r3, r2
 800763c:	005a      	lsls	r2, r3, #1
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	441a      	add	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	2b0f      	cmp	r3, #15
 8007654:	d916      	bls.n	8007684 <UART_SetConfig+0x508>
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765c:	d212      	bcs.n	8007684 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f023 030f 	bic.w	r3, r3, #15
 8007666:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	b29a      	uxth	r2, r3
 8007674:	8bfb      	ldrh	r3, [r7, #30]
 8007676:	4313      	orrs	r3, r2
 8007678:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	8bfa      	ldrh	r2, [r7, #30]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	e062      	b.n	800774a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800768a:	e05e      	b.n	800774a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800768c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007690:	2b08      	cmp	r3, #8
 8007692:	d828      	bhi.n	80076e6 <UART_SetConfig+0x56a>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <UART_SetConfig+0x520>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	080076e7 	.word	0x080076e7
 80076ac:	080076d7 	.word	0x080076d7
 80076b0:	080076e7 	.word	0x080076e7
 80076b4:	080076e7 	.word	0x080076e7
 80076b8:	080076e7 	.word	0x080076e7
 80076bc:	080076df 	.word	0x080076df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c0:	f7fd fd50 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 80076c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076c6:	e014      	b.n	80076f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c8:	f7fd fd62 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 80076cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ce:	e010      	b.n	80076f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <UART_SetConfig+0x5c0>)
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076d4:	e00d      	b.n	80076f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d6:	f7fd fcd7 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 80076da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076dc:	e009      	b.n	80076f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076e4:	e005      	b.n	80076f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076f0:	bf00      	nop
    }

    if (pclk != 0U)
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d028      	beq.n	800774a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	4a10      	ldr	r2, [pc, #64]	; (8007740 <UART_SetConfig+0x5c4>)
 80076fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007702:	461a      	mov	r2, r3
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	fbb3 f2f2 	udiv	r2, r3, r2
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	441a      	add	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	2b0f      	cmp	r3, #15
 8007720:	d910      	bls.n	8007744 <UART_SetConfig+0x5c8>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007728:	d20c      	bcs.n	8007744 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	b29a      	uxth	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	e009      	b.n	800774a <UART_SetConfig+0x5ce>
 8007736:	bf00      	nop
 8007738:	40008000 	.word	0x40008000
 800773c:	00f42400 	.word	0x00f42400
 8007740:	080085f4 	.word	0x080085f4
      }
      else
      {
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2201      	movs	r2, #1
 800774e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2201      	movs	r2, #1
 8007756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2200      	movs	r2, #0
 800775e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2200      	movs	r2, #0
 8007764:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007766:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800776a:	4618      	mov	r0, r3
 800776c:	3730      	adds	r7, #48	; 0x30
 800776e:	46bd      	mov	sp, r7
 8007770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01a      	beq.n	800788a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007872:	d10a      	bne.n	800788a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  }
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b098      	sub	sp, #96	; 0x60
 80078bc:	af02      	add	r7, sp, #8
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078c8:	f7fa fe20 	bl	800250c <HAL_GetTick>
 80078cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d12f      	bne.n	800793c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e4:	2200      	movs	r2, #0
 80078e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f88e 	bl	8007a0c <UART_WaitOnFlagUntilTimeout>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d022      	beq.n	800793c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007914:	647b      	str	r3, [r7, #68]	; 0x44
 8007916:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800791a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e6      	bne.n	80078f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e063      	b.n	8007a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b04      	cmp	r3, #4
 8007948:	d149      	bne.n	80079de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800794a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007952:	2200      	movs	r2, #0
 8007954:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f857 	bl	8007a0c <UART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d03c      	beq.n	80079de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	623b      	str	r3, [r7, #32]
   return(result);
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	633b      	str	r3, [r7, #48]	; 0x30
 8007984:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b6:	61fa      	str	r2, [r7, #28]
 80079b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	69b9      	ldr	r1, [r7, #24]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	617b      	str	r3, [r7, #20]
   return(result);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e012      	b.n	8007a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3758      	adds	r7, #88	; 0x58
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a1c:	e04f      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d04b      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a26:	f7fa fd71 	bl	800250c <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e04e      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d037      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b80      	cmp	r3, #128	; 0x80
 8007a52:	d034      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d031      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d110      	bne.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f838 	bl	8007ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2208      	movs	r2, #8
 8007a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e029      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a98:	d111      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f81e 	bl	8007ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e00f      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d0a0      	beq.n	8007a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b095      	sub	sp, #84	; 0x54
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e3      	bne.n	8007b20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d118      	bne.n	8007b92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6979      	ldr	r1, [r7, #20]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e6      	bne.n	8007b60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007ba6:	bf00      	nop
 8007ba8:	3754      	adds	r7, #84	; 0x54
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e027      	b.n	8007c18 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2224      	movs	r2, #36	; 0x24
 8007bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0201 	bic.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e02d      	b.n	8007c98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2224      	movs	r2, #36	; 0x24
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0201 	bic.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f84f 	bl	8007d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e02d      	b.n	8007d14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	; 0x24
 8007cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f811 	bl	8007d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d108      	bne.n	8007d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d3c:	e031      	b.n	8007da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d3e:	2308      	movs	r3, #8
 8007d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d42:	2308      	movs	r3, #8
 8007d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	0e5b      	lsrs	r3, r3, #25
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	0f5b      	lsrs	r3, r3, #29
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	7b3a      	ldrb	r2, [r7, #12]
 8007d6a:	4911      	ldr	r1, [pc, #68]	; (8007db0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d6c:	5c8a      	ldrb	r2, [r1, r2]
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d72:	7b3a      	ldrb	r2, [r7, #12]
 8007d74:	490f      	ldr	r1, [pc, #60]	; (8007db4 <UARTEx_SetNbDataToProcess+0x98>)
 8007d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	7b7a      	ldrb	r2, [r7, #13]
 8007d88:	4909      	ldr	r1, [pc, #36]	; (8007db0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d8a:	5c8a      	ldrb	r2, [r1, r2]
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d90:	7b7a      	ldrb	r2, [r7, #13]
 8007d92:	4908      	ldr	r1, [pc, #32]	; (8007db4 <UARTEx_SetNbDataToProcess+0x98>)
 8007d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	0800860c 	.word	0x0800860c
 8007db4:	08008614 	.word	0x08008614

08007db8 <memset>:
 8007db8:	4402      	add	r2, r0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <memset+0xa>
 8007dc0:	4770      	bx	lr
 8007dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc6:	e7f9      	b.n	8007dbc <memset+0x4>

08007dc8 <__errno>:
 8007dc8:	4b01      	ldr	r3, [pc, #4]	; (8007dd0 <__errno+0x8>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000060 	.word	0x20000060

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4d0d      	ldr	r5, [pc, #52]	; (8007e0c <__libc_init_array+0x38>)
 8007dd8:	4c0d      	ldr	r4, [pc, #52]	; (8007e10 <__libc_init_array+0x3c>)
 8007dda:	1b64      	subs	r4, r4, r5
 8007ddc:	10a4      	asrs	r4, r4, #2
 8007dde:	2600      	movs	r6, #0
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	4d0b      	ldr	r5, [pc, #44]	; (8007e14 <__libc_init_array+0x40>)
 8007de6:	4c0c      	ldr	r4, [pc, #48]	; (8007e18 <__libc_init_array+0x44>)
 8007de8:	f000 fbda 	bl	80085a0 <_init>
 8007dec:	1b64      	subs	r4, r4, r5
 8007dee:	10a4      	asrs	r4, r4, #2
 8007df0:	2600      	movs	r6, #0
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	0800863c 	.word	0x0800863c
 8007e10:	0800863c 	.word	0x0800863c
 8007e14:	0800863c 	.word	0x0800863c
 8007e18:	08008640 	.word	0x08008640

08007e1c <powf>:
 8007e1c:	b508      	push	{r3, lr}
 8007e1e:	ed2d 8b04 	vpush	{d8-d9}
 8007e22:	eeb0 8a60 	vmov.f32	s16, s1
 8007e26:	eeb0 9a40 	vmov.f32	s18, s0
 8007e2a:	f000 f85b 	bl	8007ee4 <__ieee754_powf>
 8007e2e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e36:	eef0 8a40 	vmov.f32	s17, s0
 8007e3a:	d63e      	bvs.n	8007eba <powf+0x9e>
 8007e3c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e44:	d112      	bne.n	8007e6c <powf+0x50>
 8007e46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	d039      	beq.n	8007ec4 <powf+0xa8>
 8007e50:	eeb0 0a48 	vmov.f32	s0, s16
 8007e54:	f000 f839 	bl	8007eca <finitef>
 8007e58:	b378      	cbz	r0, 8007eba <powf+0x9e>
 8007e5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e62:	d52a      	bpl.n	8007eba <powf+0x9e>
 8007e64:	f7ff ffb0 	bl	8007dc8 <__errno>
 8007e68:	2322      	movs	r3, #34	; 0x22
 8007e6a:	e014      	b.n	8007e96 <powf+0x7a>
 8007e6c:	f000 f82d 	bl	8007eca <finitef>
 8007e70:	b998      	cbnz	r0, 8007e9a <powf+0x7e>
 8007e72:	eeb0 0a49 	vmov.f32	s0, s18
 8007e76:	f000 f828 	bl	8007eca <finitef>
 8007e7a:	b170      	cbz	r0, 8007e9a <powf+0x7e>
 8007e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e80:	f000 f823 	bl	8007eca <finitef>
 8007e84:	b148      	cbz	r0, 8007e9a <powf+0x7e>
 8007e86:	eef4 8a68 	vcmp.f32	s17, s17
 8007e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8e:	d7e9      	bvc.n	8007e64 <powf+0x48>
 8007e90:	f7ff ff9a 	bl	8007dc8 <__errno>
 8007e94:	2321      	movs	r3, #33	; 0x21
 8007e96:	6003      	str	r3, [r0, #0]
 8007e98:	e00f      	b.n	8007eba <powf+0x9e>
 8007e9a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea2:	d10a      	bne.n	8007eba <powf+0x9e>
 8007ea4:	eeb0 0a49 	vmov.f32	s0, s18
 8007ea8:	f000 f80f 	bl	8007eca <finitef>
 8007eac:	b128      	cbz	r0, 8007eba <powf+0x9e>
 8007eae:	eeb0 0a48 	vmov.f32	s0, s16
 8007eb2:	f000 f80a 	bl	8007eca <finitef>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d1d4      	bne.n	8007e64 <powf+0x48>
 8007eba:	eeb0 0a68 	vmov.f32	s0, s17
 8007ebe:	ecbd 8b04 	vpop	{d8-d9}
 8007ec2:	bd08      	pop	{r3, pc}
 8007ec4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007ec8:	e7f7      	b.n	8007eba <powf+0x9e>

08007eca <finitef>:
 8007eca:	b082      	sub	sp, #8
 8007ecc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007ed0:	9801      	ldr	r0, [sp, #4]
 8007ed2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007ed6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007eda:	bfac      	ite	ge
 8007edc:	2000      	movge	r0, #0
 8007ede:	2001      	movlt	r0, #1
 8007ee0:	b002      	add	sp, #8
 8007ee2:	4770      	bx	lr

08007ee4 <__ieee754_powf>:
 8007ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	ee10 4a90 	vmov	r4, s1
 8007eec:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007ef0:	ed2d 8b02 	vpush	{d8}
 8007ef4:	ee10 7a10 	vmov	r7, s0
 8007ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8007efc:	eef0 8a60 	vmov.f32	s17, s1
 8007f00:	d10c      	bne.n	8007f1c <__ieee754_powf+0x38>
 8007f02:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8007f06:	007f      	lsls	r7, r7, #1
 8007f08:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8007f0c:	f240 8292 	bls.w	8008434 <__ieee754_powf+0x550>
 8007f10:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007f14:	ecbd 8b02 	vpop	{d8}
 8007f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8007f20:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007f24:	dcf4      	bgt.n	8007f10 <__ieee754_powf+0x2c>
 8007f26:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007f2a:	dd08      	ble.n	8007f3e <__ieee754_powf+0x5a>
 8007f2c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007f30:	d1ee      	bne.n	8007f10 <__ieee754_powf+0x2c>
 8007f32:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007f36:	0064      	lsls	r4, r4, #1
 8007f38:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007f3c:	e7e6      	b.n	8007f0c <__ieee754_powf+0x28>
 8007f3e:	2f00      	cmp	r7, #0
 8007f40:	da20      	bge.n	8007f84 <__ieee754_powf+0xa0>
 8007f42:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8007f46:	da2d      	bge.n	8007fa4 <__ieee754_powf+0xc0>
 8007f48:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007f4c:	f2c0 827b 	blt.w	8008446 <__ieee754_powf+0x562>
 8007f50:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007f54:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007f58:	fa48 f603 	asr.w	r6, r8, r3
 8007f5c:	fa06 f303 	lsl.w	r3, r6, r3
 8007f60:	4543      	cmp	r3, r8
 8007f62:	f040 8270 	bne.w	8008446 <__ieee754_powf+0x562>
 8007f66:	f006 0601 	and.w	r6, r6, #1
 8007f6a:	f1c6 0602 	rsb	r6, r6, #2
 8007f6e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007f72:	d11f      	bne.n	8007fb4 <__ieee754_powf+0xd0>
 8007f74:	2c00      	cmp	r4, #0
 8007f76:	f280 8263 	bge.w	8008440 <__ieee754_powf+0x55c>
 8007f7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007f7e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007f82:	e7c7      	b.n	8007f14 <__ieee754_powf+0x30>
 8007f84:	2600      	movs	r6, #0
 8007f86:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007f8a:	d1f0      	bne.n	8007f6e <__ieee754_powf+0x8a>
 8007f8c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007f90:	f000 8250 	beq.w	8008434 <__ieee754_powf+0x550>
 8007f94:	dd08      	ble.n	8007fa8 <__ieee754_powf+0xc4>
 8007f96:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800829c <__ieee754_powf+0x3b8>
 8007f9a:	2c00      	cmp	r4, #0
 8007f9c:	bfa8      	it	ge
 8007f9e:	eeb0 0a68 	vmovge.f32	s0, s17
 8007fa2:	e7b7      	b.n	8007f14 <__ieee754_powf+0x30>
 8007fa4:	2602      	movs	r6, #2
 8007fa6:	e7ee      	b.n	8007f86 <__ieee754_powf+0xa2>
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	f280 8246 	bge.w	800843a <__ieee754_powf+0x556>
 8007fae:	eeb1 0a68 	vneg.f32	s0, s17
 8007fb2:	e7af      	b.n	8007f14 <__ieee754_powf+0x30>
 8007fb4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007fb8:	d102      	bne.n	8007fc0 <__ieee754_powf+0xdc>
 8007fba:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007fbe:	e7a9      	b.n	8007f14 <__ieee754_powf+0x30>
 8007fc0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8007fc8:	d107      	bne.n	8007fda <__ieee754_powf+0xf6>
 8007fca:	2f00      	cmp	r7, #0
 8007fcc:	db05      	blt.n	8007fda <__ieee754_powf+0xf6>
 8007fce:	ecbd 8b02 	vpop	{d8}
 8007fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	f000 badf 	b.w	8008598 <__ieee754_sqrtf>
 8007fda:	f000 fa4d 	bl	8008478 <fabsf>
 8007fde:	b125      	cbz	r5, 8007fea <__ieee754_powf+0x106>
 8007fe0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8007fe4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007fe8:	d115      	bne.n	8008016 <__ieee754_powf+0x132>
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	bfbc      	itt	lt
 8007fee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007ff2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	da8c      	bge.n	8007f14 <__ieee754_powf+0x30>
 8007ffa:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8007ffe:	4335      	orrs	r5, r6
 8008000:	d104      	bne.n	800800c <__ieee754_powf+0x128>
 8008002:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008006:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800800a:	e783      	b.n	8007f14 <__ieee754_powf+0x30>
 800800c:	2e01      	cmp	r6, #1
 800800e:	d181      	bne.n	8007f14 <__ieee754_powf+0x30>
 8008010:	eeb1 0a40 	vneg.f32	s0, s0
 8008014:	e77e      	b.n	8007f14 <__ieee754_powf+0x30>
 8008016:	0ff8      	lsrs	r0, r7, #31
 8008018:	3801      	subs	r0, #1
 800801a:	ea56 0300 	orrs.w	r3, r6, r0
 800801e:	d104      	bne.n	800802a <__ieee754_powf+0x146>
 8008020:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008024:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008028:	e774      	b.n	8007f14 <__ieee754_powf+0x30>
 800802a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800802e:	dd73      	ble.n	8008118 <__ieee754_powf+0x234>
 8008030:	4b9b      	ldr	r3, [pc, #620]	; (80082a0 <__ieee754_powf+0x3bc>)
 8008032:	429d      	cmp	r5, r3
 8008034:	dc08      	bgt.n	8008048 <__ieee754_powf+0x164>
 8008036:	2c00      	cmp	r4, #0
 8008038:	da0b      	bge.n	8008052 <__ieee754_powf+0x16e>
 800803a:	2000      	movs	r0, #0
 800803c:	ecbd 8b02 	vpop	{d8}
 8008040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	f000 baa2 	b.w	800858c <__math_oflowf>
 8008048:	4b96      	ldr	r3, [pc, #600]	; (80082a4 <__ieee754_powf+0x3c0>)
 800804a:	429d      	cmp	r5, r3
 800804c:	dd08      	ble.n	8008060 <__ieee754_powf+0x17c>
 800804e:	2c00      	cmp	r4, #0
 8008050:	dcf3      	bgt.n	800803a <__ieee754_powf+0x156>
 8008052:	2000      	movs	r0, #0
 8008054:	ecbd 8b02 	vpop	{d8}
 8008058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800805c:	f000 ba90 	b.w	8008580 <__math_uflowf>
 8008060:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008064:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008068:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80082a8 <__ieee754_powf+0x3c4>
 800806c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008070:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008074:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008078:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800807c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008084:	eddf 7a89 	vldr	s15, [pc, #548]	; 80082ac <__ieee754_powf+0x3c8>
 8008088:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800808c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80082b0 <__ieee754_powf+0x3cc>
 8008090:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008094:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80082b4 <__ieee754_powf+0x3d0>
 8008098:	eef0 6a67 	vmov.f32	s13, s15
 800809c:	eee0 6a07 	vfma.f32	s13, s0, s14
 80080a0:	ee16 3a90 	vmov	r3, s13
 80080a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80080a8:	f023 030f 	bic.w	r3, r3, #15
 80080ac:	ee06 3a90 	vmov	s13, r3
 80080b0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80080b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080b8:	3e01      	subs	r6, #1
 80080ba:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80080be:	4306      	orrs	r6, r0
 80080c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80080c4:	f024 040f 	bic.w	r4, r4, #15
 80080c8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80080cc:	bf08      	it	eq
 80080ce:	eeb0 8a47 	vmoveq.f32	s16, s14
 80080d2:	ee07 4a10 	vmov	s14, r4
 80080d6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80080da:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80080e6:	ee07 4a10 	vmov	s14, r4
 80080ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080ee:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80080f2:	ee17 1a10 	vmov	r1, s14
 80080f6:	2900      	cmp	r1, #0
 80080f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080fc:	f340 817c 	ble.w	80083f8 <__ieee754_powf+0x514>
 8008100:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008104:	f340 80f8 	ble.w	80082f8 <__ieee754_powf+0x414>
 8008108:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800810c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008110:	bf4c      	ite	mi
 8008112:	2001      	movmi	r0, #1
 8008114:	2000      	movpl	r0, #0
 8008116:	e791      	b.n	800803c <__ieee754_powf+0x158>
 8008118:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800811c:	bf01      	itttt	eq
 800811e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80082b8 <__ieee754_powf+0x3d4>
 8008122:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008126:	f06f 0317 	mvneq.w	r3, #23
 800812a:	ee17 5a90 	vmoveq	r5, s15
 800812e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8008132:	bf18      	it	ne
 8008134:	2300      	movne	r3, #0
 8008136:	3a7f      	subs	r2, #127	; 0x7f
 8008138:	441a      	add	r2, r3
 800813a:	4b60      	ldr	r3, [pc, #384]	; (80082bc <__ieee754_powf+0x3d8>)
 800813c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8008140:	429d      	cmp	r5, r3
 8008142:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8008146:	dd06      	ble.n	8008156 <__ieee754_powf+0x272>
 8008148:	4b5d      	ldr	r3, [pc, #372]	; (80082c0 <__ieee754_powf+0x3dc>)
 800814a:	429d      	cmp	r5, r3
 800814c:	f340 80a4 	ble.w	8008298 <__ieee754_powf+0x3b4>
 8008150:	3201      	adds	r2, #1
 8008152:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008156:	2500      	movs	r5, #0
 8008158:	4b5a      	ldr	r3, [pc, #360]	; (80082c4 <__ieee754_powf+0x3e0>)
 800815a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800815e:	ee07 1a10 	vmov	s14, r1
 8008162:	edd3 5a00 	vldr	s11, [r3]
 8008166:	4b58      	ldr	r3, [pc, #352]	; (80082c8 <__ieee754_powf+0x3e4>)
 8008168:	ee75 7a87 	vadd.f32	s15, s11, s14
 800816c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008170:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008174:	1049      	asrs	r1, r1, #1
 8008176:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800817a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800817e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8008182:	ee37 6a65 	vsub.f32	s12, s14, s11
 8008186:	ee07 1a90 	vmov	s15, r1
 800818a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800818e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8008192:	ee15 7a10 	vmov	r7, s10
 8008196:	401f      	ands	r7, r3
 8008198:	ee06 7a90 	vmov	s13, r7
 800819c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80081a0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80081a4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80081a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80081ac:	eddf 5a47 	vldr	s11, [pc, #284]	; 80082cc <__ieee754_powf+0x3e8>
 80081b0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80082d0 <__ieee754_powf+0x3ec>
 80081b4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80081b8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80082d4 <__ieee754_powf+0x3f0>
 80081bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80081c0:	eddf 5a39 	vldr	s11, [pc, #228]	; 80082a8 <__ieee754_powf+0x3c4>
 80081c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80081c8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80082d8 <__ieee754_powf+0x3f4>
 80081cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80081d0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80082dc <__ieee754_powf+0x3f8>
 80081d4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80081d8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80081dc:	ee35 7a26 	vadd.f32	s14, s10, s13
 80081e0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80081e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80081e8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80081ec:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80081f0:	eef0 5a67 	vmov.f32	s11, s15
 80081f4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80081f8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80081fc:	ee15 1a90 	vmov	r1, s11
 8008200:	4019      	ands	r1, r3
 8008202:	ee05 1a90 	vmov	s11, r1
 8008206:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800820a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800820e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008212:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008216:	eee6 7a25 	vfma.f32	s15, s12, s11
 800821a:	eeb0 6a67 	vmov.f32	s12, s15
 800821e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008222:	ee16 1a10 	vmov	r1, s12
 8008226:	4019      	ands	r1, r3
 8008228:	ee07 1a10 	vmov	s14, r1
 800822c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8008230:	ee06 1a10 	vmov	s12, r1
 8008234:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008238:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80082e0 <__ieee754_powf+0x3fc>
 800823c:	4929      	ldr	r1, [pc, #164]	; (80082e4 <__ieee754_powf+0x400>)
 800823e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80082e8 <__ieee754_powf+0x404>
 8008242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008246:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80082ec <__ieee754_powf+0x408>
 800824a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800824e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008252:	ed91 7a00 	vldr	s14, [r1]
 8008256:	ee77 7a87 	vadd.f32	s15, s15, s14
 800825a:	ee07 2a10 	vmov	s14, r2
 800825e:	eef0 6a67 	vmov.f32	s13, s15
 8008262:	4a23      	ldr	r2, [pc, #140]	; (80082f0 <__ieee754_powf+0x40c>)
 8008264:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008268:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800826c:	ed92 5a00 	vldr	s10, [r2]
 8008270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008274:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008278:	ee76 6a87 	vadd.f32	s13, s13, s14
 800827c:	ee16 2a90 	vmov	r2, s13
 8008280:	4013      	ands	r3, r2
 8008282:	ee06 3a90 	vmov	s13, r3
 8008286:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800828a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800828e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8008292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008296:	e70f      	b.n	80080b8 <__ieee754_powf+0x1d4>
 8008298:	2501      	movs	r5, #1
 800829a:	e75d      	b.n	8008158 <__ieee754_powf+0x274>
 800829c:	00000000 	.word	0x00000000
 80082a0:	3f7ffff3 	.word	0x3f7ffff3
 80082a4:	3f800007 	.word	0x3f800007
 80082a8:	3eaaaaab 	.word	0x3eaaaaab
 80082ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80082b0:	36eca570 	.word	0x36eca570
 80082b4:	3fb8aa00 	.word	0x3fb8aa00
 80082b8:	4b800000 	.word	0x4b800000
 80082bc:	001cc471 	.word	0x001cc471
 80082c0:	005db3d6 	.word	0x005db3d6
 80082c4:	0800861c 	.word	0x0800861c
 80082c8:	fffff000 	.word	0xfffff000
 80082cc:	3e6c3255 	.word	0x3e6c3255
 80082d0:	3e53f142 	.word	0x3e53f142
 80082d4:	3e8ba305 	.word	0x3e8ba305
 80082d8:	3edb6db7 	.word	0x3edb6db7
 80082dc:	3f19999a 	.word	0x3f19999a
 80082e0:	3f76384f 	.word	0x3f76384f
 80082e4:	0800862c 	.word	0x0800862c
 80082e8:	3f763800 	.word	0x3f763800
 80082ec:	369dc3a0 	.word	0x369dc3a0
 80082f0:	08008624 	.word	0x08008624
 80082f4:	3338aa3c 	.word	0x3338aa3c
 80082f8:	f040 8093 	bne.w	8008422 <__ieee754_powf+0x53e>
 80082fc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80082f4 <__ieee754_powf+0x410>
 8008300:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008304:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008308:	eef4 6ac7 	vcmpe.f32	s13, s14
 800830c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008310:	f73f aefa 	bgt.w	8008108 <__ieee754_powf+0x224>
 8008314:	15db      	asrs	r3, r3, #23
 8008316:	3b7e      	subs	r3, #126	; 0x7e
 8008318:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800831c:	4118      	asrs	r0, r3
 800831e:	4408      	add	r0, r1
 8008320:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008324:	4a49      	ldr	r2, [pc, #292]	; (800844c <__ieee754_powf+0x568>)
 8008326:	3b7f      	subs	r3, #127	; 0x7f
 8008328:	411a      	asrs	r2, r3
 800832a:	4002      	ands	r2, r0
 800832c:	ee07 2a10 	vmov	s14, r2
 8008330:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008334:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008338:	f1c3 0317 	rsb	r3, r3, #23
 800833c:	4118      	asrs	r0, r3
 800833e:	2900      	cmp	r1, #0
 8008340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008344:	bfb8      	it	lt
 8008346:	4240      	neglt	r0, r0
 8008348:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800834c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8008450 <__ieee754_powf+0x56c>
 8008350:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008454 <__ieee754_powf+0x570>
 8008354:	ee17 3a10 	vmov	r3, s14
 8008358:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800835c:	f023 030f 	bic.w	r3, r3, #15
 8008360:	ee07 3a10 	vmov	s14, r3
 8008364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008368:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800836c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008370:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008458 <__ieee754_powf+0x574>
 8008374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008378:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800837c:	eef0 6a67 	vmov.f32	s13, s15
 8008380:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008384:	eef0 5a66 	vmov.f32	s11, s13
 8008388:	eee7 5a46 	vfms.f32	s11, s14, s12
 800838c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008390:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008394:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800845c <__ieee754_powf+0x578>
 8008398:	eddf 5a31 	vldr	s11, [pc, #196]	; 8008460 <__ieee754_powf+0x57c>
 800839c:	eea7 6a25 	vfma.f32	s12, s14, s11
 80083a0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8008464 <__ieee754_powf+0x580>
 80083a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80083a8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8008468 <__ieee754_powf+0x584>
 80083ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 80083b0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800846c <__ieee754_powf+0x588>
 80083b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80083b8:	eeb0 6a66 	vmov.f32	s12, s13
 80083bc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80083c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80083c4:	ee66 5a86 	vmul.f32	s11, s13, s12
 80083c8:	ee36 6a47 	vsub.f32	s12, s12, s14
 80083cc:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80083d0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80083d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80083e0:	ee10 3a10 	vmov	r3, s0
 80083e4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80083e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ec:	da1f      	bge.n	800842e <__ieee754_powf+0x54a>
 80083ee:	f000 f84b 	bl	8008488 <scalbnf>
 80083f2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80083f6:	e58d      	b.n	8007f14 <__ieee754_powf+0x30>
 80083f8:	4a1d      	ldr	r2, [pc, #116]	; (8008470 <__ieee754_powf+0x58c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	dd07      	ble.n	800840e <__ieee754_powf+0x52a>
 80083fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008406:	bf4c      	ite	mi
 8008408:	2001      	movmi	r0, #1
 800840a:	2000      	movpl	r0, #0
 800840c:	e622      	b.n	8008054 <__ieee754_powf+0x170>
 800840e:	d108      	bne.n	8008422 <__ieee754_powf+0x53e>
 8008410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008414:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841c:	f6ff af7a 	blt.w	8008314 <__ieee754_powf+0x430>
 8008420:	e7ed      	b.n	80083fe <__ieee754_powf+0x51a>
 8008422:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008426:	f73f af75 	bgt.w	8008314 <__ieee754_powf+0x430>
 800842a:	2000      	movs	r0, #0
 800842c:	e78c      	b.n	8008348 <__ieee754_powf+0x464>
 800842e:	ee00 3a10 	vmov	s0, r3
 8008432:	e7de      	b.n	80083f2 <__ieee754_powf+0x50e>
 8008434:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008438:	e56c      	b.n	8007f14 <__ieee754_powf+0x30>
 800843a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008474 <__ieee754_powf+0x590>
 800843e:	e569      	b.n	8007f14 <__ieee754_powf+0x30>
 8008440:	eeb0 0a48 	vmov.f32	s0, s16
 8008444:	e566      	b.n	8007f14 <__ieee754_powf+0x30>
 8008446:	2600      	movs	r6, #0
 8008448:	e591      	b.n	8007f6e <__ieee754_powf+0x8a>
 800844a:	bf00      	nop
 800844c:	ff800000 	.word	0xff800000
 8008450:	3f317218 	.word	0x3f317218
 8008454:	3f317200 	.word	0x3f317200
 8008458:	35bfbe8c 	.word	0x35bfbe8c
 800845c:	b5ddea0e 	.word	0xb5ddea0e
 8008460:	3331bb4c 	.word	0x3331bb4c
 8008464:	388ab355 	.word	0x388ab355
 8008468:	bb360b61 	.word	0xbb360b61
 800846c:	3e2aaaab 	.word	0x3e2aaaab
 8008470:	43160000 	.word	0x43160000
 8008474:	00000000 	.word	0x00000000

08008478 <fabsf>:
 8008478:	ee10 3a10 	vmov	r3, s0
 800847c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008480:	ee00 3a10 	vmov	s0, r3
 8008484:	4770      	bx	lr
	...

08008488 <scalbnf>:
 8008488:	ee10 3a10 	vmov	r3, s0
 800848c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008490:	d02b      	beq.n	80084ea <scalbnf+0x62>
 8008492:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008496:	d302      	bcc.n	800849e <scalbnf+0x16>
 8008498:	ee30 0a00 	vadd.f32	s0, s0, s0
 800849c:	4770      	bx	lr
 800849e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80084a2:	d123      	bne.n	80084ec <scalbnf+0x64>
 80084a4:	4b24      	ldr	r3, [pc, #144]	; (8008538 <scalbnf+0xb0>)
 80084a6:	eddf 7a25 	vldr	s15, [pc, #148]	; 800853c <scalbnf+0xb4>
 80084aa:	4298      	cmp	r0, r3
 80084ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80084b0:	db17      	blt.n	80084e2 <scalbnf+0x5a>
 80084b2:	ee10 3a10 	vmov	r3, s0
 80084b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80084ba:	3a19      	subs	r2, #25
 80084bc:	f24c 3150 	movw	r1, #50000	; 0xc350
 80084c0:	4288      	cmp	r0, r1
 80084c2:	dd15      	ble.n	80084f0 <scalbnf+0x68>
 80084c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008540 <scalbnf+0xb8>
 80084c8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008544 <scalbnf+0xbc>
 80084cc:	ee10 3a10 	vmov	r3, s0
 80084d0:	eeb0 7a67 	vmov.f32	s14, s15
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfb8      	it	lt
 80084d8:	eef0 7a66 	vmovlt.f32	s15, s13
 80084dc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80084e0:	4770      	bx	lr
 80084e2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008548 <scalbnf+0xc0>
 80084e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80084ea:	4770      	bx	lr
 80084ec:	0dd2      	lsrs	r2, r2, #23
 80084ee:	e7e5      	b.n	80084bc <scalbnf+0x34>
 80084f0:	4410      	add	r0, r2
 80084f2:	28fe      	cmp	r0, #254	; 0xfe
 80084f4:	dce6      	bgt.n	80084c4 <scalbnf+0x3c>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	dd06      	ble.n	8008508 <scalbnf+0x80>
 80084fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084fe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008502:	ee00 3a10 	vmov	s0, r3
 8008506:	4770      	bx	lr
 8008508:	f110 0f16 	cmn.w	r0, #22
 800850c:	da09      	bge.n	8008522 <scalbnf+0x9a>
 800850e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008548 <scalbnf+0xc0>
 8008512:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800854c <scalbnf+0xc4>
 8008516:	ee10 3a10 	vmov	r3, s0
 800851a:	eeb0 7a67 	vmov.f32	s14, s15
 800851e:	2b00      	cmp	r3, #0
 8008520:	e7d9      	b.n	80084d6 <scalbnf+0x4e>
 8008522:	3019      	adds	r0, #25
 8008524:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008528:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800852c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008550 <scalbnf+0xc8>
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	e7d7      	b.n	80084e6 <scalbnf+0x5e>
 8008536:	bf00      	nop
 8008538:	ffff3cb0 	.word	0xffff3cb0
 800853c:	4c000000 	.word	0x4c000000
 8008540:	7149f2ca 	.word	0x7149f2ca
 8008544:	f149f2ca 	.word	0xf149f2ca
 8008548:	0da24260 	.word	0x0da24260
 800854c:	8da24260 	.word	0x8da24260
 8008550:	33000000 	.word	0x33000000

08008554 <with_errnof>:
 8008554:	b513      	push	{r0, r1, r4, lr}
 8008556:	4604      	mov	r4, r0
 8008558:	ed8d 0a01 	vstr	s0, [sp, #4]
 800855c:	f7ff fc34 	bl	8007dc8 <__errno>
 8008560:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	b002      	add	sp, #8
 8008568:	bd10      	pop	{r4, pc}

0800856a <xflowf>:
 800856a:	b130      	cbz	r0, 800857a <xflowf+0x10>
 800856c:	eef1 7a40 	vneg.f32	s15, s0
 8008570:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008574:	2022      	movs	r0, #34	; 0x22
 8008576:	f7ff bfed 	b.w	8008554 <with_errnof>
 800857a:	eef0 7a40 	vmov.f32	s15, s0
 800857e:	e7f7      	b.n	8008570 <xflowf+0x6>

08008580 <__math_uflowf>:
 8008580:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008588 <__math_uflowf+0x8>
 8008584:	f7ff bff1 	b.w	800856a <xflowf>
 8008588:	10000000 	.word	0x10000000

0800858c <__math_oflowf>:
 800858c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008594 <__math_oflowf+0x8>
 8008590:	f7ff bfeb 	b.w	800856a <xflowf>
 8008594:	70000000 	.word	0x70000000

08008598 <__ieee754_sqrtf>:
 8008598:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800859c:	4770      	bx	lr
	...

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
