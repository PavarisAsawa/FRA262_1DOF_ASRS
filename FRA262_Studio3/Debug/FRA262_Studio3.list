
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb44  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800cd1c  0800cd1c  0001cd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdbc  0800cdbc  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc4  0800cdc4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800cdcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  200002d0  0800d098  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014fc  0800d098  000214fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000201cf  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f1f  00000000  00000000  0004050e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  00044430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001296  00000000  00000000  00045be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a168  00000000  00000000  00046e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e37b  00000000  00000000  00070fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001152a2  00000000  00000000  0008f361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ae8  00000000  00000000  001a4604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001ab0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002d0 	.word	0x200002d0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cd04 	.word	0x0800cd04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002d4 	.word	0x200002d4
 8000214:	0800cd04 	.word	0x0800cd04

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	; 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b970 	b.w	80010b8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9e08      	ldr	r6, [sp, #32]
 8000df6:	460d      	mov	r5, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	460f      	mov	r7, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4694      	mov	ip, r2
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0xe2>
 8000e06:	fab2 f382 	clz	r3, r2
 8000e0a:	b143      	cbz	r3, 8000e1e <__udivmoddi4+0x2e>
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	f1c3 0220 	rsb	r2, r3, #32
 8000e14:	409f      	lsls	r7, r3
 8000e16:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e22:	fa1f f58c 	uxth.w	r5, ip
 8000e26:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2a:	0c22      	lsrs	r2, r4, #16
 8000e2c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e30:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e34:	fb01 f005 	mul.w	r0, r1, r5
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e44:	f080 811c 	bcs.w	8001080 <__udivmoddi4+0x290>
 8000e48:	4290      	cmp	r0, r2
 8000e4a:	f240 8119 	bls.w	8001080 <__udivmoddi4+0x290>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4462      	add	r2, ip
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	b2a4      	uxth	r4, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e62:	fb00 f505 	mul.w	r5, r0, r5
 8000e66:	42a5      	cmp	r5, r4
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x90>
 8000e6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e72:	f080 8107 	bcs.w	8001084 <__udivmoddi4+0x294>
 8000e76:	42a5      	cmp	r5, r4
 8000e78:	f240 8104 	bls.w	8001084 <__udivmoddi4+0x294>
 8000e7c:	4464      	add	r4, ip
 8000e7e:	3802      	subs	r0, #2
 8000e80:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11e      	cbz	r6, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40dc      	lsrs	r4, r3
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e9c6 4300 	strd	r4, r3, [r6]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0xbc>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	f000 80ed 	beq.w	800107a <__udivmoddi4+0x28a>
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eac:	fab3 f183 	clz	r1, r3
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d149      	bne.n	8000f48 <__udivmoddi4+0x158>
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	d302      	bcc.n	8000ebe <__udivmoddi4+0xce>
 8000eb8:	4282      	cmp	r2, r0
 8000eba:	f200 80f8 	bhi.w	80010ae <__udivmoddi4+0x2be>
 8000ebe:	1a84      	subs	r4, r0, r2
 8000ec0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	4617      	mov	r7, r2
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d0e2      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed0:	e7df      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ed2:	b902      	cbnz	r2, 8000ed6 <__udivmoddi4+0xe6>
 8000ed4:	deff      	udf	#255	; 0xff
 8000ed6:	fab2 f382 	clz	r3, r2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 8090 	bne.w	8001000 <__udivmoddi4+0x210>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee6:	fa1f fe8c 	uxth.w	lr, ip
 8000eea:	2101      	movs	r1, #1
 8000eec:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef0:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef4:	0c22      	lsrs	r2, r4, #16
 8000ef6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efa:	fb0e f005 	mul.w	r0, lr, r5
 8000efe:	4290      	cmp	r0, r2
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x124>
 8000f02:	eb1c 0202 	adds.w	r2, ip, r2
 8000f06:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0a:	d202      	bcs.n	8000f12 <__udivmoddi4+0x122>
 8000f0c:	4290      	cmp	r0, r2
 8000f0e:	f200 80cb 	bhi.w	80010a8 <__udivmoddi4+0x2b8>
 8000f12:	4645      	mov	r5, r8
 8000f14:	1a12      	subs	r2, r2, r0
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f1c:	fb07 2210 	mls	r2, r7, r0, r2
 8000f20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f24:	fb0e fe00 	mul.w	lr, lr, r0
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x14e>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f34:	d202      	bcs.n	8000f3c <__udivmoddi4+0x14c>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	f200 80bb 	bhi.w	80010b2 <__udivmoddi4+0x2c2>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	eba4 040e 	sub.w	r4, r4, lr
 8000f42:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f46:	e79f      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f48:	f1c1 0720 	rsb	r7, r1, #32
 8000f4c:	408b      	lsls	r3, r1
 8000f4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f56:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f5e:	40fd      	lsrs	r5, r7
 8000f60:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f64:	4323      	orrs	r3, r4
 8000f66:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6a:	fa1f fe8c 	uxth.w	lr, ip
 8000f6e:	fb09 5518 	mls	r5, r9, r8, r5
 8000f72:	0c1c      	lsrs	r4, r3, #16
 8000f74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f78:	fb08 f50e 	mul.w	r5, r8, lr
 8000f7c:	42a5      	cmp	r5, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	fa00 f001 	lsl.w	r0, r0, r1
 8000f86:	d90b      	bls.n	8000fa0 <__udivmoddi4+0x1b0>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f90:	f080 8088 	bcs.w	80010a4 <__udivmoddi4+0x2b4>
 8000f94:	42a5      	cmp	r5, r4
 8000f96:	f240 8085 	bls.w	80010a4 <__udivmoddi4+0x2b4>
 8000f9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9e:	4464      	add	r4, ip
 8000fa0:	1b64      	subs	r4, r4, r5
 8000fa2:	b29d      	uxth	r5, r3
 8000fa4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb4:	45a6      	cmp	lr, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x1da>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc0:	d26c      	bcs.n	800109c <__udivmoddi4+0x2ac>
 8000fc2:	45a6      	cmp	lr, r4
 8000fc4:	d96a      	bls.n	800109c <__udivmoddi4+0x2ac>
 8000fc6:	3b02      	subs	r3, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fce:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd2:	eba4 040e 	sub.w	r4, r4, lr
 8000fd6:	42ac      	cmp	r4, r5
 8000fd8:	46c8      	mov	r8, r9
 8000fda:	46ae      	mov	lr, r5
 8000fdc:	d356      	bcc.n	800108c <__udivmoddi4+0x29c>
 8000fde:	d053      	beq.n	8001088 <__udivmoddi4+0x298>
 8000fe0:	b156      	cbz	r6, 8000ff8 <__udivmoddi4+0x208>
 8000fe2:	ebb0 0208 	subs.w	r2, r0, r8
 8000fe6:	eb64 040e 	sbc.w	r4, r4, lr
 8000fea:	fa04 f707 	lsl.w	r7, r4, r7
 8000fee:	40ca      	lsrs	r2, r1
 8000ff0:	40cc      	lsrs	r4, r1
 8000ff2:	4317      	orrs	r7, r2
 8000ff4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001000:	f1c3 0120 	rsb	r1, r3, #32
 8001004:	fa02 fc03 	lsl.w	ip, r2, r3
 8001008:	fa20 f201 	lsr.w	r2, r0, r1
 800100c:	fa25 f101 	lsr.w	r1, r5, r1
 8001010:	409d      	lsls	r5, r3
 8001012:	432a      	orrs	r2, r5
 8001014:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001018:	fa1f fe8c 	uxth.w	lr, ip
 800101c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001020:	fb07 1510 	mls	r5, r7, r0, r1
 8001024:	0c11      	lsrs	r1, r2, #16
 8001026:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102a:	fb00 f50e 	mul.w	r5, r0, lr
 800102e:	428d      	cmp	r5, r1
 8001030:	fa04 f403 	lsl.w	r4, r4, r3
 8001034:	d908      	bls.n	8001048 <__udivmoddi4+0x258>
 8001036:	eb1c 0101 	adds.w	r1, ip, r1
 800103a:	f100 38ff 	add.w	r8, r0, #4294967295
 800103e:	d22f      	bcs.n	80010a0 <__udivmoddi4+0x2b0>
 8001040:	428d      	cmp	r5, r1
 8001042:	d92d      	bls.n	80010a0 <__udivmoddi4+0x2b0>
 8001044:	3802      	subs	r0, #2
 8001046:	4461      	add	r1, ip
 8001048:	1b49      	subs	r1, r1, r5
 800104a:	b292      	uxth	r2, r2
 800104c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001050:	fb07 1115 	mls	r1, r7, r5, r1
 8001054:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001058:	fb05 f10e 	mul.w	r1, r5, lr
 800105c:	4291      	cmp	r1, r2
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x282>
 8001060:	eb1c 0202 	adds.w	r2, ip, r2
 8001064:	f105 38ff 	add.w	r8, r5, #4294967295
 8001068:	d216      	bcs.n	8001098 <__udivmoddi4+0x2a8>
 800106a:	4291      	cmp	r1, r2
 800106c:	d914      	bls.n	8001098 <__udivmoddi4+0x2a8>
 800106e:	3d02      	subs	r5, #2
 8001070:	4462      	add	r2, ip
 8001072:	1a52      	subs	r2, r2, r1
 8001074:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001078:	e738      	b.n	8000eec <__udivmoddi4+0xfc>
 800107a:	4631      	mov	r1, r6
 800107c:	4630      	mov	r0, r6
 800107e:	e708      	b.n	8000e92 <__udivmoddi4+0xa2>
 8001080:	4639      	mov	r1, r7
 8001082:	e6e6      	b.n	8000e52 <__udivmoddi4+0x62>
 8001084:	4610      	mov	r0, r2
 8001086:	e6fb      	b.n	8000e80 <__udivmoddi4+0x90>
 8001088:	4548      	cmp	r0, r9
 800108a:	d2a9      	bcs.n	8000fe0 <__udivmoddi4+0x1f0>
 800108c:	ebb9 0802 	subs.w	r8, r9, r2
 8001090:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001094:	3b01      	subs	r3, #1
 8001096:	e7a3      	b.n	8000fe0 <__udivmoddi4+0x1f0>
 8001098:	4645      	mov	r5, r8
 800109a:	e7ea      	b.n	8001072 <__udivmoddi4+0x282>
 800109c:	462b      	mov	r3, r5
 800109e:	e794      	b.n	8000fca <__udivmoddi4+0x1da>
 80010a0:	4640      	mov	r0, r8
 80010a2:	e7d1      	b.n	8001048 <__udivmoddi4+0x258>
 80010a4:	46d0      	mov	r8, sl
 80010a6:	e77b      	b.n	8000fa0 <__udivmoddi4+0x1b0>
 80010a8:	3d02      	subs	r5, #2
 80010aa:	4462      	add	r2, ip
 80010ac:	e732      	b.n	8000f14 <__udivmoddi4+0x124>
 80010ae:	4608      	mov	r0, r1
 80010b0:	e70a      	b.n	8000ec8 <__udivmoddi4+0xd8>
 80010b2:	4464      	add	r4, ip
 80010b4:	3802      	subs	r0, #2
 80010b6:	e742      	b.n	8000f3e <__udivmoddi4+0x14e>

080010b8 <__aeabi_idiv0>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <Heartbeat>:
extern QEIStructureTypeDef QEI;
extern float KFoutput[3];

float safePush = 6.5;

void Heartbeat(){
 80010bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c0:	af00      	add	r7, sp, #0
	static uint64_t timestamp = 0;
	  if(HAL_GetTick() >= timestamp)
 80010c2:	f004 f929 	bl	8005318 <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2200      	movs	r2, #0
 80010ca:	461c      	mov	r4, r3
 80010cc:	4615      	mov	r5, r2
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <Heartbeat+0x44>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	4294      	cmp	r4, r2
 80010d6:	eb75 0303 	sbcs.w	r3, r5, r3
 80010da:	d30d      	bcc.n	80010f8 <Heartbeat+0x3c>
	  {
		  timestamp += 200;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <Heartbeat+0x44>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 80010e6:	f143 0900 	adc.w	r9, r3, #0
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <Heartbeat+0x44>)
 80010ec:	e9c3 8900 	strd	r8, r9, [r3]
		  registerFrame[0x00].U16 = 22881;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <Heartbeat+0x48>)
 80010f2:	f645 1261 	movw	r2, #22881	; 0x5961
 80010f6:	801a      	strh	r2, [r3, #0]
	  }
}
 80010f8:	bf00      	nop
 80010fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010fe:	bf00      	nop
 8001100:	200002f0 	.word	0x200002f0
 8001104:	2000114c 	.word	0x2000114c

08001108 <Routine>:

void Routine(QEIStructureTypeDef *QEI , JoystickStructureTypeDef *joy){
 8001108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
	static uint64_t timestamp2 = 0;
	if(HAL_GetTick() >= timestamp2 && registerFrame[0x00].U16 == 18537) //ส่งค่าพวกนี้หลังจาก BaseSytem อ่าน Heartbeat ทุกๆ 200 ms
 8001114:	f004 f900 	bl	8005318 <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2200      	movs	r2, #0
 800111c:	461c      	mov	r4, r3
 800111e:	4615      	mov	r5, r2
 8001120:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <Routine+0x188>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	4294      	cmp	r4, r2
 8001128:	eb75 0303 	sbcs.w	r3, r5, r3
 800112c:	f0c0 80aa 	bcc.w	8001284 <Routine+0x17c>
 8001130:	4b58      	ldr	r3, [pc, #352]	; (8001294 <Routine+0x18c>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f644 0269 	movw	r2, #18537	; 0x4869
 8001138:	4293      	cmp	r3, r2
 800113a:	f040 80a3 	bne.w	8001284 <Routine+0x17c>
	{
	timestamp2 += 200;
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <Routine+0x188>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8001148:	f143 0900 	adc.w	r9, r3, #0
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <Routine+0x188>)
 800114e:	e9c3 8900 	strd	r8, r9, [r3]

	//Check Lead
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) registerFrame[0x04].U16 = 0b0010;
 8001152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f006 fa11 	bl	8007580 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d103      	bne.n	800116c <Routine+0x64>
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <Routine+0x18c>)
 8001166:	2202      	movs	r2, #2
 8001168:	811a      	strh	r2, [r3, #8]
 800116a:	e00d      	b.n	8001188 <Routine+0x80>
	else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)) registerFrame[0x04].U16 = 0b0001;
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	484a      	ldr	r0, [pc, #296]	; (8001298 <Routine+0x190>)
 8001170:	f006 fa06 	bl	8007580 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <Routine+0x7a>
 800117a:	4b46      	ldr	r3, [pc, #280]	; (8001294 <Routine+0x18c>)
 800117c:	2201      	movs	r2, #1
 800117e:	811a      	strh	r2, [r3, #8]
 8001180:	e002      	b.n	8001188 <Routine+0x80>
	else registerFrame[0x04].U16 = 0b0000;
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <Routine+0x18c>)
 8001184:	2200      	movs	r2, #0
 8001186:	811a      	strh	r2, [r3, #8]

	registerFrame[0x10].U16 = status.Z_Status; //Z-axis Moving Status
 8001188:	4b44      	ldr	r3, [pc, #272]	; (800129c <Routine+0x194>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <Routine+0x18c>)
 8001190:	841a      	strh	r2, [r3, #32]
	registerFrame[0x11].U16 = (int16_t)((QEI->LinearPosition - (int16_t)(QEI->HomePosition))  * 10); //Z-axis Actual Position = 19 ค่าจริง*10
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <Routine+0x18c>)
 80011ca:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[0x12].U16 = (uint16_t)(fabs(KFoutput[1] * 10)); //Z-axis Actual Speed = 20
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <Routine+0x198>)
 80011ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	eef0 7ae7 	vabs.f32	s15, s15
 80011de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e2:	ee17 3a90 	vmov	r3, s15
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <Routine+0x18c>)
 80011ea:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[0x13].U16 = (uint16_t)(fabs(KFoutput[2] * 10)); //Z-axis Acceleration = 21
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <Routine+0x198>)
 80011ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fa:	eef0 7ae7 	vabs.f32	s15, s15
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <Routine+0x18c>)
 800120a:	84da      	strh	r2, [r3, #38]	; 0x26
	registerFrame[0x40].U16 = (int16_t)((joy->Xpos)*10); //X-axis Actual Position = 2
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8001212:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121e:	ee17 3a90 	vmov	r3, s15
 8001222:	b21b      	sxth	r3, r3
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <Routine+0x18c>)
 8001228:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		if(registerFrame[0x02].U16 == 0b0000)
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <Routine+0x18c>)
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <Routine+0x13e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2120      	movs	r1, #32
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <Routine+0x190>)
 800123a:	f006 f9b9 	bl	80075b0 <HAL_GPIO_WritePin>
			status.VacuumState = 0; //Off
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <Routine+0x194>)
 8001240:	2200      	movs	r2, #0
 8001242:	805a      	strh	r2, [r3, #2]
 8001244:	e00b      	b.n	800125e <Routine+0x156>
		}
		else if(registerFrame[0x02].U16 == 0b0001)
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <Routine+0x18c>)
 8001248:	889b      	ldrh	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <Routine+0x156>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2120      	movs	r1, #32
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <Routine+0x190>)
 8001254:	f006 f9ac 	bl	80075b0 <HAL_GPIO_WritePin>
			status.VacuumState = 1;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <Routine+0x194>)
 800125a:	2201      	movs	r2, #1
 800125c:	805a      	strh	r2, [r3, #2]
		}

		if(registerFrame[0x03].U16 == 0b0000)
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <Routine+0x18c>)
 8001260:	88db      	ldrh	r3, [r3, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <Routine+0x16a>
		{
			SolenoidPull();
 8001266:	f002 fb75 	bl	8003954 <SolenoidPull>
			status.GripperState = 0; //Backward
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <Routine+0x194>)
 800126c:	2200      	movs	r2, #0
 800126e:	809a      	strh	r2, [r3, #4]
		{
			SolenoidPush();
			status.GripperState = 1; //Forward
		}
	}
}
 8001270:	e008      	b.n	8001284 <Routine+0x17c>
		else if(registerFrame[0x03].U16 == 0b0001)
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <Routine+0x18c>)
 8001274:	88db      	ldrh	r3, [r3, #6]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d104      	bne.n	8001284 <Routine+0x17c>
			SolenoidPush();
 800127a:	f002 fb43 	bl	8003904 <SolenoidPush>
			status.GripperState = 1; //Forward
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <Routine+0x194>)
 8001280:	2201      	movs	r2, #1
 8001282:	809a      	strh	r2, [r3, #4]
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	200002f8 	.word	0x200002f8
 8001294:	2000114c 	.word	0x2000114c
 8001298:	48000800 	.word	0x48000800
 800129c:	200012dc 	.word	0x200012dc
 80012a0:	20001380 	.word	0x20001380

080012a4 <GetGoalPoint>:
		status.Z_Status = 0; // z-axis reset BaseSystem status
		registerFrame[0x10].U16 = status.Z_Status;
		}

}
void GetGoalPoint(){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	//if(registerFrame[0x01].U16 == 8){ // if run point mode
		Value.GoalPoint = (registerFrame[0x30].U16)/10 ; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <GetGoalPoint+0x24>)
 80012aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <GetGoalPoint+0x28>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <GetGoalPoint+0x2c>)
 80012ba:	801a      	strh	r2, [r3, #0]
		 //ค่าที่ได้จาก BaseSytem จะได้ค่าที่เรากรอก*10 ดังนั้นต้องหาร10 ถึงจะได้ค่าจริงที่เรากรอก
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000114c 	.word	0x2000114c
 80012cc:	cccccccd 	.word	0xcccccccd
 80012d0:	200012f4 	.word	0x200012f4

080012d4 <GetPick_PlaceOrder>:
		registerFrame[0x10].U16 = status.Z_Status; // reset z-axis moving state after finish homing
		}
	}
}

void GetPick_PlaceOrder(JoystickStructureTypeDef *joy){
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(registerFrame[0x01].U16 == 4){ // after pressing run button on Jogmode (before running)
 80012dc:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <GetPick_PlaceOrder+0x2ac>)
 80012de:	885b      	ldrh	r3, [r3, #2]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	f040 81cc 	bne.w	800167e <GetPick_PlaceOrder+0x3aa>
		Value.PickOrder = registerFrame[0x21].U16 ; // ค่าชั้นที่ต้อง Pick from BaseSystem
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <GetPick_PlaceOrder+0x2ac>)
 80012e8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80012ec:	4ba5      	ldr	r3, [pc, #660]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80012ee:	805a      	strh	r2, [r3, #2]
		Value.PlaceOrder = registerFrame[0x22].U16 ;// ค่าชั้นที่ต้อง Place from BaseSystem
 80012f0:	4ba3      	ldr	r3, [pc, #652]	; (8001580 <GetPick_PlaceOrder+0x2ac>)
 80012f2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80012f6:	4ba3      	ldr	r3, [pc, #652]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80012f8:	809a      	strh	r2, [r3, #4]

		Value.Pick[0] = Value.PickOrder / 10000;                     // Most significant digit (ten-thousands place)
 80012fa:	4ba2      	ldr	r3, [pc, #648]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	4aa2      	ldr	r2, [pc, #648]	; (8001588 <GetPick_PlaceOrder+0x2b4>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0b5b      	lsrs	r3, r3, #13
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800130a:	80da      	strh	r2, [r3, #6]
		Value.Pick[1] = (Value.PickOrder % 10000) / 1000;            // Thousands place
 800130c:	4b9d      	ldr	r3, [pc, #628]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800130e:	885b      	ldrh	r3, [r3, #2]
 8001310:	4a9d      	ldr	r2, [pc, #628]	; (8001588 <GetPick_PlaceOrder+0x2b4>)
 8001312:	fba2 1203 	umull	r1, r2, r2, r3
 8001316:	0b52      	lsrs	r2, r2, #13
 8001318:	f242 7110 	movw	r1, #10000	; 0x2710
 800131c:	fb01 f202 	mul.w	r2, r1, r2
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	4a99      	ldr	r2, [pc, #612]	; (800158c <GetPick_PlaceOrder+0x2b8>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b95      	ldr	r3, [pc, #596]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001330:	811a      	strh	r2, [r3, #8]
		Value.Pick[2] = (Value.PickOrder % 1000) / 100;              // Hundreds place
 8001332:	4b94      	ldr	r3, [pc, #592]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001334:	885b      	ldrh	r3, [r3, #2]
 8001336:	4a95      	ldr	r2, [pc, #596]	; (800158c <GetPick_PlaceOrder+0x2b8>)
 8001338:	fba2 1203 	umull	r1, r2, r2, r3
 800133c:	0992      	lsrs	r2, r2, #6
 800133e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001342:	fb01 f202 	mul.w	r2, r1, r2
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	4a91      	ldr	r2, [pc, #580]	; (8001590 <GetPick_PlaceOrder+0x2bc>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b8b      	ldr	r3, [pc, #556]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001356:	815a      	strh	r2, [r3, #10]
		Value.Pick[3] = (Value.PickOrder % 100) / 10;                // Tens place
 8001358:	4b8a      	ldr	r3, [pc, #552]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	4a8c      	ldr	r2, [pc, #560]	; (8001590 <GetPick_PlaceOrder+0x2bc>)
 800135e:	fba2 1203 	umull	r1, r2, r2, r3
 8001362:	0952      	lsrs	r2, r2, #5
 8001364:	2164      	movs	r1, #100	; 0x64
 8001366:	fb01 f202 	mul.w	r2, r1, r2
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	4a89      	ldr	r2, [pc, #548]	; (8001594 <GetPick_PlaceOrder+0x2c0>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b82      	ldr	r3, [pc, #520]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800137a:	819a      	strh	r2, [r3, #12]
		Value.Pick[4] = Value.PickOrder % 10;
 800137c:	4b81      	ldr	r3, [pc, #516]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800137e:	885a      	ldrh	r2, [r3, #2]
 8001380:	4b84      	ldr	r3, [pc, #528]	; (8001594 <GetPick_PlaceOrder+0x2c0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	08d9      	lsrs	r1, r3, #3
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b7b      	ldr	r3, [pc, #492]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001396:	81da      	strh	r2, [r3, #14]

		Value.Place[0] = Value.PlaceOrder / 10000;                     // Most significant digit (ten-thousands place)
 8001398:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800139a:	889b      	ldrh	r3, [r3, #4]
 800139c:	4a7a      	ldr	r2, [pc, #488]	; (8001588 <GetPick_PlaceOrder+0x2b4>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0b5b      	lsrs	r3, r3, #13
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b77      	ldr	r3, [pc, #476]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80013a8:	821a      	strh	r2, [r3, #16]
		Value.Place[1] = (Value.PlaceOrder % 10000) / 1000;            // Thousands place
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	4a76      	ldr	r2, [pc, #472]	; (8001588 <GetPick_PlaceOrder+0x2b4>)
 80013b0:	fba2 1203 	umull	r1, r2, r2, r3
 80013b4:	0b52      	lsrs	r2, r2, #13
 80013b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80013ba:	fb01 f202 	mul.w	r2, r1, r2
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4a72      	ldr	r2, [pc, #456]	; (800158c <GetPick_PlaceOrder+0x2b8>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80013ce:	825a      	strh	r2, [r3, #18]
		Value.Place[2] = (Value.PlaceOrder % 1000) / 100;              // Hundreds place
 80013d0:	4b6c      	ldr	r3, [pc, #432]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80013d2:	889b      	ldrh	r3, [r3, #4]
 80013d4:	4a6d      	ldr	r2, [pc, #436]	; (800158c <GetPick_PlaceOrder+0x2b8>)
 80013d6:	fba2 1203 	umull	r1, r2, r2, r3
 80013da:	0992      	lsrs	r2, r2, #6
 80013dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e0:	fb01 f202 	mul.w	r2, r1, r2
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4a69      	ldr	r2, [pc, #420]	; (8001590 <GetPick_PlaceOrder+0x2bc>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80013f4:	829a      	strh	r2, [r3, #20]
		Value.Place[3] = (Value.PlaceOrder % 100) / 10;                // Tens place
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80013f8:	889b      	ldrh	r3, [r3, #4]
 80013fa:	4a65      	ldr	r2, [pc, #404]	; (8001590 <GetPick_PlaceOrder+0x2bc>)
 80013fc:	fba2 1203 	umull	r1, r2, r2, r3
 8001400:	0952      	lsrs	r2, r2, #5
 8001402:	2164      	movs	r1, #100	; 0x64
 8001404:	fb01 f202 	mul.w	r2, r1, r2
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	4a61      	ldr	r2, [pc, #388]	; (8001594 <GetPick_PlaceOrder+0x2c0>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001418:	82da      	strh	r2, [r3, #22]
		Value.Place[4] = Value.PlaceOrder % 10;
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800141c:	889a      	ldrh	r2, [r3, #4]
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <GetPick_PlaceOrder+0x2c0>)
 8001420:	fba3 1302 	umull	r1, r3, r3, r2
 8001424:	08d9      	lsrs	r1, r3, #3
 8001426:	460b      	mov	r3, r1
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b54      	ldr	r3, [pc, #336]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001434:	831a      	strh	r2, [r3, #24]

		Value.PointPosition[0] = joy->PointPosition[0];
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800143c:	4a51      	ldr	r2, [pc, #324]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800143e:	61d3      	str	r3, [r2, #28]
		Value.PointPosition[1] = joy->PointPosition[1];
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001446:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001448:	6213      	str	r3, [r2, #32]
		Value.PointPosition[2] = joy->PointPosition[2];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001452:	6253      	str	r3, [r2, #36]	; 0x24
		Value.PointPosition[3] = joy->PointPosition[3];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800145a:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800145c:	6293      	str	r3, [r2, #40]	; 0x28
		Value.PointPosition[4] = joy->PointPosition[4];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001464:	4a47      	ldr	r2, [pc, #284]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001466:	62d3      	str	r3, [r2, #44]	; 0x2c

		Value.TargetPoint[0]	=	Value.Pick[0];
 8001468:	4b46      	ldr	r3, [pc, #280]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800146a:	88db      	ldrh	r3, [r3, #6]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001476:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		Value.TargetPoint[1]	=	Value.Place[0];
 800147a:	4b42      	ldr	r3, [pc, #264]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800147c:	8a1b      	ldrh	r3, [r3, #16]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001488:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		Value.TargetPoint[2]	=	Value.Pick[1];
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800148e:	891b      	ldrh	r3, [r3, #8]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800149a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		Value.TargetPoint[3]	=	Value.Place[1];
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014a0:	8a5b      	ldrh	r3, [r3, #18]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		Value.TargetPoint[4]	=	Value.Pick[2];
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014b2:	895b      	ldrh	r3, [r3, #10]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014be:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		Value.TargetPoint[5]	=	Value.Place[2];
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014c4:	8a9b      	ldrh	r3, [r3, #20]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014d0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		Value.TargetPoint[6]	=	Value.Pick[3];
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014d6:	899b      	ldrh	r3, [r3, #12]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014e2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		Value.TargetPoint[7]	=	Value.Place[3];
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014e8:	8adb      	ldrh	r3, [r3, #22]
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014f4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		Value.TargetPoint[8]	=	Value.Pick[4];
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 80014fa:	89db      	ldrh	r3, [r3, #14]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001506:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		Value.TargetPoint[9]	=	Value.Place[4];
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800150c:	8b1b      	ldrh	r3, [r3, #24]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001518:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		for(int i = 0; i < 10; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e081      	b.n	8001626 <GetPick_PlaceOrder+0x352>
		{
			if(Value.TargetPoint[i] == 1) Value.TargetPosition[i] = Value.PointPosition[0];
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	330c      	adds	r3, #12
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001534:	eef4 7a47 	vcmp.f32	s15, s14
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d108      	bne.n	8001550 <GetPick_PlaceOrder+0x27c>
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	4910      	ldr	r1, [pc, #64]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3316      	adds	r3, #22
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e067      	b.n	8001620 <GetPick_PlaceOrder+0x34c>
			else if(Value.TargetPoint[i] == 2) Value.TargetPosition[i] = Value.PointPosition[1];
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	330c      	adds	r3, #12
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001562:	eef4 7a47 	vcmp.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d115      	bne.n	8001598 <GetPick_PlaceOrder+0x2c4>
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <GetPick_PlaceOrder+0x2b0>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3316      	adds	r3, #22
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e050      	b.n	8001620 <GetPick_PlaceOrder+0x34c>
 800157e:	bf00      	nop
 8001580:	2000114c 	.word	0x2000114c
 8001584:	200012f4 	.word	0x200012f4
 8001588:	d1b71759 	.word	0xd1b71759
 800158c:	10624dd3 	.word	0x10624dd3
 8001590:	51eb851f 	.word	0x51eb851f
 8001594:	cccccccd 	.word	0xcccccccd
			else if(Value.TargetPoint[i] == 3) Value.TargetPosition[i] = Value.PointPosition[2];
 8001598:	4a3c      	ldr	r2, [pc, #240]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	330c      	adds	r3, #12
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80015aa:	eef4 7a47 	vcmp.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	d108      	bne.n	80015c6 <GetPick_PlaceOrder+0x2f2>
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	4934      	ldr	r1, [pc, #208]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3316      	adds	r3, #22
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e02c      	b.n	8001620 <GetPick_PlaceOrder+0x34c>
			else if(Value.TargetPoint[i] == 4) Value.TargetPosition[i] = Value.PointPosition[3];
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	330c      	adds	r3, #12
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80015d8:	eef4 7a47 	vcmp.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d108      	bne.n	80015f4 <GetPick_PlaceOrder+0x320>
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 80015e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e6:	4929      	ldr	r1, [pc, #164]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3316      	adds	r3, #22
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e015      	b.n	8001620 <GetPick_PlaceOrder+0x34c>
			else if(Value.TargetPoint[i] == 5) Value.TargetPosition[i] = Value.PointPosition[4];
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	330c      	adds	r3, #12
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001606:	eef4 7a47 	vcmp.f32	s15, s14
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	d107      	bne.n	8001620 <GetPick_PlaceOrder+0x34c>
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 8001612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001614:	491d      	ldr	r1, [pc, #116]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3316      	adds	r3, #22
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 10; i++)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b09      	cmp	r3, #9
 800162a:	f77f af7a 	ble.w	8001522 <GetPick_PlaceOrder+0x24e>
		}
		for(int i = 0; i < 10; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	e021      	b.n	8001678 <GetPick_PlaceOrder+0x3a4>
		{
			static float tempPos = 0;
			if(i%2 == 1)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	bfb8      	it	lt
 800163e:	425b      	neglt	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d116      	bne.n	8001672 <GetPick_PlaceOrder+0x39e>
			{
				tempPos = Value.TargetPosition[i];
 8001644:	4a11      	ldr	r2, [pc, #68]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3316      	adds	r3, #22
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <GetPick_PlaceOrder+0x3bc>)
 8001652:	6013      	str	r3, [r2, #0]
				Value.TargetPosition[i] = tempPos+safePush;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <GetPick_PlaceOrder+0x3bc>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <GetPick_PlaceOrder+0x3c0>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <GetPick_PlaceOrder+0x3b8>)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3316      	adds	r3, #22
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < 10; i++)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3301      	adds	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b09      	cmp	r3, #9
 800167c:	ddda      	ble.n	8001634 <GetPick_PlaceOrder+0x360>
			}
		}
	}
		//ค่าที่ได้จะเรียงติดกัน ex.ถ้าเซ็ตค่าในUIชั้นแรกที่ต้อง Pick คือ ชั้น1-5 ตามลำดับ ค่าชั้นที่ต้องPick จะได้ 12345
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200012f4 	.word	0x200012f4
 8001690:	20000300 	.word	0x20000300
 8001694:	20000000 	.word	0x20000000

08001698 <PIDController_Init>:
uint32_t Saturation = 1000;
extern TIM_HandleTypeDef htim4;
float tolerance = 0.005;

void PIDController_Init(PIDStructureTypeDef* PID,float FWKp ,float FWKi , float FWKd, float BWKp ,float BWKi , float BWKd)	// Initialize PID Variable
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	61f8      	str	r0, [r7, #28]
 80016a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80016a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80016a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80016ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80016b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80016b4:	edc7 2a01 	vstr	s5, [r7, #4]
	PID->FWKp = FWKp;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	601a      	str	r2, [r3, #0]
	PID->FWKi = FWKi;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	605a      	str	r2, [r3, #4]
	PID->FWKd = FWKd;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	609a      	str	r2, [r3, #8]

	PID->BWKp = BWKp;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	60da      	str	r2, [r3, #12]
	PID->BWKi = BWKi;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	611a      	str	r2, [r3, #16]
	PID->BWKd = BWKd;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	615a      	str	r2, [r3, #20]


	PID->Error[0] = 0;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
	PID->Error[2] = 0;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
	PID->Command = 0;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
	PID->Command_1 = 0;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001704:	bf00      	nop
 8001706:	3724      	adds	r7, #36	; 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <Motor_Control>:

void Motor_Control(int32_t cmd)
{
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if(cmd > 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	dd05      	ble.n	800172a <Motor_Control+0x1a>
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <Motor_Control+0x54>)
 8001724:	f005 ff44 	bl	80075b0 <HAL_GPIO_WritePin>
 8001728:	e007      	b.n	800173a <Motor_Control+0x2a>
	else if (cmd < 0)  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	da04      	bge.n	800173a <Motor_Control+0x2a>
 8001730:	2200      	movs	r2, #0
 8001732:	2110      	movs	r1, #16
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <Motor_Control+0x54>)
 8001736:	f005 ff3b 	bl	80075b0 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,fabs(cmd));
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe febe 	bl	80004bc <__aeabi_i2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <Motor_Control+0x58>)
 800174c:	681e      	ldr	r6, [r3, #0]
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7ff f9b7 	bl	8000ac4 <__aeabi_d2uiz>
 8001756:	4603      	mov	r3, r0
 8001758:	63b3      	str	r3, [r6, #56]	; 0x38
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	bf00      	nop
 8001764:	48000800 	.word	0x48000800
 8001768:	200005f8 	.word	0x200005f8

0800176c <PIDControllerPosition_Command>:


void PIDControllerPosition_Command(PIDStructureTypeDef* PID,QEIStructureTypeDef* Feedback,float setpoint)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
	PID->Error[0] = setpoint - Feedback->LinearPosition;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001780:	ed97 7a01 	vldr	s14, [r7, #4]
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	edc3 7a06 	vstr	s15, [r3, #24]
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]*/

	if (fabs(PID->Error[0]) > tolerance)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edd3 7a06 	vldr	s15, [r3, #24]
 8001794:	eeb0 7ae7 	vabs.f32	s14, s15
 8001798:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <PIDControllerPosition_Command+0x198>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	dd7b      	ble.n	80018a0 <PIDControllerPosition_Command+0x134>
	{
		if (PID->Error[0] >= 0)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	db35      	blt.n	8001824 <PIDControllerPosition_Command+0xb8>
		 {
			PID->Command = PID->Command_1 +
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->FWKp + PID->FWKi + PID->FWKd)*PID->Error[0])
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	edd3 6a00 	vldr	s13, [r3]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edd3 7a06 	vldr	s15, [r3, #24]
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 80017e2:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->FWKp+(2*PID->FWKd))*PID->Error[1])
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edd3 6a00 	vldr	s13, [r3]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001804:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->FWKd*PID->Error[2]);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	edd3 6a02 	vldr	s13, [r3, #8]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	edd3 7a08 	vldr	s15, [r3, #32]
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001822:	e041      	b.n	80018a8 <PIDControllerPosition_Command+0x13c>
		 }
		else if (PID->Error[0] < 0)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	edd3 7a06 	vldr	s15, [r3, #24]
 800182a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d539      	bpl.n	80018a8 <PIDControllerPosition_Command+0x13c>
		{
			PID->Command = PID->Command_1 +
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->BWKp + PID->BWKi + PID->BWKd)*PID->Error[0])
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	edd3 7a04 	vldr	s15, [r3, #16]
 8001846:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001850:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	edd3 7a06 	vldr	s15, [r3, #24]
 800185a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 800185e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->BWKp+(2*PID->BWKd))*PID->Error[1])
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	edd3 6a03 	vldr	s13, [r3, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	edd3 7a05 	vldr	s15, [r3, #20]
 800186e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001872:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	edd3 7a07 	vldr	s15, [r3, #28]
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->BWKd*PID->Error[2]);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	edd3 6a05 	vldr	s13, [r3, #20]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800189e:	e003      	b.n	80018a8 <PIDControllerPosition_Command+0x13c>
		}
	}
	else PID->Command = 0;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

	if(PID->Command >= 550) PID->Command = 550;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018ae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001908 <PIDControllerPosition_Command+0x19c>
 80018b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	db03      	blt.n	80018c4 <PIDControllerPosition_Command+0x158>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <PIDControllerPosition_Command+0x1a0>)
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
 80018c2:	e00c      	b.n	80018de <PIDControllerPosition_Command+0x172>
	else if (PID->Command <= -550) PID->Command = -550;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018ca:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001910 <PIDControllerPosition_Command+0x1a4>
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d802      	bhi.n	80018de <PIDControllerPosition_Command+0x172>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <PIDControllerPosition_Command+0x1a8>)
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
	// Implement PID Velocity Form Algorithm

	/* Update Variable */
	PID->Command_1 = PID->Command;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
	PID->Error[2] = PID->Error[1];
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	621a      	str	r2, [r3, #32]
	PID->Error[1] = PID->Error[0];
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	61da      	str	r2, [r3, #28]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000004 	.word	0x20000004
 8001908:	44098000 	.word	0x44098000
 800190c:	44098000 	.word	0x44098000
 8001910:	c4098000 	.word	0xc4098000
 8001914:	c4098000 	.word	0xc4098000

08001918 <PIDControllerVelocity_Command>:

void PIDControllerVelocity_Command(PIDStructureTypeDef* PID,QEIStructureTypeDef* Feedback,float setpoint)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	ed87 0a01 	vstr	s0, [r7, #4]
	PID->Error[0] = setpoint - Feedback->LinearVelocity;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800192c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edc3 7a06 	vstr	s15, [r3, #24]
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */

//    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0)))


		if (PID->Error[0] >= 0)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	db35      	blt.n	80019b6 <PIDControllerVelocity_Command+0x9e>
		 {
			PID->Command = PID->Command_1 +
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->FWKp + PID->FWKi + PID->FWKd)*PID->Error[0])
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	edd3 6a00 	vldr	s13, [r3]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	edd3 7a01 	vldr	s15, [r3, #4]
 800195c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	edd3 7a02 	vldr	s15, [r3, #8]
 8001966:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001970:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 8001974:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->FWKp+(2*PID->FWKd))*PID->Error[1])
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	edd3 6a00 	vldr	s13, [r3]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	edd3 7a02 	vldr	s15, [r3, #8]
 8001984:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001996:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->FWKd*PID->Error[2]);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	edd3 6a02 	vldr	s13, [r3, #8]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80019a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80019b4:	e03c      	b.n	8001a30 <PIDControllerVelocity_Command+0x118>
		 }
		else if (PID->Error[0] < 0)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d534      	bpl.n	8001a30 <PIDControllerVelocity_Command+0x118>
		{
			PID->Command = PID->Command_1 +
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->BWKp + PID->BWKi + PID->BWKd)*PID->Error[0])
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80019d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 7a05 	vldr	s15, [r3, #20]
 80019e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 80019f0:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->BWKp+(2*PID->BWKd))*PID->Error[1])
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->BWKd*PID->Error[2]);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		}


	// Implement PID Velocity Form Algorithm

	if(PID->Command >= 1000) PID->Command = 1000;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a36:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a8c <PIDControllerVelocity_Command+0x174>
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	db03      	blt.n	8001a4c <PIDControllerVelocity_Command+0x134>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <PIDControllerVelocity_Command+0x178>)
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
 8001a4a:	e00c      	b.n	8001a66 <PIDControllerVelocity_Command+0x14e>
	else if (PID->Command <= -1000) PID->Command = -1000;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a94 <PIDControllerVelocity_Command+0x17c>
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d802      	bhi.n	8001a66 <PIDControllerVelocity_Command+0x14e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <PIDControllerVelocity_Command+0x180>)
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

	/* Update Variable */
	PID->Command_1 = PID->Command;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
	PID->Error[2] = PID->Error[1];
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	621a      	str	r2, [r3, #32]
	PID->Error[1] = PID->Error[0];
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	61da      	str	r2, [r3, #28]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	447a0000 	.word	0x447a0000
 8001a90:	447a0000 	.word	0x447a0000
 8001a94:	c47a0000 	.word	0xc47a0000
 8001a98:	c47a0000 	.word	0xc47a0000

08001a9c <PIDControllerCascade_Command2>:
	PIDControllerPosition_Command(PIDposition, QEI, setpoint);
	PIDControllerVelocity_Command(PIDvelocity, QEI, PIDposition->Command);
}

void PIDControllerCascade_Command2(PIDStructureTypeDef *PIDposition , PIDStructureTypeDef *PIDvelocity ,QEIStructureTypeDef *QEI , float pf , float vf)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6178      	str	r0, [r7, #20]
 8001aa4:	6139      	str	r1, [r7, #16]
 8001aa6:	60fa      	str	r2, [r7, #12]
 8001aa8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001aac:	edc7 0a01 	vstr	s1, [r7, #4]
	PIDControllerPosition_Command(PIDposition, QEI, pf);
 8001ab0:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff fe58 	bl	800176c <PIDControllerPosition_Command>
	PIDControllerVelocity_Command(PIDvelocity, QEI, PIDposition->Command + vf);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	68f9      	ldr	r1, [r7, #12]
 8001ad0:	6938      	ldr	r0, [r7, #16]
 8001ad2:	f7ff ff21 	bl	8001918 <PIDControllerVelocity_Command>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	213c      	movs	r1, #60	; 0x3c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f007 fa26 	bl	8008f48 <HAL_TIM_Encoder_Start>
	QEIdata->HomePosition = 64.85;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <QEIEncoder_Init+0x2c>)
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	4281b333 	.word	0x4281b333

08001b10 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b08e      	sub	sp, #56	; 0x38
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6278      	str	r0, [r7, #36]	; 0x24
 8001b1a:	6239      	str	r1, [r7, #32]
 8001b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8001b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b26:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2200      	movs	r2, #0
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	617a      	str	r2, [r7, #20]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001b3c:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b4c:	1a84      	subs	r4, r0, r2
 8001b4e:	eb61 0503 	sbc.w	r5, r1, r3
 8001b52:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b62:	ebb0 0a02 	subs.w	sl, r0, r2
 8001b66:	eb61 0b03 	sbc.w	fp, r1, r3
 8001b6a:	4650      	mov	r0, sl
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	f7fe fcd9 	bl	8000524 <__aeabi_ul2d>
 8001b72:	a368      	add	r3, pc, #416	; (adr r3, 8001d14 <QEIEncoder_Update+0x204>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fd0a 	bl	8000590 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe ffbe 	bl	8000b04 <__aeabi_d2f>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 8001b8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b90:	495b      	ldr	r1, [pc, #364]	; (8001d00 <QEIEncoder_Update+0x1f0>)
 8001b92:	428a      	cmp	r2, r1
 8001b94:	f173 0300 	sbcs.w	r3, r3, #0
 8001b98:	db08      	blt.n	8001bac <QEIEncoder_Update+0x9c>
 8001b9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b9e:	1e59      	subs	r1, r3, #1
 8001ba0:	60f9      	str	r1, [r7, #12]
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ba8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 8001bac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001bb4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001bb8:	da08      	bge.n	8001bcc <QEIEncoder_Update+0xbc>
 8001bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	6079      	str	r1, [r7, #4]
 8001bc2:	603a      	str	r2, [r7, #0]
 8001bc4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bc8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 8001bcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	462b      	mov	r3, r5
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0119      	lsls	r1, r3, #4
 8001bde:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001be2:	0110      	lsls	r0, r2, #4
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	ebb2 0804 	subs.w	r8, r2, r4
 8001bec:	eb63 0905 	sbc.w	r9, r3, r5
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001bfc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001c00:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001c04:	4690      	mov	r8, r2
 8001c06:	4699      	mov	r9, r3
 8001c08:	4642      	mov	r2, r8
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff f898 	bl	8000d44 <__aeabi_l2f>
 8001c14:	ee06 0a90 	vmov	s13, r0
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <QEIEncoder_Update+0x1f4>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc50 	bl	80004e0 <__aeabi_f2d>
 8001c40:	4604      	mov	r4, r0
 8001c42:	460d      	mov	r5, r1
 8001c44:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c48:	f7fe fc74 	bl	8000534 <__aeabi_l2d>
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <QEIEncoder_Update+0x1f8>)
 8001c52:	f7fe fc9d 	bl	8000590 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <QEIEncoder_Update+0x1f4>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc2a 	bl	80004bc <__aeabi_i2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	4649      	mov	r1, r9
 8001c70:	f7fe fdb8 	bl	80007e4 <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fad2 	bl	8000224 <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff3c 	bl	8000b04 <__aeabi_d2f>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c98:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001d0c <QEIEncoder_Update+0x1fc>
 8001ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <QEIEncoder_Update+0x200>)
 8001cb4:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <QEIEncoder_Update+0x200>)
 8001cb8:	ed93 7a00 	vldr	s14, [r3]
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <QEIEncoder_Update+0x200>)
 8001cbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cc6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <QEIEncoder_Update+0x200>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <QEIEncoder_Update+0x200>)
 8001cf2:	6053      	str	r3, [r2, #4]
}
 8001cf4:	bf00      	nop
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfe:	bf00      	nop
 8001d00:	80000001 	.word	0x80000001
 8001d04:	20000008 	.word	0x20000008
 8001d08:	40300000 	.word	0x40300000
 8001d0c:	42700000 	.word	0x42700000
 8001d10:	20000304 	.word	0x20000304
 8001d14:	a0b5ed8d 	.word	0xa0b5ed8d
 8001d18:	3eb0c6f7 	.word	0x3eb0c6f7

08001d1c <QEIEncoder_SetHome>:

void QEIEncoder_SetHome(QEIStructureTypeDef* QEI)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	QEI->LinearPosition = QEI->HomePosition;//	Set Zero Position
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <Joystick_UpdateValue>:
*/
uint8_t DEBOUNCE_INTERVAL = 200;
extern u16u8_t registerFrame[200];

void Joystick_UpdateValue(JoystickStructureTypeDef* joystick,QEIStructureTypeDef* QEI)
{
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b098      	sub	sp, #96	; 0x60
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6578      	str	r0, [r7, #84]	; 0x54
 8001d42:	6539      	str	r1, [r7, #80]	; 0x50
	/*			Push Button			*/
	static uint16_t tempSTATE[4] = {1,1,1,1};
	static uint64_t lastTIME[4] = {0,0,0,0};
	static uint64_t SUMX;
	static uint64_t SUMY;
	SUMX = 0;
 8001d44:	49b9      	ldr	r1, [pc, #740]	; (800202c <Joystick_UpdateValue+0x2f4>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c1 2300 	strd	r2, r3, [r1]
	SUMY = 0;
 8001d52:	49b7      	ldr	r1, [pc, #732]	; (8002030 <Joystick_UpdateValue+0x2f8>)
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9c1 2300 	strd	r2, r3, [r1]

	static uint64_t currentTIME;
	currentTIME = HAL_GetTick();
 8001d60:	f003 fada 	bl	8005318 <HAL_GetTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2200      	movs	r2, #0
 8001d68:	469a      	mov	sl, r3
 8001d6a:	4693      	mov	fp, r2
 8001d6c:	4bb1      	ldr	r3, [pc, #708]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001d6e:	e9c3 ab00 	strd	sl, fp, [r3]
	/* Update STATE Value */

//
    if (!tempSTATE[A] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) && (currentTIME - lastTIME[A] > DEBOUNCE_INTERVAL))
 8001d72:	4bb1      	ldr	r3, [pc, #708]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d125      	bne.n	8001dc6 <Joystick_UpdateValue+0x8e>
 8001d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7e:	48af      	ldr	r0, [pc, #700]	; (800203c <Joystick_UpdateValue+0x304>)
 8001d80:	f005 fbfe 	bl	8007580 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01d      	beq.n	8001dc6 <Joystick_UpdateValue+0x8e>
 8001d8a:	4baa      	ldr	r3, [pc, #680]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d90:	4bab      	ldr	r3, [pc, #684]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	1a84      	subs	r4, r0, r2
 8001d98:	eb61 0503 	sbc.w	r5, r1, r3
 8001d9c:	4ba9      	ldr	r3, [pc, #676]	; (8002044 <Joystick_UpdateValue+0x30c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	4698      	mov	r8, r3
 8001da6:	4691      	mov	r9, r2
 8001da8:	45a0      	cmp	r8, r4
 8001daa:	eb79 0305 	sbcs.w	r3, r9, r5
 8001dae:	d20a      	bcs.n	8001dc6 <Joystick_UpdateValue+0x8e>
    {
        joystick->PIN[A] = 1;
 8001db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001db2:	2301      	movs	r3, #1
 8001db4:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
        lastTIME[A] = currentTIME;
 8001db8:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	49a0      	ldr	r1, [pc, #640]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]
 8001dc4:	e003      	b.n	8001dce <Joystick_UpdateValue+0x96>
    }
    else joystick->PIN[A] = 0;
 8001dc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
    tempSTATE[A] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd2:	489a      	ldr	r0, [pc, #616]	; (800203c <Joystick_UpdateValue+0x304>)
 8001dd4:	f005 fbd4 	bl	8007580 <HAL_GPIO_ReadPin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4a96      	ldr	r2, [pc, #600]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001dde:	8013      	strh	r3, [r2, #0]

    // Check button B
    if (!tempSTATE[B] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) && (currentTIME - lastTIME[B] > DEBOUNCE_INTERVAL))
 8001de0:	4b95      	ldr	r3, [pc, #596]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001de2:	885b      	ldrh	r3, [r3, #2]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d12d      	bne.n	8001e44 <Joystick_UpdateValue+0x10c>
 8001de8:	2110      	movs	r1, #16
 8001dea:	4894      	ldr	r0, [pc, #592]	; (800203c <Joystick_UpdateValue+0x304>)
 8001dec:	f005 fbc8 	bl	8007580 <HAL_GPIO_ReadPin>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d026      	beq.n	8001e44 <Joystick_UpdateValue+0x10c>
 8001df6:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfc:	4b90      	ldr	r3, [pc, #576]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001dfe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e02:	1a84      	subs	r4, r0, r2
 8001e04:	64bc      	str	r4, [r7, #72]	; 0x48
 8001e06:	eb61 0303 	sbc.w	r3, r1, r3
 8001e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e0c:	4b8d      	ldr	r3, [pc, #564]	; (8002044 <Joystick_UpdateValue+0x30c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2200      	movs	r2, #0
 8001e14:	643b      	str	r3, [r7, #64]	; 0x40
 8001e16:	647a      	str	r2, [r7, #68]	; 0x44
 8001e18:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001e1c:	4623      	mov	r3, r4
 8001e1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e22:	4602      	mov	r2, r0
 8001e24:	4293      	cmp	r3, r2
 8001e26:	462b      	mov	r3, r5
 8001e28:	460a      	mov	r2, r1
 8001e2a:	4193      	sbcs	r3, r2
 8001e2c:	d20a      	bcs.n	8001e44 <Joystick_UpdateValue+0x10c>
    {
        joystick->PIN[B] = 1;
 8001e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e30:	2301      	movs	r3, #1
 8001e32:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
        lastTIME[B] = currentTIME;
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	4980      	ldr	r1, [pc, #512]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001e3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001e42:	e003      	b.n	8001e4c <Joystick_UpdateValue+0x114>
    }
    else joystick->PIN[B] = 0;
 8001e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
    tempSTATE[B] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	487b      	ldr	r0, [pc, #492]	; (800203c <Joystick_UpdateValue+0x304>)
 8001e50:	f005 fb96 	bl	8007580 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001e5a:	8053      	strh	r3, [r2, #2]

    // Check button C
    if (!tempSTATE[C] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && (currentTIME - lastTIME[C] > DEBOUNCE_INTERVAL))
 8001e5c:	4b76      	ldr	r3, [pc, #472]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d12d      	bne.n	8001ec0 <Joystick_UpdateValue+0x188>
 8001e64:	2120      	movs	r1, #32
 8001e66:	4875      	ldr	r0, [pc, #468]	; (800203c <Joystick_UpdateValue+0x304>)
 8001e68:	f005 fb8a 	bl	8007580 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <Joystick_UpdateValue+0x188>
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	4b71      	ldr	r3, [pc, #452]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001e7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e7e:	1a84      	subs	r4, r0, r2
 8001e80:	63bc      	str	r4, [r7, #56]	; 0x38
 8001e82:	eb61 0303 	sbc.w	r3, r1, r3
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e88:	4b6e      	ldr	r3, [pc, #440]	; (8002044 <Joystick_UpdateValue+0x30c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
 8001e92:	637a      	str	r2, [r7, #52]	; 0x34
 8001e94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e98:	4623      	mov	r3, r4
 8001e9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	4193      	sbcs	r3, r2
 8001ea8:	d20a      	bcs.n	8001ec0 <Joystick_UpdateValue+0x188>
    {
        joystick->PIN[C] = 1;
 8001eaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eac:	2301      	movs	r3, #1
 8001eae:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
        lastTIME[C] = currentTIME;
 8001eb2:	4b60      	ldr	r3, [pc, #384]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4961      	ldr	r1, [pc, #388]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001eba:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001ebe:	e003      	b.n	8001ec8 <Joystick_UpdateValue+0x190>
    }
    else joystick->PIN[C] = 0;
 8001ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
    tempSTATE[C] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001ec8:	2120      	movs	r1, #32
 8001eca:	485c      	ldr	r0, [pc, #368]	; (800203c <Joystick_UpdateValue+0x304>)
 8001ecc:	f005 fb58 	bl	8007580 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001ed6:	8093      	strh	r3, [r2, #4]

    // Check button D
    if (!tempSTATE[D] && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && (currentTIME - lastTIME[D] > DEBOUNCE_INTERVAL))
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001eda:	88db      	ldrh	r3, [r3, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d12f      	bne.n	8001f40 <Joystick_UpdateValue+0x208>
 8001ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f005 fb4a 	bl	8007580 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d026      	beq.n	8001f40 <Joystick_UpdateValue+0x208>
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef8:	4b51      	ldr	r3, [pc, #324]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001efa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001efe:	1a84      	subs	r4, r0, r2
 8001f00:	62bc      	str	r4, [r7, #40]	; 0x28
 8001f02:	eb61 0303 	sbc.w	r3, r1, r3
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f08:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <Joystick_UpdateValue+0x30c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	627a      	str	r2, [r7, #36]	; 0x24
 8001f14:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f18:	4623      	mov	r3, r4
 8001f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4293      	cmp	r3, r2
 8001f22:	462b      	mov	r3, r5
 8001f24:	460a      	mov	r2, r1
 8001f26:	4193      	sbcs	r3, r2
 8001f28:	d20a      	bcs.n	8001f40 <Joystick_UpdateValue+0x208>
    {
        joystick->PIN[D] = 1;
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
        lastTIME[D] = currentTIME;
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <Joystick_UpdateValue+0x2fc>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	4941      	ldr	r1, [pc, #260]	; (8002040 <Joystick_UpdateValue+0x308>)
 8001f3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001f3e:	e003      	b.n	8001f48 <Joystick_UpdateValue+0x210>
    }
    else joystick->PIN[D] = 0;
 8001f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    tempSTATE[D] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f005 fb16 	bl	8007580 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <Joystick_UpdateValue+0x300>)
 8001f5a:	80da      	strh	r2, [r3, #6]



	/*			Joy			*/
	for(uint8_t i = 0 ; i < 100 ; i ++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f62:	e03b      	b.n	8001fdc <Joystick_UpdateValue+0x2a4>
	{
		SUMX += joystick->XYBuffer[2*i];
 8001f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f68:	005a      	lsls	r2, r3, #1
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2200      	movs	r2, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	61fa      	str	r2, [r7, #28]
 8001f78:	4b2c      	ldr	r3, [pc, #176]	; (800202c <Joystick_UpdateValue+0x2f4>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f82:	4621      	mov	r1, r4
 8001f84:	1889      	adds	r1, r1, r2
 8001f86:	6139      	str	r1, [r7, #16]
 8001f88:	4629      	mov	r1, r5
 8001f8a:	eb41 0303 	adc.w	r3, r1, r3
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <Joystick_UpdateValue+0x2f4>)
 8001f92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f96:	e9c3 1200 	strd	r1, r2, [r3]
		SUMY += joystick->XYBuffer[(2*i)+1];
 8001f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	60fa      	str	r2, [r7, #12]
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <Joystick_UpdateValue+0x2f8>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fba:	4621      	mov	r1, r4
 8001fbc:	1889      	adds	r1, r1, r2
 8001fbe:	6039      	str	r1, [r7, #0]
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	eb41 0303 	adc.w	r3, r1, r3
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <Joystick_UpdateValue+0x2f8>)
 8001fca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001fce:	e9c3 1200 	strd	r1, r2, [r3]
	for(uint8_t i = 0 ; i < 100 ; i ++)
 8001fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001fe0:	2b63      	cmp	r3, #99	; 0x63
 8001fe2:	d9bf      	bls.n	8001f64 <Joystick_UpdateValue+0x22c>
	}

	joystick->X = SUMX/100;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <Joystick_UpdateValue+0x2f4>)
 8001fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fea:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	f7fe fee5 	bl	8000dc0 <__aeabi_uldivmod>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffe:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
	joystick->Y = SUMY/100;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <Joystick_UpdateValue+0x2f8>)
 8002004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002008:	f04f 0264 	mov.w	r2, #100	; 0x64
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	f7fe fed6 	bl	8000dc0 <__aeabi_uldivmod>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	b292      	uxth	r2, r2
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192


}
 8002020:	bf00      	nop
 8002022:	3760      	adds	r7, #96	; 0x60
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	20000310 	.word	0x20000310
 8002030:	20000318 	.word	0x20000318
 8002034:	20000320 	.word	0x20000320
 8002038:	2000000c 	.word	0x2000000c
 800203c:	48000400 	.word	0x48000400
 8002040:	20000328 	.word	0x20000328
 8002044:	2000000a 	.word	0x2000000a

08002048 <mat_mult>:
float x_est[3] = {0, 0, 0};
float P_est[3][3] = {0};

float y;
// Matrix operations
void mat_mult(float a[3][3], float b[3][3], float result[3][3]) {
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	e05a      	b.n	8002110 <mat_mult+0xc8>
        for (int j = 0; j < 3; j++) {
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	e051      	b.n	8002104 <mat_mult+0xbc>
            result[i][j] = 0;
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	441a      	add	r2, r3
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e03a      	b.n	80020f8 <mat_mult+0xb0>
                result[i][j] += a[i][k] * b[k][j];
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	441a      	add	r2, r3
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	441a      	add	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	edd3 6a00 	vldr	s13, [r3]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	441a      	add	r2, r3
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	441a      	add	r2, r3
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	ddc1      	ble.n	8002082 <mat_mult+0x3a>
        for (int j = 0; j < 3; j++) {
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3301      	adds	r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	ddaa      	ble.n	8002060 <mat_mult+0x18>
    for (int i = 0; i < 3; i++) {
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b02      	cmp	r3, #2
 8002114:	dda1      	ble.n	800205a <mat_mult+0x12>
            }
        }
    }
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <mat_add>:

void mat_add(float a[3][3], float b[3][3], float result[3][3]) {
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e034      	b.n	80021a0 <mat_add+0x7c>
        for (int j = 0; j < 3; j++) {
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e02b      	b.n	8002194 <mat_add+0x70>
            result[i][j] = a[i][j] + b[i][j];
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	441a      	add	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	441a      	add	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	441a      	add	r2, r3
 8002180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	3301      	adds	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b02      	cmp	r3, #2
 8002198:	ddd0      	ble.n	800213c <mat_add+0x18>
    for (int i = 0; i < 3; i++) {
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	ddc7      	ble.n	8002136 <mat_add+0x12>
        }
    }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <mat_sub>:

void mat_sub(float a[3][3], float b[3][3], float result[3][3]) {
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e034      	b.n	8002230 <mat_sub+0x7c>
        for (int j = 0; j < 3; j++) {
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	e02b      	b.n	8002224 <mat_sub+0x70>
            result[i][j] = a[i][j] - b[i][j];
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	441a      	add	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	441a      	add	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	441a      	add	r2, r3
 8002210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	3301      	adds	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b02      	cmp	r3, #2
 8002228:	ddd0      	ble.n	80021cc <mat_sub+0x18>
    for (int i = 0; i < 3; i++) {
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b02      	cmp	r3, #2
 8002234:	ddc7      	ble.n	80021c6 <mat_sub+0x12>
        }
    }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <mat_transpose>:

void mat_transpose(float a[1][3], float result[3][1]) {
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e00c      	b.n	800226e <mat_transpose+0x2a>
        result[i][0] = a[0][i];
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	440a      	add	r2, r1
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b02      	cmp	r3, #2
 8002272:	ddef      	ble.n	8002254 <mat_transpose+0x10>
    }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <mat_transpose_3x3>:
            result[i][j] = a[i][j] * scalar;
        }
    }
}

void mat_transpose_3x3(float a[3][3], float result[3][3]) {
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; i++) {
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e023      	b.n	80022da <mat_transpose_3x3+0x58>
		for (int j = 0; j < 3; j++) {
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	e01a      	b.n	80022ce <mat_transpose_3x3+0x4c>
			result[j][i] = a[i][j];
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1898      	adds	r0, r3, r2
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	1899      	adds	r1, r3, r2
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4403      	add	r3, r0
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++) {
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	dde1      	ble.n	8002298 <mat_transpose_3x3+0x16>
	for (int i = 0; i < 3; i++) {
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	ddd8      	ble.n	8002292 <mat_transpose_3x3+0x10>
		}
	}
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <mat_transpose_3x1>:
void mat_transpose_3x1(float a[3][1], float result[1][3]) {
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e00c      	b.n	8002318 <mat_transpose_3x1+0x2a>
        result[0][i] = a[i][0];
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b02      	cmp	r3, #2
 800231c:	ddef      	ble.n	80022fe <mat_transpose_3x1+0x10>
    }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <mat_mult_1x3_3x3>:

void mat_mult_1x3_3x3(float a[1][3], float b[3][3], float result[1][3]) {
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e035      	b.n	80023aa <mat_mult_1x3_3x3+0x7e>
        result[0][i] = 0;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e025      	b.n	800239e <mat_mult_1x3_3x3+0x72>
            result[0][i] += a[0][j] * b[j][i];
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	edd3 6a00 	vldr	s13, [r3]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	441a      	add	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	3301      	adds	r3, #1
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	ddd6      	ble.n	8002352 <mat_mult_1x3_3x3+0x26>
    for (int i = 0; i < 3; i++) {
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	ddc6      	ble.n	800233e <mat_mult_1x3_3x3+0x12>
        }
    }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <mat_mult_3x1_1x3>:
void mat_mult_3x1_1x3(float a[3][1], float b[1][3], float result[3][3]) {
 80023be:	b480      	push	{r7}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e026      	b.n	800241e <mat_mult_3x1_1x3+0x60>
        for (int j = 0; j < 3; j++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	e01d      	b.n	8002412 <mat_mult_3x1_1x3+0x54>
            result[i][j] = a[i][0] * b[0][j]; // Perform the multiplication for each element
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	441a      	add	r2, r3
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	3301      	adds	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b02      	cmp	r3, #2
 8002416:	ddde      	ble.n	80023d6 <mat_mult_3x1_1x3+0x18>
    for (int i = 0; i < 3; i++) {
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b02      	cmp	r3, #2
 8002422:	ddd5      	ble.n	80023d0 <mat_mult_3x1_1x3+0x12>
        }
    }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <mat_mult_1x3_3x1>:
void mat_mult_1x3_3x1(float a[1][3], float b[3][1], float *result) {
 8002432:	b480      	push	{r7}
 8002434:	b087      	sub	sp, #28
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
    *result = 0; // Initialize the result as 0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e018      	b.n	800247e <mat_mult_1x3_3x1+0x4c>
        *result += a[0][i] * b[i][0]; // Perform the multiplication and accumulate
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	ed93 7a00 	vldr	s14, [r3]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	edd3 6a00 	vldr	s13, [r3]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3301      	adds	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	dde3      	ble.n	800244c <mat_mult_1x3_3x1+0x1a>
    }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <mat_mult_3x3_3x1>:

void mat_mult_3x3_3x1(float a[3][3], float b[3][1], float result[3][1]) {
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e035      	b.n	8002510 <mat_mult_3x3_3x1+0x7e>
        result[i][0] = 0; // Initialize each element of the result
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	e025      	b.n	8002504 <mat_mult_3x3_3x1+0x72>
            result[i][0] += a[i][j] * b[j][0]; // Perform multiplication and accumulate
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	441a      	add	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 6a00 	vldr	s13, [r3]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fa:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	3301      	adds	r3, #1
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b02      	cmp	r3, #2
 8002508:	ddd6      	ble.n	80024b8 <mat_mult_3x3_3x1+0x26>
    for (int i = 0; i < 3; i++) {
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b02      	cmp	r3, #2
 8002514:	ddc6      	ble.n	80024a4 <mat_mult_3x3_3x1+0x12>
        }
    }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <mat_mult_3x3_1x3>:
void mat_mult_3x3_1x3(float a[3][3], float b[1][3], float result[3][3]) {
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e02d      	b.n	8002592 <mat_mult_3x3_1x3+0x6e>
        for (int j = 0; j < 3; j++) {
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e024      	b.n	8002586 <mat_mult_3x3_1x3+0x62>
            result[i][j] = a[i][j] * b[0][j]; // Perform the multiplication for each element
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	441a      	add	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	ed93 7a00 	vldr	s14, [r3]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	441a      	add	r2, r3
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	3301      	adds	r3, #1
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b02      	cmp	r3, #2
 800258a:	ddd7      	ble.n	800253c <mat_mult_3x3_1x3+0x18>
    for (int i = 0; i < 3; i++) {
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b02      	cmp	r3, #2
 8002596:	ddce      	ble.n	8002536 <mat_mult_3x3_1x3+0x12>
        }
    }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <kalman_predict>:
void kalman_predict(float x_est[3], float P_est[3][3], float A[3][3], float G[3][1], float Q) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0b8      	sub	sp, #224	; 0xe0
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6178      	str	r0, [r7, #20]
 80025b0:	6139      	str	r1, [r7, #16]
 80025b2:	60fa      	str	r2, [r7, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	ed87 0a01 	vstr	s0, [r7, #4]
    // x_pred = A * x_est
    float x_pred[3] = {0};
 80025ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 3; i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80025cc:	e039      	b.n	8002642 <kalman_predict+0x9a>
        for (int j = 0; j < 3; j++) {
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025d4:	e02c      	b.n	8002630 <kalman_predict+0x88>
            x_pred[i] += Ak[i][j] * x_est[j];
 80025d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	33e0      	adds	r3, #224	; 0xe0
 80025de:	443b      	add	r3, r7
 80025e0:	3b1c      	subs	r3, #28
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	494f      	ldr	r1, [pc, #316]	; (8002724 <kalman_predict+0x17c>)
 80025e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	edd3 6a00 	vldr	s13, [r3]
 8002600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	33e0      	adds	r3, #224	; 0xe0
 800261e:	443b      	add	r3, r7
 8002620:	3b1c      	subs	r3, #28
 8002622:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8002626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800262a:	3301      	adds	r3, #1
 800262c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002634:	2b02      	cmp	r3, #2
 8002636:	ddce      	ble.n	80025d6 <kalman_predict+0x2e>
    for (int i = 0; i < 3; i++) {
 8002638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800263c:	3301      	adds	r3, #1
 800263e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002646:	2b02      	cmp	r3, #2
 8002648:	ddc1      	ble.n	80025ce <kalman_predict+0x26>
        }
    }

    // P_pred = A * P_est * A' + G * Q * G'
    float A_T[3][3];
    mat_transpose_3x3(Ak, A_T);
 800264a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800264e:	4619      	mov	r1, r3
 8002650:	4834      	ldr	r0, [pc, #208]	; (8002724 <kalman_predict+0x17c>)
 8002652:	f7ff fe16 	bl	8002282 <mat_transpose_3x3>

    float temp1[3][3];
    mat_mult(Ak, P_est, temp1);
 8002656:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800265a:	461a      	mov	r2, r3
 800265c:	6939      	ldr	r1, [r7, #16]
 800265e:	4831      	ldr	r0, [pc, #196]	; (8002724 <kalman_predict+0x17c>)
 8002660:	f7ff fcf2 	bl	8002048 <mat_mult>

    float temp2[3][3];
    mat_mult(temp1, A_T, temp2);
 8002664:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002668:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800266c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fce9 	bl	8002048 <mat_mult>

    float G_Q[3][1];
    for (int i = 0; i < 3; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800267c:	e017      	b.n	80026ae <kalman_predict+0x106>
		G_Q[i][0] = G[i][0] * Q;
 800267e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	4413      	add	r3, r2
 8002688:	ed93 7a00 	vldr	s14, [r3]
 800268c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	33e0      	adds	r3, #224	; 0xe0
 800269c:	443b      	add	r3, r7
 800269e:	3b94      	subs	r3, #148	; 0x94
 80026a0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 80026a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026a8:	3301      	adds	r3, #1
 80026aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	dde3      	ble.n	800267e <kalman_predict+0xd6>
	}
//    mat_scalar_mult(G, Q, G_Q);

    float G_T[1][3];
    mat_transpose_3x1(G, G_T);
 80026b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026ba:	4619      	mov	r1, r3
 80026bc:	68b8      	ldr	r0, [r7, #8]
 80026be:	f7ff fe16 	bl	80022ee <mat_transpose_3x1>

    float G_Q_G_T[3][3];
    mat_mult_3x1_1x3(G_Q, G_T, G_Q_G_T);
 80026c2:	f107 021c 	add.w	r2, r7, #28
 80026c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80026ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fe75 	bl	80023be <mat_mult_3x1_1x3>

    mat_add(temp2, G_Q_G_T, P_est);
 80026d4:	f107 011c 	add.w	r1, r7, #28
 80026d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fd20 	bl	8002124 <mat_add>

    // Update the state estimate
    for (int i = 0; i < 3; i++) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026ea:	e011      	b.n	8002710 <kalman_predict+0x168>
        x_est[i] = x_pred[i];
 80026ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	32e0      	adds	r2, #224	; 0xe0
 80026fe:	443a      	add	r2, r7
 8002700:	3a1c      	subs	r2, #28
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800270a:	3301      	adds	r3, #1
 800270c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002710:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002714:	2b02      	cmp	r3, #2
 8002716:	dde9      	ble.n	80026ec <kalman_predict+0x144>
    }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	37e0      	adds	r7, #224	; 0xe0
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000014 	.word	0x20000014

08002728 <kalman_update>:

void kalman_update(float x_est[3], float P_est[3][3], float C[1][3], float R, float z) {
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b0be      	sub	sp, #248	; 0xf8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6178      	str	r0, [r7, #20]
 8002730:	6139      	str	r1, [r7, #16]
 8002732:	60fa      	str	r2, [r7, #12]
 8002734:	ed87 0a02 	vstr	s0, [r7, #8]
 8002738:	edc7 0a01 	vstr	s1, [r7, #4]
    // y = z - C * x_pred
    float C_x[1] = {0};
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    for (int i = 0; i < 3; i++) {
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800274a:	e01a      	b.n	8002782 <kalman_update+0x5a>
        C_x[0] += Ck[0][i] * x_est[i];
 800274c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002750:	4a79      	ldr	r2, [pc, #484]	; (8002938 <kalman_update+0x210>)
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	edd3 6a00 	vldr	s13, [r3]
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4413      	add	r3, r2
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
    for (int i = 0; i < 3; i++) {
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	3301      	adds	r3, #1
 800277e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	2b02      	cmp	r3, #2
 8002788:	dde0      	ble.n	800274c <kalman_update+0x24>
    }

    y = z - C_x[0];
 800278a:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800278e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	4b69      	ldr	r3, [pc, #420]	; (800293c <kalman_update+0x214>)
 8002798:	edc3 7a00 	vstr	s15, [r3]

    // S = C * P_pred * C' + R
    float C_T[3][1];
    mat_transpose(Ck, C_T);
 800279c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027a0:	4619      	mov	r1, r3
 80027a2:	4865      	ldr	r0, [pc, #404]	; (8002938 <kalman_update+0x210>)
 80027a4:	f7ff fd4e 	bl	8002244 <mat_transpose>

    float temp1[1][3];
    mat_mult_1x3_3x3(Ck, P_est, temp1);
 80027a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027ac:	461a      	mov	r2, r3
 80027ae:	6939      	ldr	r1, [r7, #16]
 80027b0:	4861      	ldr	r0, [pc, #388]	; (8002938 <kalman_update+0x210>)
 80027b2:	f7ff fdbb 	bl	800232c <mat_mult_1x3_3x3>

    float temp2;
    mat_mult_1x3_3x1(temp1, C_T, &temp2);
 80027b6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80027ba:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80027be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe35 	bl	8002432 <mat_mult_1x3_3x1>

    float S = temp2 + R;
 80027c8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80027d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d4:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

    // K = P_pred * C' / S
    float temp3[3][1];
    mat_mult_3x3_3x1(P_est, C_T, temp3);
 80027d8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80027dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027e0:	4619      	mov	r1, r3
 80027e2:	6938      	ldr	r0, [r7, #16]
 80027e4:	f7ff fe55 	bl	8002492 <mat_mult_3x3_3x1>

    float K[3][1];
    for (int i = 0; i < 3; i++) {
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80027ee:	e018      	b.n	8002822 <kalman_update+0xfa>
        K[i][0] = temp3[i][0] / S;
 80027f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	33f8      	adds	r3, #248	; 0xf8
 80027f8:	443b      	add	r3, r7
 80027fa:	3b44      	subs	r3, #68	; 0x44
 80027fc:	edd3 6a00 	vldr	s13, [r3]
 8002800:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8002804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002808:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	33f8      	adds	r3, #248	; 0xf8
 8002810:	443b      	add	r3, r7
 8002812:	3b50      	subs	r3, #80	; 0x50
 8002814:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8002818:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800281c:	3301      	adds	r3, #1
 800281e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002826:	2b02      	cmp	r3, #2
 8002828:	dde2      	ble.n	80027f0 <kalman_update+0xc8>
    }

    // x_est = x_pred + K * y
    for (int i = 0; i < 3; i++) {
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002830:	e021      	b.n	8002876 <kalman_update+0x14e>
        x_est[i] += K[i][0] * y;
 8002832:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4413      	add	r3, r2
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	33f8      	adds	r3, #248	; 0xf8
 8002848:	443b      	add	r3, r7
 800284a:	3b50      	subs	r3, #80	; 0x50
 800284c:	edd3 6a00 	vldr	s13, [r3]
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <kalman_update+0x214>)
 8002852:	edd3 7a00 	vldr	s15, [r3]
 8002856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4413      	add	r3, r2
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 800286c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002870:	3301      	adds	r3, #1
 8002872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800287a:	2b02      	cmp	r3, #2
 800287c:	ddd9      	ble.n	8002832 <kalman_update+0x10a>
    }

    // P_est = (I - K * C) * P_pred
    float K_C[3][3];
    mat_mult_3x3_1x3(K, Ck, K_C);
 800287e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002882:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002886:	492c      	ldr	r1, [pc, #176]	; (8002938 <kalman_update+0x210>)
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fe4b 	bl	8002524 <mat_mult_3x3_1x3>

    float I[3][3] = { {1, 0, 0}, {0, 1, 0}, {0, 0, 1} };
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <kalman_update+0x218>)
 8002890:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002894:	461d      	mov	r5, r3
 8002896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	6023      	str	r3, [r4, #0]

    float I_minus_K_C[3][3];
    mat_sub(I, K_C, I_minus_K_C);
 80028a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028a6:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80028aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fc80 	bl	80021b4 <mat_sub>

    float new_P[3][3];
    mat_mult(I_minus_K_C, P_est, new_P);
 80028b4:	f107 0218 	add.w	r2, r7, #24
 80028b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fbc2 	bl	8002048 <mat_mult>

    for (int i = 0; i < 3; i++) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028ca:	e02c      	b.n	8002926 <kalman_update+0x1fe>
        for (int j = 0; j < 3; j++) {
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028d2:	e01f      	b.n	8002914 <kalman_update+0x1ec>
            P_est[i][j] = new_P[i][j];
 80028d4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1899      	adds	r1, r3, r2
 80028e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	33f8      	adds	r3, #248	; 0xf8
 80028fa:	443b      	add	r3, r7
 80028fc:	3be0      	subs	r3, #224	; 0xe0
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800290a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290e:	3301      	adds	r3, #1
 8002910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002918:	2b02      	cmp	r3, #2
 800291a:	dddb      	ble.n	80028d4 <kalman_update+0x1ac>
    for (int i = 0; i < 3; i++) {
 800291c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002920:	3301      	adds	r3, #1
 8002922:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002926:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800292a:	2b02      	cmp	r3, #2
 800292c:	ddce      	ble.n	80028cc <kalman_update+0x1a4>
        }
    }
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	37f8      	adds	r7, #248	; 0xf8
 8002934:	46bd      	mov	sp, r7
 8002936:	bdb0      	pop	{r4, r5, r7, pc}
 8002938:	20000038 	.word	0x20000038
 800293c:	2000036c 	.word	0x2000036c
 8002940:	0800cd1c 	.word	0x0800cd1c

08002944 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <modbus_1t5_Timeout+0x3c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <modbus_1t5_Timeout+0x3c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <modbus_1t5_Timeout+0x3c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <modbus_1t5_Timeout+0x3c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000370 	.word	0x20000370

08002984 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <modbus_3t5_Timeout+0x1c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	755a      	strb	r2, [r3, #21]

}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20000370 	.word	0x20000370

080029a4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f008 fc7f 	bl	800b2b0 <HAL_UART_GetError>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d101      	bne.n	80029bc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80029b8:	f7ff ffc4 	bl	8002944 <modbus_1t5_Timeout>

	}
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80029ce:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <Modbus_init+0xa0>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <Modbus_init+0xa0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <Modbus_init+0xa4>)
 80029e2:	210e      	movs	r1, #14
 80029e4:	4618      	mov	r0, r3
 80029e6:	f006 ff3b 	bl	8009860 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2110      	movs	r1, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f008 fc07 	bl	800b204 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f008 fc1e 	bl	800b23c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <Modbus_init+0xa8>)
 8002a06:	2104      	movs	r1, #4
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 fee5 	bl	800a7d8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <Modbus_init+0xa0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <Modbus_init+0xa0>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <Modbus_init+0xa0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8002a20:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8002a24:	4413      	add	r3, r2
 8002a26:	3302      	adds	r3, #2
 8002a28:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f008 f80d 	bl	800aa4c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <Modbus_init+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10c      	bne.n	8002a5c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <Modbus_init+0xa0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f005 fee5 	bl	8008818 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <Modbus_init+0xa0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 f934 	bl	8008cc4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000370 	.word	0x20000370
 8002a68:	08002985 	.word	0x08002985
 8002a6c:	080029a5 	.word	0x080029a5

08002a70 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002a7c:	23ff      	movs	r3, #255	; 0xff
 8002a7e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002a80:	23ff      	movs	r3, #255	; 0xff
 8002a82:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002a84:	e013      	b.n	8002aae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	7bbb      	ldrb	r3, [r7, #14]
 8002a90:	4053      	eors	r3, r2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <CRC16+0x64>)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	4053      	eors	r3, r2
 8002aa2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <CRC16+0x68>)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8002aae:	883b      	ldrh	r3, [r7, #0]
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	803a      	strh	r2, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e6      	bne.n	8002a86 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	7bbb      	ldrb	r3, [r7, #14]
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	b29b      	uxth	r3, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	20000158 	.word	0x20000158
 8002ad8:	20000058 	.word	0x20000058

08002adc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002ae2:	4b7e      	ldr	r3, [pc, #504]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	7ddb      	ldrb	r3, [r3, #23]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d80a      	bhi.n	8002b04 <Modbus_Protocal_Worker+0x28>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <Modbus_Protocal_Worker+0x18>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b0f 	.word	0x08002b0f
 8002af8:	08002ca3 	.word	0x08002ca3
 8002afc:	08002b9b 	.word	0x08002b9b
 8002b00:	08002bdf 	.word	0x08002bdf
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	75da      	strb	r2, [r3, #23]
		break;
 8002b0c:	e0e1      	b.n	8002cd2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002b0e:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8002b1a:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002b22:	f000 f9d3 	bl	8002ecc <Modbus_Emission>
 8002b26:	e018      	b.n	8002b5a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8002b28:	4b6c      	ldr	r3, [pc, #432]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002b32:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d00b      	beq.n	8002b5a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002b42:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8002b4a:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8002b52:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2203      	movs	r2, #3
 8002b58:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002b5a:	4b60      	ldr	r3, [pc, #384]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	f040 80ad 	bne.w	8002cc4 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002b6a:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002b74:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002b7a:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002b86:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b92:	4619      	mov	r1, r3
 8002b94:	f007 ff5a 	bl	800aa4c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8002b98:	e094      	b.n	8002cc4 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002b9a:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	7d1b      	ldrb	r3, [r3, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8091 	beq.w	8002cc8 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8002ba6:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	22fe      	movs	r2, #254	; 0xfe
 8002bac:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002bae:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8002bc8:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bca:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002bcc:	1a8a      	subs	r2, r1, r2
 8002bce:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002bd0:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002bdc:	e074      	b.n	8002cc8 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002be6:	f113 0f02 	cmn.w	r3, #2
 8002bea:	d150      	bne.n	8002c8e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002bf4:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f203 2272 	addw	r2, r3, #626	; 0x272
 8002bfc:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002c04:	3b02      	subs	r3, #2
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f7ff ff31 	bl	8002a70 <CRC16>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002c12:	793a      	ldrb	r2, [r7, #4]
 8002c14:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002c20:	3b02      	subs	r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d10c      	bne.n	8002c46 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002c2c:	797a      	ldrb	r2, [r7, #5]
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d004      	beq.n	8002c50 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	22ff      	movs	r2, #255	; 0xff
 8002c4c:	759a      	strb	r2, [r3, #22]
				break;
 8002c4e:	e040      	b.n	8002cd2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d113      	bne.n	8002c8a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8002c72:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002c7c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f009 fc70 	bl	800c564 <memcpy>

			//execute command
			Modbus_frame_response();
 8002c84:	f000 f90a 	bl	8002e9c <Modbus_frame_response>
 8002c88:	e001      	b.n	8002c8e <Modbus_Protocal_Worker+0x1b2>
				break;
 8002c8a:	bf00      	nop
					}
		break;


	}
}
 8002c8c:	e021      	b.n	8002cd2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	7d5b      	ldrb	r3, [r3, #21]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d019      	beq.n	8002ccc <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	75da      	strb	r2, [r3, #23]
		break;
 8002ca0:	e014      	b.n	8002ccc <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d10f      	bne.n	8002cd0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <Modbus_Protocal_Worker+0x200>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	75da      	strb	r2, [r3, #23]
		break;
 8002cc2:	e005      	b.n	8002cd0 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002cc4:	bf00      	nop
 8002cc6:	e004      	b.n	8002cd2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002cd0:	bf00      	nop
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000370 	.word	0x20000370

08002ce0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <modbusWrite1Register+0x80>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	7e5b      	ldrb	r3, [r3, #25]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <modbusWrite1Register+0x80>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	7e9b      	ldrb	r3, [r3, #26]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d903      	bls.n	8002d12 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002d0a:	2002      	movs	r0, #2
 8002d0c:	f000 f8a4 	bl	8002e58 <ModbusErrorReply>
			 return;
 8002d10:	e023      	b.n	8002d5a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	7ed2      	ldrb	r2, [r2, #27]
 8002d24:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	440b      	add	r3, r1
 8002d36:	7f12      	ldrb	r2, [r2, #28]
 8002d38:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			hModbus->Rxframe,
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002d48:	2208      	movs	r2, #8
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f009 fc0a 	bl	800c564 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <modbusWrite1Register+0x80>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2205      	movs	r2, #5
 8002d56:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270



}
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000370 	.word	0x20000370

08002d64 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <modbusRead1Register+0xf0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	7edb      	ldrb	r3, [r3, #27]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <modbusRead1Register+0xf0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	7f1b      	ldrb	r3, [r3, #28]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <modbusRead1Register+0xf0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	7e5b      	ldrb	r3, [r3, #25]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <modbusRead1Register+0xf0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	7e9b      	ldrb	r3, [r3, #26]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <modbusRead1Register+0x42>
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	2b7d      	cmp	r3, #125	; 0x7d
 8002da4:	d903      	bls.n	8002dae <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002da6:	2003      	movs	r0, #3
 8002da8:	f000 f856 	bl	8002e58 <ModbusErrorReply>
		 return;
 8002dac:	e04e      	b.n	8002e4c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002dae:	88ba      	ldrh	r2, [r7, #4]
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <modbusRead1Register+0xf0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d808      	bhi.n	8002dcc <modbusRead1Register+0x68>
 8002dba:	88ba      	ldrh	r2, [r7, #4]
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <modbusRead1Register+0xf0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d903      	bls.n	8002dd4 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f000 f843 	bl	8002e58 <ModbusErrorReply>
		 return;
 8002dd2:	e03b      	b.n	8002e4c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <modbusRead1Register+0xf0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <modbusRead1Register+0xf0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0052      	lsls	r2, r2, #1
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002dee:	2400      	movs	r4, #0
 8002df0:	e020      	b.n	8002e34 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <modbusRead1Register+0xf0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	88bb      	ldrh	r3, [r7, #4]
 8002dfa:	4423      	add	r3, r4
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	18d1      	adds	r1, r2, r3
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <modbusRead1Register+0xf0>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	1c63      	adds	r3, r4, #1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	7849      	ldrb	r1, [r1, #1]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <modbusRead1Register+0xf0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	88bb      	ldrh	r3, [r7, #4]
 8002e1a:	4423      	add	r3, r4
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	18d1      	adds	r1, r2, r3
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <modbusRead1Register+0xf0>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	0063      	lsls	r3, r4, #1
 8002e26:	3303      	adds	r3, #3
 8002e28:	7809      	ldrb	r1, [r1, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8002e32:	3401      	adds	r4, #1
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	429c      	cmp	r4, r3
 8002e38:	dbdb      	blt.n	8002df2 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <modbusRead1Register+0xf0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0052      	lsls	r2, r2, #1
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270

}
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000370 	.word	0x20000370

08002e58 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <ModbusErrorReply+0x40>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	7e1a      	ldrb	r2, [r3, #24]
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <ModbusErrorReply+0x40>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = Errorcode;
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <ModbusErrorReply+0x40>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	79fa      	ldrb	r2, [r7, #7]
 8002e7c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->TxCount = 2;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <ModbusErrorReply+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000370 	.word	0x20000370

08002e9c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <Modbus_frame_response+0x2c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	7e1b      	ldrb	r3, [r3, #24]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d004      	beq.n	8002eb4 <Modbus_frame_response+0x18>
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d105      	bne.n	8002eba <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002eae:	f7ff ff17 	bl	8002ce0 <modbusWrite1Register>
		break;
 8002eb2:	e006      	b.n	8002ec2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002eb4:	f7ff ff56 	bl	8002d64 <modbusRead1Register>
		break;
 8002eb8:	e003      	b.n	8002ec2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7ff ffcc 	bl	8002e58 <ModbusErrorReply>
		break;
 8002ec0:	bf00      	nop

	}
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000370 	.word	0x20000370

08002ecc <Modbus_Emission>:

void Modbus_Emission()
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d15d      	bne.n	8002f9c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8002ef6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
				hModbus->TxCount
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f009 fb2b 	bl	800c564 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3203      	adds	r2, #3
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002f34:	3b02      	subs	r3, #2
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7ff fd99 	bl	8002a70 <CRC16>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002f4e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002f50:	7939      	ldrb	r1, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	460a      	mov	r2, r1
 8002f56:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002f66:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002f68:	7979      	ldrb	r1, [r7, #5]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d10d      	bne.n	8002f9c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002f92:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8002f96:	461a      	mov	r2, r3
 8002f98:	f007 fcd8 	bl	800a94c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <Modbus_Emission+0xe8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	755a      	strb	r2, [r3, #21]

}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000370 	.word	0x20000370

08002fb8 <SetShelve_mode>:
{
	WAIT,PUSH,PULL,DONE
}PPSTATE;

void SetShelve_mode(FlagTypeDef *flag,JoystickStructureTypeDef *joystick , QEIStructureTypeDef *QEI)
{
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	flag->setShelve = 1;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
	static int8_t POINT = 0;

	if(POINT > 4) POINT = 4;
 8002fca:	4bb7      	ldr	r3, [pc, #732]	; (80032a8 <SetShelve_mode+0x2f0>)
 8002fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	dd03      	ble.n	8002fdc <SetShelve_mode+0x24>
 8002fd4:	4bb4      	ldr	r3, [pc, #720]	; (80032a8 <SetShelve_mode+0x2f0>)
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <SetShelve_mode+0x34>
	else if(POINT < 0) POINT = 0;
 8002fdc:	4bb2      	ldr	r3, [pc, #712]	; (80032a8 <SetShelve_mode+0x2f0>)
 8002fde:	f993 3000 	ldrsb.w	r3, [r3]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da02      	bge.n	8002fec <SetShelve_mode+0x34>
 8002fe6:	4bb0      	ldr	r3, [pc, #704]	; (80032a8 <SetShelve_mode+0x2f0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
	Joystick_UpdateValue(joystick, QEI);
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f7fe fea2 	bl	8001d38 <Joystick_UpdateValue>

    if(joystick->PIN[A] == 1)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d167      	bne.n	80030ce <SetShelve_mode+0x116>
	{
		registerFrame[0x23].U16 = (joystick->PointPosition[0] - QEI->HomePosition)*10; // ค่า Shelve ที่ต้องส่งให้ BaseSytem
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	ed93 7a67 	vldr	s14, [r3, #412]	; 0x19c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301a:	ee17 3a90 	vmov	r3, s15
 800301e:	b29a      	uxth	r2, r3
 8003020:	4ba2      	ldr	r3, [pc, #648]	; (80032ac <SetShelve_mode+0x2f4>)
 8003022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		registerFrame[0x24].U16 = (joystick->PointPosition[1]- QEI->HomePosition)*10;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	ed93 7a68 	vldr	s14, [r3, #416]	; 0x1a0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003036:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800303a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003042:	ee17 3a90 	vmov	r3, s15
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b98      	ldr	r3, [pc, #608]	; (80032ac <SetShelve_mode+0x2f4>)
 800304a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		registerFrame[0x25].U16 = (joystick->PointPosition[2]- QEI->HomePosition)*10;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	ed93 7a69 	vldr	s14, [r3, #420]	; 0x1a4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800305a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306a:	ee17 3a90 	vmov	r3, s15
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b8e      	ldr	r3, [pc, #568]	; (80032ac <SetShelve_mode+0x2f4>)
 8003072:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		registerFrame[0x26].U16 = (joystick->PointPosition[3]- QEI->HomePosition)*10;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	ed93 7a6a 	vldr	s14, [r3, #424]	; 0x1a8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800308a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003092:	ee17 3a90 	vmov	r3, s15
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b84      	ldr	r3, [pc, #528]	; (80032ac <SetShelve_mode+0x2f4>)
 800309a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		registerFrame[0x27].U16 = (joystick->PointPosition[4]- QEI->HomePosition)*10;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80030aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ba:	ee17 3a90 	vmov	r3, s15
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <SetShelve_mode+0x2f4>)
 80030c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		flag->setShelve = 2;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2202      	movs	r2, #2
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e056      	b.n	800317c <SetShelve_mode+0x1c4>
	}
    else if(joystick->PIN[B] == 1)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d116      	bne.n	8003106 <SetShelve_mode+0x14e>
	{
		joystick->PointPosition[POINT] = QEI->LinearPosition;
 80030d8:	4b73      	ldr	r3, [pc, #460]	; (80032a8 <SetShelve_mode+0x2f0>)
 80030da:	f993 3000 	ldrsb.w	r3, [r3]
 80030de:	4618      	mov	r0, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	f100 0366 	add.w	r3, r0, #102	; 0x66
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3304      	adds	r3, #4
 80030f0:	601a      	str	r2, [r3, #0]
		POINT++;
 80030f2:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <SetShelve_mode+0x2f0>)
 80030f4:	f993 3000 	ldrsb.w	r3, [r3]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	b25a      	sxtb	r2, r3
 8003100:	4b69      	ldr	r3, [pc, #420]	; (80032a8 <SetShelve_mode+0x2f0>)
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e03a      	b.n	800317c <SetShelve_mode+0x1c4>
	}
	else if(joystick->PIN[C] == 1)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800310c:	2b01      	cmp	r3, #1
 800310e:	d11c      	bne.n	800314a <SetShelve_mode+0x192>
	{
		joystick->PointPosition[0] = 0;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		joystick->PointPosition[1] = 0;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		joystick->PointPosition[2] = 0;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		joystick->PointPosition[3] = 0;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		joystick->PointPosition[4] = 0;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		POINT = 0;
 8003142:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <SetShelve_mode+0x2f0>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e018      	b.n	800317c <SetShelve_mode+0x1c4>
	}
	else if(joystick->PIN[D] == 1)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8003150:	2b01      	cmp	r3, #1
 8003152:	d113      	bne.n	800317c <SetShelve_mode+0x1c4>
	{
		joystick->PointPosition[POINT] = 0;
 8003154:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <SetShelve_mode+0x2f0>)
 8003156:	f993 3000 	ldrsb.w	r3, [r3]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	3366      	adds	r3, #102	; 0x66
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
		POINT--;
 800316a:	4b4f      	ldr	r3, [pc, #316]	; (80032a8 <SetShelve_mode+0x2f0>)
 800316c:	f993 3000 	ldrsb.w	r3, [r3]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	b25a      	sxtb	r2, r3
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <SetShelve_mode+0x2f0>)
 800317a:	701a      	strb	r2, [r3, #0]
	}

	if(joystick->Y < 1750 && joystick->Y >2000)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8003182:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8003186:	4293      	cmp	r3, r2
 8003188:	d80d      	bhi.n	80031a6 <SetShelve_mode+0x1ee>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8003190:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003194:	d907      	bls.n	80031a6 <SetShelve_mode+0x1ee>
	{
		Motor_Control(_BACKDRIVE_FACTOR);
 8003196:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <SetShelve_mode+0x2f8>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	f7fe fab6 	bl	8001710 <Motor_Control>
	{
 80031a4:	e028      	b.n	80031f8 <SetShelve_mode+0x240>
	}
	else if(joystick->Y > 3000)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80031ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d907      	bls.n	80031c4 <SetShelve_mode+0x20c>
	{
		Motor_Control(MAX_SPEED);
 80031b4:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <SetShelve_mode+0x2fc>)
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f7fe faa7 	bl	8001710 <Motor_Control>
 80031c2:	e019      	b.n	80031f8 <SetShelve_mode+0x240>
	}
	else if(joystick->Y < 500)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80031ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031ce:	d20c      	bcs.n	80031ea <SetShelve_mode+0x232>
	{
		Motor_Control(-MAX_SPEED + 50);
 80031d0:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <SetShelve_mode+0x2fc>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	2100      	movs	r1, #0
 80031d8:	f1d2 0432 	rsbs	r4, r2, #50	; 0x32
 80031dc:	eb61 0503 	sbc.w	r5, r1, r3
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fe fa94 	bl	8001710 <Motor_Control>
 80031e8:	e006      	b.n	80031f8 <SetShelve_mode+0x240>
	}
	else
	{
		Motor_Control(_BACKDRIVE_FACTOR);
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <SetShelve_mode+0x2f8>)
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fe fa8c 	bl	8001710 <Motor_Control>
	}

	if(joystick->X >= 3000 && joystick->Xpos <= 100)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
 80031fe:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003202:	4293      	cmp	r3, r2
 8003204:	d91f      	bls.n	8003246 <SetShelve_mode+0x28e>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 800320c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80032b8 <SetShelve_mode+0x300>
 8003210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d815      	bhi.n	8003246 <SetShelve_mode+0x28e>
	{
		joystick->Xpos += 0.001;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f95d 	bl	80004e0 <__aeabi_f2d>
 8003226:	a31e      	add	r3, pc, #120	; (adr r3, 80032a0 <SetShelve_mode+0x2e8>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fc fffa 	bl	8000224 <__adddf3>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fc64 	bl	8000b04 <__aeabi_d2f>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	}
	else if(joystick->X <= 500 && joystick->Xpos >= -100)
	{
		joystick->Xpos -= 0.001;
	}
}
 8003244:	e025      	b.n	8003292 <SetShelve_mode+0x2da>
	else if(joystick->X <= 500 && joystick->Xpos >= -100)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
 800324c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003250:	d81f      	bhi.n	8003292 <SetShelve_mode+0x2da>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8003258:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80032bc <SetShelve_mode+0x304>
 800325c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003264:	da00      	bge.n	8003268 <SetShelve_mode+0x2b0>
}
 8003266:	e014      	b.n	8003292 <SetShelve_mode+0x2da>
		joystick->Xpos -= 0.001;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f936 	bl	80004e0 <__aeabi_f2d>
 8003274:	a30a      	add	r3, pc, #40	; (adr r3, 80032a0 <SetShelve_mode+0x2e8>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fc ffd1 	bl	8000220 <__aeabi_dsub>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7fd fc3d 	bl	8000b04 <__aeabi_d2f>
 800328a:	4602      	mov	r2, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bdb0      	pop	{r4, r5, r7, pc}
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w
 80032a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80032a4:	3f50624d 	.word	0x3f50624d
 80032a8:	20000374 	.word	0x20000374
 80032ac:	2000114c 	.word	0x2000114c
 80032b0:	20000258 	.word	0x20000258
 80032b4:	20000260 	.word	0x20000260
 80032b8:	42c80000 	.word	0x42c80000
 80032bc:	c2c80000 	.word	0xc2c80000

080032c0 <SetHome_mode>:
void SetHome_mode(FlagTypeDef *flag ,QEIStructureTypeDef *QEI)
{
 80032c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
	static uint64_t tempTime;
	static uint8_t tempSTATE = 0;
	switch (tempSTATE) {
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <SetHome_mode+0xc0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d040      	beq.n	8003356 <SetHome_mode+0x96>
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	dc4e      	bgt.n	8003376 <SetHome_mode+0xb6>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <SetHome_mode+0x22>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d02a      	beq.n	8003336 <SetHome_mode+0x76>
			break;
	}

// HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)		- ของจริง
//	HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)    - สำรอง
}
 80032e0:	e049      	b.n	8003376 <SetHome_mode+0xb6>
			flag->setHome = 1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
			Motor_Control(-100);
 80032e8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80032ec:	f7fe fa10 	bl	8001710 <Motor_Control>
			tempTime = micros() + 1000000;
 80032f0:	f001 fc54 	bl	8004b9c <micros>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4922      	ldr	r1, [pc, #136]	; (8003384 <SetHome_mode+0xc4>)
 80032fa:	eb12 0801 	adds.w	r8, r2, r1
 80032fe:	f143 0900 	adc.w	r9, r3, #0
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <SetHome_mode+0xc8>)
 8003304:	e9c3 8900 	strd	r8, r9, [r3]
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8003308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800330c:	481f      	ldr	r0, [pc, #124]	; (800338c <SetHome_mode+0xcc>)
 800330e:	f004 f937 	bl	8007580 <HAL_GPIO_ReadPin>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02b      	beq.n	8003370 <SetHome_mode+0xb0>
				tempTime = micros() + 1000000;
 8003318:	f001 fc40 	bl	8004b9c <micros>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4918      	ldr	r1, [pc, #96]	; (8003384 <SetHome_mode+0xc4>)
 8003322:	1854      	adds	r4, r2, r1
 8003324:	f143 0500 	adc.w	r5, r3, #0
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <SetHome_mode+0xc8>)
 800332a:	e9c3 4500 	strd	r4, r5, [r3]
				tempSTATE = 1;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <SetHome_mode+0xc0>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
			break;
 8003334:	e01c      	b.n	8003370 <SetHome_mode+0xb0>
			Motor_Control(-75);
 8003336:	f06f 004a 	mvn.w	r0, #74	; 0x4a
 800333a:	f7fe f9e9 	bl	8001710 <Motor_Control>
			if(micros() > tempTime) tempSTATE = 2;
 800333e:	f001 fc2d 	bl	8004b9c <micros>
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <SetHome_mode+0xc8>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	4282      	cmp	r2, r0
 800334a:	418b      	sbcs	r3, r1
 800334c:	d212      	bcs.n	8003374 <SetHome_mode+0xb4>
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <SetHome_mode+0xc0>)
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
			break;
 8003354:	e00e      	b.n	8003374 <SetHome_mode+0xb4>
			Motor_Control(0);
 8003356:	2000      	movs	r0, #0
 8003358:	f7fe f9da 	bl	8001710 <Motor_Control>
			QEIEncoder_SetHome(QEI);
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	f7fe fcdd 	bl	8001d1c <QEIEncoder_SetHome>
			flag->setHome = 2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
			tempSTATE = 0;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <SetHome_mode+0xc0>)
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
			break;
 800336e:	e002      	b.n	8003376 <SetHome_mode+0xb6>
			break;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <SetHome_mode+0xb6>
			break;
 8003374:	bf00      	nop
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003380:	20000375 	.word	0x20000375
 8003384:	000f4240 	.word	0x000f4240
 8003388:	20000378 	.word	0x20000378
 800338c:	48000400 	.word	0x48000400

08003390 <Point_mode>:

void Point_mode(FlagTypeDef *flag,PIDStructureTypeDef *PIDp , PIDStructureTypeDef *PIDv , QEIStructureTypeDef *QEI,QuinticTypeDef *quintic , float goal)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6178      	str	r0, [r7, #20]
 8003398:	6139      	str	r1, [r7, #16]
 800339a:	60fa      	str	r2, [r7, #12]
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	ed87 0a01 	vstr	s0, [r7, #4]
	flag->Point = 1;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2201      	movs	r2, #1
 80033a6:	709a      	strb	r2, [r3, #2]
	flag->TrejectoryGen = 1;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2201      	movs	r2, #1
 80033ac:	711a      	strb	r2, [r3, #4]
	PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80033ba:	eef0 0a47 	vmov.f32	s1, s14
 80033be:	eeb0 0a67 	vmov.f32	s0, s15
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	6938      	ldr	r0, [r7, #16]
 80033c8:	f7fe fb68 	bl	8001a9c <PIDControllerCascade_Command2>
	Motor_Control((int32_t)PIDv->Command);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d6:	ee17 0a90 	vmov	r0, s15
 80033da:	f7fe f999 	bl	8001710 <Motor_Control>
	if(fabs(QEI->LinearPosition - goal) <= 0.05 && quintic->STATE == 3)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80033e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ec:	eef0 7ae7 	vabs.f32	s15, s15
 80033f0:	ee17 0a90 	vmov	r0, s15
 80033f4:	f7fd f874 	bl	80004e0 <__aeabi_f2d>
 80033f8:	a30b      	add	r3, pc, #44	; (adr r3, 8003428 <Point_mode+0x98>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fd fb43 	bl	8000a88 <__aeabi_dcmple>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d100      	bne.n	800340a <Point_mode+0x7a>
	{
		flag->Point = 2;
		flag->TrejectoryGen =0;
	}
}
 8003408:	e00a      	b.n	8003420 <Point_mode+0x90>
	if(fabs(QEI->LinearPosition - goal) <= 0.05 && quintic->STATE == 3)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003410:	2b03      	cmp	r3, #3
 8003412:	d105      	bne.n	8003420 <Point_mode+0x90>
		flag->Point = 2;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2202      	movs	r2, #2
 8003418:	709a      	strb	r2, [r3, #2]
		flag->TrejectoryGen =0;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	711a      	strb	r2, [r3, #4]
}
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	9999999a 	.word	0x9999999a
 800342c:	3fa99999 	.word	0x3fa99999

08003430 <Jog_mode>:



void Jog_mode(FlagTypeDef *flag,PIDStructureTypeDef *PIDp , PIDStructureTypeDef *PIDv , QEIStructureTypeDef *QEI,QuinticTypeDef *quintic)
{
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b092      	sub	sp, #72	; 0x48
 8003436:	af00      	add	r7, sp, #0
 8003438:	6478      	str	r0, [r7, #68]	; 0x44
 800343a:	6439      	str	r1, [r7, #64]	; 0x40
 800343c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
	static uint8_t SUBSTATE = IDLE;
	static uint64_t timestamp;
	static uint8_t PP = WAIT;
	switch (SUBSTATE) {
 8003440:	4bb7      	ldr	r3, [pc, #732]	; (8003720 <Jog_mode+0x2f0>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	f200 822f 	bhi.w	80038a8 <Jog_mode+0x478>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <Jog_mode+0x20>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003461 	.word	0x08003461
 8003454:	080034b9 	.word	0x080034b9
 8003458:	080035c7 	.word	0x080035c7
 800345c:	08003755 	.word	0x08003755
		case IDLE:
			if(flag->Jog == 0) flag->jogTIME = 0;
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <Jog_mode+0x3e>
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	2200      	movs	r2, #0
 800346c:	715a      	strb	r2, [r3, #5]

			flag->Jog = 1;
 800346e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003470:	2201      	movs	r2, #1
 8003472:	70da      	strb	r2, [r3, #3]
			flag->TrejectoryGen = 1;
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	2201      	movs	r2, #1
 8003478:	711a      	strb	r2, [r3, #4]
			if (flag->jogTIME < 10)
 800347a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347c:	795b      	ldrb	r3, [r3, #5]
 800347e:	2b09      	cmp	r3, #9
 8003480:	d80f      	bhi.n	80034a2 <Jog_mode+0x72>
			{
				SetPosition = Value.TargetPosition[flag->jogTIME];
 8003482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003484:	795b      	ldrb	r3, [r3, #5]
 8003486:	4aa7      	ldr	r2, [pc, #668]	; (8003724 <Jog_mode+0x2f4>)
 8003488:	3316      	adds	r3, #22
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4aa5      	ldr	r2, [pc, #660]	; (8003728 <Jog_mode+0x2f8>)
 8003492:	6013      	str	r3, [r2, #0]
				QuinticTrajectory_SetReady(quintic);
 8003494:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003496:	f000 fcb5 	bl	8003e04 <QuinticTrajectory_SetReady>
				SUBSTATE = GOING;
 800349a:	4ba1      	ldr	r3, [pc, #644]	; (8003720 <Jog_mode+0x2f0>)
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
				flag->Jog = 2;
				SolenoidSuck(0);
				SteadyPosition = SetPosition;
				return;
			}
			break;
 80034a0:	e202      	b.n	80038a8 <Jog_mode+0x478>
				flag->Jog = 2;
 80034a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a4:	2202      	movs	r2, #2
 80034a6:	70da      	strb	r2, [r3, #3]
				SolenoidSuck(0);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f000 fa7b 	bl	80039a4 <SolenoidSuck>
				SteadyPosition = SetPosition;
 80034ae:	4b9e      	ldr	r3, [pc, #632]	; (8003728 <Jog_mode+0x2f8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a9e      	ldr	r2, [pc, #632]	; (800372c <Jog_mode+0x2fc>)
 80034b4:	6013      	str	r3, [r2, #0]
				return;
 80034b6:	e213      	b.n	80038e0 <Jog_mode+0x4b0>
		case GOING:
			if(flag->jogTIME % 2 == 0) status.Z_Status = 4;				//	Pick
 80034b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ba:	795b      	ldrb	r3, [r3, #5]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <Jog_mode+0x9e>
 80034c6:	4b9a      	ldr	r3, [pc, #616]	; (8003730 <Jog_mode+0x300>)
 80034c8:	2204      	movs	r2, #4
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e009      	b.n	80034e2 <Jog_mode+0xb2>
			else if(flag->jogTIME % 2 == 1) status.Z_Status = 8;		//	Place
 80034ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d0:	795b      	ldrb	r3, [r3, #5]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <Jog_mode+0xb2>
 80034dc:	4b94      	ldr	r3, [pc, #592]	; (8003730 <Jog_mode+0x300>)
 80034de:	2208      	movs	r2, #8
 80034e0:	609a      	str	r2, [r3, #8]

			PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
 80034e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80034ee:	eef0 0a47 	vmov.f32	s1, s14
 80034f2:	eeb0 0a67 	vmov.f32	s0, s15
 80034f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034fc:	f7fe face 	bl	8001a9c <PIDControllerCascade_Command2>

			/*                    */
			SolenoidPull();
 8003500:	f000 fa28 	bl	8003954 <SolenoidPull>
			if(flag->jogTIME % 2 == 0) SolenoidSuck(0);
 8003504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003506:	795b      	ldrb	r3, [r3, #5]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <Jog_mode+0xea>
 8003512:	2000      	movs	r0, #0
 8003514:	f000 fa46 	bl	80039a4 <SolenoidSuck>
 8003518:	e009      	b.n	800352e <Jog_mode+0xfe>
			else if(flag->jogTIME % 2 == 1) SolenoidSuck(1);       //
 800351a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351c:	795b      	ldrb	r3, [r3, #5]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <Jog_mode+0xfe>
 8003528:	2001      	movs	r0, #1
 800352a:	f000 fa3b 	bl	80039a4 <SolenoidSuck>

			if(fabs(QEI->LinearPosition - SetPosition) <= 0.1)
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003534:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <Jog_mode+0x2f8>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353e:	eef0 7ae7 	vabs.f32	s15, s15
 8003542:	ee17 0a90 	vmov	r0, s15
 8003546:	f7fc ffcb 	bl	80004e0 <__aeabi_f2d>
 800354a:	a373      	add	r3, pc, #460	; (adr r3, 8003718 <Jog_mode+0x2e8>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fd fa9a 	bl	8000a88 <__aeabi_dcmple>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02b      	beq.n	80035b2 <Jog_mode+0x182>
			{
				Motor_Control(_BACKDRIVE_FACTOR);
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <Jog_mode+0x304>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fe f8d4 	bl	8001710 <Motor_Control>
//				flag->TrejectoryGen = 0;
				if(flag->jogTIME % 2 == 0) SUBSTATE = PICKING;				//	Pick
 8003568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356a:	795b      	ldrb	r3, [r3, #5]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <Jog_mode+0x14e>
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <Jog_mode+0x2f0>)
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e009      	b.n	8003592 <Jog_mode+0x162>
				else if(flag->jogTIME % 2 == 1) SUBSTATE = PLACING;		//	Place
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	795b      	ldrb	r3, [r3, #5]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <Jog_mode+0x162>
 800358c:	4b64      	ldr	r3, [pc, #400]	; (8003720 <Jog_mode+0x2f0>)
 800358e:	2203      	movs	r2, #3
 8003590:	701a      	strb	r2, [r3, #0]
				/*                Delay Time      */
				timestamp = micros() + 100000; // ตั้งแเวลาว่ารอกี่วิถึงทำ
 8003592:	f001 fb03 	bl	8004b9c <micros>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4967      	ldr	r1, [pc, #412]	; (8003738 <Jog_mode+0x308>)
 800359c:	1851      	adds	r1, r2, r1
 800359e:	6339      	str	r1, [r7, #48]	; 0x30
 80035a0:	f143 0300 	adc.w	r3, r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <Jog_mode+0x30c>)
 80035a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035ac:	e9c3 1200 	strd	r1, r2, [r3]
			}
			else{
				Motor_Control((int32_t)PIDv->Command);
			}

			break;
 80035b0:	e17a      	b.n	80038a8 <Jog_mode+0x478>
				Motor_Control((int32_t)PIDv->Command);
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80035b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035bc:	ee17 0a90 	vmov	r0, s15
 80035c0:	f7fe f8a6 	bl	8001710 <Motor_Control>
			break;
 80035c4:	e170      	b.n	80038a8 <Jog_mode+0x478>
		case PICKING:
			switch (PP) {
 80035c6:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <Jog_mode+0x310>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	f200 8169 	bhi.w	80038a2 <Jog_mode+0x472>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <Jog_mode+0x1a8>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	0800364b 	.word	0x0800364b
 80035e0:	080036ad 	.word	0x080036ad
 80035e4:	080036ef 	.word	0x080036ef
				case WAIT:
					if(micros() < timestamp)
 80035e8:	f001 fad8 	bl	8004b9c <micros>
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <Jog_mode+0x30c>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	4290      	cmp	r0, r2
 80035f4:	eb71 0303 	sbcs.w	r3, r1, r3
 80035f8:	d207      	bcs.n	800360a <Jog_mode+0x1da>
					{
						Motor_Control(_BACKDRIVE_FACTOR);
 80035fa:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <Jog_mode+0x304>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fe f884 	bl	8001710 <Motor_Control>
					else
					{
						PP = PUSH;
						timestamp = micros() + delay_time + 300000;		// delay push seconds?
					}
					break;
 8003608:	e0a3      	b.n	8003752 <Jog_mode+0x322>
						PP = PUSH;
 800360a:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <Jog_mode+0x310>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
						timestamp = micros() + delay_time + 300000;		// delay push seconds?
 8003610:	f001 fac4 	bl	8004b9c <micros>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	494a      	ldr	r1, [pc, #296]	; (8003744 <Jog_mode+0x314>)
 800361a:	6809      	ldr	r1, [r1, #0]
 800361c:	2000      	movs	r0, #0
 800361e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003620:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003622:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003626:	4641      	mov	r1, r8
 8003628:	1854      	adds	r4, r2, r1
 800362a:	4649      	mov	r1, r9
 800362c:	eb43 0101 	adc.w	r1, r3, r1
 8003630:	460d      	mov	r5, r1
 8003632:	4b45      	ldr	r3, [pc, #276]	; (8003748 <Jog_mode+0x318>)
 8003634:	18e3      	adds	r3, r4, r3
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	f145 0300 	adc.w	r3, r5, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <Jog_mode+0x30c>)
 8003640:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003644:	e9c3 1200 	strd	r1, r2, [r3]
					break;
 8003648:	e083      	b.n	8003752 <Jog_mode+0x322>

				case PUSH:
					if(micros() < timestamp)
 800364a:	f001 faa7 	bl	8004b9c <micros>
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <Jog_mode+0x30c>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	4290      	cmp	r0, r2
 8003656:	eb71 0303 	sbcs.w	r3, r1, r3
 800365a:	d20c      	bcs.n	8003676 <Jog_mode+0x246>
					{
						Motor_Control(_BACKDRIVE_FACTOR);
 800365c:	4b35      	ldr	r3, [pc, #212]	; (8003734 <Jog_mode+0x304>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	f7fe f853 	bl	8001710 <Motor_Control>
						SolenoidPush();
 800366a:	f000 f94b 	bl	8003904 <SolenoidPush>
						SolenoidSuck(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f000 f998 	bl	80039a4 <SolenoidSuck>
					else
					{
						PP = PULL;
						timestamp = micros() + delay_time;		// delay push seconds?
					}
					break;
 8003674:	e06d      	b.n	8003752 <Jog_mode+0x322>
						PP = PULL;
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <Jog_mode+0x310>)
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
						timestamp = micros() + delay_time;		// delay push seconds?
 800367c:	f001 fa8e 	bl	8004b9c <micros>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	492f      	ldr	r1, [pc, #188]	; (8003744 <Jog_mode+0x314>)
 8003686:	6809      	ldr	r1, [r1, #0]
 8003688:	2000      	movs	r0, #0
 800368a:	61b9      	str	r1, [r7, #24]
 800368c:	61f8      	str	r0, [r7, #28]
 800368e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003692:	4621      	mov	r1, r4
 8003694:	1851      	adds	r1, r2, r1
 8003696:	6139      	str	r1, [r7, #16]
 8003698:	4629      	mov	r1, r5
 800369a:	eb43 0101 	adc.w	r1, r3, r1
 800369e:	6179      	str	r1, [r7, #20]
 80036a0:	4b26      	ldr	r3, [pc, #152]	; (800373c <Jog_mode+0x30c>)
 80036a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036a6:	e9c3 1200 	strd	r1, r2, [r3]
					break;
 80036aa:	e052      	b.n	8003752 <Jog_mode+0x322>
				case PULL:
					if(micros() < timestamp)
 80036ac:	f001 fa76 	bl	8004b9c <micros>
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <Jog_mode+0x30c>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	4290      	cmp	r0, r2
 80036b8:	eb71 0303 	sbcs.w	r3, r1, r3
 80036bc:	d20c      	bcs.n	80036d8 <Jog_mode+0x2a8>
					{
						Motor_Control(_BACKDRIVE_FACTOR);
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <Jog_mode+0x304>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fe f822 	bl	8001710 <Motor_Control>
						SolenoidSuck(1);
 80036cc:	2001      	movs	r0, #1
 80036ce:	f000 f969 	bl	80039a4 <SolenoidSuck>
						SolenoidPull();
 80036d2:	f000 f93f 	bl	8003954 <SolenoidPull>
					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))

					{
						PP = DONE;
					}
					break;
 80036d6:	e03b      	b.n	8003750 <Jog_mode+0x320>
					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	481c      	ldr	r0, [pc, #112]	; (800374c <Jog_mode+0x31c>)
 80036dc:	f003 ff50 	bl	8007580 <HAL_GPIO_ReadPin>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d134      	bne.n	8003750 <Jog_mode+0x320>
						PP = DONE;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <Jog_mode+0x310>)
 80036e8:	2203      	movs	r2, #3
 80036ea:	701a      	strb	r2, [r3, #0]
					break;
 80036ec:	e030      	b.n	8003750 <Jog_mode+0x320>
				case DONE:
					flag->TrejectoryGen = 0;
 80036ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f0:	2200      	movs	r2, #0
 80036f2:	711a      	strb	r2, [r3, #4]
					SolenoidPull();
 80036f4:	f000 f92e 	bl	8003954 <SolenoidPull>
					flag->jogTIME +=1;
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	795b      	ldrb	r3, [r3, #5]
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003702:	715a      	strb	r2, [r3, #5]
					SUBSTATE = IDLE;
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <Jog_mode+0x2f0>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
					PP = WAIT;
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <Jog_mode+0x310>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
					break;
 8003710:	e01f      	b.n	8003752 <Jog_mode+0x322>
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	9999999a 	.word	0x9999999a
 800371c:	3fb99999 	.word	0x3fb99999
 8003720:	20000380 	.word	0x20000380
 8003724:	200012f4 	.word	0x200012f4
 8003728:	20000c70 	.word	0x20000c70
 800372c:	20000c6c 	.word	0x20000c6c
 8003730:	200012dc 	.word	0x200012dc
 8003734:	20000258 	.word	0x20000258
 8003738:	000186a0 	.word	0x000186a0
 800373c:	20000388 	.word	0x20000388
 8003740:	20000390 	.word	0x20000390
 8003744:	20000268 	.word	0x20000268
 8003748:	000493e0 	.word	0x000493e0
 800374c:	48000800 	.word	0x48000800
					break;
 8003750:	bf00      	nop
			}
			break;
 8003752:	e0a6      	b.n	80038a2 <Jog_mode+0x472>

		case PLACING:
			switch (PP) {
 8003754:	4b64      	ldr	r3, [pc, #400]	; (80038e8 <Jog_mode+0x4b8>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b03      	cmp	r3, #3
 800375a:	f200 80a4 	bhi.w	80038a6 <Jog_mode+0x476>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <Jog_mode+0x334>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003775 	.word	0x08003775
 8003768:	080037c7 	.word	0x080037c7
 800376c:	08003835 	.word	0x08003835
 8003770:	08003877 	.word	0x08003877
				case WAIT:
					if(micros() < timestamp)
 8003774:	f001 fa12 	bl	8004b9c <micros>
 8003778:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <Jog_mode+0x4bc>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	4290      	cmp	r0, r2
 8003780:	eb71 0303 	sbcs.w	r3, r1, r3
 8003784:	d207      	bcs.n	8003796 <Jog_mode+0x366>
					{
						Motor_Control(_BACKDRIVE_FACTOR);
 8003786:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <Jog_mode+0x4c0>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd ffbe 	bl	8001710 <Motor_Control>
					else
					{
						PP = PUSH;
						timestamp = micros() + delay_time;		// delay push seconds?
					}
					break;
 8003794:	e084      	b.n	80038a0 <Jog_mode+0x470>
						PP = PUSH;
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <Jog_mode+0x4b8>)
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
						timestamp = micros() + delay_time;		// delay push seconds?
 800379c:	f001 f9fe 	bl	8004b9c <micros>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4953      	ldr	r1, [pc, #332]	; (80038f4 <Jog_mode+0x4c4>)
 80037a6:	6809      	ldr	r1, [r1, #0]
 80037a8:	2000      	movs	r0, #0
 80037aa:	468a      	mov	sl, r1
 80037ac:	4683      	mov	fp, r0
 80037ae:	eb12 010a 	adds.w	r1, r2, sl
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	eb43 030b 	adc.w	r3, r3, fp
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <Jog_mode+0x4bc>)
 80037bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037c0:	e9c3 1200 	strd	r1, r2, [r3]
					break;
 80037c4:	e06c      	b.n	80038a0 <Jog_mode+0x470>

				case PUSH:
					if(micros() < timestamp)
 80037c6:	f001 f9e9 	bl	8004b9c <micros>
 80037ca:	4b48      	ldr	r3, [pc, #288]	; (80038ec <Jog_mode+0x4bc>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	4290      	cmp	r0, r2
 80037d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80037d6:	d215      	bcs.n	8003804 <Jog_mode+0x3d4>
					{
						Motor_Control(_BACKDRIVE_FACTOR);
 80037d8:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <Jog_mode+0x4c0>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7fd ff95 	bl	8001710 <Motor_Control>
						SolenoidPush();
 80037e6:	f000 f88d 	bl	8003904 <SolenoidPush>
						if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) SolenoidSuck(0);
 80037ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f2:	f003 fec5 	bl	8007580 <HAL_GPIO_ReadPin>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d14e      	bne.n	800389a <Jog_mode+0x46a>
 80037fc:	2000      	movs	r0, #0
 80037fe:	f000 f8d1 	bl	80039a4 <SolenoidSuck>
					else
					{
						PP = PULL;
						timestamp = micros() + delay_time;		// delay pull seconds?
					}
					break;
 8003802:	e04a      	b.n	800389a <Jog_mode+0x46a>
						PP = PULL;
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <Jog_mode+0x4b8>)
 8003806:	2202      	movs	r2, #2
 8003808:	701a      	strb	r2, [r3, #0]
						timestamp = micros() + delay_time;		// delay pull seconds?
 800380a:	f001 f9c7 	bl	8004b9c <micros>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4938      	ldr	r1, [pc, #224]	; (80038f4 <Jog_mode+0x4c4>)
 8003814:	6809      	ldr	r1, [r1, #0]
 8003816:	2000      	movs	r0, #0
 8003818:	4688      	mov	r8, r1
 800381a:	4681      	mov	r9, r0
 800381c:	eb12 0108 	adds.w	r1, r2, r8
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	eb43 0309 	adc.w	r3, r3, r9
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	4b30      	ldr	r3, [pc, #192]	; (80038ec <Jog_mode+0x4bc>)
 800382a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800382e:	e9c3 1200 	strd	r1, r2, [r3]
					break;
 8003832:	e032      	b.n	800389a <Jog_mode+0x46a>
				case PULL:
					if(micros() < timestamp)
 8003834:	f001 f9b2 	bl	8004b9c <micros>
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <Jog_mode+0x4bc>)
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	4290      	cmp	r0, r2
 8003840:	eb71 0303 	sbcs.w	r3, r1, r3
 8003844:	d20c      	bcs.n	8003860 <Jog_mode+0x430>
					{
						Motor_Control(_BACKDRIVE_FACTOR);
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <Jog_mode+0x4c0>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fd ff5e 	bl	8001710 <Motor_Control>
						SolenoidSuck(0);
 8003854:	2000      	movs	r0, #0
 8003856:	f000 f8a5 	bl	80039a4 <SolenoidSuck>
						SolenoidPull();
 800385a:	f000 f87b 	bl	8003954 <SolenoidPull>
//					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) && micros() > timestamp)
					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))
					{
						PP = DONE;
					}
					break;
 800385e:	e01e      	b.n	800389e <Jog_mode+0x46e>
					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7))
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	4825      	ldr	r0, [pc, #148]	; (80038f8 <Jog_mode+0x4c8>)
 8003864:	f003 fe8c 	bl	8007580 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d117      	bne.n	800389e <Jog_mode+0x46e>
						PP = DONE;
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <Jog_mode+0x4b8>)
 8003870:	2203      	movs	r2, #3
 8003872:	701a      	strb	r2, [r3, #0]
					break;
 8003874:	e013      	b.n	800389e <Jog_mode+0x46e>
				case DONE:
					flag->TrejectoryGen = 0;
 8003876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003878:	2200      	movs	r2, #0
 800387a:	711a      	strb	r2, [r3, #4]
					SolenoidPull();
 800387c:	f000 f86a 	bl	8003954 <SolenoidPull>
					flag->jogTIME +=1;
 8003880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003882:	795b      	ldrb	r3, [r3, #5]
 8003884:	3301      	adds	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388a:	715a      	strb	r2, [r3, #5]
					SUBSTATE = IDLE;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <Jog_mode+0x4cc>)
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
					PP = WAIT;
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <Jog_mode+0x4b8>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
					break;
 8003898:	e002      	b.n	80038a0 <Jog_mode+0x470>
					break;
 800389a:	bf00      	nop
 800389c:	e003      	b.n	80038a6 <Jog_mode+0x476>
					break;
 800389e:	bf00      	nop
			}
			break;
 80038a0:	e001      	b.n	80038a6 <Jog_mode+0x476>
			break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <Jog_mode+0x478>
			break;
 80038a6:	bf00      	nop
	}
	if(flag->Jog == 0) flag->jogTIME = 0;
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	78db      	ldrb	r3, [r3, #3]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <Jog_mode+0x486>
 80038b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b2:	2200      	movs	r2, #0
 80038b4:	715a      	strb	r2, [r3, #5]

//	PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
//	Motor_Control((int32_t)PIDv->Command);

	if(flag->jogTIME % 2 == 0) status.Z_Status = 4;				//	Pick
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	795b      	ldrb	r3, [r3, #5]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <Jog_mode+0x49c>
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <Jog_mode+0x4d0>)
 80038c6:	2204      	movs	r2, #4
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	e009      	b.n	80038e0 <Jog_mode+0x4b0>
	else if(flag->jogTIME % 2 == 1) status.Z_Status = 8;		//	Place
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	795b      	ldrb	r3, [r3, #5]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <Jog_mode+0x4b0>
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <Jog_mode+0x4d0>)
 80038dc:	2208      	movs	r2, #8
 80038de:	609a      	str	r2, [r3, #8]

}
 80038e0:	3748      	adds	r7, #72	; 0x48
 80038e2:	46bd      	mov	sp, r7
 80038e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e8:	20000390 	.word	0x20000390
 80038ec:	20000388 	.word	0x20000388
 80038f0:	20000258 	.word	0x20000258
 80038f4:	20000268 	.word	0x20000268
 80038f8:	48000800 	.word	0x48000800
 80038fc:	20000380 	.word	0x20000380
 8003900:	200012dc 	.word	0x200012dc

08003904 <SolenoidPush>:

void SolenoidPush()
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != 0)	// ไม่เจอหน้าสุด
 8003908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800390c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003910:	f003 fe36 	bl	8007580 <HAL_GPIO_ReadPin>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <SolenoidPush+0x32>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 800391a:	2201      	movs	r2, #1
 800391c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003924:	f003 fe44 	bl	80075b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003930:	f003 fe3e 	bl	80075b0 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}
}
 8003934:	e00c      	b.n	8003950 <SolenoidPush+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8003936:	2200      	movs	r2, #0
 8003938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800393c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003940:	f003 fe36 	bl	80075b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394c:	f003 fe30 	bl	80075b0 <HAL_GPIO_WritePin>
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}

08003954 <SolenoidPull>:

void SolenoidPull()
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) != 0)	// ไม่เจอหลังสุด
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	4811      	ldr	r0, [pc, #68]	; (80039a0 <SolenoidPull+0x4c>)
 800395c:	f003 fe10 	bl	8007580 <HAL_GPIO_ReadPin>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <SolenoidPull+0x2e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8003966:	2200      	movs	r2, #0
 8003968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f003 fe1e 	bl	80075b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8003974:	2201      	movs	r2, #1
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800397c:	f003 fe18 	bl	80075b0 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}

}
 8003980:	e00c      	b.n	800399c <SolenoidPull+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398c:	f003 fe10 	bl	80075b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003998:	f003 fe0a 	bl	80075b0 <HAL_GPIO_WritePin>
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	48000800 	.word	0x48000800

080039a4 <SolenoidSuck>:

void SolenoidSuck(uint8_t trig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
	if(trig == 1) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <SolenoidSuck+0x1c>
 80039b4:	2201      	movs	r2, #1
 80039b6:	2120      	movs	r1, #32
 80039b8:	4806      	ldr	r0, [pc, #24]	; (80039d4 <SolenoidSuck+0x30>)
 80039ba:	f003 fdf9 	bl	80075b0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);

}
 80039be:	e004      	b.n	80039ca <SolenoidSuck+0x26>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2120      	movs	r1, #32
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <SolenoidSuck+0x30>)
 80039c6:	f003 fdf3 	bl	80075b0 <HAL_GPIO_WritePin>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	48000800 	.word	0x48000800

080039d8 <QuinticTrajectory_Init>:
}state;

float period = 0.001;

void QuinticTrajectory_Init(QuinticTypeDef *q)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	q->Pi = 0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	615a      	str	r2, [r3, #20]
	q->Pf = 0;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
	q->t = 0;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
	q->tf = 0;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
	q->Position = 0;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
	q->Velocity = 0;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
	q->Acceleration = 0;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]

}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <QuinticTrajectory_Generator>:

void QuinticTrajectory_Generator(QuinticTypeDef *q, float pi ,float pf , float tf)
{
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	ed2d 8b02 	vpush	{d8}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a40:	ed87 1a00 	vstr	s2, [r7]
	switch(q->STATE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	f200 81cc 	bhi.w	8003de8 <QuinticTrajectory_Generator+0x3bc>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <QuinticTrajectory_Generator+0x2c>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a73 	.word	0x08003a73
 8003a60:	08003bb5 	.word	0x08003bb5
 8003a64:	08003dcf 	.word	0x08003dcf
	{
	case READY:
//		if(q->Pi != q->Pf) q->STATE = CALCULATE;
		q->STATE = CALCULATE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8003a70:	e1ba      	b.n	8003de8 <QuinticTrajectory_Generator+0x3bc>
	case CALCULATE:
		q->t = 0;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]

		q->Pi = pi;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	615a      	str	r2, [r3, #20]
		q->Pf = pf;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	619a      	str	r2, [r3, #24]
		q->tf = tf;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

		float s = pf - pi;
 8003a8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a98:	edc7 7a05 	vstr	s15, [r7, #20]
		/*Coefficient Calculated*/
		q->c[0] = q->Pi;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	61da      	str	r2, [r3, #28]
		q->c[1] = 0;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	621a      	str	r2, [r3, #32]
		q->c[2] = 0;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24
		q->c[3] = 10.0*s/powf(q->tf,3);
 8003ab4:	6978      	ldr	r0, [r7, #20]
 8003ab6:	f7fc fd13 	bl	80004e0 <__aeabi_f2d>
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	4bcd      	ldr	r3, [pc, #820]	; (8003df4 <QuinticTrajectory_Generator+0x3c8>)
 8003ac0:	f7fc fd66 	bl	8000590 <__aeabi_dmul>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4614      	mov	r4, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ad2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	f008 fd51 	bl	800c580 <powf>
 8003ade:	ee10 3a10 	vmov	r3, s0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fcfc 	bl	80004e0 <__aeabi_f2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fe78 	bl	80007e4 <__aeabi_ddiv>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7fd f802 	bl	8000b04 <__aeabi_d2f>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
		q->c[4] = -15.0*s/powf(q->tf,4);
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7fc fcea 	bl	80004e0 <__aeabi_f2d>
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4bb9      	ldr	r3, [pc, #740]	; (8003df8 <QuinticTrajectory_Generator+0x3cc>)
 8003b12:	f7fc fd3d 	bl	8000590 <__aeabi_dmul>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	461d      	mov	r5, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b24:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003b28:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2c:	f008 fd28 	bl	800c580 <powf>
 8003b30:	ee10 3a10 	vmov	r3, s0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fcd3 	bl	80004e0 <__aeabi_f2d>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	f7fc fe4f 	bl	80007e4 <__aeabi_ddiv>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7fc ffd9 	bl	8000b04 <__aeabi_d2f>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
		q->c[5] = 6.0*s/powf(q->tf,5);
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f7fc fcc1 	bl	80004e0 <__aeabi_f2d>
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	4ba6      	ldr	r3, [pc, #664]	; (8003dfc <QuinticTrajectory_Generator+0x3d0>)
 8003b64:	f7fc fd14 	bl	8000590 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b76:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	f008 fcff 	bl	800c580 <powf>
 8003b82:	ee10 3a10 	vmov	r3, s0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc fcaa 	bl	80004e0 <__aeabi_f2d>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4620      	mov	r0, r4
 8003b92:	4629      	mov	r1, r5
 8003b94:	f7fc fe26 	bl	80007e4 <__aeabi_ddiv>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7fc ffb0 	bl	8000b04 <__aeabi_d2f>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30

		q->STATE = WORKING;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8003bb2:	e119      	b.n	8003de8 <QuinticTrajectory_Generator+0x3bc>

	case WORKING:
		q->Position = q->c[0] +
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	ed93 7a07 	vldr	s14, [r3, #28]
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	edd3 6a08 	vldr	s13, [r3, #32]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q->Position = q->c[0] +
 8003bca:	ee37 8a27 	vadd.f32	s16, s14, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bda:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003bde:	eeb0 0a67 	vmov.f32	s0, s15
 8003be2:	f008 fccd 	bl	800c580 <powf>
 8003be6:	eef0 7a40 	vmov.f32	s15, s0
 8003bea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003bee:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[3]*powf(q->t,3) +
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bfe:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	f008 fcbb 	bl	800c580 <powf>
 8003c0a:	eef0 7a40 	vmov.f32	s15, s0
 8003c0e:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8003c12:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[4]*powf(q->t,4) +
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c22:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003c26:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2a:	f008 fca9 	bl	800c580 <powf>
 8003c2e:	eef0 7a40 	vmov.f32	s15, s0
 8003c32:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[3]*powf(q->t,3) +
 8003c36:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[5]*powf(q->t,5);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c46:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4e:	f008 fc97 	bl	800c580 <powf>
 8003c52:	eef0 7a40 	vmov.f32	s15, s0
 8003c56:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[4]*powf(q->t,4) +
 8003c5a:	ee78 7a27 	vadd.f32	s15, s16, s15
		q->Position = q->c[0] +
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	edc3 7a00 	vstr	s15, [r3]

		q->Velocity = q->c[1] + (float)2*q->c[2]*q->t + (float)3*q->c[3]*powf(q->t,2) + (float)4*q->c[4]*powf(q->t,3) + (float)5*q->c[5]*powf(q->t,4);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	ed93 7a08 	vldr	s14, [r3, #32]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003c70:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c7e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c88:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c8c:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c96:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9e:	f008 fc6f 	bl	800c580 <powf>
 8003ca2:	eef0 7a40 	vmov.f32	s15, s0
 8003ca6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003caa:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003cb4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003cb8:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cc2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cca:	f008 fc59 	bl	800c580 <powf>
 8003cce:	eef0 7a40 	vmov.f32	s15, s0
 8003cd2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003cd6:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003ce0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003ce4:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cee:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	f008 fc43 	bl	800c580 <powf>
 8003cfa:	eef0 7a40 	vmov.f32	s15, s0
 8003cfe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003d02:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	edc3 7a01 	vstr	s15, [r3, #4]
		q->Acceleration = 2*q->c[2] + 6*q->c[3]*q->t + 12*q->c[4]*powf(q->t,2) + 20*q->c[5]*powf(q->t,3);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d12:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003d1c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8003d20:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d2e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d38:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003d3c:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d46:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	f008 fc17 	bl	800c580 <powf>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003d5a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003d64:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003d68:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d72:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003d76:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7a:	f008 fc01 	bl	800c580 <powf>
 8003d7e:	eef0 7a40 	vmov.f32	s15, s0
 8003d82:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003d86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	edc3 7a02 	vstr	s15, [r3, #8]
		q->t += period;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <QuinticTrajectory_Generator+0x3d4>)
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	edc3 7a03 	vstr	s15, [r3, #12]
		if(q->t >= tf)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dac:	ed97 7a00 	vldr	s14, [r7]
 8003db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	d900      	bls.n	8003dbc <QuinticTrajectory_Generator+0x390>
			q->Position = q->Pf;
//			q->Velocity = 0;
//			q->Acceleration =0;
			q->STATE = FINISH;
		}
		break;
 8003dba:	e015      	b.n	8003de8 <QuinticTrajectory_Generator+0x3bc>
			q->Position = q->Pf;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]
			q->STATE = FINISH;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8003dcc:	e00c      	b.n	8003de8 <QuinticTrajectory_Generator+0x3bc>

	case FINISH:
		q->Velocity = 0;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
		q->Acceleration = 0;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
		q->Pi = q->Pf;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	615a      	str	r2, [r3, #20]
		break;
 8003de6:	bf00      	nop
	}
}
 8003de8:	bf00      	nop
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	ecbd 8b02 	vpop	{d8}
 8003df2:	bdb0      	pop	{r4, r5, r7, pc}
 8003df4:	40240000 	.word	0x40240000
 8003df8:	c02e0000 	.word	0xc02e0000
 8003dfc:	40180000 	.word	0x40180000
 8003e00:	2000026c 	.word	0x2000026c

08003e04 <QuinticTrajectory_SetReady>:

void QuinticTrajectory_SetReady(QuinticTypeDef *q)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b08e      	sub	sp, #56	; 0x38
 8003e26:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e28:	f001 fa11 	bl	800524e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e2c:	f000 fa6a 	bl	8004304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e30:	f000 fd3e 	bl	80048b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e34:	f000 fd02 	bl	800483c <MX_DMA_Init>
  MX_TIM5_Init();
 8003e38:	f000 fc2c 	bl	8004694 <MX_TIM5_Init>
  MX_TIM2_Init();
 8003e3c:	f000 fb34 	bl	80044a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e40:	f000 fb80 	bl	8004544 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003e44:	f000 fcac 	bl	80047a0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003e48:	f000 fbca 	bl	80045e0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003e4c:	f000 faa4 	bl	8004398 <MX_ADC1_Init>
  MX_TIM16_Init();
 8003e50:	f000 fc76 	bl	8004740 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  /* Initial Modbus Variable */
  hmodbus.huart = &huart2;
 8003e54:	4ba1      	ldr	r3, [pc, #644]	; (80040dc <main+0x2bc>)
 8003e56:	4aa2      	ldr	r2, [pc, #648]	; (80040e0 <main+0x2c0>)
 8003e58:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8003e5a:	4ba0      	ldr	r3, [pc, #640]	; (80040dc <main+0x2bc>)
 8003e5c:	4aa1      	ldr	r2, [pc, #644]	; (80040e4 <main+0x2c4>)
 8003e5e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8003e60:	4b9e      	ldr	r3, [pc, #632]	; (80040dc <main+0x2bc>)
 8003e62:	2215      	movs	r2, #21
 8003e64:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8003e66:	4b9d      	ldr	r3, [pc, #628]	; (80040dc <main+0x2bc>)
 8003e68:	22c8      	movs	r2, #200	; 0xc8
 8003e6a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8003e6c:	499e      	ldr	r1, [pc, #632]	; (80040e8 <main+0x2c8>)
 8003e6e:	489b      	ldr	r0, [pc, #620]	; (80040dc <main+0x2bc>)
 8003e70:	f7fe fda8 	bl	80029c4 <Modbus_init>

  pon = 0;
 8003e74:	4b9d      	ldr	r3, [pc, #628]	; (80040ec <main+0x2cc>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim4);							// Initialize PMW Signal Timer
 8003e7a:	489d      	ldr	r0, [pc, #628]	; (80040f0 <main+0x2d0>)
 8003e7c:	f004 fc5c 	bl	8008738 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003e80:	2104      	movs	r1, #4
 8003e82:	489b      	ldr	r0, [pc, #620]	; (80040f0 <main+0x2d0>)
 8003e84:	f004 fda4 	bl	80089d0 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, Joystick.XYBuffer, 200);
 8003e88:	22c8      	movs	r2, #200	; 0xc8
 8003e8a:	499a      	ldr	r1, [pc, #616]	; (80040f4 <main+0x2d4>)
 8003e8c:	489a      	ldr	r0, [pc, #616]	; (80040f8 <main+0x2d8>)
 8003e8e:	f001 fe29 	bl	8005ae4 <HAL_ADC_Start_DMA>

  float PID_P_up[3] = {0.68 ,0.000012, 0}; //{0.82 ,0.000038, 0};  {0.68 ,0.000012, 0}
 8003e92:	4a9a      	ldr	r2, [pc, #616]	; (80040fc <main+0x2dc>)
 8003e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_P_down[3] = {0.68 ,0.000012, 0}; //{0.88 ,0.000028, 0}
 8003e9e:	4a97      	ldr	r2, [pc, #604]	; (80040fc <main+0x2dc>)
 8003ea0:	f107 0318 	add.w	r3, r7, #24
 8003ea4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float PID_V_up[3] = {3.7 ,0.0013, 0.00000054}; //{3.7 ,0.0013, 0.00000054}  {3.0 ,0.00054, 0.00000039}
 8003eaa:	4a95      	ldr	r2, [pc, #596]	; (8004100 <main+0x2e0>)
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003eb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_V_down[3] = {3.4 ,0.00085, 0.00000054}; //{3.4 ,0.00085, 0.00000054}
 8003eb6:	4a93      	ldr	r2, [pc, #588]	; (8004104 <main+0x2e4>)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 8003ec0:	4991      	ldr	r1, [pc, #580]	; (8004108 <main+0x2e8>)
 8003ec2:	4892      	ldr	r0, [pc, #584]	; (800410c <main+0x2ec>)
 8003ec4:	f7fd fe0c 	bl	8001ae0 <QEIEncoder_Init>
  PIDController_Init(&PIDp, PID_P_up[0], PID_P_up[1], PID_P_up[2] , PID_P_down[0], PID_P_down[1], PID_P_down[2]);	// Initialize Position Controller
 8003ec8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ecc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ed0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003ed4:	ed97 6a06 	vldr	s12, [r7, #24]
 8003ed8:	edd7 5a07 	vldr	s11, [r7, #28]
 8003edc:	ed97 5a08 	vldr	s10, [r7, #32]
 8003ee0:	eef0 2a45 	vmov.f32	s5, s10
 8003ee4:	eeb0 2a65 	vmov.f32	s4, s11
 8003ee8:	eef0 1a46 	vmov.f32	s3, s12
 8003eec:	eeb0 1a66 	vmov.f32	s2, s13
 8003ef0:	eef0 0a47 	vmov.f32	s1, s14
 8003ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef8:	4885      	ldr	r0, [pc, #532]	; (8004110 <main+0x2f0>)
 8003efa:	f7fd fbcd 	bl	8001698 <PIDController_Init>
  PIDController_Init(&PIDv, PID_V_up[0], PID_V_up[1], PID_V_up[2] , PID_V_down[0], PID_V_down[1], PID_V_down[2]);	// Initialize Velocity Controller
 8003efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f02:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f06:	edd7 6a05 	vldr	s13, [r7, #20]
 8003f0a:	ed97 6a00 	vldr	s12, [r7]
 8003f0e:	edd7 5a01 	vldr	s11, [r7, #4]
 8003f12:	ed97 5a02 	vldr	s10, [r7, #8]
 8003f16:	eef0 2a45 	vmov.f32	s5, s10
 8003f1a:	eeb0 2a65 	vmov.f32	s4, s11
 8003f1e:	eef0 1a46 	vmov.f32	s3, s12
 8003f22:	eeb0 1a66 	vmov.f32	s2, s13
 8003f26:	eef0 0a47 	vmov.f32	s1, s14
 8003f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2e:	4879      	ldr	r0, [pc, #484]	; (8004114 <main+0x2f4>)
 8003f30:	f7fd fbb2 	bl	8001698 <PIDController_Init>

  Joystick.Xpos = 0;
 8003f34:	4b6f      	ldr	r3, [pc, #444]	; (80040f4 <main+0x2d4>)
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// SET to UPWARD
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2110      	movs	r1, #16
 8003f42:	4875      	ldr	r0, [pc, #468]	; (8004118 <main+0x2f8>)
 8003f44:	f003 fb34 	bl	80075b0 <HAL_GPIO_WritePin>

  QuinticTrajectory_Init(&quintic);
 8003f48:	4874      	ldr	r0, [pc, #464]	; (800411c <main+0x2fc>)
 8003f4a:	f7ff fd45 	bl	80039d8 <QuinticTrajectory_Init>
  STATE = IDLE;
 8003f4e:	4b74      	ldr	r3, [pc, #464]	; (8004120 <main+0x300>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	801a      	strh	r2, [r3, #0]
  SteadyPosition = QEI.LinearPosition;
 8003f54:	4b6d      	ldr	r3, [pc, #436]	; (800410c <main+0x2ec>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4a72      	ldr	r2, [pc, #456]	; (8004124 <main+0x304>)
 8003f5a:	6013      	str	r3, [r2, #0]


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2120      	movs	r1, #32
 8003f60:	486d      	ldr	r0, [pc, #436]	; (8004118 <main+0x2f8>)
 8003f62:	f003 fb25 	bl	80075b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8003f66:	2200      	movs	r2, #0
 8003f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f70:	f003 fb1e 	bl	80075b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7c:	f003 fb18 	bl	80075b0 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 8003f80:	4869      	ldr	r0, [pc, #420]	; (8004128 <main+0x308>)
 8003f82:	f004 fc49 	bl	8008818 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 8003f86:	4869      	ldr	r0, [pc, #420]	; (800412c <main+0x30c>)
 8003f88:	f004 fc46 	bl	8008818 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Protocol Part */
	  status.StateFrame = registerFrame[0x01].U16;
 8003f8c:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <main+0x2c8>)
 8003f8e:	885b      	ldrh	r3, [r3, #2]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <main+0x310>)
 8003f94:	611a      	str	r2, [r3, #16]
	  pon = 1;
 8003f96:	4b55      	ldr	r3, [pc, #340]	; (80040ec <main+0x2cc>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
	  Modbus_Protocal_Worker();
 8003f9c:	f7fe fd9e 	bl	8002adc <Modbus_Protocal_Worker>
	  Heartbeat();
 8003fa0:	f7fd f88c 	bl	80010bc <Heartbeat>
	  Routine(&QEI,&Joystick);
 8003fa4:	4953      	ldr	r1, [pc, #332]	; (80040f4 <main+0x2d4>)
 8003fa6:	4859      	ldr	r0, [pc, #356]	; (800410c <main+0x2ec>)
 8003fa8:	f7fd f8ae 	bl	8001108 <Routine>
	  switch (STATE) {
 8003fac:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <main+0x300>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	f200 8150 	bhi.w	8004256 <main+0x436>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <main+0x19c>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fd5 	.word	0x08003fd5
 8003fc0:	08004045 	.word	0x08004045
 8003fc4:	080041af 	.word	0x080041af
 8003fc8:	0800413d 	.word	0x0800413d
 8003fcc:	0800408f 	.word	0x0800408f
 8003fd0:	080041f7 	.word	0x080041f7
		case IDLE:
			if(registerFrame[0x01].U16 == 2) STATE = SETHOME;
 8003fd4:	4b44      	ldr	r3, [pc, #272]	; (80040e8 <main+0x2c8>)
 8003fd6:	885b      	ldrh	r3, [r3, #2]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d103      	bne.n	8003fe4 <main+0x1c4>
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <main+0x300>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	e016      	b.n	8004012 <main+0x1f2>
			else if(registerFrame[0x01].U16 == 1) STATE = SETSHELVE;
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <main+0x2c8>)
 8003fe6:	885b      	ldrh	r3, [r3, #2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d103      	bne.n	8003ff4 <main+0x1d4>
 8003fec:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <main+0x300>)
 8003fee:	2204      	movs	r2, #4
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	e00e      	b.n	8004012 <main+0x1f2>
			else if(registerFrame[0x01].U16 == 8) STATE = POINT;
 8003ff4:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <main+0x2c8>)
 8003ff6:	885b      	ldrh	r3, [r3, #2]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d103      	bne.n	8004004 <main+0x1e4>
 8003ffc:	4b48      	ldr	r3, [pc, #288]	; (8004120 <main+0x300>)
 8003ffe:	2203      	movs	r2, #3
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	e006      	b.n	8004012 <main+0x1f2>
			else if(registerFrame[0x01].U16 == 4) STATE = JOG;
 8004004:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <main+0x2c8>)
 8004006:	885b      	ldrh	r3, [r3, #2]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d102      	bne.n	8004012 <main+0x1f2>
 800400c:	4b44      	ldr	r3, [pc, #272]	; (8004120 <main+0x300>)
 800400e:	2202      	movs	r2, #2
 8004010:	801a      	strh	r2, [r3, #0]
//			SolenoidPull();
//			NoiseTest1();
			PIDControllerCascade_Command2(&PIDp, &PIDv, &QEI, SteadyPosition, 0);
 8004012:	4b44      	ldr	r3, [pc, #272]	; (8004124 <main+0x304>)
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	eddf 0a46 	vldr	s1, [pc, #280]	; 8004134 <main+0x314>
 800401c:	eeb0 0a67 	vmov.f32	s0, s15
 8004020:	4a3a      	ldr	r2, [pc, #232]	; (800410c <main+0x2ec>)
 8004022:	493c      	ldr	r1, [pc, #240]	; (8004114 <main+0x2f4>)
 8004024:	483a      	ldr	r0, [pc, #232]	; (8004110 <main+0x2f0>)
 8004026:	f7fd fd39 	bl	8001a9c <PIDControllerCascade_Command2>
//			if(fabs(SteadyPosition - QEI.LinearPosition) >= 0.05)
				Motor_Control((int32_t)(PIDv.Command));
 800402a:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <main+0x2f4>)
 800402c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004034:	ee17 0a90 	vmov	r0, s15
 8004038:	f7fd fb6a 	bl	8001710 <Motor_Control>
//			else Motor_Control(102);
			QuinticTrajectory_SetReady(&quintic);
 800403c:	4837      	ldr	r0, [pc, #220]	; (800411c <main+0x2fc>)
 800403e:	f7ff fee1 	bl	8003e04 <QuinticTrajectory_SetReady>
			break;
 8004042:	e108      	b.n	8004256 <main+0x436>

		case SETHOME:
			SetHome_mode(&Flag, &QEI);
 8004044:	4931      	ldr	r1, [pc, #196]	; (800410c <main+0x2ec>)
 8004046:	483c      	ldr	r0, [pc, #240]	; (8004138 <main+0x318>)
 8004048:	f7ff f93a 	bl	80032c0 <SetHome_mode>
			status.Z_Status = 2;
 800404c:	4b38      	ldr	r3, [pc, #224]	; (8004130 <main+0x310>)
 800404e:	2202      	movs	r2, #2
 8004050:	609a      	str	r2, [r3, #8]
			registerFrame[0x10].U16 = status.Z_Status; // update Z-axis moving status "Home"
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <main+0x310>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	b29a      	uxth	r2, r3
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <main+0x2c8>)
 800405a:	841a      	strh	r2, [r3, #32]
			if(Flag.setHome == 2)	// If finish sethome
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <main+0x318>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	f040 80ef 	bne.w	8004244 <main+0x424>
			{
				Flag.setHome = 0;
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <main+0x318>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
				status.reset = 0;
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <main+0x310>)
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <main+0x2c8>)
 8004074:	2200      	movs	r2, #0
 8004076:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 8004078:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <main+0x310>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]

				SteadyPosition = QEI.LinearPosition;
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <main+0x2ec>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	4a28      	ldr	r2, [pc, #160]	; (8004124 <main+0x304>)
 8004084:	6013      	str	r3, [r2, #0]

				STATE = IDLE;
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <main+0x300>)
 8004088:	2200      	movs	r2, #0
 800408a:	801a      	strh	r2, [r3, #0]
			}
			break;
 800408c:	e0da      	b.n	8004244 <main+0x424>

		case SETSHELVE:
			SetShelve_mode(&Flag,&Joystick, &QEI);
 800408e:	4a1f      	ldr	r2, [pc, #124]	; (800410c <main+0x2ec>)
 8004090:	4918      	ldr	r1, [pc, #96]	; (80040f4 <main+0x2d4>)
 8004092:	4829      	ldr	r0, [pc, #164]	; (8004138 <main+0x318>)
 8004094:	f7fe ff90 	bl	8002fb8 <SetShelve_mode>
			status.Z_Status = 1;
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <main+0x310>)
 800409a:	2201      	movs	r2, #1
 800409c:	609a      	str	r2, [r3, #8]
			registerFrame[0x10].U16 = status.Z_Status;
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <main+0x310>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <main+0x2c8>)
 80040a6:	841a      	strh	r2, [r3, #32]
			if(Flag.setShelve == 2)	// Finish SetShelve
 80040a8:	4b23      	ldr	r3, [pc, #140]	; (8004138 <main+0x318>)
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	f040 80cb 	bne.w	8004248 <main+0x428>
			{
				Flag.setShelve = 0;
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <main+0x318>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	705a      	strb	r2, [r3, #1]
				status.reset = 0;
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <main+0x310>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <main+0x2c8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <main+0x310>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]

				SteadyPosition = QEI.LinearPosition;
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <main+0x2ec>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4a15      	ldr	r2, [pc, #84]	; (8004124 <main+0x304>)
 80040d0:	6013      	str	r3, [r2, #0]
				STATE = IDLE;
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <main+0x300>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	801a      	strh	r2, [r3, #0]
			}
			break;
 80040d8:	e0b6      	b.n	8004248 <main+0x428>
 80040da:	bf00      	nop
 80040dc:	20000c74 	.word	0x20000c74
 80040e0:	2000085c 	.word	0x2000085c
 80040e4:	20000790 	.word	0x20000790
 80040e8:	2000114c 	.word	0x2000114c
 80040ec:	200013b0 	.word	0x200013b0
 80040f0:	200005f8 	.word	0x200005f8
 80040f4:	20000a80 	.word	0x20000a80
 80040f8:	20000394 	.word	0x20000394
 80040fc:	0800cd40 	.word	0x0800cd40
 8004100:	0800cd4c 	.word	0x0800cd4c
 8004104:	0800cd58 	.word	0x0800cd58
 8004108:	200006c4 	.word	0x200006c4
 800410c:	200009f0 	.word	0x200009f0
 8004110:	20000a28 	.word	0x20000a28
 8004114:	20000a54 	.word	0x20000a54
 8004118:	48000800 	.word	0x48000800
 800411c:	20000c34 	.word	0x20000c34
 8004120:	20001374 	.word	0x20001374
 8004124:	20000c6c 	.word	0x20000c6c
 8004128:	20000460 	.word	0x20000460
 800412c:	2000052c 	.word	0x2000052c
 8004130:	200012dc 	.word	0x200012dc
 8004134:	00000000 	.word	0x00000000
 8004138:	20001378 	.word	0x20001378
		case POINT:
			status.Z_Status = 16;
 800413c:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <main+0x49c>)
 800413e:	2210      	movs	r2, #16
 8004140:	609a      	str	r2, [r3, #8]
			GetGoalPoint();
 8004142:	f7fd f8af 	bl	80012a4 <GetGoalPoint>
			SetPosition = (float)Value.GoalPoint + QEI.HomePosition;
 8004146:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <main+0x4a0>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <main+0x4a4>)
 8004154:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415c:	4b5a      	ldr	r3, [pc, #360]	; (80042c8 <main+0x4a8>)
 800415e:	edc3 7a00 	vstr	s15, [r3]
			SteadyPosition = SetPosition;
 8004162:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <main+0x4a8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a59      	ldr	r2, [pc, #356]	; (80042cc <main+0x4ac>)
 8004168:	6013      	str	r3, [r2, #0]
			Point_mode(&Flag,&PIDp,&PIDv,&QEI,&quintic,SetPosition);
 800416a:	4b57      	ldr	r3, [pc, #348]	; (80042c8 <main+0x4a8>)
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <main+0x4b0>)
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	eeb0 0a67 	vmov.f32	s0, s15
 8004178:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <main+0x4a4>)
 800417a:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <main+0x4b4>)
 800417c:	4956      	ldr	r1, [pc, #344]	; (80042d8 <main+0x4b8>)
 800417e:	4857      	ldr	r0, [pc, #348]	; (80042dc <main+0x4bc>)
 8004180:	f7ff f906 	bl	8003390 <Point_mode>
			if(Flag.Point == 2)				// Finish Point
 8004184:	4b55      	ldr	r3, [pc, #340]	; (80042dc <main+0x4bc>)
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d15f      	bne.n	800424c <main+0x42c>
			{
				Flag.Point = 0;
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <main+0x4bc>)
 800418e:	2200      	movs	r2, #0
 8004190:	709a      	strb	r2, [r3, #2]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 8004192:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <main+0x4c0>)
 8004194:	2200      	movs	r2, #0
 8004196:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 8004198:	4b48      	ldr	r3, [pc, #288]	; (80042bc <main+0x49c>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]

				SteadyPosition = quintic.Pf;
 800419e:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <main+0x4b0>)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <main+0x4ac>)
 80041a4:	6013      	str	r3, [r2, #0]

				STATE = IDLE;
 80041a6:	4b4f      	ldr	r3, [pc, #316]	; (80042e4 <main+0x4c4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	801a      	strh	r2, [r3, #0]
			}
			break;
 80041ac:	e04e      	b.n	800424c <main+0x42c>
		case JOG:
			if(Flag.Jog == 0) GetPick_PlaceOrder(&Joystick);
 80041ae:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <main+0x4bc>)
 80041b0:	78db      	ldrb	r3, [r3, #3]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <main+0x39c>
 80041b6:	484c      	ldr	r0, [pc, #304]	; (80042e8 <main+0x4c8>)
 80041b8:	f7fd f88c 	bl	80012d4 <GetPick_PlaceOrder>
			Jog_mode(&Flag, &PIDp, &PIDv, &QEI, &quintic);
 80041bc:	4b44      	ldr	r3, [pc, #272]	; (80042d0 <main+0x4b0>)
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <main+0x4a4>)
 80041c2:	4a44      	ldr	r2, [pc, #272]	; (80042d4 <main+0x4b4>)
 80041c4:	4944      	ldr	r1, [pc, #272]	; (80042d8 <main+0x4b8>)
 80041c6:	4845      	ldr	r0, [pc, #276]	; (80042dc <main+0x4bc>)
 80041c8:	f7ff f932 	bl	8003430 <Jog_mode>
			if(Flag.Jog == 2)
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <main+0x4bc>)
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d13d      	bne.n	8004250 <main+0x430>
			{
				Flag.Jog = 0;
 80041d4:	4b41      	ldr	r3, [pc, #260]	; (80042dc <main+0x4bc>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	70da      	strb	r2, [r3, #3]
				registerFrame[0x01].U16 = 0;
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <main+0x4c0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 80041e0:	4b36      	ldr	r3, [pc, #216]	; (80042bc <main+0x49c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
				SteadyPosition = quintic.Pf;
 80041e6:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <main+0x4b0>)
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	4a38      	ldr	r2, [pc, #224]	; (80042cc <main+0x4ac>)
 80041ec:	6013      	str	r3, [r2, #0]
				STATE = IDLE;
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <main+0x4c4>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
			}
			break;
 80041f4:	e02c      	b.n	8004250 <main+0x430>
		case EMERGENCY:
			Motor_Control(0);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fd fa8a 	bl	8001710 <Motor_Control>
			static uint8_t oldStateJoy;
			static uint64_t lastTIMEJoy;

			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80041fc:	2120      	movs	r1, #32
 80041fe:	483b      	ldr	r0, [pc, #236]	; (80042ec <main+0x4cc>)
 8004200:	f003 f9be 	bl	8007580 <HAL_GPIO_ReadPin>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d124      	bne.n	8004254 <main+0x434>
			{
				STATE = IDLE;
 800420a:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <main+0x4c4>)
 800420c:	2200      	movs	r2, #0
 800420e:	801a      	strh	r2, [r3, #0]
				status.reset = 0;
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <main+0x49c>)
 8004212:	2200      	movs	r2, #0
 8004214:	60da      	str	r2, [r3, #12]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 8004216:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <main+0x4c0>)
 8004218:	2200      	movs	r2, #0
 800421a:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <main+0x49c>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
				Flag.setHome = 0;
 8004222:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <main+0x4bc>)
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
				Flag.setShelve = 0;
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <main+0x4bc>)
 800422a:	2200      	movs	r2, #0
 800422c:	705a      	strb	r2, [r3, #1]
				Flag.Point = 0;
 800422e:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <main+0x4bc>)
 8004230:	2200      	movs	r2, #0
 8004232:	709a      	strb	r2, [r3, #2]
				Flag.Jog = 0;
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <main+0x4bc>)
 8004236:	2200      	movs	r2, #0
 8004238:	70da      	strb	r2, [r3, #3]
				SteadyPosition = QEI.LinearPosition;
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <main+0x4a4>)
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	4a23      	ldr	r2, [pc, #140]	; (80042cc <main+0x4ac>)
 8004240:	6013      	str	r3, [r2, #0]
//				Flag.setShelve = 0;
//				Flag.Point = 0;
//				Flag.Jog = 0;
//			  }
//			  oldStateJoy = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
			break;
 8004242:	e007      	b.n	8004254 <main+0x434>
			break;
 8004244:	bf00      	nop
 8004246:	e006      	b.n	8004256 <main+0x436>
			break;
 8004248:	bf00      	nop
 800424a:	e004      	b.n	8004256 <main+0x436>
			break;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <main+0x436>
			break;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <main+0x436>
			break;
 8004254:	bf00      	nop
	}
	  FwReed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8004256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800425a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800425e:	f003 f98f 	bl	8007580 <HAL_GPIO_ReadPin>
 8004262:	4603      	mov	r3, r0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2200      	movs	r2, #0
 8004268:	469a      	mov	sl, r3
 800426a:	4693      	mov	fp, r2
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <main+0x4d0>)
 800426e:	e9c3 ab00 	strd	sl, fp, [r3]
	  BwReed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	481f      	ldr	r0, [pc, #124]	; (80042f4 <main+0x4d4>)
 8004276:	f003 f983 	bl	8007580 <HAL_GPIO_ReadPin>
 800427a:	4603      	mov	r3, r0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2200      	movs	r2, #0
 8004280:	4698      	mov	r8, r3
 8004282:	4691      	mov	r9, r2
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <main+0x4d8>)
 8004286:	e9c3 8900 	strd	r8, r9, [r3]
	  EMERread = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004290:	f003 f976 	bl	8007580 <HAL_GPIO_ReadPin>
 8004294:	4603      	mov	r3, r0
 8004296:	461a      	mov	r2, r3
 8004298:	4b18      	ldr	r3, [pc, #96]	; (80042fc <main+0x4dc>)
 800429a:	701a      	strb	r2, [r3, #0]

	  photoDOWN = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800429c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042a0:	4812      	ldr	r0, [pc, #72]	; (80042ec <main+0x4cc>)
 80042a2:	f003 f96d 	bl	8007580 <HAL_GPIO_ReadPin>
 80042a6:	4603      	mov	r3, r0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2200      	movs	r2, #0
 80042ac:	461c      	mov	r4, r3
 80042ae:	4615      	mov	r5, r2
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <main+0x4e0>)
 80042b2:	e9c3 4500 	strd	r4, r5, [r3]

	  EmergencyCatcher();
 80042b6:	f000 fc39 	bl	8004b2c <EmergencyCatcher>
	  status.StateFrame = registerFrame[0x01].U16;
 80042ba:	e667      	b.n	8003f8c <main+0x16c>
 80042bc:	200012dc 	.word	0x200012dc
 80042c0:	200012f4 	.word	0x200012f4
 80042c4:	200009f0 	.word	0x200009f0
 80042c8:	20000c70 	.word	0x20000c70
 80042cc:	20000c6c 	.word	0x20000c6c
 80042d0:	20000c34 	.word	0x20000c34
 80042d4:	20000a54 	.word	0x20000a54
 80042d8:	20000a28 	.word	0x20000a28
 80042dc:	20001378 	.word	0x20001378
 80042e0:	2000114c 	.word	0x2000114c
 80042e4:	20001374 	.word	0x20001374
 80042e8:	20000a80 	.word	0x20000a80
 80042ec:	48000400 	.word	0x48000400
 80042f0:	20001390 	.word	0x20001390
 80042f4:	48000800 	.word	0x48000800
 80042f8:	20001398 	.word	0x20001398
 80042fc:	200013a0 	.word	0x200013a0
 8004300:	200013a8 	.word	0x200013a8

08004304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b094      	sub	sp, #80	; 0x50
 8004308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800430a:	f107 0318 	add.w	r3, r7, #24
 800430e:	2238      	movs	r2, #56	; 0x38
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f008 f8f4 	bl	800c500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]
 8004324:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004326:	2000      	movs	r0, #0
 8004328:	f003 f972 	bl	8007610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800432c:	2301      	movs	r3, #1
 800432e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004334:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004336:	2302      	movs	r3, #2
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800433a:	2303      	movs	r3, #3
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800433e:	2306      	movs	r3, #6
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004342:	2355      	movs	r3, #85	; 0x55
 8004344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004346:	2302      	movs	r3, #2
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800434a:	2302      	movs	r3, #2
 800434c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800434e:	2302      	movs	r3, #2
 8004350:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004352:	f107 0318 	add.w	r3, r7, #24
 8004356:	4618      	mov	r0, r3
 8004358:	f003 fa0e 	bl	8007778 <HAL_RCC_OscConfig>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004362:	f000 fc35 	bl	8004bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004366:	230f      	movs	r3, #15
 8004368:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800436a:	2303      	movs	r3, #3
 800436c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	2104      	movs	r1, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f003 fd0c 	bl	8007d9c <HAL_RCC_ClockConfig>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800438a:	f000 fc21 	bl	8004bd0 <Error_Handler>
  }
}
 800438e:	bf00      	nop
 8004390:	3750      	adds	r7, #80	; 0x50
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800439e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	2220      	movs	r2, #32
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f008 f8a5 	bl	800c500 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <MX_ADC1_Init+0x104>)
 80043b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80043bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80043be:	4b37      	ldr	r3, [pc, #220]	; (800449c <MX_ADC1_Init+0x104>)
 80043c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <MX_ADC1_Init+0x104>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <MX_ADC1_Init+0x104>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80043d2:	4b32      	ldr	r3, [pc, #200]	; (800449c <MX_ADC1_Init+0x104>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80043d8:	4b30      	ldr	r3, [pc, #192]	; (800449c <MX_ADC1_Init+0x104>)
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <MX_ADC1_Init+0x104>)
 80043e0:	2204      	movs	r2, #4
 80043e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <MX_ADC1_Init+0x104>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80043ea:	4b2c      	ldr	r3, [pc, #176]	; (800449c <MX_ADC1_Init+0x104>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <MX_ADC1_Init+0x104>)
 80043f2:	2202      	movs	r2, #2
 80043f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043f6:	4b29      	ldr	r3, [pc, #164]	; (800449c <MX_ADC1_Init+0x104>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <MX_ADC1_Init+0x104>)
 8004400:	2200      	movs	r2, #0
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <MX_ADC1_Init+0x104>)
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <MX_ADC1_Init+0x104>)
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004412:	4b22      	ldr	r3, [pc, #136]	; (800449c <MX_ADC1_Init+0x104>)
 8004414:	2200      	movs	r2, #0
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004418:	4b20      	ldr	r3, [pc, #128]	; (800449c <MX_ADC1_Init+0x104>)
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004420:	481e      	ldr	r0, [pc, #120]	; (800449c <MX_ADC1_Init+0x104>)
 8004422:	f001 f9a3 	bl	800576c <HAL_ADC_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800442c:	f000 fbd0 	bl	8004bd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004438:	4619      	mov	r1, r3
 800443a:	4818      	ldr	r0, [pc, #96]	; (800449c <MX_ADC1_Init+0x104>)
 800443c:	f002 f9d4 	bl	80067e8 <HAL_ADCEx_MultiModeConfigChannel>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004446:	f000 fbc3 	bl	8004bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <MX_ADC1_Init+0x108>)
 800444c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800444e:	2306      	movs	r3, #6
 8004450:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004452:	2307      	movs	r3, #7
 8004454:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004456:	237f      	movs	r3, #127	; 0x7f
 8004458:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800445a:	2304      	movs	r3, #4
 800445c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	4619      	mov	r1, r3
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <MX_ADC1_Init+0x104>)
 8004468:	f001 fc2e 	bl	8005cc8 <HAL_ADC_ConfigChannel>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004472:	f000 fbad 	bl	8004bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <MX_ADC1_Init+0x10c>)
 8004478:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800447a:	230c      	movs	r3, #12
 800447c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4806      	ldr	r0, [pc, #24]	; (800449c <MX_ADC1_Init+0x104>)
 8004484:	f001 fc20 	bl	8005cc8 <HAL_ADC_ConfigChannel>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800448e:	f000 fb9f 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	3730      	adds	r7, #48	; 0x30
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000394 	.word	0x20000394
 80044a0:	1d500080 	.word	0x1d500080
 80044a4:	3ef08000 	.word	0x3ef08000

080044a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ae:	f107 0310 	add.w	r3, r7, #16
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044c6:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <MX_TIM2_Init+0x98>)
 80044c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <MX_TIM2_Init+0x98>)
 80044d0:	22a9      	movs	r2, #169	; 0xa9
 80044d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <MX_TIM2_Init+0x98>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <MX_TIM2_Init+0x98>)
 80044dc:	f04f 32ff 	mov.w	r2, #4294967295
 80044e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <MX_TIM2_Init+0x98>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <MX_TIM2_Init+0x98>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044ee:	4814      	ldr	r0, [pc, #80]	; (8004540 <MX_TIM2_Init+0x98>)
 80044f0:	f004 f8be 	bl	8008670 <HAL_TIM_Base_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80044fa:	f000 fb69 	bl	8004bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	4619      	mov	r1, r3
 800450a:	480d      	ldr	r0, [pc, #52]	; (8004540 <MX_TIM2_Init+0x98>)
 800450c:	f005 f838 	bl	8009580 <HAL_TIM_ConfigClockSource>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004516:	f000 fb5b 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4806      	ldr	r0, [pc, #24]	; (8004540 <MX_TIM2_Init+0x98>)
 8004528:	f006 f810 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004532:	f000 fb4d 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000460 	.word	0x20000460

08004544 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800454a:	f107 0310 	add.w	r3, r7, #16
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004558:	1d3b      	adds	r3, r7, #4
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <MX_TIM3_Init+0x94>)
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <MX_TIM3_Init+0x98>)
 8004566:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <MX_TIM3_Init+0x94>)
 800456a:	22a9      	movs	r2, #169	; 0xa9
 800456c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <MX_TIM3_Init+0x94>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <MX_TIM3_Init+0x94>)
 8004576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800457a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <MX_TIM3_Init+0x94>)
 800457e:	2200      	movs	r2, #0
 8004580:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <MX_TIM3_Init+0x94>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004588:	4813      	ldr	r0, [pc, #76]	; (80045d8 <MX_TIM3_Init+0x94>)
 800458a:	f004 f871 	bl	8008670 <HAL_TIM_Base_Init>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004594:	f000 fb1c 	bl	8004bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800459c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800459e:	f107 0310 	add.w	r3, r7, #16
 80045a2:	4619      	mov	r1, r3
 80045a4:	480c      	ldr	r0, [pc, #48]	; (80045d8 <MX_TIM3_Init+0x94>)
 80045a6:	f004 ffeb 	bl	8009580 <HAL_TIM_ConfigClockSource>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80045b0:	f000 fb0e 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045b4:	2300      	movs	r3, #0
 80045b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4805      	ldr	r0, [pc, #20]	; (80045d8 <MX_TIM3_Init+0x94>)
 80045c2:	f005 ffc3 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80045cc:	f000 fb00 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80045d0:	bf00      	nop
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2000052c 	.word	0x2000052c
 80045dc:	40000400 	.word	0x40000400

080045e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045f2:	463b      	mov	r3, r7
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
 8004600:	615a      	str	r2, [r3, #20]
 8004602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004604:	4b21      	ldr	r3, [pc, #132]	; (800468c <MX_TIM4_Init+0xac>)
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <MX_TIM4_Init+0xb0>)
 8004608:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <MX_TIM4_Init+0xac>)
 800460c:	22a9      	movs	r2, #169	; 0xa9
 800460e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <MX_TIM4_Init+0xac>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004616:	4b1d      	ldr	r3, [pc, #116]	; (800468c <MX_TIM4_Init+0xac>)
 8004618:	f240 32e7 	movw	r2, #999	; 0x3e7
 800461c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <MX_TIM4_Init+0xac>)
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <MX_TIM4_Init+0xac>)
 8004626:	2200      	movs	r2, #0
 8004628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800462a:	4818      	ldr	r0, [pc, #96]	; (800468c <MX_TIM4_Init+0xac>)
 800462c:	f004 f96c 	bl	8008908 <HAL_TIM_PWM_Init>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004636:	f000 facb 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004642:	f107 031c 	add.w	r3, r7, #28
 8004646:	4619      	mov	r1, r3
 8004648:	4810      	ldr	r0, [pc, #64]	; (800468c <MX_TIM4_Init+0xac>)
 800464a:	f005 ff7f 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004654:	f000 fabc 	bl	8004bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004658:	2360      	movs	r3, #96	; 0x60
 800465a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004668:	463b      	mov	r3, r7
 800466a:	2204      	movs	r2, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4807      	ldr	r0, [pc, #28]	; (800468c <MX_TIM4_Init+0xac>)
 8004670:	f004 fe72 	bl	8009358 <HAL_TIM_PWM_ConfigChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800467a:	f000 faa9 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800467e:	4803      	ldr	r0, [pc, #12]	; (800468c <MX_TIM4_Init+0xac>)
 8004680:	f000 fc34 	bl	8004eec <HAL_TIM_MspPostInit>

}
 8004684:	bf00      	nop
 8004686:	3728      	adds	r7, #40	; 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200005f8 	.word	0x200005f8
 8004690:	40000800 	.word	0x40000800

08004694 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	; 0x30
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	2224      	movs	r2, #36	; 0x24
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f007 ff2c 	bl	800c500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046a8:	463b      	mov	r3, r7
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <MX_TIM5_Init+0xa4>)
 80046b4:	4a21      	ldr	r2, [pc, #132]	; (800473c <MX_TIM5_Init+0xa8>)
 80046b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80046b8:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <MX_TIM5_Init+0xa4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <MX_TIM5_Init+0xa4>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80046c4:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <MX_TIM5_Init+0xa4>)
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <MX_TIM5_Init+0xa4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <MX_TIM5_Init+0xa4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80046d8:	2303      	movs	r3, #3
 80046da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80046f0:	2301      	movs	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	4619      	mov	r1, r3
 8004702:	480d      	ldr	r0, [pc, #52]	; (8004738 <MX_TIM5_Init+0xa4>)
 8004704:	f004 fb6c 	bl	8008de0 <HAL_TIM_Encoder_Init>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800470e:	f000 fa5f 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004712:	2300      	movs	r3, #0
 8004714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800471a:	463b      	mov	r3, r7
 800471c:	4619      	mov	r1, r3
 800471e:	4806      	ldr	r0, [pc, #24]	; (8004738 <MX_TIM5_Init+0xa4>)
 8004720:	f005 ff14 	bl	800a54c <HAL_TIMEx_MasterConfigSynchronization>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800472a:	f000 fa51 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800472e:	bf00      	nop
 8004730:	3730      	adds	r7, #48	; 0x30
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200006c4 	.word	0x200006c4
 800473c:	40000c00 	.word	0x40000c00

08004740 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <MX_TIM16_Init+0x58>)
 8004746:	4a15      	ldr	r2, [pc, #84]	; (800479c <MX_TIM16_Init+0x5c>)
 8004748:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800474a:	4b13      	ldr	r3, [pc, #76]	; (8004798 <MX_TIM16_Init+0x58>)
 800474c:	22a9      	movs	r2, #169	; 0xa9
 800474e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <MX_TIM16_Init+0x58>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <MX_TIM16_Init+0x58>)
 8004758:	f240 4279 	movw	r2, #1145	; 0x479
 800475c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800475e:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <MX_TIM16_Init+0x58>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <MX_TIM16_Init+0x58>)
 8004766:	2200      	movs	r2, #0
 8004768:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <MX_TIM16_Init+0x58>)
 800476c:	2200      	movs	r2, #0
 800476e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004770:	4809      	ldr	r0, [pc, #36]	; (8004798 <MX_TIM16_Init+0x58>)
 8004772:	f003 ff7d 	bl	8008670 <HAL_TIM_Base_Init>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800477c:	f000 fa28 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8004780:	2108      	movs	r1, #8
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <MX_TIM16_Init+0x58>)
 8004784:	f004 fa36 	bl	8008bf4 <HAL_TIM_OnePulse_Init>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800478e:	f000 fa1f 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000790 	.word	0x20000790
 800479c:	40014400 	.word	0x40014400

080047a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047a6:	4a24      	ldr	r2, [pc, #144]	; (8004838 <MX_USART2_UART_Init+0x98>)
 80047a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80047aa:	4b22      	ldr	r3, [pc, #136]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047ac:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80047b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047bc:	2200      	movs	r2, #0
 80047be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047ca:	220c      	movs	r2, #12
 80047cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047da:	4b16      	ldr	r3, [pc, #88]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047dc:	2200      	movs	r2, #0
 80047de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047ec:	4811      	ldr	r0, [pc, #68]	; (8004834 <MX_USART2_UART_Init+0x94>)
 80047ee:	f005 ff93 	bl	800a718 <HAL_UART_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80047f8:	f000 f9ea 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047fc:	2100      	movs	r1, #0
 80047fe:	480d      	ldr	r0, [pc, #52]	; (8004834 <MX_USART2_UART_Init+0x94>)
 8004800:	f007 fdb3 	bl	800c36a <HAL_UARTEx_SetTxFifoThreshold>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800480a:	f000 f9e1 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800480e:	2100      	movs	r1, #0
 8004810:	4808      	ldr	r0, [pc, #32]	; (8004834 <MX_USART2_UART_Init+0x94>)
 8004812:	f007 fde8 	bl	800c3e6 <HAL_UARTEx_SetRxFifoThreshold>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800481c:	f000 f9d8 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004820:	4804      	ldr	r0, [pc, #16]	; (8004834 <MX_USART2_UART_Init+0x94>)
 8004822:	f007 fd69 	bl	800c2f8 <HAL_UARTEx_DisableFifoMode>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800482c:	f000 f9d0 	bl	8004bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	2000085c 	.word	0x2000085c
 8004838:	40004400 	.word	0x40004400

0800483c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <MX_DMA_Init+0x70>)
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	4a19      	ldr	r2, [pc, #100]	; (80048ac <MX_DMA_Init+0x70>)
 8004848:	f043 0304 	orr.w	r3, r3, #4
 800484c:	6493      	str	r3, [r2, #72]	; 0x48
 800484e:	4b17      	ldr	r3, [pc, #92]	; (80048ac <MX_DMA_Init+0x70>)
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <MX_DMA_Init+0x70>)
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	4a13      	ldr	r2, [pc, #76]	; (80048ac <MX_DMA_Init+0x70>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6493      	str	r3, [r2, #72]	; 0x48
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <MX_DMA_Init+0x70>)
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004872:	2200      	movs	r2, #0
 8004874:	2100      	movs	r1, #0
 8004876:	200b      	movs	r0, #11
 8004878:	f002 f999 	bl	8006bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800487c:	200b      	movs	r0, #11
 800487e:	f002 f9b0 	bl	8006be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2100      	movs	r1, #0
 8004886:	200c      	movs	r0, #12
 8004888:	f002 f991 	bl	8006bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800488c:	200c      	movs	r0, #12
 800488e:	f002 f9a8 	bl	8006be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004892:	2200      	movs	r2, #0
 8004894:	2100      	movs	r1, #0
 8004896:	200d      	movs	r0, #13
 8004898:	f002 f989 	bl	8006bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800489c:	200d      	movs	r0, #13
 800489e:	f002 f9a0 	bl	8006be2 <HAL_NVIC_EnableIRQ>

}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000

080048b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c6:	4b5a      	ldr	r3, [pc, #360]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	4a59      	ldr	r2, [pc, #356]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048d2:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048de:	4b54      	ldr	r3, [pc, #336]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	4a53      	ldr	r2, [pc, #332]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048e4:	f043 0320 	orr.w	r3, r3, #32
 80048e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ea:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	4a4d      	ldr	r2, [pc, #308]	; (8004a30 <MX_GPIO_Init+0x180>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004902:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <MX_GPIO_Init+0x180>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800490e:	4b48      	ldr	r3, [pc, #288]	; (8004a30 <MX_GPIO_Init+0x180>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	4a47      	ldr	r2, [pc, #284]	; (8004a30 <MX_GPIO_Init+0x180>)
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800491a:	4b45      	ldr	r3, [pc, #276]	; (8004a30 <MX_GPIO_Init+0x180>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	607b      	str	r3, [r7, #4]
 8004924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8004926:	2200      	movs	r2, #0
 8004928:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800492c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004930:	f002 fe3e 	bl	80075b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004934:	2200      	movs	r2, #0
 8004936:	2130      	movs	r1, #48	; 0x30
 8004938:	483e      	ldr	r0, [pc, #248]	; (8004a34 <MX_GPIO_Init+0x184>)
 800493a:	f002 fe39 	bl	80075b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800493e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	4619      	mov	r1, r3
 8004954:	4837      	ldr	r0, [pc, #220]	; (8004a34 <MX_GPIO_Init+0x184>)
 8004956:	f002 fc91 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800495a:	2304      	movs	r3, #4
 800495c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004966:	f107 0314 	add.w	r3, r7, #20
 800496a:	4619      	mov	r1, r3
 800496c:	4831      	ldr	r0, [pc, #196]	; (8004a34 <MX_GPIO_Init+0x184>)
 800496e:	f002 fc85 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8004972:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004978:	2301      	movs	r3, #1
 800497a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004980:	2300      	movs	r3, #0
 8004982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4619      	mov	r1, r3
 800498a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800498e:	f002 fc75 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8004992:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8004996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800499c:	2301      	movs	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4619      	mov	r1, r3
 80049a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049aa:	f002 fc67 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80049ae:	2330      	movs	r3, #48	; 0x30
 80049b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049be:	f107 0314 	add.w	r3, r7, #20
 80049c2:	4619      	mov	r1, r3
 80049c4:	481b      	ldr	r0, [pc, #108]	; (8004a34 <MX_GPIO_Init+0x184>)
 80049c6:	f002 fc59 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5;
 80049ca:	f241 4330 	movw	r3, #5168	; 0x1430
 80049ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d4:	2301      	movs	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	4619      	mov	r1, r3
 80049de:	4816      	ldr	r0, [pc, #88]	; (8004a38 <MX_GPIO_Init+0x188>)
 80049e0:	f002 fc4c 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80049e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	4619      	mov	r1, r3
 80049f8:	480f      	ldr	r0, [pc, #60]	; (8004a38 <MX_GPIO_Init+0x188>)
 80049fa:	f002 fc3f 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a06:	2301      	movs	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0a:	f107 0314 	add.w	r3, r7, #20
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4808      	ldr	r0, [pc, #32]	; (8004a34 <MX_GPIO_Init+0x184>)
 8004a12:	f002 fc33 	bl	800727c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2028      	movs	r0, #40	; 0x28
 8004a1c:	f002 f8c7 	bl	8006bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a20:	2028      	movs	r0, #40	; 0x28
 8004a22:	f002 f8de 	bl	8006be2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004a26:	bf00      	nop
 8004a28:	3728      	adds	r7, #40	; 0x28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	48000800 	.word	0x48000800
 8004a38:	48000400 	.word	0x48000400

08004a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8004a3c:	b5b0      	push	{r4, r5, r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a24      	ldr	r2, [pc, #144]	; (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	1c54      	adds	r4, r2, #1
 8004a54:	f143 0500 	adc.w	r5, r3, #0
 8004a58:	4b20      	ldr	r3, [pc, #128]	; (8004adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004a5a:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3) // [1 microseconds]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d134      	bne.n	8004ad0 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		QEIEncoder_Update(&QEI, &htim5, micros());
 8004a66:	f000 f899 	bl	8004b9c <micros>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	491d      	ldr	r1, [pc, #116]	; (8004ae4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a70:	481d      	ldr	r0, [pc, #116]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004a72:	f7fd f84d 	bl	8001b10 <QEIEncoder_Update>
		if(Flag.TrejectoryGen == 1)
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a78:	791b      	ldrb	r3, [r3, #4]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			QuinticTrajectory_Generator(&quintic, QEI.LinearPosition, SetPosition, 2);
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004a80:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004a84:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004a86:	ed93 7a00 	vldr	s14, [r3]
 8004a8a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8004a8e:	eef0 0a47 	vmov.f32	s1, s14
 8004a92:	eeb0 0a67 	vmov.f32	s0, s15
 8004a96:	4817      	ldr	r0, [pc, #92]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004a98:	f7fe ffc8 	bl	8003a2c <QuinticTrajectory_Generator>
		}
		kalman_predict(&KFoutput, &P_est, &Ak, &G, Q);
 8004a9c:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004aa8:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004aaa:	4916      	ldr	r1, [pc, #88]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004aac:	4816      	ldr	r0, [pc, #88]	; (8004b08 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004aae:	f7fd fd7b 	bl	80025a8 <kalman_predict>
		kalman_update(&KFoutput, &P_est, &Ck, R, QEI.LinearPosition);
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004ab4:	edd3 7a00 	vldr	s15, [r3]
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004aba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004abe:	eef0 0a47 	vmov.f32	s1, s14
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004ac8:	490e      	ldr	r1, [pc, #56]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004aca:	480f      	ldr	r0, [pc, #60]	; (8004b08 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004acc:	f7fd fe2c 	bl	8002728 <kalman_update>

	}
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad8:	20000460 	.word	0x20000460
 8004adc:	200009e8 	.word	0x200009e8
 8004ae0:	2000052c 	.word	0x2000052c
 8004ae4:	200006c4 	.word	0x200006c4
 8004ae8:	200009f0 	.word	0x200009f0
 8004aec:	20001378 	.word	0x20001378
 8004af0:	20000c70 	.word	0x20000c70
 8004af4:	20000c34 	.word	0x20000c34
 8004af8:	20000054 	.word	0x20000054
 8004afc:	20000044 	.word	0x20000044
 8004b00:	20000014 	.word	0x20000014
 8004b04:	20000348 	.word	0x20000348
 8004b08:	20001380 	.word	0x20001380
 8004b0c:	20000050 	.word	0x20000050
 8004b10:	20000038 	.word	0x20000038

08004b14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	80fb      	strh	r3, [r7, #6]
//		Flag.setHome = 0;
//		Flag.setShelve = 0;
//		Flag.Point =0;
//		Flag.Jog;
	}
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <EmergencyCatcher>:

void EmergencyCatcher()
{
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	static uint8_t oldState;
	static uint64_t lastTIME;

	  if (oldState && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) && (micros()- lastTIME > 100000))
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <EmergencyCatcher+0x60>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01e      	beq.n	8004b76 <EmergencyCatcher+0x4a>
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b3e:	f002 fd1f 	bl	8007580 <HAL_GPIO_ReadPin>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d016      	beq.n	8004b76 <EmergencyCatcher+0x4a>
 8004b48:	f000 f828 	bl	8004b9c <micros>
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <EmergencyCatcher+0x64>)
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	1a84      	subs	r4, r0, r2
 8004b54:	eb61 0503 	sbc.w	r5, r1, r3
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <EmergencyCatcher+0x68>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	f175 0300 	sbcs.w	r3, r5, #0
 8004b60:	d309      	bcc.n	8004b76 <EmergencyCatcher+0x4a>
	  {
		  STATE = EMERGENCY;
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <EmergencyCatcher+0x6c>)
 8004b64:	2205      	movs	r2, #5
 8004b66:	801a      	strh	r2, [r3, #0]
		  lastTIME = micros();
 8004b68:	f000 f818 	bl	8004b9c <micros>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4907      	ldr	r1, [pc, #28]	; (8004b90 <EmergencyCatcher+0x64>)
 8004b72:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  oldState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8004b76:	2140      	movs	r1, #64	; 0x40
 8004b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b7c:	f002 fd00 	bl	8007580 <HAL_GPIO_ReadPin>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b01      	ldr	r3, [pc, #4]	; (8004b8c <EmergencyCatcher+0x60>)
 8004b86:	701a      	strb	r2, [r3, #0]

}
 8004b88:	bf00      	nop
 8004b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8c:	200013b4 	.word	0x200013b4
 8004b90:	200013b8 	.word	0x200013b8
 8004b94:	000186a1 	.word	0x000186a1
 8004b98:	20001374 	.word	0x20001374

08004b9c <micros>:

uint64_t micros()	// System Time
{
 8004b9c:	b4b0      	push	{r4, r5, r7}
 8004b9e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <micros+0x2c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	4611      	mov	r1, r2
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <micros+0x30>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	1884      	adds	r4, r0, r2
 8004bb4:	eb41 0503 	adc.w	r5, r1, r3
 8004bb8:	4622      	mov	r2, r4
 8004bba:	462b      	mov	r3, r5
}
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bcb0      	pop	{r4, r5, r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000460 	.word	0x20000460
 8004bcc:	200009e8 	.word	0x200009e8

08004bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd4:	b672      	cpsid	i
}
 8004bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bd8:	e7fe      	b.n	8004bd8 <Error_Handler+0x8>
	...

08004bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_MspInit+0x44>)
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_MspInit+0x44>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6613      	str	r3, [r2, #96]	; 0x60
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_MspInit+0x44>)
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_MspInit+0x44>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <HAL_MspInit+0x44>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6593      	str	r3, [r2, #88]	; 0x58
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_MspInit+0x44>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004c12:	f002 fda1 	bl	8007758 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000

08004c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0a0      	sub	sp, #128	; 0x80
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c3c:	f107 0318 	add.w	r3, r7, #24
 8004c40:	2254      	movs	r2, #84	; 0x54
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f007 fc5b 	bl	800c500 <memset>
  if(hadc->Instance==ADC1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c52:	d176      	bne.n	8004d42 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c60:	f107 0318 	add.w	r3, r7, #24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 fab5 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004c70:	f7ff ffae 	bl	8004bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c78:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8c:	4b2f      	ldr	r3, [pc, #188]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	4a2e      	ldr	r2, [pc, #184]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c98:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	4a28      	ldr	r2, [pc, #160]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004caa:	f043 0302 	orr.w	r3, r3, #2
 8004cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb0:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <HAL_ADC_MspInit+0x128>)
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4820      	ldr	r0, [pc, #128]	; (8004d50 <HAL_ADC_MspInit+0x12c>)
 8004cd0:	f002 fad4 	bl	800727c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	481b      	ldr	r0, [pc, #108]	; (8004d54 <HAL_ADC_MspInit+0x130>)
 8004ce8:	f002 fac8 	bl	800727c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_ADC_MspInit+0x138>)
 8004cf0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cfe:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d20:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d26:	480c      	ldr	r0, [pc, #48]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d28:	f001 ff76 	bl	8006c18 <HAL_DMA_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8004d32:	f7ff ff4d 	bl	8004bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d3c:	4a06      	ldr	r2, [pc, #24]	; (8004d58 <HAL_ADC_MspInit+0x134>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004d42:	bf00      	nop
 8004d44:	3780      	adds	r7, #128	; 0x80
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	48000800 	.word	0x48000800
 8004d54:	48000400 	.word	0x48000400
 8004d58:	20000400 	.word	0x20000400
 8004d5c:	40020030 	.word	0x40020030

08004d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d114      	bne.n	8004d9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7e:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	201c      	movs	r0, #28
 8004d90:	f001 ff0d 	bl	8006bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d94:	201c      	movs	r0, #28
 8004d96:	f001 ff24 	bl	8006be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004d9a:	e032      	b.n	8004e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIM_Base_MspInit+0xb0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d114      	bne.n	8004dd0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	6593      	str	r3, [r2, #88]	; 0x58
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	201d      	movs	r0, #29
 8004dc4:	f001 fef3 	bl	8006bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004dc8:	201d      	movs	r0, #29
 8004dca:	f001 ff0a 	bl	8006be2 <HAL_NVIC_EnableIRQ>
}
 8004dce:	e018      	b.n	8004e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_TIM_Base_MspInit+0xb4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d113      	bne.n	8004e02 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	6613      	str	r3, [r2, #96]	; 0x60
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_TIM_Base_MspInit+0xac>)
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004df2:	2200      	movs	r2, #0
 8004df4:	2100      	movs	r1, #0
 8004df6:	2019      	movs	r0, #25
 8004df8:	f001 fed9 	bl	8006bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004dfc:	2019      	movs	r0, #25
 8004dfe:	f001 fef0 	bl	8006be2 <HAL_NVIC_EnableIRQ>
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40014400 	.word	0x40014400

08004e18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <HAL_TIM_PWM_MspInit+0x38>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10b      	bne.n	8004e42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	6593      	str	r3, [r2, #88]	; 0x58
 8004e36:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40021000 	.word	0x40021000

08004e58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d130      	bne.n	8004edc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004e80:	f043 0308 	orr.w	r3, r3, #8
 8004e84:	6593      	str	r3, [r2, #88]	; 0x58
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ebe:	f107 0314 	add.w	r3, r7, #20
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec8:	f002 f9d8 	bl	800727c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2032      	movs	r0, #50	; 0x32
 8004ed2:	f001 fe6c 	bl	8006bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ed6:	2032      	movs	r0, #50	; 0x32
 8004ed8:	f001 fe83 	bl	8006be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004edc:	bf00      	nop
 8004ede:	3728      	adds	r7, #40	; 0x28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40021000 	.word	0x40021000

08004eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <HAL_TIM_MspPostInit+0x68>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d11d      	bne.n	8004f4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_TIM_MspPostInit+0x6c>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <HAL_TIM_MspPostInit+0x6c>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_TIM_MspPostInit+0x6c>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004f38:	230a      	movs	r3, #10
 8004f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	4619      	mov	r1, r3
 8004f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f46:	f002 f999 	bl	800727c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f4a:	bf00      	nop
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40021000 	.word	0x40021000

08004f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b09e      	sub	sp, #120	; 0x78
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f74:	f107 0310 	add.w	r3, r7, #16
 8004f78:	2254      	movs	r2, #84	; 0x54
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f007 fabf 	bl	800c500 <memset>
  if(huart->Instance==USART2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a4d      	ldr	r2, [pc, #308]	; (80050bc <HAL_UART_MspInit+0x160>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f040 8092 	bne.w	80050b2 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f96:	f107 0310 	add.w	r3, r7, #16
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 f91a 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004fa6:	f7ff fe13 	bl	8004bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004faa:	4b45      	ldr	r3, [pc, #276]	; (80050c0 <HAL_UART_MspInit+0x164>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	4a44      	ldr	r2, [pc, #272]	; (80050c0 <HAL_UART_MspInit+0x164>)
 8004fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb6:	4b42      	ldr	r3, [pc, #264]	; (80050c0 <HAL_UART_MspInit+0x164>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_UART_MspInit+0x164>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	4a3e      	ldr	r2, [pc, #248]	; (80050c0 <HAL_UART_MspInit+0x164>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fce:	4b3c      	ldr	r3, [pc, #240]	; (80050c0 <HAL_UART_MspInit+0x164>)
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004fda:	230c      	movs	r3, #12
 8004fdc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fea:	2307      	movs	r3, #7
 8004fec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff8:	f002 f940 	bl	800727c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004ffc:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8004ffe:	4a32      	ldr	r2, [pc, #200]	; (80050c8 <HAL_UART_MspInit+0x16c>)
 8005000:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005004:	221a      	movs	r2, #26
 8005006:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005008:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <HAL_UART_MspInit+0x168>)
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800500e:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005010:	2200      	movs	r2, #0
 8005012:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005014:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800501a:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <HAL_UART_MspInit+0x168>)
 800501c:	2200      	movs	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005020:	4b28      	ldr	r3, [pc, #160]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005022:	2200      	movs	r2, #0
 8005024:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005028:	2200      	movs	r2, #0
 800502a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800502c:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <HAL_UART_MspInit+0x168>)
 800502e:	2200      	movs	r2, #0
 8005030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005032:	4824      	ldr	r0, [pc, #144]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005034:	f001 fdf0 	bl	8006c18 <HAL_DMA_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800503e:	f7ff fdc7 	bl	8004bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_UART_MspInit+0x168>)
 8005046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_UART_MspInit+0x168>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005052:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <HAL_UART_MspInit+0x174>)
 8005054:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005058:	221b      	movs	r2, #27
 800505a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_UART_MspInit+0x170>)
 800505e:	2210      	movs	r2, #16
 8005060:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005064:	2200      	movs	r2, #0
 8005066:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005068:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_UART_MspInit+0x170>)
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005070:	2200      	movs	r2, #0
 8005072:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005076:	2200      	movs	r2, #0
 8005078:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <HAL_UART_MspInit+0x170>)
 800507c:	2200      	movs	r2, #0
 800507e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005082:	2200      	movs	r2, #0
 8005084:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005086:	4811      	ldr	r0, [pc, #68]	; (80050cc <HAL_UART_MspInit+0x170>)
 8005088:	f001 fdc6 	bl	8006c18 <HAL_DMA_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005092:	f7ff fd9d 	bl	8004bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <HAL_UART_MspInit+0x170>)
 800509a:	67da      	str	r2, [r3, #124]	; 0x7c
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <HAL_UART_MspInit+0x170>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	2026      	movs	r0, #38	; 0x26
 80050a8:	f001 fd81 	bl	8006bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050ac:	2026      	movs	r0, #38	; 0x26
 80050ae:	f001 fd98 	bl	8006be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050b2:	bf00      	nop
 80050b4:	3778      	adds	r7, #120	; 0x78
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40021000 	.word	0x40021000
 80050c4:	20000928 	.word	0x20000928
 80050c8:	4002001c 	.word	0x4002001c
 80050cc:	20000988 	.word	0x20000988
 80050d0:	40020008 	.word	0x40020008

080050d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050d8:	e7fe      	b.n	80050d8 <NMI_Handler+0x4>

080050da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050de:	e7fe      	b.n	80050de <HardFault_Handler+0x4>

080050e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050e4:	e7fe      	b.n	80050e4 <MemManage_Handler+0x4>

080050e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050ea:	e7fe      	b.n	80050ea <BusFault_Handler+0x4>

080050ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050f0:	e7fe      	b.n	80050f0 <UsageFault_Handler+0x4>

080050f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800510e:	b480      	push	{r7}
 8005110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005120:	f000 f8e8 	bl	80052f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005124:	bf00      	nop
 8005126:	bd80      	pop	{r7, pc}

08005128 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800512c:	4802      	ldr	r0, [pc, #8]	; (8005138 <DMA1_Channel1_IRQHandler+0x10>)
 800512e:	f001 ff56 	bl	8006fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000988 	.word	0x20000988

0800513c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005140:	4802      	ldr	r0, [pc, #8]	; (800514c <DMA1_Channel2_IRQHandler+0x10>)
 8005142:	f001 ff4c 	bl	8006fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000928 	.word	0x20000928

08005150 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005154:	4802      	ldr	r0, [pc, #8]	; (8005160 <DMA1_Channel3_IRQHandler+0x10>)
 8005156:	f001 ff42 	bl	8006fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000400 	.word	0x20000400

08005164 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005168:	4802      	ldr	r0, [pc, #8]	; (8005174 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800516a:	f003 ff7b 	bl	8009064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000790 	.word	0x20000790

08005178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800517c:	4802      	ldr	r0, [pc, #8]	; (8005188 <TIM2_IRQHandler+0x10>)
 800517e:	f003 ff71 	bl	8009064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005182:	bf00      	nop
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000460 	.word	0x20000460

0800518c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005190:	4802      	ldr	r0, [pc, #8]	; (800519c <TIM3_IRQHandler+0x10>)
 8005192:	f003 ff67 	bl	8009064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005196:	bf00      	nop
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000052c 	.word	0x2000052c

080051a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051a4:	4802      	ldr	r0, [pc, #8]	; (80051b0 <USART2_IRQHandler+0x10>)
 80051a6:	f005 fc9d 	bl	800aae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000085c 	.word	0x2000085c

080051b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80051b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80051bc:	f002 fa10 	bl	80075e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <TIM5_IRQHandler+0x10>)
 80051ca:	f003 ff4b 	bl	8009064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200006c4 	.word	0x200006c4

080051d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <SystemInit+0x20>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	4a05      	ldr	r2, [pc, #20]	; (80051f8 <SystemInit+0x20>)
 80051e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	e000ed00 	.word	0xe000ed00

080051fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051fc:	480d      	ldr	r0, [pc, #52]	; (8005234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005200:	f7ff ffea 	bl	80051d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005204:	480c      	ldr	r0, [pc, #48]	; (8005238 <LoopForever+0x6>)
  ldr r1, =_edata
 8005206:	490d      	ldr	r1, [pc, #52]	; (800523c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005208:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <LoopForever+0xe>)
  movs r3, #0
 800520a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800520c:	e002      	b.n	8005214 <LoopCopyDataInit>

0800520e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800520e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005212:	3304      	adds	r3, #4

08005214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005218:	d3f9      	bcc.n	800520e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800521a:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800521c:	4c0a      	ldr	r4, [pc, #40]	; (8005248 <LoopForever+0x16>)
  movs r3, #0
 800521e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005220:	e001      	b.n	8005226 <LoopFillZerobss>

08005222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005224:	3204      	adds	r2, #4

08005226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005228:	d3fb      	bcc.n	8005222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800522a:	f007 f977 	bl	800c51c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800522e:	f7fe fdf7 	bl	8003e20 <main>

08005232 <LoopForever>:

LoopForever:
    b LoopForever
 8005232:	e7fe      	b.n	8005232 <LoopForever>
  ldr   r0, =_estack
 8005234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800523c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8005240:	0800cdcc 	.word	0x0800cdcc
  ldr r2, =_sbss
 8005244:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8005248:	200014fc 	.word	0x200014fc

0800524c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800524c:	e7fe      	b.n	800524c <ADC1_2_IRQHandler>

0800524e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005258:	2003      	movs	r0, #3
 800525a:	f001 fc9d 	bl	8006b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800525e:	2000      	movs	r0, #0
 8005260:	f000 f80e 	bl	8005280 <HAL_InitTick>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	71fb      	strb	r3, [r7, #7]
 800526e:	e001      	b.n	8005274 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005270:	f7ff fcb4 	bl	8004bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005274:	79fb      	ldrb	r3, [r7, #7]

}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_InitTick+0x68>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d022      	beq.n	80052da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_InitTick+0x6c>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_InitTick+0x68>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fca8 	bl	8006bfe <HAL_SYSTICK_Config>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10f      	bne.n	80052d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	d809      	bhi.n	80052ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052ba:	2200      	movs	r2, #0
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	f001 fc74 	bl	8006bae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052c6:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <HAL_InitTick+0x70>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	e007      	b.n	80052de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e004      	b.n	80052de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e001      	b.n	80052de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000278 	.word	0x20000278
 80052ec:	20000270 	.word	0x20000270
 80052f0:	20000274 	.word	0x20000274

080052f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_IncTick+0x1c>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_IncTick+0x20>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4413      	add	r3, r2
 8005302:	4a03      	ldr	r2, [pc, #12]	; (8005310 <HAL_IncTick+0x1c>)
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	200013c0 	.word	0x200013c0
 8005314:	20000278 	.word	0x20000278

08005318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return uwTick;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_GetTick+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	200013c0 	.word	0x200013c0

08005330 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3360      	adds	r3, #96	; 0x60
 80053aa:	461a      	mov	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <LL_ADC_SetOffset+0x44>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	03fff000 	.word	0x03fff000

080053e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3360      	adds	r3, #96	; 0x60
 80053ee:	461a      	mov	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3360      	adds	r3, #96	; 0x60
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	431a      	orrs	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005442:	b480      	push	{r7}
 8005444:	b087      	sub	sp, #28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3360      	adds	r3, #96	; 0x60
 8005452:	461a      	mov	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	431a      	orrs	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3360      	adds	r3, #96	; 0x60
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	615a      	str	r2, [r3, #20]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3330      	adds	r3, #48	; 0x30
 800550a:	461a      	mov	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	4413      	add	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	211f      	movs	r1, #31
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	401a      	ands	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0e9b      	lsrs	r3, r3, #26
 8005532:	f003 011f 	and.w	r1, r3, #31
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	431a      	orrs	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005552:	b480      	push	{r7}
 8005554:	b087      	sub	sp, #28
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3314      	adds	r3, #20
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	0e5b      	lsrs	r3, r3, #25
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	4413      	add	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0d1b      	lsrs	r3, r3, #20
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2107      	movs	r1, #7
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	401a      	ands	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	0d1b      	lsrs	r3, r3, #20
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	fa01 f303 	lsl.w	r3, r1, r3
 8005596:	431a      	orrs	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f003 0318 	and.w	r3, r3, #24
 80055ca:	4908      	ldr	r1, [pc, #32]	; (80055ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80055cc:	40d9      	lsrs	r1, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	400b      	ands	r3, r1
 80055d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	0007ffff 	.word	0x0007ffff

080055f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 031f 	and.w	r3, r3, #31
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800561c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6093      	str	r3, [r2, #8]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005644:	d101      	bne.n	800564a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800566c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005694:	d101      	bne.n	800569a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <LL_ADC_IsEnabled+0x18>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <LL_ADC_IsEnabled+0x1a>
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d101      	bne.n	8005736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d101      	bne.n	800575c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b089      	sub	sp, #36	; 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e1a9      	b.n	8005ada <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fa45 	bl	8004c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff3f 	bl	8005630 <LL_ADC_IsDeepPowerDownEnabled>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff25 	bl	800560c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ff5a 	bl	8005680 <LL_ADC_IsInternalRegulatorEnabled>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d115      	bne.n	80057fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ff3e 	bl	8005658 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057dc:	4b9c      	ldr	r3, [pc, #624]	; (8005a50 <HAL_ADC_Init+0x2e4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	099b      	lsrs	r3, r3, #6
 80057e2:	4a9c      	ldr	r2, [pc, #624]	; (8005a54 <HAL_ADC_Init+0x2e8>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	099b      	lsrs	r3, r3, #6
 80057ea:	3301      	adds	r3, #1
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80057f0:	e002      	b.n	80057f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f9      	bne.n	80057f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff3c 	bl	8005680 <LL_ADC_IsInternalRegulatorEnabled>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	f043 0210 	orr.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581e:	f043 0201 	orr.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ff75 	bl	800571e <LL_ADC_REG_IsConversionOngoing>
 8005834:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 8142 	bne.w	8005ac8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 813e 	bne.w	8005ac8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005850:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005854:	f043 0202 	orr.w	r2, r3, #2
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ff35 	bl	80056d0 <LL_ADC_IsEnabled>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d141      	bne.n	80058f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005874:	d004      	beq.n	8005880 <HAL_ADC_Init+0x114>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a77      	ldr	r2, [pc, #476]	; (8005a58 <HAL_ADC_Init+0x2ec>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10f      	bne.n	80058a0 <HAL_ADC_Init+0x134>
 8005880:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005884:	f7ff ff24 	bl	80056d0 <LL_ADC_IsEnabled>
 8005888:	4604      	mov	r4, r0
 800588a:	4873      	ldr	r0, [pc, #460]	; (8005a58 <HAL_ADC_Init+0x2ec>)
 800588c:	f7ff ff20 	bl	80056d0 <LL_ADC_IsEnabled>
 8005890:	4603      	mov	r3, r0
 8005892:	4323      	orrs	r3, r4
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf0c      	ite	eq
 8005898:	2301      	moveq	r3, #1
 800589a:	2300      	movne	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e012      	b.n	80058c6 <HAL_ADC_Init+0x15a>
 80058a0:	486e      	ldr	r0, [pc, #440]	; (8005a5c <HAL_ADC_Init+0x2f0>)
 80058a2:	f7ff ff15 	bl	80056d0 <LL_ADC_IsEnabled>
 80058a6:	4604      	mov	r4, r0
 80058a8:	486d      	ldr	r0, [pc, #436]	; (8005a60 <HAL_ADC_Init+0x2f4>)
 80058aa:	f7ff ff11 	bl	80056d0 <LL_ADC_IsEnabled>
 80058ae:	4603      	mov	r3, r0
 80058b0:	431c      	orrs	r4, r3
 80058b2:	486c      	ldr	r0, [pc, #432]	; (8005a64 <HAL_ADC_Init+0x2f8>)
 80058b4:	f7ff ff0c 	bl	80056d0 <LL_ADC_IsEnabled>
 80058b8:	4603      	mov	r3, r0
 80058ba:	4323      	orrs	r3, r4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d012      	beq.n	80058f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058d2:	d004      	beq.n	80058de <HAL_ADC_Init+0x172>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5f      	ldr	r2, [pc, #380]	; (8005a58 <HAL_ADC_Init+0x2ec>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_Init+0x176>
 80058de:	4a62      	ldr	r2, [pc, #392]	; (8005a68 <HAL_ADC_Init+0x2fc>)
 80058e0:	e000      	b.n	80058e4 <HAL_ADC_Init+0x178>
 80058e2:	4a62      	ldr	r2, [pc, #392]	; (8005a6c <HAL_ADC_Init+0x300>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7ff fd20 	bl	8005330 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	7f5b      	ldrb	r3, [r3, #29]
 80058f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005900:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005906:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800590e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800591a:	2b01      	cmp	r3, #1
 800591c:	d106      	bne.n	800592c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	3b01      	subs	r3, #1
 8005924:	045b      	lsls	r3, r3, #17
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <HAL_ADC_Init+0x304>)
 8005950:	4013      	ands	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	430b      	orrs	r3, r1
 800595a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fee4 	bl	8005744 <LL_ADC_INJ_IsConversionOngoing>
 800597c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d17f      	bne.n	8005a84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d17c      	bne.n	8005a84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800598e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005996:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a6:	f023 0302 	bic.w	r3, r3, #2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	69b9      	ldr	r1, [r7, #24]
 80059b0:	430b      	orrs	r3, r1
 80059b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d017      	beq.n	80059ec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80059d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6911      	ldr	r1, [r2, #16]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80059ea:	e013      	b.n	8005a14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a10:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d12a      	bne.n	8005a74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a34:	4311      	orrs	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a40:	430a      	orrs	r2, r1
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	e019      	b.n	8005a84 <HAL_ADC_Init+0x318>
 8005a50:	20000270 	.word	0x20000270
 8005a54:	053e2d63 	.word	0x053e2d63
 8005a58:	50000100 	.word	0x50000100
 8005a5c:	50000400 	.word	0x50000400
 8005a60:	50000500 	.word	0x50000500
 8005a64:	50000600 	.word	0x50000600
 8005a68:	50000300 	.word	0x50000300
 8005a6c:	50000700 	.word	0x50000700
 8005a70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f023 010f 	bic.w	r1, r3, #15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8005aa4:	e007      	b.n	8005ab6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 020f 	bic.w	r2, r2, #15
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ac6:	e007      	b.n	8005ad8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005acc:	f043 0210 	orr.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3724      	adds	r7, #36	; 0x24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd90      	pop	{r4, r7, pc}
 8005ae2:	bf00      	nop

08005ae4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af8:	d004      	beq.n	8005b04 <HAL_ADC_Start_DMA+0x20>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a5a      	ldr	r2, [pc, #360]	; (8005c68 <HAL_ADC_Start_DMA+0x184>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d101      	bne.n	8005b08 <HAL_ADC_Start_DMA+0x24>
 8005b04:	4b59      	ldr	r3, [pc, #356]	; (8005c6c <HAL_ADC_Start_DMA+0x188>)
 8005b06:	e000      	b.n	8005b0a <HAL_ADC_Start_DMA+0x26>
 8005b08:	4b59      	ldr	r3, [pc, #356]	; (8005c70 <HAL_ADC_Start_DMA+0x18c>)
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fd70 	bl	80055f0 <LL_ADC_GetMultimode>
 8005b10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fe01 	bl	800571e <LL_ADC_REG_IsConversionOngoing>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 809b 	bne.w	8005c5a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_ADC_Start_DMA+0x4e>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e096      	b.n	8005c60 <HAL_ADC_Start_DMA+0x17c>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4d      	ldr	r2, [pc, #308]	; (8005c74 <HAL_ADC_Start_DMA+0x190>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d008      	beq.n	8005b56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d002      	beq.n	8005b56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b09      	cmp	r3, #9
 8005b54:	d17a      	bne.n	8005c4c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fcf6 	bl	8006548 <ADC_Enable>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d16d      	bne.n	8005c42 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	; (8005c68 <HAL_ADC_Start_DMA+0x184>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_ADC_Start_DMA+0xb4>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3b      	ldr	r2, [pc, #236]	; (8005c78 <HAL_ADC_Start_DMA+0x194>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d002      	beq.n	8005b94 <HAL_ADC_Start_DMA+0xb0>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	e003      	b.n	8005b9c <HAL_ADC_Start_DMA+0xb8>
 8005b94:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <HAL_ADC_Start_DMA+0x198>)
 8005b96:	e001      	b.n	8005b9c <HAL_ADC_Start_DMA+0xb8>
 8005b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d002      	beq.n	8005baa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d105      	bne.n	8005bb6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	f023 0206 	bic.w	r2, r3, #6
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	661a      	str	r2, [r3, #96]	; 0x60
 8005bce:	e002      	b.n	8005bd6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	4a29      	ldr	r2, [pc, #164]	; (8005c80 <HAL_ADC_Start_DMA+0x19c>)
 8005bdc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <HAL_ADC_Start_DMA+0x1a0>)
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <HAL_ADC_Start_DMA+0x1a4>)
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	221c      	movs	r2, #28
 8005bf4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0210 	orr.w	r2, r2, #16
 8005c0c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3340      	adds	r3, #64	; 0x40
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f001 f89b 	bl	8006d68 <HAL_DMA_Start_IT>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fd5b 	bl	80056f6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c40:	e00d      	b.n	8005c5e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005c4a:	e008      	b.n	8005c5e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005c58:	e001      	b.n	8005c5e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	50000100 	.word	0x50000100
 8005c6c:	50000300 	.word	0x50000300
 8005c70:	50000700 	.word	0x50000700
 8005c74:	50000600 	.word	0x50000600
 8005c78:	50000500 	.word	0x50000500
 8005c7c:	50000400 	.word	0x50000400
 8005c80:	08006675 	.word	0x08006675
 8005c84:	0800674d 	.word	0x0800674d
 8005c88:	08006769 	.word	0x08006769

08005c8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b0b6      	sub	sp, #216	; 0xd8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x24>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	f000 bc13 	b.w	8006512 <HAL_ADC_ConfigChannel+0x84a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fd10 	bl	800571e <LL_ADC_REG_IsConversionOngoing>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 83f3 	bne.w	80064ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7ff fbf1 	bl	80054fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fcfe 	bl	800571e <LL_ADC_REG_IsConversionOngoing>
 8005d22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fd0a 	bl	8005744 <LL_ADC_INJ_IsConversionOngoing>
 8005d30:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 81d9 	bne.w	80060f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 81d4 	bne.w	80060f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d50:	d10f      	bne.n	8005d72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f7ff fbf8 	bl	8005552 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fb9f 	bl	80054ae <LL_ADC_SetSamplingTimeCommonConfig>
 8005d70:	e00e      	b.n	8005d90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7ff fbe7 	bl	8005552 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fb8f 	bl	80054ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	08db      	lsrs	r3, r3, #3
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d022      	beq.n	8005df8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6919      	ldr	r1, [r3, #16]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dc2:	f7ff fae9 	bl	8005398 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6919      	ldr	r1, [r3, #16]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7ff fb35 	bl	8005442 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x126>
 8005de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dec:	e000      	b.n	8005df0 <HAL_ADC_ConfigChannel+0x128>
 8005dee:	2300      	movs	r3, #0
 8005df0:	461a      	mov	r2, r3
 8005df2:	f7ff fb41 	bl	8005478 <LL_ADC_SetOffsetSaturation>
 8005df6:	e17b      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff faee 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x15c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff fae3 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	0e9b      	lsrs	r3, r3, #26
 8005e1e:	f003 021f 	and.w	r2, r3, #31
 8005e22:	e01e      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x19a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fad8 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005e52:	2320      	movs	r3, #32
 8005e54:	e004      	b.n	8005e60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e5a:	fab3 f383 	clz	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <HAL_ADC_ConfigChannel+0x1b2>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	0e9b      	lsrs	r3, r3, #26
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	e018      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1e4>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e86:	fa93 f3a3 	rbit	r3, r3
 8005e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005e9e:	2320      	movs	r3, #32
 8005ea0:	e004      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ea6:	fab3 f383 	clz	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d106      	bne.n	8005ebe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff faa7 	bl	800540c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff fa8b 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <HAL_ADC_ConfigChannel+0x222>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fa80 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	0e9b      	lsrs	r3, r3, #26
 8005ee4:	f003 021f 	and.w	r2, r3, #31
 8005ee8:	e01e      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x260>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fa75 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f00:	fa93 f3a3 	rbit	r3, r3
 8005f04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005f08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	e004      	b.n	8005f26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f20:	fab3 f383 	clz	r3, r3
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_ADC_ConfigChannel+0x278>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	0e9b      	lsrs	r3, r3, #26
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	e018      	b.n	8005f72 <HAL_ADC_ConfigChannel+0x2aa>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f4c:	fa93 f3a3 	rbit	r3, r3
 8005f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005f64:	2320      	movs	r3, #32
 8005f66:	e004      	b.n	8005f72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f6c:	fab3 f383 	clz	r3, r3
 8005f70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d106      	bne.n	8005f84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fa44 	bl	800540c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2102      	movs	r1, #2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fa28 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x2e8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fa1d 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	0e9b      	lsrs	r3, r3, #26
 8005faa:	f003 021f 	and.w	r2, r3, #31
 8005fae:	e01e      	b.n	8005fee <HAL_ADC_ConfigChannel+0x326>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fa12 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc6:	fa93 f3a3 	rbit	r3, r3
 8005fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005fde:	2320      	movs	r3, #32
 8005fe0:	e004      	b.n	8005fec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fe6:	fab3 f383 	clz	r3, r3
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <HAL_ADC_ConfigChannel+0x33e>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	0e9b      	lsrs	r3, r3, #26
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	e016      	b.n	8006034 <HAL_ADC_ConfigChannel+0x36c>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006012:	fa93 f3a3 	rbit	r3, r3
 8006016:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800601a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800601e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006026:	2320      	movs	r3, #32
 8006028:	e004      	b.n	8006034 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800602a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006034:	429a      	cmp	r2, r3
 8006036:	d106      	bne.n	8006046 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2200      	movs	r2, #0
 800603e:	2102      	movs	r1, #2
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff f9e3 	bl	800540c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2103      	movs	r1, #3
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff f9c7 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8006052:	4603      	mov	r3, r0
 8006054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x3aa>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2103      	movs	r1, #3
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f9bc 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 8006068:	4603      	mov	r3, r0
 800606a:	0e9b      	lsrs	r3, r3, #26
 800606c:	f003 021f 	and.w	r2, r3, #31
 8006070:	e017      	b.n	80060a2 <HAL_ADC_ConfigChannel+0x3da>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2103      	movs	r1, #3
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff f9b1 	bl	80053e0 <LL_ADC_GetOffsetChannel>
 800607e:	4603      	mov	r3, r0
 8006080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006084:	fa93 f3a3 	rbit	r3, r3
 8006088:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800608a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800608c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800608e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006094:	2320      	movs	r3, #32
 8006096:	e003      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x3f2>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	0e9b      	lsrs	r3, r3, #26
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	e011      	b.n	80060de <HAL_ADC_ConfigChannel+0x416>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c2:	fa93 f3a3 	rbit	r3, r3
 80060c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80060c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80060cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80060d2:	2320      	movs	r3, #32
 80060d4:	e003      	b.n	80060de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	fab3 f383 	clz	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060de:	429a      	cmp	r2, r3
 80060e0:	d106      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2103      	movs	r1, #3
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f98e 	bl	800540c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff faeb 	bl	80056d0 <LL_ADC_IsEnabled>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f040 813d 	bne.w	800637c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	461a      	mov	r2, r3
 8006110:	f7ff fa4a 	bl	80055a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4aa2      	ldr	r2, [pc, #648]	; (80063a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	f040 812e 	bne.w	800637c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x480>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	0e9b      	lsrs	r3, r3, #26
 8006136:	3301      	adds	r3, #1
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2b09      	cmp	r3, #9
 800613e:	bf94      	ite	ls
 8006140:	2301      	movls	r3, #1
 8006142:	2300      	movhi	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e019      	b.n	800617c <HAL_ADC_ConfigChannel+0x4b4>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006150:	fa93 f3a3 	rbit	r3, r3
 8006154:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006158:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800615a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006160:	2320      	movs	r3, #32
 8006162:	e003      	b.n	800616c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006166:	fab3 f383 	clz	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3301      	adds	r3, #1
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b09      	cmp	r3, #9
 8006174:	bf94      	ite	ls
 8006176:	2301      	movls	r3, #1
 8006178:	2300      	movhi	r3, #0
 800617a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800617c:	2b00      	cmp	r3, #0
 800617e:	d079      	beq.n	8006274 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006188:	2b00      	cmp	r3, #0
 800618a:	d107      	bne.n	800619c <HAL_ADC_ConfigChannel+0x4d4>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	0e9b      	lsrs	r3, r3, #26
 8006192:	3301      	adds	r3, #1
 8006194:	069b      	lsls	r3, r3, #26
 8006196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800619a:	e015      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x500>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	fa93 f3a3 	rbit	r3, r3
 80061a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80061aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80061ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80061b4:	2320      	movs	r3, #32
 80061b6:	e003      	b.n	80061c0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80061b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ba:	fab3 f383 	clz	r3, r3
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	3301      	adds	r3, #1
 80061c2:	069b      	lsls	r3, r3, #26
 80061c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <HAL_ADC_ConfigChannel+0x520>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	0e9b      	lsrs	r3, r3, #26
 80061da:	3301      	adds	r3, #1
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2101      	movs	r1, #1
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	e017      	b.n	8006218 <HAL_ADC_ConfigChannel+0x550>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f0:	fa93 f3a3 	rbit	r3, r3
 80061f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80061f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80061fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006200:	2320      	movs	r3, #32
 8006202:	e003      	b.n	800620c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006206:	fab3 f383 	clz	r3, r3
 800620a:	b2db      	uxtb	r3, r3
 800620c:	3301      	adds	r3, #1
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2101      	movs	r1, #1
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	ea42 0103 	orr.w	r1, r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <HAL_ADC_ConfigChannel+0x576>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0e9b      	lsrs	r3, r3, #26
 800622e:	3301      	adds	r3, #1
 8006230:	f003 021f 	and.w	r2, r3, #31
 8006234:	4613      	mov	r3, r2
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4413      	add	r3, r2
 800623a:	051b      	lsls	r3, r3, #20
 800623c:	e018      	b.n	8006270 <HAL_ADC_ConfigChannel+0x5a8>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	fa93 f3a3 	rbit	r3, r3
 800624a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006256:	2320      	movs	r3, #32
 8006258:	e003      	b.n	8006262 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800625a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625c:	fab3 f383 	clz	r3, r3
 8006260:	b2db      	uxtb	r3, r3
 8006262:	3301      	adds	r3, #1
 8006264:	f003 021f 	and.w	r2, r3, #31
 8006268:	4613      	mov	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4413      	add	r3, r2
 800626e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006270:	430b      	orrs	r3, r1
 8006272:	e07e      	b.n	8006372 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x5c8>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	0e9b      	lsrs	r3, r3, #26
 8006286:	3301      	adds	r3, #1
 8006288:	069b      	lsls	r3, r3, #26
 800628a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800628e:	e015      	b.n	80062bc <HAL_ADC_ConfigChannel+0x5f4>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	fa93 f3a3 	rbit	r3, r3
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80062a8:	2320      	movs	r3, #32
 80062aa:	e003      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	fab3 f383 	clz	r3, r3
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	3301      	adds	r3, #1
 80062b6:	069b      	lsls	r3, r3, #26
 80062b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x614>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0e9b      	lsrs	r3, r3, #26
 80062ce:	3301      	adds	r3, #1
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2101      	movs	r1, #1
 80062d6:	fa01 f303 	lsl.w	r3, r1, r3
 80062da:	e017      	b.n	800630c <HAL_ADC_ConfigChannel+0x644>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	fa93 f3a3 	rbit	r3, r3
 80062e8:	61fb      	str	r3, [r7, #28]
  return result;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80062f4:	2320      	movs	r3, #32
 80062f6:	e003      	b.n	8006300 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	fab3 f383 	clz	r3, r3
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	3301      	adds	r3, #1
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	ea42 0103 	orr.w	r1, r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x670>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	0e9b      	lsrs	r3, r3, #26
 8006322:	3301      	adds	r3, #1
 8006324:	f003 021f 	and.w	r2, r3, #31
 8006328:	4613      	mov	r3, r2
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	4413      	add	r3, r2
 800632e:	3b1e      	subs	r3, #30
 8006330:	051b      	lsls	r3, r3, #20
 8006332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006336:	e01b      	b.n	8006370 <HAL_ADC_ConfigChannel+0x6a8>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	613b      	str	r3, [r7, #16]
  return result;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006350:	2320      	movs	r3, #32
 8006352:	e003      	b.n	800635c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	fab3 f383 	clz	r3, r3
 800635a:	b2db      	uxtb	r3, r3
 800635c:	3301      	adds	r3, #1
 800635e:	f003 021f 	and.w	r2, r3, #31
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	3b1e      	subs	r3, #30
 800636a:	051b      	lsls	r3, r3, #20
 800636c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006370:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006376:	4619      	mov	r1, r3
 8006378:	f7ff f8eb 	bl	8005552 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80be 	beq.w	8006506 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006392:	d004      	beq.n	800639e <HAL_ADC_ConfigChannel+0x6d6>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a04      	ldr	r2, [pc, #16]	; (80063ac <HAL_ADC_ConfigChannel+0x6e4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d10a      	bne.n	80063b4 <HAL_ADC_ConfigChannel+0x6ec>
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80063a0:	e009      	b.n	80063b6 <HAL_ADC_ConfigChannel+0x6ee>
 80063a2:	bf00      	nop
 80063a4:	407f0000 	.word	0x407f0000
 80063a8:	80080000 	.word	0x80080000
 80063ac:	50000100 	.word	0x50000100
 80063b0:	50000300 	.word	0x50000300
 80063b4:	4b59      	ldr	r3, [pc, #356]	; (800651c <HAL_ADC_ConfigChannel+0x854>)
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe ffe0 	bl	800537c <LL_ADC_GetCommonPathInternalCh>
 80063bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a56      	ldr	r2, [pc, #344]	; (8006520 <HAL_ADC_ConfigChannel+0x858>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_ADC_ConfigChannel+0x70c>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a55      	ldr	r2, [pc, #340]	; (8006524 <HAL_ADC_ConfigChannel+0x85c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d13a      	bne.n	800644a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80063d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d134      	bne.n	800644a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063e8:	d005      	beq.n	80063f6 <HAL_ADC_ConfigChannel+0x72e>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4e      	ldr	r2, [pc, #312]	; (8006528 <HAL_ADC_ConfigChannel+0x860>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	f040 8085 	bne.w	8006500 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063fe:	d004      	beq.n	800640a <HAL_ADC_ConfigChannel+0x742>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a49      	ldr	r2, [pc, #292]	; (800652c <HAL_ADC_ConfigChannel+0x864>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_ADC_ConfigChannel+0x746>
 800640a:	4a49      	ldr	r2, [pc, #292]	; (8006530 <HAL_ADC_ConfigChannel+0x868>)
 800640c:	e000      	b.n	8006410 <HAL_ADC_ConfigChannel+0x748>
 800640e:	4a43      	ldr	r2, [pc, #268]	; (800651c <HAL_ADC_ConfigChannel+0x854>)
 8006410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f7fe ff9b 	bl	8005356 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006420:	4b44      	ldr	r3, [pc, #272]	; (8006534 <HAL_ADC_ConfigChannel+0x86c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	4a44      	ldr	r2, [pc, #272]	; (8006538 <HAL_ADC_ConfigChannel+0x870>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800643a:	e002      	b.n	8006442 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3b01      	subs	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f9      	bne.n	800643c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006448:	e05a      	b.n	8006500 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3b      	ldr	r2, [pc, #236]	; (800653c <HAL_ADC_ConfigChannel+0x874>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d125      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d11f      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a31      	ldr	r2, [pc, #196]	; (800652c <HAL_ADC_ConfigChannel+0x864>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d104      	bne.n	8006474 <HAL_ADC_ConfigChannel+0x7ac>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a34      	ldr	r2, [pc, #208]	; (8006540 <HAL_ADC_ConfigChannel+0x878>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d047      	beq.n	8006504 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800647c:	d004      	beq.n	8006488 <HAL_ADC_ConfigChannel+0x7c0>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2a      	ldr	r2, [pc, #168]	; (800652c <HAL_ADC_ConfigChannel+0x864>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d101      	bne.n	800648c <HAL_ADC_ConfigChannel+0x7c4>
 8006488:	4a29      	ldr	r2, [pc, #164]	; (8006530 <HAL_ADC_ConfigChannel+0x868>)
 800648a:	e000      	b.n	800648e <HAL_ADC_ConfigChannel+0x7c6>
 800648c:	4a23      	ldr	r2, [pc, #140]	; (800651c <HAL_ADC_ConfigChannel+0x854>)
 800648e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7fe ff5c 	bl	8005356 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800649e:	e031      	b.n	8006504 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a27      	ldr	r2, [pc, #156]	; (8006544 <HAL_ADC_ConfigChannel+0x87c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d12d      	bne.n	8006506 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d127      	bne.n	8006506 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1c      	ldr	r2, [pc, #112]	; (800652c <HAL_ADC_ConfigChannel+0x864>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c8:	d004      	beq.n	80064d4 <HAL_ADC_ConfigChannel+0x80c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_ADC_ConfigChannel+0x864>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d101      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x810>
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_ADC_ConfigChannel+0x868>)
 80064d6:	e000      	b.n	80064da <HAL_ADC_ConfigChannel+0x812>
 80064d8:	4a10      	ldr	r2, [pc, #64]	; (800651c <HAL_ADC_ConfigChannel+0x854>)
 80064da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fe ff36 	bl	8005356 <LL_ADC_SetCommonPathInternalCh>
 80064ea:	e00c      	b.n	8006506 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80064fe:	e002      	b.n	8006506 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006500:	bf00      	nop
 8006502:	e000      	b.n	8006506 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006504:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800650e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006512:	4618      	mov	r0, r3
 8006514:	37d8      	adds	r7, #216	; 0xd8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	50000700 	.word	0x50000700
 8006520:	c3210000 	.word	0xc3210000
 8006524:	90c00010 	.word	0x90c00010
 8006528:	50000600 	.word	0x50000600
 800652c:	50000100 	.word	0x50000100
 8006530:	50000300 	.word	0x50000300
 8006534:	20000270 	.word	0x20000270
 8006538:	053e2d63 	.word	0x053e2d63
 800653c:	c7520000 	.word	0xc7520000
 8006540:	50000500 	.word	0x50000500
 8006544:	cb840000 	.word	0xcb840000

08006548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006550:	2300      	movs	r3, #0
 8006552:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff f8b9 	bl	80056d0 <LL_ADC_IsEnabled>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d176      	bne.n	8006652 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	4b3c      	ldr	r3, [pc, #240]	; (800665c <ADC_Enable+0x114>)
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f043 0210 	orr.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e062      	b.n	8006654 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff f888 	bl	80056a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a0:	d004      	beq.n	80065ac <ADC_Enable+0x64>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2e      	ldr	r2, [pc, #184]	; (8006660 <ADC_Enable+0x118>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d101      	bne.n	80065b0 <ADC_Enable+0x68>
 80065ac:	4b2d      	ldr	r3, [pc, #180]	; (8006664 <ADC_Enable+0x11c>)
 80065ae:	e000      	b.n	80065b2 <ADC_Enable+0x6a>
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <ADC_Enable+0x120>)
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fee2 	bl	800537c <LL_ADC_GetCommonPathInternalCh>
 80065b8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80065ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065c2:	4b2a      	ldr	r3, [pc, #168]	; (800666c <ADC_Enable+0x124>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a29      	ldr	r2, [pc, #164]	; (8006670 <ADC_Enable+0x128>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	099b      	lsrs	r3, r3, #6
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	4613      	mov	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065dc:	e002      	b.n	80065e4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f9      	bne.n	80065de <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065ea:	f7fe fe95 	bl	8005318 <HAL_GetTick>
 80065ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065f0:	e028      	b.n	8006644 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff f86a 	bl	80056d0 <LL_ADC_IsEnabled>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff f84e 	bl	80056a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800660c:	f7fe fe84 	bl	8005318 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d914      	bls.n	8006644 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d00d      	beq.n	8006644 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	f043 0210 	orr.w	r2, r3, #16
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e007      	b.n	8006654 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b01      	cmp	r3, #1
 8006650:	d1cf      	bne.n	80065f2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	8000003f 	.word	0x8000003f
 8006660:	50000100 	.word	0x50000100
 8006664:	50000300 	.word	0x50000300
 8006668:	50000700 	.word	0x50000700
 800666c:	20000270 	.word	0x20000270
 8006670:	053e2d63 	.word	0x053e2d63

08006674 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800668a:	2b00      	cmp	r3, #0
 800668c:	d14b      	bne.n	8006726 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006692:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d021      	beq.n	80066ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe ff11 	bl	80054d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d032      	beq.n	800671e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d12b      	bne.n	800671e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d11f      	bne.n	800671e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	f043 0201 	orr.w	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80066ea:	e018      	b.n	800671e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d111      	bne.n	800671e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006716:	f043 0201 	orr.w	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fab4 	bl	8005c8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006724:	e00e      	b.n	8006744 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fabe 	bl	8005cb4 <HAL_ADC_ErrorCallback>
}
 8006738:	e004      	b.n	8006744 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff faa0 	bl	8005ca0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fa90 	bl	8005cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <LL_ADC_IsEnabled>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <LL_ADC_IsEnabled+0x18>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <LL_ADC_IsEnabled+0x1a>
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d101      	bne.n	80067da <LL_ADC_REG_IsConversionOngoing+0x18>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b0a1      	sub	sp, #132	; 0x84
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006802:	2302      	movs	r3, #2
 8006804:	e0e7      	b.n	80069d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800680e:	2300      	movs	r3, #0
 8006810:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006812:	2300      	movs	r3, #0
 8006814:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800681e:	d102      	bne.n	8006826 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006820:	4b6f      	ldr	r3, [pc, #444]	; (80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006822:	60bb      	str	r3, [r7, #8]
 8006824:	e009      	b.n	800683a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6e      	ldr	r2, [pc, #440]	; (80069e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d102      	bne.n	8006836 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006830:	4b6d      	ldr	r3, [pc, #436]	; (80069e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	e001      	b.n	800683a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	f043 0220 	orr.w	r2, r3, #32
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0be      	b.n	80069d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff ffb1 	bl	80067c2 <LL_ADC_REG_IsConversionOngoing>
 8006860:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff ffab 	bl	80067c2 <LL_ADC_REG_IsConversionOngoing>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 80a0 	bne.w	80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 809c 	bne.w	80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006884:	d004      	beq.n	8006890 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a55      	ldr	r2, [pc, #340]	; (80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d101      	bne.n	8006894 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006890:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006892:	e000      	b.n	8006896 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006894:	4b56      	ldr	r3, [pc, #344]	; (80069f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006896:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d04b      	beq.n	8006938 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80068a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068b2:	035b      	lsls	r3, r3, #13
 80068b4:	430b      	orrs	r3, r1
 80068b6:	431a      	orrs	r2, r3
 80068b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c4:	d004      	beq.n	80068d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a45      	ldr	r2, [pc, #276]	; (80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10f      	bne.n	80068f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80068d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068d4:	f7ff ff62 	bl	800679c <LL_ADC_IsEnabled>
 80068d8:	4604      	mov	r4, r0
 80068da:	4841      	ldr	r0, [pc, #260]	; (80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068dc:	f7ff ff5e 	bl	800679c <LL_ADC_IsEnabled>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4323      	orrs	r3, r4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e012      	b.n	8006916 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80068f0:	483c      	ldr	r0, [pc, #240]	; (80069e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80068f2:	f7ff ff53 	bl	800679c <LL_ADC_IsEnabled>
 80068f6:	4604      	mov	r4, r0
 80068f8:	483b      	ldr	r0, [pc, #236]	; (80069e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80068fa:	f7ff ff4f 	bl	800679c <LL_ADC_IsEnabled>
 80068fe:	4603      	mov	r3, r0
 8006900:	431c      	orrs	r4, r3
 8006902:	483c      	ldr	r0, [pc, #240]	; (80069f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006904:	f7ff ff4a 	bl	800679c <LL_ADC_IsEnabled>
 8006908:	4603      	mov	r3, r0
 800690a:	4323      	orrs	r3, r4
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d056      	beq.n	80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800691a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006922:	f023 030f 	bic.w	r3, r3, #15
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	6811      	ldr	r1, [r2, #0]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	6892      	ldr	r2, [r2, #8]
 800692e:	430a      	orrs	r2, r1
 8006930:	431a      	orrs	r2, r3
 8006932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006934:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006936:	e047      	b.n	80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006942:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800694c:	d004      	beq.n	8006958 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a23      	ldr	r2, [pc, #140]	; (80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10f      	bne.n	8006978 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006958:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800695c:	f7ff ff1e 	bl	800679c <LL_ADC_IsEnabled>
 8006960:	4604      	mov	r4, r0
 8006962:	481f      	ldr	r0, [pc, #124]	; (80069e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006964:	f7ff ff1a 	bl	800679c <LL_ADC_IsEnabled>
 8006968:	4603      	mov	r3, r0
 800696a:	4323      	orrs	r3, r4
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	e012      	b.n	800699e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006978:	481a      	ldr	r0, [pc, #104]	; (80069e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800697a:	f7ff ff0f 	bl	800679c <LL_ADC_IsEnabled>
 800697e:	4604      	mov	r4, r0
 8006980:	4819      	ldr	r0, [pc, #100]	; (80069e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006982:	f7ff ff0b 	bl	800679c <LL_ADC_IsEnabled>
 8006986:	4603      	mov	r3, r0
 8006988:	431c      	orrs	r4, r3
 800698a:	481a      	ldr	r0, [pc, #104]	; (80069f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800698c:	f7ff ff06 	bl	800679c <LL_ADC_IsEnabled>
 8006990:	4603      	mov	r3, r0
 8006992:	4323      	orrs	r3, r4
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80069a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80069aa:	f023 030f 	bic.w	r3, r3, #15
 80069ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80069b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80069b2:	e009      	b.n	80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80069c6:	e000      	b.n	80069ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80069c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80069d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3784      	adds	r7, #132	; 0x84
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd90      	pop	{r4, r7, pc}
 80069de:	bf00      	nop
 80069e0:	50000100 	.word	0x50000100
 80069e4:	50000400 	.word	0x50000400
 80069e8:	50000500 	.word	0x50000500
 80069ec:	50000300 	.word	0x50000300
 80069f0:	50000700 	.word	0x50000700
 80069f4:	50000600 	.word	0x50000600

080069f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <__NVIC_SetPriorityGrouping+0x44>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a2a:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <__NVIC_SetPriorityGrouping+0x44>)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	60d3      	str	r3, [r2, #12]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <__NVIC_GetPriorityGrouping+0x18>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 0307 	and.w	r3, r3, #7
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	e000ed00 	.word	0xe000ed00

08006a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	db0b      	blt.n	8006a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	f003 021f 	and.w	r2, r3, #31
 8006a74:	4907      	ldr	r1, [pc, #28]	; (8006a94 <__NVIC_EnableIRQ+0x38>)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	e000e100 	.word	0xe000e100

08006a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	db0a      	blt.n	8006ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	490c      	ldr	r1, [pc, #48]	; (8006ae4 <__NVIC_SetPriority+0x4c>)
 8006ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab6:	0112      	lsls	r2, r2, #4
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	440b      	add	r3, r1
 8006abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ac0:	e00a      	b.n	8006ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	4908      	ldr	r1, [pc, #32]	; (8006ae8 <__NVIC_SetPriority+0x50>)
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	3b04      	subs	r3, #4
 8006ad0:	0112      	lsls	r2, r2, #4
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	761a      	strb	r2, [r3, #24]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	e000e100 	.word	0xe000e100
 8006ae8:	e000ed00 	.word	0xe000ed00

08006aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	; 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f1c3 0307 	rsb	r3, r3, #7
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	bf28      	it	cs
 8006b0a:	2304      	movcs	r3, #4
 8006b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d902      	bls.n	8006b1c <NVIC_EncodePriority+0x30>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3b03      	subs	r3, #3
 8006b1a:	e000      	b.n	8006b1e <NVIC_EncodePriority+0x32>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	43da      	mvns	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	401a      	ands	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b34:	f04f 31ff 	mov.w	r1, #4294967295
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3e:	43d9      	mvns	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b44:	4313      	orrs	r3, r2
         );
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3724      	adds	r7, #36	; 0x24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b64:	d301      	bcc.n	8006b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b66:	2301      	movs	r3, #1
 8006b68:	e00f      	b.n	8006b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <SysTick_Config+0x40>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b72:	210f      	movs	r1, #15
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	f7ff ff8e 	bl	8006a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <SysTick_Config+0x40>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b82:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <SysTick_Config+0x40>)
 8006b84:	2207      	movs	r2, #7
 8006b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	e000e010 	.word	0xe000e010

08006b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff ff29 	bl	80069f8 <__NVIC_SetPriorityGrouping>
}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006bbc:	f7ff ff40 	bl	8006a40 <__NVIC_GetPriorityGrouping>
 8006bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	6978      	ldr	r0, [r7, #20]
 8006bc8:	f7ff ff90 	bl	8006aec <NVIC_EncodePriority>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff ff5f 	bl	8006a98 <__NVIC_SetPriority>
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	4603      	mov	r3, r0
 8006bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff ff33 	bl	8006a5c <__NVIC_EnableIRQ>
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff ffa4 	bl	8006b54 <SysTick_Config>
 8006c0c:	4603      	mov	r3, r0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e08d      	b.n	8006d46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_DMA_Init+0x138>)
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d80f      	bhi.n	8006c56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <HAL_DMA_Init+0x13c>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a45      	ldr	r2, [pc, #276]	; (8006d58 <HAL_DMA_Init+0x140>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	009a      	lsls	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a42      	ldr	r2, [pc, #264]	; (8006d5c <HAL_DMA_Init+0x144>)
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40
 8006c54:	e00e      	b.n	8006c74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4b40      	ldr	r3, [pc, #256]	; (8006d60 <HAL_DMA_Init+0x148>)
 8006c5e:	4413      	add	r3, r2
 8006c60:	4a3d      	ldr	r2, [pc, #244]	; (8006d58 <HAL_DMA_Init+0x140>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	091b      	lsrs	r3, r3, #4
 8006c68:	009a      	lsls	r2, r3, #2
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <HAL_DMA_Init+0x14c>)
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa76 	bl	80071b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd4:	d102      	bne.n	8006cdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cf0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d010      	beq.n	8006d1c <HAL_DMA_Init+0x104>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d80c      	bhi.n	8006d1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa96 	bl	8007234 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e008      	b.n	8006d2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40020407 	.word	0x40020407
 8006d54:	bffdfff8 	.word	0xbffdfff8
 8006d58:	cccccccd 	.word	0xcccccccd
 8006d5c:	40020000 	.word	0x40020000
 8006d60:	bffdfbf8 	.word	0xbffdfbf8
 8006d64:	40020400 	.word	0x40020400

08006d68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_DMA_Start_IT+0x20>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e066      	b.n	8006e56 <HAL_DMA_Start_IT+0xee>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d155      	bne.n	8006e48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f9bb 	bl	800713c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 020e 	orr.w	r2, r2, #14
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e00f      	b.n	8006e00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0204 	bic.w	r2, r2, #4
 8006dee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 020a 	orr.w	r2, r2, #10
 8006dfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e005      	b.n	8006e54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d005      	beq.n	8006e82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e037      	b.n	8006ef2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 020e 	bic.w	r2, r2, #14
 8006e90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	f003 021f 	and.w	r2, r3, #31
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ec4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ece:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ee6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006ef0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d00d      	beq.n	8006f44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
 8006f42:	e047      	b.n	8006fd4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 020e 	bic.w	r2, r2, #14
 8006f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	f003 021f 	and.w	r2, r3, #31
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	2101      	movs	r1, #1
 8006f82:	fa01 f202 	lsl.w	r2, r1, r2
 8006f86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fa8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006fb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
    }
  }
  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	2204      	movs	r2, #4
 8007000:	409a      	lsls	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4013      	ands	r3, r2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d026      	beq.n	8007058 <HAL_DMA_IRQHandler+0x7a>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d021      	beq.n	8007058 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d107      	bne.n	8007032 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0204 	bic.w	r2, r2, #4
 8007030:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	f003 021f 	and.w	r2, r3, #31
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2104      	movs	r1, #4
 8007040:	fa01 f202 	lsl.w	r2, r1, r2
 8007044:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d071      	beq.n	8007132 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007056:	e06c      	b.n	8007132 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2202      	movs	r2, #2
 8007062:	409a      	lsls	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02e      	beq.n	80070ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d029      	beq.n	80070ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 020a 	bic.w	r2, r2, #10
 8007092:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	f003 021f 	and.w	r2, r3, #31
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2102      	movs	r1, #2
 80070aa:	fa01 f202 	lsl.w	r2, r1, r2
 80070ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d038      	beq.n	8007132 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80070c8:	e033      	b.n	8007132 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2208      	movs	r2, #8
 80070d4:	409a      	lsls	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4013      	ands	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d02a      	beq.n	8007134 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d025      	beq.n	8007134 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020e 	bic.w	r2, r2, #14
 80070f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fc:	f003 021f 	and.w	r2, r3, #31
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f202 	lsl.w	r2, r1, r2
 800710a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007132:	bf00      	nop
 8007134:	bf00      	nop
}
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007152:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007164:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	f003 021f 	and.w	r2, r3, #31
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2101      	movs	r1, #1
 8007174:	fa01 f202 	lsl.w	r2, r1, r2
 8007178:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2b10      	cmp	r3, #16
 8007188:	d108      	bne.n	800719c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800719a:	e007      	b.n	80071ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b16      	ldr	r3, [pc, #88]	; (8007220 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d802      	bhi.n	80071d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80071cc:	4b15      	ldr	r3, [pc, #84]	; (8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e001      	b.n	80071d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80071d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	3b08      	subs	r3, #8
 80071e2:	4a12      	ldr	r2, [pc, #72]	; (800722c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80071e4:	fba2 2303 	umull	r2, r3, r2, r3
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f0:	089b      	lsrs	r3, r3, #2
 80071f2:	009a      	lsls	r2, r3, #2
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4413      	add	r3, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007202:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2201      	movs	r2, #1
 800720c:	409a      	lsls	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40020407 	.word	0x40020407
 8007224:	40020800 	.word	0x40020800
 8007228:	40020820 	.word	0x40020820
 800722c:	cccccccd 	.word	0xcccccccd
 8007230:	40020880 	.word	0x40020880

08007234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a08      	ldr	r2, [pc, #32]	; (8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007256:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3b01      	subs	r3, #1
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	1000823f 	.word	0x1000823f
 8007278:	40020940 	.word	0x40020940

0800727c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800728a:	e15a      	b.n	8007542 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	2101      	movs	r1, #1
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	fa01 f303 	lsl.w	r3, r1, r3
 8007298:	4013      	ands	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 814c 	beq.w	800753c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d005      	beq.n	80072bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d130      	bne.n	800731e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	2203      	movs	r2, #3
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4013      	ands	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072f2:	2201      	movs	r2, #1
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	fa02 f303 	lsl.w	r3, r2, r3
 80072fa:	43db      	mvns	r3, r3
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4013      	ands	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	091b      	lsrs	r3, r3, #4
 8007308:	f003 0201 	and.w	r2, r3, #1
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d017      	beq.n	800735a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	2203      	movs	r2, #3
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43db      	mvns	r3, r3
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4013      	ands	r3, r2
 8007340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d123      	bne.n	80073ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	08da      	lsrs	r2, r3, #3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3208      	adds	r2, #8
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	220f      	movs	r2, #15
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	43db      	mvns	r3, r3
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4013      	ands	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	fa02 f303 	lsl.w	r3, r2, r3
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	08da      	lsrs	r2, r3, #3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3208      	adds	r2, #8
 80073a8:	6939      	ldr	r1, [r7, #16]
 80073aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	2203      	movs	r2, #3
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43db      	mvns	r3, r3
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4013      	ands	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 0203 	and.w	r2, r3, #3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 80a6 	beq.w	800753c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073f0:	4b5b      	ldr	r3, [pc, #364]	; (8007560 <HAL_GPIO_Init+0x2e4>)
 80073f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f4:	4a5a      	ldr	r2, [pc, #360]	; (8007560 <HAL_GPIO_Init+0x2e4>)
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6613      	str	r3, [r2, #96]	; 0x60
 80073fc:	4b58      	ldr	r3, [pc, #352]	; (8007560 <HAL_GPIO_Init+0x2e4>)
 80073fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007408:	4a56      	ldr	r2, [pc, #344]	; (8007564 <HAL_GPIO_Init+0x2e8>)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	089b      	lsrs	r3, r3, #2
 800740e:	3302      	adds	r3, #2
 8007410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	220f      	movs	r2, #15
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4013      	ands	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007432:	d01f      	beq.n	8007474 <HAL_GPIO_Init+0x1f8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a4c      	ldr	r2, [pc, #304]	; (8007568 <HAL_GPIO_Init+0x2ec>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d019      	beq.n	8007470 <HAL_GPIO_Init+0x1f4>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a4b      	ldr	r2, [pc, #300]	; (800756c <HAL_GPIO_Init+0x2f0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <HAL_GPIO_Init+0x1f0>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a4a      	ldr	r2, [pc, #296]	; (8007570 <HAL_GPIO_Init+0x2f4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00d      	beq.n	8007468 <HAL_GPIO_Init+0x1ec>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a49      	ldr	r2, [pc, #292]	; (8007574 <HAL_GPIO_Init+0x2f8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <HAL_GPIO_Init+0x1e8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a48      	ldr	r2, [pc, #288]	; (8007578 <HAL_GPIO_Init+0x2fc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d101      	bne.n	8007460 <HAL_GPIO_Init+0x1e4>
 800745c:	2305      	movs	r3, #5
 800745e:	e00a      	b.n	8007476 <HAL_GPIO_Init+0x1fa>
 8007460:	2306      	movs	r3, #6
 8007462:	e008      	b.n	8007476 <HAL_GPIO_Init+0x1fa>
 8007464:	2304      	movs	r3, #4
 8007466:	e006      	b.n	8007476 <HAL_GPIO_Init+0x1fa>
 8007468:	2303      	movs	r3, #3
 800746a:	e004      	b.n	8007476 <HAL_GPIO_Init+0x1fa>
 800746c:	2302      	movs	r3, #2
 800746e:	e002      	b.n	8007476 <HAL_GPIO_Init+0x1fa>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_GPIO_Init+0x1fa>
 8007474:	2300      	movs	r3, #0
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	f002 0203 	and.w	r2, r2, #3
 800747c:	0092      	lsls	r2, r2, #2
 800747e:	4093      	lsls	r3, r2
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007486:	4937      	ldr	r1, [pc, #220]	; (8007564 <HAL_GPIO_Init+0x2e8>)
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	089b      	lsrs	r3, r3, #2
 800748c:	3302      	adds	r3, #2
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007494:	4b39      	ldr	r3, [pc, #228]	; (800757c <HAL_GPIO_Init+0x300>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	43db      	mvns	r3, r3
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4013      	ands	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80074b8:	4a30      	ldr	r2, [pc, #192]	; (800757c <HAL_GPIO_Init+0x300>)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80074be:	4b2f      	ldr	r3, [pc, #188]	; (800757c <HAL_GPIO_Init+0x300>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	43db      	mvns	r3, r3
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4013      	ands	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80074e2:	4a26      	ldr	r2, [pc, #152]	; (800757c <HAL_GPIO_Init+0x300>)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80074e8:	4b24      	ldr	r3, [pc, #144]	; (800757c <HAL_GPIO_Init+0x300>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4013      	ands	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800750c:	4a1b      	ldr	r2, [pc, #108]	; (800757c <HAL_GPIO_Init+0x300>)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007512:	4b1a      	ldr	r3, [pc, #104]	; (800757c <HAL_GPIO_Init+0x300>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	43db      	mvns	r3, r3
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4013      	ands	r3, r2
 8007520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007536:	4a11      	ldr	r2, [pc, #68]	; (800757c <HAL_GPIO_Init+0x300>)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3301      	adds	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	f47f ae9d 	bne.w	800728c <HAL_GPIO_Init+0x10>
  }
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	40021000 	.word	0x40021000
 8007564:	40010000 	.word	0x40010000
 8007568:	48000400 	.word	0x48000400
 800756c:	48000800 	.word	0x48000800
 8007570:	48000c00 	.word	0x48000c00
 8007574:	48001000 	.word	0x48001000
 8007578:	48001400 	.word	0x48001400
 800757c:	40010400 	.word	0x40010400

08007580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	887b      	ldrh	r3, [r7, #2]
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
 800759c:	e001      	b.n	80075a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	807b      	strh	r3, [r7, #2]
 80075bc:	4613      	mov	r3, r2
 80075be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075c0:	787b      	ldrb	r3, [r7, #1]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075c6:	887a      	ldrh	r2, [r7, #2]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075cc:	e002      	b.n	80075d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075ce:	887a      	ldrh	r2, [r7, #2]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	4013      	ands	r3, r2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d006      	beq.n	8007604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075f6:	4a05      	ldr	r2, [pc, #20]	; (800760c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fd fa88 	bl	8004b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40010400 	.word	0x40010400

08007610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d141      	bne.n	80076a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800761e:	4b4b      	ldr	r3, [pc, #300]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762a:	d131      	bne.n	8007690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800762c:	4b47      	ldr	r3, [pc, #284]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007632:	4a46      	ldr	r2, [pc, #280]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800763c:	4b43      	ldr	r3, [pc, #268]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007644:	4a41      	ldr	r2, [pc, #260]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800764a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800764c:	4b40      	ldr	r3, [pc, #256]	; (8007750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2232      	movs	r2, #50	; 0x32
 8007652:	fb02 f303 	mul.w	r3, r2, r3
 8007656:	4a3f      	ldr	r2, [pc, #252]	; (8007754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007658:	fba2 2303 	umull	r2, r3, r2, r3
 800765c:	0c9b      	lsrs	r3, r3, #18
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007662:	e002      	b.n	800766a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3b01      	subs	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800766a:	4b38      	ldr	r3, [pc, #224]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007676:	d102      	bne.n	800767e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f2      	bne.n	8007664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800767e:	4b33      	ldr	r3, [pc, #204]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768a:	d158      	bne.n	800773e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e057      	b.n	8007740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007690:	4b2e      	ldr	r3, [pc, #184]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007696:	4a2d      	ldr	r2, [pc, #180]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800769c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80076a0:	e04d      	b.n	800773e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a8:	d141      	bne.n	800772e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80076aa:	4b28      	ldr	r3, [pc, #160]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b6:	d131      	bne.n	800771c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076b8:	4b24      	ldr	r3, [pc, #144]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076be:	4a23      	ldr	r2, [pc, #140]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076c8:	4b20      	ldr	r3, [pc, #128]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80076d0:	4a1e      	ldr	r2, [pc, #120]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2232      	movs	r2, #50	; 0x32
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076e4:	fba2 2303 	umull	r2, r3, r2, r3
 80076e8:	0c9b      	lsrs	r3, r3, #18
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076ee:	e002      	b.n	80076f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007702:	d102      	bne.n	800770a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f2      	bne.n	80076f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800770a:	4b10      	ldr	r3, [pc, #64]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007716:	d112      	bne.n	800773e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e011      	b.n	8007740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800771e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007722:	4a0a      	ldr	r2, [pc, #40]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800772c:	e007      	b.n	800773e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007736:	4a05      	ldr	r2, [pc, #20]	; (800774c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800773c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	40007000 	.word	0x40007000
 8007750:	20000270 	.word	0x20000270
 8007754:	431bde83 	.word	0x431bde83

08007758 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4a04      	ldr	r2, [pc, #16]	; (8007774 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007766:	6093      	str	r3, [r2, #8]
}
 8007768:	bf00      	nop
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40007000 	.word	0x40007000

08007778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e2fe      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d075      	beq.n	8007882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007796:	4b97      	ldr	r3, [pc, #604]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 030c 	and.w	r3, r3, #12
 800779e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077a0:	4b94      	ldr	r3, [pc, #592]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	d102      	bne.n	80077b6 <HAL_RCC_OscConfig+0x3e>
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d002      	beq.n	80077bc <HAL_RCC_OscConfig+0x44>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d10b      	bne.n	80077d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077bc:	4b8d      	ldr	r3, [pc, #564]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d05b      	beq.n	8007880 <HAL_RCC_OscConfig+0x108>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d157      	bne.n	8007880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e2d9      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077dc:	d106      	bne.n	80077ec <HAL_RCC_OscConfig+0x74>
 80077de:	4b85      	ldr	r3, [pc, #532]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a84      	ldr	r2, [pc, #528]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80077e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e01d      	b.n	8007828 <HAL_RCC_OscConfig+0xb0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077f4:	d10c      	bne.n	8007810 <HAL_RCC_OscConfig+0x98>
 80077f6:	4b7f      	ldr	r3, [pc, #508]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7e      	ldr	r2, [pc, #504]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80077fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	4b7c      	ldr	r3, [pc, #496]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a7b      	ldr	r2, [pc, #492]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e00b      	b.n	8007828 <HAL_RCC_OscConfig+0xb0>
 8007810:	4b78      	ldr	r3, [pc, #480]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a77      	ldr	r2, [pc, #476]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	4b75      	ldr	r3, [pc, #468]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a74      	ldr	r2, [pc, #464]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d013      	beq.n	8007858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007830:	f7fd fd72 	bl	8005318 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007838:	f7fd fd6e 	bl	8005318 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b64      	cmp	r3, #100	; 0x64
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e29e      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800784a:	4b6a      	ldr	r3, [pc, #424]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f0      	beq.n	8007838 <HAL_RCC_OscConfig+0xc0>
 8007856:	e014      	b.n	8007882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007858:	f7fd fd5e 	bl	8005318 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007860:	f7fd fd5a 	bl	8005318 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b64      	cmp	r3, #100	; 0x64
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e28a      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007872:	4b60      	ldr	r3, [pc, #384]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f0      	bne.n	8007860 <HAL_RCC_OscConfig+0xe8>
 800787e:	e000      	b.n	8007882 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d075      	beq.n	800797a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800788e:	4b59      	ldr	r3, [pc, #356]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 030c 	and.w	r3, r3, #12
 8007896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007898:	4b56      	ldr	r3, [pc, #344]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b0c      	cmp	r3, #12
 80078a6:	d102      	bne.n	80078ae <HAL_RCC_OscConfig+0x136>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d002      	beq.n	80078b4 <HAL_RCC_OscConfig+0x13c>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d11f      	bne.n	80078f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b4:	4b4f      	ldr	r3, [pc, #316]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <HAL_RCC_OscConfig+0x154>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e25d      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078cc:	4b49      	ldr	r3, [pc, #292]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	061b      	lsls	r3, r3, #24
 80078da:	4946      	ldr	r1, [pc, #280]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80078e0:	4b45      	ldr	r3, [pc, #276]	; (80079f8 <HAL_RCC_OscConfig+0x280>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fd fccb 	bl	8005280 <HAL_InitTick>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d043      	beq.n	8007978 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e249      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d023      	beq.n	8007944 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078fc:	4b3d      	ldr	r3, [pc, #244]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a3c      	ldr	r2, [pc, #240]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fd fd06 	bl	8005318 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007910:	f7fd fd02 	bl	8005318 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e232      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007922:	4b34      	ldr	r3, [pc, #208]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792e:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	061b      	lsls	r3, r3, #24
 800793c:	492d      	ldr	r1, [pc, #180]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 800793e:	4313      	orrs	r3, r2
 8007940:	604b      	str	r3, [r1, #4]
 8007942:	e01a      	b.n	800797a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007944:	4b2b      	ldr	r3, [pc, #172]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a2a      	ldr	r2, [pc, #168]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 800794a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800794e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7fd fce2 	bl	8005318 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007958:	f7fd fcde 	bl	8005318 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e20e      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800796a:	4b22      	ldr	r3, [pc, #136]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0x1e0>
 8007976:	e000      	b.n	800797a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d041      	beq.n	8007a0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01c      	beq.n	80079c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800798e:	4b19      	ldr	r3, [pc, #100]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007994:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799e:	f7fd fcbb 	bl	8005318 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079a6:	f7fd fcb7 	bl	8005318 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e1e7      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079b8:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80079ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0ef      	beq.n	80079a6 <HAL_RCC_OscConfig+0x22e>
 80079c6:	e020      	b.n	8007a0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80079ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <HAL_RCC_OscConfig+0x27c>)
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d8:	f7fd fc9e 	bl	8005318 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079de:	e00d      	b.n	80079fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079e0:	f7fd fc9a 	bl	8005318 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d906      	bls.n	80079fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e1ca      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
 80079f2:	bf00      	nop
 80079f4:	40021000 	.word	0x40021000
 80079f8:	20000274 	.word	0x20000274
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079fc:	4b8c      	ldr	r3, [pc, #560]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 80079fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1ea      	bne.n	80079e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80a6 	beq.w	8007b64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a1c:	4b84      	ldr	r3, [pc, #528]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_RCC_OscConfig+0x2b4>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <HAL_RCC_OscConfig+0x2b6>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00d      	beq.n	8007a4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a32:	4b7f      	ldr	r3, [pc, #508]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	4a7e      	ldr	r2, [pc, #504]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a3e:	4b7c      	ldr	r3, [pc, #496]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a4e:	4b79      	ldr	r3, [pc, #484]	; (8007c34 <HAL_RCC_OscConfig+0x4bc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d118      	bne.n	8007a8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a5a:	4b76      	ldr	r3, [pc, #472]	; (8007c34 <HAL_RCC_OscConfig+0x4bc>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a75      	ldr	r2, [pc, #468]	; (8007c34 <HAL_RCC_OscConfig+0x4bc>)
 8007a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a66:	f7fd fc57 	bl	8005318 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a6e:	f7fd fc53 	bl	8005318 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e183      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a80:	4b6c      	ldr	r3, [pc, #432]	; (8007c34 <HAL_RCC_OscConfig+0x4bc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d108      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x32e>
 8007a94:	4b66      	ldr	r3, [pc, #408]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9a:	4a65      	ldr	r2, [pc, #404]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007aa4:	e024      	b.n	8007af0 <HAL_RCC_OscConfig+0x378>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b05      	cmp	r3, #5
 8007aac:	d110      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x358>
 8007aae:	4b60      	ldr	r3, [pc, #384]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab4:	4a5e      	ldr	r2, [pc, #376]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ab6:	f043 0304 	orr.w	r3, r3, #4
 8007aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007abe:	4b5c      	ldr	r3, [pc, #368]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac4:	4a5a      	ldr	r2, [pc, #360]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ac6:	f043 0301 	orr.w	r3, r3, #1
 8007aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ace:	e00f      	b.n	8007af0 <HAL_RCC_OscConfig+0x378>
 8007ad0:	4b57      	ldr	r3, [pc, #348]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	4a56      	ldr	r2, [pc, #344]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ae0:	4b53      	ldr	r3, [pc, #332]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae6:	4a52      	ldr	r2, [pc, #328]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ae8:	f023 0304 	bic.w	r3, r3, #4
 8007aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d016      	beq.n	8007b26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af8:	f7fd fc0e 	bl	8005318 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007afe:	e00a      	b.n	8007b16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b00:	f7fd fc0a 	bl	8005318 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e138      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b16:	4b46      	ldr	r3, [pc, #280]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0ed      	beq.n	8007b00 <HAL_RCC_OscConfig+0x388>
 8007b24:	e015      	b.n	8007b52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b26:	f7fd fbf7 	bl	8005318 <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b2c:	e00a      	b.n	8007b44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2e:	f7fd fbf3 	bl	8005318 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e121      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b44:	4b3a      	ldr	r3, [pc, #232]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1ed      	bne.n	8007b2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b52:	7ffb      	ldrb	r3, [r7, #31]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d105      	bne.n	8007b64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b58:	4b35      	ldr	r3, [pc, #212]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5c:	4a34      	ldr	r2, [pc, #208]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d03c      	beq.n	8007bea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01c      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b78:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b7e:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b88:	f7fd fbc6 	bl	8005318 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b90:	f7fd fbc2 	bl	8005318 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e0f2      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ba2:	4b23      	ldr	r3, [pc, #140]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0ef      	beq.n	8007b90 <HAL_RCC_OscConfig+0x418>
 8007bb0:	e01b      	b.n	8007bea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bb2:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007bba:	f023 0301 	bic.w	r3, r3, #1
 8007bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc2:	f7fd fba9 	bl	8005318 <HAL_GetTick>
 8007bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bca:	f7fd fba5 	bl	8005318 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e0d5      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007bdc:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1ef      	bne.n	8007bca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 80c9 	beq.w	8007d86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 030c 	and.w	r3, r3, #12
 8007bfc:	2b0c      	cmp	r3, #12
 8007bfe:	f000 8083 	beq.w	8007d08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d15e      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a08      	ldr	r2, [pc, #32]	; (8007c30 <HAL_RCC_OscConfig+0x4b8>)
 8007c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c16:	f7fd fb7f 	bl	8005318 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c1c:	e00c      	b.n	8007c38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c1e:	f7fd fb7b 	bl	8005318 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d905      	bls.n	8007c38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e0ab      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
 8007c30:	40021000 	.word	0x40021000
 8007c34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c38:	4b55      	ldr	r3, [pc, #340]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1ec      	bne.n	8007c1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c44:	4b52      	ldr	r3, [pc, #328]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	4b52      	ldr	r3, [pc, #328]	; (8007d94 <HAL_RCC_OscConfig+0x61c>)
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6a11      	ldr	r1, [r2, #32]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c54:	3a01      	subs	r2, #1
 8007c56:	0112      	lsls	r2, r2, #4
 8007c58:	4311      	orrs	r1, r2
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007c5e:	0212      	lsls	r2, r2, #8
 8007c60:	4311      	orrs	r1, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c66:	0852      	lsrs	r2, r2, #1
 8007c68:	3a01      	subs	r2, #1
 8007c6a:	0552      	lsls	r2, r2, #21
 8007c6c:	4311      	orrs	r1, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c72:	0852      	lsrs	r2, r2, #1
 8007c74:	3a01      	subs	r2, #1
 8007c76:	0652      	lsls	r2, r2, #25
 8007c78:	4311      	orrs	r1, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c7e:	06d2      	lsls	r2, r2, #27
 8007c80:	430a      	orrs	r2, r1
 8007c82:	4943      	ldr	r1, [pc, #268]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c88:	4b41      	ldr	r3, [pc, #260]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a40      	ldr	r2, [pc, #256]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c94:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fd fb3a 	bl	8005318 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca8:	f7fd fb36 	bl	8005318 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e066      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cba:	4b35      	ldr	r3, [pc, #212]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x530>
 8007cc6:	e05e      	b.n	8007d86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fd fb20 	bl	8005318 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fd fb1c 	bl	8005318 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e04c      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cee:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007cfa:	4b25      	ldr	r3, [pc, #148]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	4924      	ldr	r1, [pc, #144]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <HAL_RCC_OscConfig+0x620>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	60cb      	str	r3, [r1, #12]
 8007d06:	e03e      	b.n	8007d86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e039      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007d14:	4b1e      	ldr	r3, [pc, #120]	; (8007d90 <HAL_RCC_OscConfig+0x618>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f003 0203 	and.w	r2, r3, #3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d12c      	bne.n	8007d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	3b01      	subs	r3, #1
 8007d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d123      	bne.n	8007d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d11b      	bne.n	8007d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d113      	bne.n	8007d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	085b      	lsrs	r3, r3, #1
 8007d66:	3b01      	subs	r3, #1
 8007d68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d109      	bne.n	8007d82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	085b      	lsrs	r3, r3, #1
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d001      	beq.n	8007d86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	40021000 	.word	0x40021000
 8007d94:	019f800c 	.word	0x019f800c
 8007d98:	feeefffc 	.word	0xfeeefffc

08007d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e11e      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007db4:	4b91      	ldr	r3, [pc, #580]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d910      	bls.n	8007de4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dc2:	4b8e      	ldr	r3, [pc, #568]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f023 020f 	bic.w	r2, r3, #15
 8007dca:	498c      	ldr	r1, [pc, #560]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd2:	4b8a      	ldr	r3, [pc, #552]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d001      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e106      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d073      	beq.n	8007ed8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d129      	bne.n	8007e4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df8:	4b81      	ldr	r3, [pc, #516]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0f4      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007e08:	f000 f99e 	bl	8008148 <RCC_GetSysClockFreqFromPLLSource>
 8007e0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4a7c      	ldr	r2, [pc, #496]	; (8008004 <HAL_RCC_ClockConfig+0x268>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d93f      	bls.n	8007e96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e16:	4b7a      	ldr	r3, [pc, #488]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d033      	beq.n	8007e96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d12f      	bne.n	8007e96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e36:	4b72      	ldr	r3, [pc, #456]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e3e:	4a70      	ldr	r2, [pc, #448]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007e46:	2380      	movs	r3, #128	; 0x80
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	e024      	b.n	8007e96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d107      	bne.n	8007e64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e54:	4b6a      	ldr	r3, [pc, #424]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0c6      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e64:	4b66      	ldr	r3, [pc, #408]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0be      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007e74:	f000 f8ce 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 8007e78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4a61      	ldr	r2, [pc, #388]	; (8008004 <HAL_RCC_ClockConfig+0x268>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d909      	bls.n	8007e96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e82:	4b5f      	ldr	r3, [pc, #380]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8a:	4a5d      	ldr	r2, [pc, #372]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007e92:	2380      	movs	r3, #128	; 0x80
 8007e94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e96:	4b5a      	ldr	r3, [pc, #360]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f023 0203 	bic.w	r2, r3, #3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	4957      	ldr	r1, [pc, #348]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea8:	f7fd fa36 	bl	8005318 <HAL_GetTick>
 8007eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eae:	e00a      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb0:	f7fd fa32 	bl	8005318 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e095      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec6:	4b4e      	ldr	r3, [pc, #312]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 020c 	and.w	r2, r3, #12
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d1eb      	bne.n	8007eb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d023      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ef0:	4b43      	ldr	r3, [pc, #268]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4a42      	ldr	r2, [pc, #264]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007efa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d007      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f08:	4b3d      	ldr	r3, [pc, #244]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f10:	4a3b      	ldr	r2, [pc, #236]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f18:	4b39      	ldr	r3, [pc, #228]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	4936      	ldr	r1, [pc, #216]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	608b      	str	r3, [r1, #8]
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b80      	cmp	r3, #128	; 0x80
 8007f30:	d105      	bne.n	8007f3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007f32:	4b33      	ldr	r3, [pc, #204]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4a32      	ldr	r2, [pc, #200]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f3e:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d21d      	bcs.n	8007f88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f4c:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f023 020f 	bic.w	r2, r3, #15
 8007f54:	4929      	ldr	r1, [pc, #164]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007f5c:	f7fd f9dc 	bl	8005318 <HAL_GetTick>
 8007f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f62:	e00a      	b.n	8007f7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f64:	f7fd f9d8 	bl	8005318 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e03b      	b.n	8007ff2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f7a:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <HAL_RCC_ClockConfig+0x260>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d1ed      	bne.n	8007f64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f94:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4917      	ldr	r1, [pc, #92]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fb2:	4b13      	ldr	r3, [pc, #76]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	490f      	ldr	r1, [pc, #60]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007fc6:	f000 f825 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <HAL_RCC_ClockConfig+0x264>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	490c      	ldr	r1, [pc, #48]	; (8008008 <HAL_RCC_ClockConfig+0x26c>)
 8007fd8:	5ccb      	ldrb	r3, [r1, r3]
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe2:	4a0a      	ldr	r2, [pc, #40]	; (800800c <HAL_RCC_ClockConfig+0x270>)
 8007fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <HAL_RCC_ClockConfig+0x274>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fd f948 	bl	8005280 <HAL_InitTick>
 8007ff0:	4603      	mov	r3, r0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40022000 	.word	0x40022000
 8008000:	40021000 	.word	0x40021000
 8008004:	04c4b400 	.word	0x04c4b400
 8008008:	0800cd64 	.word	0x0800cd64
 800800c:	20000270 	.word	0x20000270
 8008010:	20000274 	.word	0x20000274

08008014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800801a:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
 8008022:	2b04      	cmp	r3, #4
 8008024:	d102      	bne.n	800802c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008026:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	e047      	b.n	80080bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800802c:	4b27      	ldr	r3, [pc, #156]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 030c 	and.w	r3, r3, #12
 8008034:	2b08      	cmp	r3, #8
 8008036:	d102      	bne.n	800803e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008038:	4b26      	ldr	r3, [pc, #152]	; (80080d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	e03e      	b.n	80080bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800803e:	4b23      	ldr	r3, [pc, #140]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	2b0c      	cmp	r3, #12
 8008048:	d136      	bne.n	80080b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800804a:	4b20      	ldr	r3, [pc, #128]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	091b      	lsrs	r3, r3, #4
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	3301      	adds	r3, #1
 8008060:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d10c      	bne.n	8008082 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008068:	4a1a      	ldr	r2, [pc, #104]	; (80080d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	4a16      	ldr	r2, [pc, #88]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008072:	68d2      	ldr	r2, [r2, #12]
 8008074:	0a12      	lsrs	r2, r2, #8
 8008076:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	617b      	str	r3, [r7, #20]
      break;
 8008080:	e00c      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008082:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	fbb2 f3f3 	udiv	r3, r2, r3
 800808a:	4a10      	ldr	r2, [pc, #64]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800808c:	68d2      	ldr	r2, [r2, #12]
 800808e:	0a12      	lsrs	r2, r2, #8
 8008090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008094:	fb02 f303 	mul.w	r3, r2, r3
 8008098:	617b      	str	r3, [r7, #20]
      break;
 800809a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	0e5b      	lsrs	r3, r3, #25
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	3301      	adds	r3, #1
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	e001      	b.n	80080bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80080bc:	693b      	ldr	r3, [r7, #16]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	371c      	adds	r7, #28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40021000 	.word	0x40021000
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	016e3600 	.word	0x016e3600

080080d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080dc:	4b03      	ldr	r3, [pc, #12]	; (80080ec <HAL_RCC_GetHCLKFreq+0x14>)
 80080de:	681b      	ldr	r3, [r3, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000270 	.word	0x20000270

080080f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80080f4:	f7ff fff0 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b06      	ldr	r3, [pc, #24]	; (8008114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4904      	ldr	r1, [pc, #16]	; (8008118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008110:	4618      	mov	r0, r3
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40021000 	.word	0x40021000
 8008118:	0800cd74 	.word	0x0800cd74

0800811c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008120:	f7ff ffda 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 8008124:	4602      	mov	r2, r0
 8008126:	4b06      	ldr	r3, [pc, #24]	; (8008140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	0adb      	lsrs	r3, r3, #11
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	4904      	ldr	r1, [pc, #16]	; (8008144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008132:	5ccb      	ldrb	r3, [r1, r3]
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800813c:	4618      	mov	r0, r3
 800813e:	bd80      	pop	{r7, pc}
 8008140:	40021000 	.word	0x40021000
 8008144:	0800cd74 	.word	0x0800cd74

08008148 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800814e:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008158:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	091b      	lsrs	r3, r3, #4
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d10c      	bne.n	8008186 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800816c:	4a17      	ldr	r2, [pc, #92]	; (80081cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	fbb2 f3f3 	udiv	r3, r2, r3
 8008174:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008176:	68d2      	ldr	r2, [r2, #12]
 8008178:	0a12      	lsrs	r2, r2, #8
 800817a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800817e:	fb02 f303 	mul.w	r3, r2, r3
 8008182:	617b      	str	r3, [r7, #20]
    break;
 8008184:	e00c      	b.n	80081a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008186:	4a12      	ldr	r2, [pc, #72]	; (80081d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	fbb2 f3f3 	udiv	r3, r2, r3
 800818e:	4a0e      	ldr	r2, [pc, #56]	; (80081c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008190:	68d2      	ldr	r2, [r2, #12]
 8008192:	0a12      	lsrs	r2, r2, #8
 8008194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008198:	fb02 f303 	mul.w	r3, r2, r3
 800819c:	617b      	str	r3, [r7, #20]
    break;
 800819e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	0e5b      	lsrs	r3, r3, #25
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	3301      	adds	r3, #1
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80081ba:	687b      	ldr	r3, [r7, #4]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	40021000 	.word	0x40021000
 80081cc:	016e3600 	.word	0x016e3600
 80081d0:	00f42400 	.word	0x00f42400

080081d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081dc:	2300      	movs	r3, #0
 80081de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081e0:	2300      	movs	r3, #0
 80081e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8098 	beq.w	8008322 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081f2:	2300      	movs	r3, #0
 80081f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081f6:	4b43      	ldr	r3, [pc, #268]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008202:	4b40      	ldr	r3, [pc, #256]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008206:	4a3f      	ldr	r2, [pc, #252]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800820c:	6593      	str	r3, [r2, #88]	; 0x58
 800820e:	4b3d      	ldr	r3, [pc, #244]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008216:	60bb      	str	r3, [r7, #8]
 8008218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800821a:	2301      	movs	r3, #1
 800821c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800821e:	4b3a      	ldr	r3, [pc, #232]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a39      	ldr	r2, [pc, #228]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800822a:	f7fd f875 	bl	8005318 <HAL_GetTick>
 800822e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008230:	e009      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008232:	f7fd f871 	bl	8005318 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d902      	bls.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	74fb      	strb	r3, [r7, #19]
        break;
 8008244:	e005      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008246:	4b30      	ldr	r3, [pc, #192]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0ef      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008252:	7cfb      	ldrb	r3, [r7, #19]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d159      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008258:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008262:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01e      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	429a      	cmp	r2, r3
 8008272:	d019      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008274:	4b23      	ldr	r3, [pc, #140]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800827e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008280:	4b20      	ldr	r3, [pc, #128]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800828c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008290:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008296:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800829c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082a0:	4a18      	ldr	r2, [pc, #96]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fd f831 	bl	8005318 <HAL_GetTick>
 80082b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082b8:	e00b      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ba:	f7fd f82d 	bl	8005318 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d902      	bls.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	74fb      	strb	r3, [r7, #19]
            break;
 80082d0:	e006      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082d2:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0ec      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80082e0:	7cfb      	ldrb	r3, [r7, #19]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082e6:	4b07      	ldr	r3, [pc, #28]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f4:	4903      	ldr	r1, [pc, #12]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082fc:	e008      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082fe:	7cfb      	ldrb	r3, [r7, #19]
 8008300:	74bb      	strb	r3, [r7, #18]
 8008302:	e005      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008304:	40021000 	.word	0x40021000
 8008308:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	7cfb      	ldrb	r3, [r7, #19]
 800830e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008310:	7c7b      	ldrb	r3, [r7, #17]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d105      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008316:	4ba7      	ldr	r3, [pc, #668]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831a:	4aa6      	ldr	r2, [pc, #664]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800831c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008320:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800832e:	4ba1      	ldr	r3, [pc, #644]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008334:	f023 0203 	bic.w	r2, r3, #3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	499d      	ldr	r1, [pc, #628]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833e:	4313      	orrs	r3, r2
 8008340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008350:	4b98      	ldr	r3, [pc, #608]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008356:	f023 020c 	bic.w	r2, r3, #12
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	4995      	ldr	r1, [pc, #596]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0304 	and.w	r3, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008372:	4b90      	ldr	r3, [pc, #576]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008378:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	498c      	ldr	r1, [pc, #560]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008394:	4b87      	ldr	r3, [pc, #540]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	4984      	ldr	r1, [pc, #528]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083b6:	4b7f      	ldr	r3, [pc, #508]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	497b      	ldr	r1, [pc, #492]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083d8:	4b76      	ldr	r3, [pc, #472]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	4973      	ldr	r1, [pc, #460]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083fa:	4b6e      	ldr	r3, [pc, #440]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008400:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	496a      	ldr	r1, [pc, #424]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800841c:	4b65      	ldr	r3, [pc, #404]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	4962      	ldr	r1, [pc, #392]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800843e:	4b5d      	ldr	r3, [pc, #372]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	4959      	ldr	r1, [pc, #356]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008460:	4b54      	ldr	r3, [pc, #336]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008466:	f023 0203 	bic.w	r2, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	4951      	ldr	r1, [pc, #324]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008470:	4313      	orrs	r3, r2
 8008472:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008482:	4b4c      	ldr	r3, [pc, #304]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008488:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4948      	ldr	r1, [pc, #288]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d015      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084a4:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b2:	4940      	ldr	r1, [pc, #256]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c2:	d105      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084c4:	4b3b      	ldr	r3, [pc, #236]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4a3a      	ldr	r2, [pc, #232]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d015      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084dc:	4b35      	ldr	r3, [pc, #212]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	4932      	ldr	r1, [pc, #200]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084fa:	d105      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084fc:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	4a2c      	ldr	r2, [pc, #176]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008506:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d015      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	4924      	ldr	r1, [pc, #144]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008532:	d105      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008534:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800853a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800853e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d015      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800854c:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	4916      	ldr	r1, [pc, #88]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800856a:	d105      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800856c:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008576:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d019      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008584:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	4908      	ldr	r1, [pc, #32]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008594:	4313      	orrs	r3, r2
 8008596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a2:	d109      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085a4:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	4a02      	ldr	r2, [pc, #8]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ae:	60d3      	str	r3, [r2, #12]
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80085b2:	bf00      	nop
 80085b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d015      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80085c4:	4b29      	ldr	r3, [pc, #164]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d2:	4926      	ldr	r1, [pc, #152]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085e2:	d105      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80085e4:	4b21      	ldr	r3, [pc, #132]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4a20      	ldr	r2, [pc, #128]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d015      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80085fc:	4b1b      	ldr	r3, [pc, #108]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008602:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860a:	4918      	ldr	r1, [pc, #96]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800860c:	4313      	orrs	r3, r2
 800860e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d105      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800861c:	4b13      	ldr	r3, [pc, #76]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	4a12      	ldr	r2, [pc, #72]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008626:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d015      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008634:	4b0d      	ldr	r3, [pc, #52]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800863a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008642:	490a      	ldr	r1, [pc, #40]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008644:	4313      	orrs	r3, r2
 8008646:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008652:	d105      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	4a04      	ldr	r2, [pc, #16]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800865a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800865e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008660:	7cbb      	ldrb	r3, [r7, #18]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40021000 	.word	0x40021000

08008670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e054      	b.n	800872c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d111      	bne.n	80086b2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fee2 	bl	800a460 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d102      	bne.n	80086aa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a23      	ldr	r2, [pc, #140]	; (8008734 <HAL_TIM_Base_Init+0xc4>)
 80086a8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f001 fa2b 	bl	8009b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	08004d61 	.word	0x08004d61

08008738 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e04c      	b.n	80087ea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a26      	ldr	r2, [pc, #152]	; (80087f8 <HAL_TIM_Base_Start+0xc0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d022      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876a:	d01d      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a22      	ldr	r2, [pc, #136]	; (80087fc <HAL_TIM_Base_Start+0xc4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a21      	ldr	r2, [pc, #132]	; (8008800 <HAL_TIM_Base_Start+0xc8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d013      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1f      	ldr	r2, [pc, #124]	; (8008804 <HAL_TIM_Base_Start+0xcc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <HAL_TIM_Base_Start+0xd0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a1c      	ldr	r2, [pc, #112]	; (800880c <HAL_TIM_Base_Start+0xd4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <HAL_TIM_Base_Start+0x70>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1b      	ldr	r2, [pc, #108]	; (8008810 <HAL_TIM_Base_Start+0xd8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d115      	bne.n	80087d4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	4b19      	ldr	r3, [pc, #100]	; (8008814 <HAL_TIM_Base_Start+0xdc>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b06      	cmp	r3, #6
 80087b8:	d015      	beq.n	80087e6 <HAL_TIM_Base_Start+0xae>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c0:	d011      	beq.n	80087e6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d2:	e008      	b.n	80087e6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0201 	orr.w	r2, r2, #1
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e000      	b.n	80087e8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40000400 	.word	0x40000400
 8008800:	40000800 	.word	0x40000800
 8008804:	40000c00 	.word	0x40000c00
 8008808:	40013400 	.word	0x40013400
 800880c:	40014000 	.word	0x40014000
 8008810:	40015000 	.word	0x40015000
 8008814:	00010007 	.word	0x00010007

08008818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b01      	cmp	r3, #1
 800882a:	d001      	beq.n	8008830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e054      	b.n	80088da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a26      	ldr	r2, [pc, #152]	; (80088e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d022      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885a:	d01d      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a22      	ldr	r2, [pc, #136]	; (80088ec <HAL_TIM_Base_Start_IT+0xd4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a21      	ldr	r2, [pc, #132]	; (80088f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <HAL_TIM_Base_Start_IT+0xe4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x80>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <HAL_TIM_Base_Start_IT+0xe8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d115      	bne.n	80088c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <HAL_TIM_Base_Start_IT+0xec>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b06      	cmp	r3, #6
 80088a8:	d015      	beq.n	80088d6 <HAL_TIM_Base_Start_IT+0xbe>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b0:	d011      	beq.n	80088d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c2:	e008      	b.n	80088d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e000      	b.n	80088d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	40012c00 	.word	0x40012c00
 80088ec:	40000400 	.word	0x40000400
 80088f0:	40000800 	.word	0x40000800
 80088f4:	40000c00 	.word	0x40000c00
 80088f8:	40013400 	.word	0x40013400
 80088fc:	40014000 	.word	0x40014000
 8008900:	40015000 	.word	0x40015000
 8008904:	00010007 	.word	0x00010007

08008908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e054      	b.n	80089c4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d111      	bne.n	800894a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fd96 	bl	800a460 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a23      	ldr	r2, [pc, #140]	; (80089cc <HAL_TIM_PWM_Init+0xc4>)
 8008940:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	4619      	mov	r1, r3
 800895c:	4610      	mov	r0, r2
 800895e:	f001 f8df 	bl	8009b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	08004e19 	.word	0x08004e19

080089d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d109      	bne.n	80089f4 <HAL_TIM_PWM_Start+0x24>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	bf14      	ite	ne
 80089ec:	2301      	movne	r3, #1
 80089ee:	2300      	moveq	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	e03c      	b.n	8008a6e <HAL_TIM_PWM_Start+0x9e>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d109      	bne.n	8008a0e <HAL_TIM_PWM_Start+0x3e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	bf14      	ite	ne
 8008a06:	2301      	movne	r3, #1
 8008a08:	2300      	moveq	r3, #0
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	e02f      	b.n	8008a6e <HAL_TIM_PWM_Start+0x9e>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d109      	bne.n	8008a28 <HAL_TIM_PWM_Start+0x58>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	bf14      	ite	ne
 8008a20:	2301      	movne	r3, #1
 8008a22:	2300      	moveq	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	e022      	b.n	8008a6e <HAL_TIM_PWM_Start+0x9e>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b0c      	cmp	r3, #12
 8008a2c:	d109      	bne.n	8008a42 <HAL_TIM_PWM_Start+0x72>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	bf14      	ite	ne
 8008a3a:	2301      	movne	r3, #1
 8008a3c:	2300      	moveq	r3, #0
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	e015      	b.n	8008a6e <HAL_TIM_PWM_Start+0x9e>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d109      	bne.n	8008a5c <HAL_TIM_PWM_Start+0x8c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	bf14      	ite	ne
 8008a54:	2301      	movne	r3, #1
 8008a56:	2300      	moveq	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	e008      	b.n	8008a6e <HAL_TIM_PWM_Start+0x9e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	bf14      	ite	ne
 8008a68:	2301      	movne	r3, #1
 8008a6a:	2300      	moveq	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e0a6      	b.n	8008bc4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <HAL_TIM_PWM_Start+0xb6>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a84:	e023      	b.n	8008ace <HAL_TIM_PWM_Start+0xfe>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d104      	bne.n	8008a96 <HAL_TIM_PWM_Start+0xc6>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a94:	e01b      	b.n	8008ace <HAL_TIM_PWM_Start+0xfe>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xd6>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa4:	e013      	b.n	8008ace <HAL_TIM_PWM_Start+0xfe>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b0c      	cmp	r3, #12
 8008aaa:	d104      	bne.n	8008ab6 <HAL_TIM_PWM_Start+0xe6>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ab4:	e00b      	b.n	8008ace <HAL_TIM_PWM_Start+0xfe>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b10      	cmp	r3, #16
 8008aba:	d104      	bne.n	8008ac6 <HAL_TIM_PWM_Start+0xf6>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ac4:	e003      	b.n	8008ace <HAL_TIM_PWM_Start+0xfe>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 fc9c 	bl	800a414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3a      	ldr	r2, [pc, #232]	; (8008bcc <HAL_TIM_PWM_Start+0x1fc>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d018      	beq.n	8008b18 <HAL_TIM_PWM_Start+0x148>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a39      	ldr	r2, [pc, #228]	; (8008bd0 <HAL_TIM_PWM_Start+0x200>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d013      	beq.n	8008b18 <HAL_TIM_PWM_Start+0x148>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a37      	ldr	r2, [pc, #220]	; (8008bd4 <HAL_TIM_PWM_Start+0x204>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00e      	beq.n	8008b18 <HAL_TIM_PWM_Start+0x148>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a36      	ldr	r2, [pc, #216]	; (8008bd8 <HAL_TIM_PWM_Start+0x208>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <HAL_TIM_PWM_Start+0x148>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a34      	ldr	r2, [pc, #208]	; (8008bdc <HAL_TIM_PWM_Start+0x20c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <HAL_TIM_PWM_Start+0x148>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a33      	ldr	r2, [pc, #204]	; (8008be0 <HAL_TIM_PWM_Start+0x210>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d101      	bne.n	8008b1c <HAL_TIM_PWM_Start+0x14c>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <HAL_TIM_PWM_Start+0x14e>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a25      	ldr	r2, [pc, #148]	; (8008bcc <HAL_TIM_PWM_Start+0x1fc>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d022      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b44:	d01d      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a26      	ldr	r2, [pc, #152]	; (8008be4 <HAL_TIM_PWM_Start+0x214>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d018      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a24      	ldr	r2, [pc, #144]	; (8008be8 <HAL_TIM_PWM_Start+0x218>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d013      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a23      	ldr	r2, [pc, #140]	; (8008bec <HAL_TIM_PWM_Start+0x21c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00e      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a19      	ldr	r2, [pc, #100]	; (8008bd0 <HAL_TIM_PWM_Start+0x200>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d009      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <HAL_TIM_PWM_Start+0x204>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d004      	beq.n	8008b82 <HAL_TIM_PWM_Start+0x1b2>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <HAL_TIM_PWM_Start+0x210>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d115      	bne.n	8008bae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <HAL_TIM_PWM_Start+0x220>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b06      	cmp	r3, #6
 8008b92:	d015      	beq.n	8008bc0 <HAL_TIM_PWM_Start+0x1f0>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b9a:	d011      	beq.n	8008bc0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bac:	e008      	b.n	8008bc0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0201 	orr.w	r2, r2, #1
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	e000      	b.n	8008bc2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	40012c00 	.word	0x40012c00
 8008bd0:	40013400 	.word	0x40013400
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	40014400 	.word	0x40014400
 8008bdc:	40014800 	.word	0x40014800
 8008be0:	40015000 	.word	0x40015000
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	00010007 	.word	0x00010007

08008bf4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e04c      	b.n	8008ca2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d111      	bne.n	8008c38 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fc1f 	bl	800a460 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a1f      	ldr	r2, [pc, #124]	; (8008cac <HAL_TIM_OnePulse_Init+0xb8>)
 8008c2e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f000 ff68 	bl	8009b20 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0208 	bic.w	r2, r2, #8
 8008c5e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6819      	ldr	r1, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08008cb1 	.word	0x08008cb1

08008cb0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ce4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cec:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d108      	bne.n	8008d06 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d105      	bne.n	8008d06 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cfa:	7b7b      	ldrb	r3, [r7, #13]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d102      	bne.n	8008d06 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d00:	7b3b      	ldrb	r3, [r7, #12]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d001      	beq.n	8008d0a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e059      	b.n	8008dbe <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0202 	orr.w	r2, r2, #2
 8008d38:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0204 	orr.w	r2, r2, #4
 8008d48:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	2100      	movs	r1, #0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 fb5e 	bl	800a414 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	2104      	movs	r1, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 fb57 	bl	800a414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a17      	ldr	r2, [pc, #92]	; (8008dc8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d018      	beq.n	8008da2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a15      	ldr	r2, [pc, #84]	; (8008dcc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d013      	beq.n	8008da2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a14      	ldr	r2, [pc, #80]	; (8008dd0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00e      	beq.n	8008da2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a12      	ldr	r2, [pc, #72]	; (8008dd4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d009      	beq.n	8008da2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a11      	ldr	r2, [pc, #68]	; (8008dd8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d004      	beq.n	8008da2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a0f      	ldr	r2, [pc, #60]	; (8008ddc <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008da6:	2300      	movs	r3, #0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d007      	beq.n	8008dbc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40013400 	.word	0x40013400
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40014400 	.word	0x40014400
 8008dd8:	40014800 	.word	0x40014800
 8008ddc:	40015000 	.word	0x40015000

08008de0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0a2      	b.n	8008f3a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d111      	bne.n	8008e24 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 fb29 	bl	800a460 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a4a      	ldr	r2, [pc, #296]	; (8008f44 <HAL_TIM_Encoder_Init+0x164>)
 8008e1a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6812      	ldr	r2, [r2, #0]
 8008e36:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f000 fe68 	bl	8009b20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e78:	f023 0303 	bic.w	r3, r3, #3
 8008e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008e96:	f023 030c 	bic.w	r3, r3, #12
 8008e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	021b      	lsls	r3, r3, #8
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	011a      	lsls	r2, r3, #4
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	031b      	lsls	r3, r3, #12
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008ed4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008edc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	08004e59 	.word	0x08004e59

08008f48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d110      	bne.n	8008f9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d102      	bne.n	8008f84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f7e:	7b7b      	ldrb	r3, [r7, #13]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d001      	beq.n	8008f88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e069      	b.n	800905c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f98:	e031      	b.n	8008ffe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d110      	bne.n	8008fc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d102      	bne.n	8008fac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008fa6:	7b3b      	ldrb	r3, [r7, #12]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d001      	beq.n	8008fb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e055      	b.n	800905c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fc0:	e01d      	b.n	8008ffe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d108      	bne.n	8008fda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d105      	bne.n	8008fda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fce:	7b7b      	ldrb	r3, [r7, #13]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d102      	bne.n	8008fda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008fd4:	7b3b      	ldrb	r3, [r7, #12]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d001      	beq.n	8008fde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e03e      	b.n	800905c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_TIM_Encoder_Start+0xc4>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b04      	cmp	r3, #4
 8009008:	d008      	beq.n	800901c <HAL_TIM_Encoder_Start+0xd4>
 800900a:	e00f      	b.n	800902c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2201      	movs	r2, #1
 8009012:	2100      	movs	r1, #0
 8009014:	4618      	mov	r0, r3
 8009016:	f001 f9fd 	bl	800a414 <TIM_CCxChannelCmd>
      break;
 800901a:	e016      	b.n	800904a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2201      	movs	r2, #1
 8009022:	2104      	movs	r1, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f9f5 	bl	800a414 <TIM_CCxChannelCmd>
      break;
 800902a:	e00e      	b.n	800904a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2201      	movs	r2, #1
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f001 f9ed 	bl	800a414 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2201      	movs	r2, #1
 8009040:	2104      	movs	r1, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f001 f9e6 	bl	800a414 <TIM_CCxChannelCmd>
      break;
 8009048:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0201 	orr.w	r2, r2, #1
 8009058:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d026      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d021      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0202 	mvn.w	r2, #2
 8009098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
 80090b8:	e009      	b.n	80090ce <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d026      	beq.n	800912c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d021      	beq.n	800912c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0204 	mvn.w	r2, #4
 80090f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2202      	movs	r2, #2
 80090f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
 8009110:	e009      	b.n	8009126 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d026      	beq.n	8009184 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b00      	cmp	r3, #0
 800913e:	d021      	beq.n	8009184 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0208 	mvn.w	r2, #8
 8009148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
 8009168:	e009      	b.n	800917e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f003 0310 	and.w	r3, r3, #16
 800918a:	2b00      	cmp	r3, #0
 800918c:	d026      	beq.n	80091dc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	d021      	beq.n	80091dc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0210 	mvn.w	r2, #16
 80091a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2208      	movs	r2, #8
 80091a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d005      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	4798      	blx	r3
 80091c0:	e009      	b.n	80091d6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00e      	beq.n	8009204 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0201 	mvn.w	r2, #1
 80091f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	2b00      	cmp	r3, #0
 800920c:	d104      	bne.n	8009218 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00e      	beq.n	8009236 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800922a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00e      	beq.n	800925e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00e      	beq.n	8009286 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800927a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00e      	beq.n	80092ae <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f06f 0220 	mvn.w	r2, #32
 80092a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00e      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80092ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80092f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800931a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00e      	beq.n	800934e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d009      	beq.n	800934e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936e:	2b01      	cmp	r3, #1
 8009370:	d101      	bne.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009372:	2302      	movs	r3, #2
 8009374:	e0ff      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b14      	cmp	r3, #20
 8009382:	f200 80f0 	bhi.w	8009566 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093e1 	.word	0x080093e1
 8009390:	08009567 	.word	0x08009567
 8009394:	08009567 	.word	0x08009567
 8009398:	08009567 	.word	0x08009567
 800939c:	08009421 	.word	0x08009421
 80093a0:	08009567 	.word	0x08009567
 80093a4:	08009567 	.word	0x08009567
 80093a8:	08009567 	.word	0x08009567
 80093ac:	08009463 	.word	0x08009463
 80093b0:	08009567 	.word	0x08009567
 80093b4:	08009567 	.word	0x08009567
 80093b8:	08009567 	.word	0x08009567
 80093bc:	080094a3 	.word	0x080094a3
 80093c0:	08009567 	.word	0x08009567
 80093c4:	08009567 	.word	0x08009567
 80093c8:	08009567 	.word	0x08009567
 80093cc:	080094e5 	.word	0x080094e5
 80093d0:	08009567 	.word	0x08009567
 80093d4:	08009567 	.word	0x08009567
 80093d8:	08009567 	.word	0x08009567
 80093dc:	08009525 	.word	0x08009525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fc4e 	bl	8009c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0208 	orr.w	r2, r2, #8
 80093fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699a      	ldr	r2, [r3, #24]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0204 	bic.w	r2, r2, #4
 800940a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6999      	ldr	r1, [r3, #24]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	619a      	str	r2, [r3, #24]
      break;
 800941e:	e0a5      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fcc8 	bl	8009dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800943a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800944a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6999      	ldr	r1, [r3, #24]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	021a      	lsls	r2, r3, #8
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	619a      	str	r2, [r3, #24]
      break;
 8009460:	e084      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fd3b 	bl	8009ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69da      	ldr	r2, [r3, #28]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0208 	orr.w	r2, r2, #8
 800947c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69da      	ldr	r2, [r3, #28]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0204 	bic.w	r2, r2, #4
 800948c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69d9      	ldr	r1, [r3, #28]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	61da      	str	r2, [r3, #28]
      break;
 80094a0:	e064      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fdad 	bl	800a008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69da      	ldr	r2, [r3, #28]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69da      	ldr	r2, [r3, #28]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69d9      	ldr	r1, [r3, #28]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	021a      	lsls	r2, r3, #8
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	61da      	str	r2, [r3, #28]
      break;
 80094e2:	e043      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fe20 	bl	800a130 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0208 	orr.w	r2, r2, #8
 80094fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0204 	bic.w	r2, r2, #4
 800950e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009522:	e023      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fe6a 	bl	800a204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800953e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	021a      	lsls	r2, r3, #8
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009564:	e002      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
      break;
 800956a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop

08009580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_TIM_ConfigClockSource+0x1c>
 8009598:	2302      	movs	r3, #2
 800959a:	e0f6      	b.n	800978a <HAL_TIM_ConfigClockSource+0x20a>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80095ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a6f      	ldr	r2, [pc, #444]	; (8009794 <HAL_TIM_ConfigClockSource+0x214>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f000 80c1 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 80095dc:	4a6d      	ldr	r2, [pc, #436]	; (8009794 <HAL_TIM_ConfigClockSource+0x214>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	f200 80c6 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 80095e4:	4a6c      	ldr	r2, [pc, #432]	; (8009798 <HAL_TIM_ConfigClockSource+0x218>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	f000 80b9 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 80095ec:	4a6a      	ldr	r2, [pc, #424]	; (8009798 <HAL_TIM_ConfigClockSource+0x218>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	f200 80be 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 80095f4:	4a69      	ldr	r2, [pc, #420]	; (800979c <HAL_TIM_ConfigClockSource+0x21c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	f000 80b1 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 80095fc:	4a67      	ldr	r2, [pc, #412]	; (800979c <HAL_TIM_ConfigClockSource+0x21c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	f200 80b6 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009604:	4a66      	ldr	r2, [pc, #408]	; (80097a0 <HAL_TIM_ConfigClockSource+0x220>)
 8009606:	4293      	cmp	r3, r2
 8009608:	f000 80a9 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 800960c:	4a64      	ldr	r2, [pc, #400]	; (80097a0 <HAL_TIM_ConfigClockSource+0x220>)
 800960e:	4293      	cmp	r3, r2
 8009610:	f200 80ae 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009614:	4a63      	ldr	r2, [pc, #396]	; (80097a4 <HAL_TIM_ConfigClockSource+0x224>)
 8009616:	4293      	cmp	r3, r2
 8009618:	f000 80a1 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 800961c:	4a61      	ldr	r2, [pc, #388]	; (80097a4 <HAL_TIM_ConfigClockSource+0x224>)
 800961e:	4293      	cmp	r3, r2
 8009620:	f200 80a6 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009624:	4a60      	ldr	r2, [pc, #384]	; (80097a8 <HAL_TIM_ConfigClockSource+0x228>)
 8009626:	4293      	cmp	r3, r2
 8009628:	f000 8099 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 800962c:	4a5e      	ldr	r2, [pc, #376]	; (80097a8 <HAL_TIM_ConfigClockSource+0x228>)
 800962e:	4293      	cmp	r3, r2
 8009630:	f200 809e 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009638:	f000 8091 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 800963c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009640:	f200 8096 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009648:	f000 8089 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x1de>
 800964c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009650:	f200 808e 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009658:	d03e      	beq.n	80096d8 <HAL_TIM_ConfigClockSource+0x158>
 800965a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800965e:	f200 8087 	bhi.w	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009666:	f000 8086 	beq.w	8009776 <HAL_TIM_ConfigClockSource+0x1f6>
 800966a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800966e:	d87f      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009670:	2b70      	cmp	r3, #112	; 0x70
 8009672:	d01a      	beq.n	80096aa <HAL_TIM_ConfigClockSource+0x12a>
 8009674:	2b70      	cmp	r3, #112	; 0x70
 8009676:	d87b      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009678:	2b60      	cmp	r3, #96	; 0x60
 800967a:	d050      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x19e>
 800967c:	2b60      	cmp	r3, #96	; 0x60
 800967e:	d877      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009680:	2b50      	cmp	r3, #80	; 0x50
 8009682:	d03c      	beq.n	80096fe <HAL_TIM_ConfigClockSource+0x17e>
 8009684:	2b50      	cmp	r3, #80	; 0x50
 8009686:	d873      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009688:	2b40      	cmp	r3, #64	; 0x40
 800968a:	d058      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x1be>
 800968c:	2b40      	cmp	r3, #64	; 0x40
 800968e:	d86f      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009690:	2b30      	cmp	r3, #48	; 0x30
 8009692:	d064      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x1de>
 8009694:	2b30      	cmp	r3, #48	; 0x30
 8009696:	d86b      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 8009698:	2b20      	cmp	r3, #32
 800969a:	d060      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x1de>
 800969c:	2b20      	cmp	r3, #32
 800969e:	d867      	bhi.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d05c      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x1de>
 80096a4:	2b10      	cmp	r3, #16
 80096a6:	d05a      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x1de>
 80096a8:	e062      	b.n	8009770 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096ba:	f000 fe8b 	bl	800a3d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	609a      	str	r2, [r3, #8]
      break;
 80096d6:	e04f      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096e8:	f000 fe74 	bl	800a3d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096fa:	609a      	str	r2, [r3, #8]
      break;
 80096fc:	e03c      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800970a:	461a      	mov	r2, r3
 800970c:	f000 fde6 	bl	800a2dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2150      	movs	r1, #80	; 0x50
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fe3f 	bl	800a39a <TIM_ITRx_SetConfig>
      break;
 800971c:	e02c      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800972a:	461a      	mov	r2, r3
 800972c:	f000 fe05 	bl	800a33a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2160      	movs	r1, #96	; 0x60
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fe2f 	bl	800a39a <TIM_ITRx_SetConfig>
      break;
 800973c:	e01c      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800974a:	461a      	mov	r2, r3
 800974c:	f000 fdc6 	bl	800a2dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2140      	movs	r1, #64	; 0x40
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fe1f 	bl	800a39a <TIM_ITRx_SetConfig>
      break;
 800975c:	e00c      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4619      	mov	r1, r3
 8009768:	4610      	mov	r0, r2
 800976a:	f000 fe16 	bl	800a39a <TIM_ITRx_SetConfig>
      break;
 800976e:	e003      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]
      break;
 8009774:	e000      	b.n	8009778 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	00100070 	.word	0x00100070
 8009798:	00100060 	.word	0x00100060
 800979c:	00100050 	.word	0x00100050
 80097a0:	00100040 	.word	0x00100040
 80097a4:	00100030 	.word	0x00100030
 80097a8:	00100020 	.word	0x00100020

080097ac <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	460b      	mov	r3, r1
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e14a      	b.n	8009b12 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b01      	cmp	r3, #1
 8009886:	f040 80dd 	bne.w	8009a44 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	2b1f      	cmp	r3, #31
 800988e:	f200 80d6 	bhi.w	8009a3e <HAL_TIM_RegisterCallback+0x1de>
 8009892:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <HAL_TIM_RegisterCallback+0x38>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	08009919 	.word	0x08009919
 800989c:	08009921 	.word	0x08009921
 80098a0:	08009929 	.word	0x08009929
 80098a4:	08009931 	.word	0x08009931
 80098a8:	08009939 	.word	0x08009939
 80098ac:	08009941 	.word	0x08009941
 80098b0:	08009949 	.word	0x08009949
 80098b4:	08009951 	.word	0x08009951
 80098b8:	08009959 	.word	0x08009959
 80098bc:	08009961 	.word	0x08009961
 80098c0:	08009969 	.word	0x08009969
 80098c4:	08009971 	.word	0x08009971
 80098c8:	08009979 	.word	0x08009979
 80098cc:	08009981 	.word	0x08009981
 80098d0:	0800998b 	.word	0x0800998b
 80098d4:	08009995 	.word	0x08009995
 80098d8:	0800999f 	.word	0x0800999f
 80098dc:	080099a9 	.word	0x080099a9
 80098e0:	080099b3 	.word	0x080099b3
 80098e4:	080099bd 	.word	0x080099bd
 80098e8:	080099c7 	.word	0x080099c7
 80098ec:	080099d1 	.word	0x080099d1
 80098f0:	080099db 	.word	0x080099db
 80098f4:	080099e5 	.word	0x080099e5
 80098f8:	080099ef 	.word	0x080099ef
 80098fc:	080099f9 	.word	0x080099f9
 8009900:	08009a03 	.word	0x08009a03
 8009904:	08009a0d 	.word	0x08009a0d
 8009908:	08009a17 	.word	0x08009a17
 800990c:	08009a21 	.word	0x08009a21
 8009910:	08009a2b 	.word	0x08009a2b
 8009914:	08009a35 	.word	0x08009a35
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800991e:	e0f7      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009926:	e0f3      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800992e:	e0ef      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009936:	e0eb      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800993e:	e0e7      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009946:	e0e3      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800994e:	e0df      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009956:	e0db      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800995e:	e0d7      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009966:	e0d3      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800996e:	e0cf      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009976:	e0cb      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800997e:	e0c7      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009988:	e0c2      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009992:	e0bd      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800999c:	e0b8      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80099a6:	e0b3      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80099b0:	e0ae      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80099ba:	e0a9      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80099c4:	e0a4      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80099ce:	e09f      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80099d8:	e09a      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80099e2:	e095      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80099ec:	e090      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80099f6:	e08b      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009a00:	e086      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8009a0a:	e081      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8009a14:	e07c      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8009a1e:	e077      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8009a28:	e072      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8009a32:	e06d      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8009a3c:	e068      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	75fb      	strb	r3, [r7, #23]
        break;
 8009a42:	e065      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d15d      	bne.n	8009b0c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	2b0d      	cmp	r3, #13
 8009a54:	d857      	bhi.n	8009b06 <HAL_TIM_RegisterCallback+0x2a6>
 8009a56:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <HAL_TIM_RegisterCallback+0x1fc>)
 8009a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5c:	08009a95 	.word	0x08009a95
 8009a60:	08009a9d 	.word	0x08009a9d
 8009a64:	08009aa5 	.word	0x08009aa5
 8009a68:	08009aad 	.word	0x08009aad
 8009a6c:	08009ab5 	.word	0x08009ab5
 8009a70:	08009abd 	.word	0x08009abd
 8009a74:	08009ac5 	.word	0x08009ac5
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009ad5 	.word	0x08009ad5
 8009a80:	08009add 	.word	0x08009add
 8009a84:	08009ae5 	.word	0x08009ae5
 8009a88:	08009aed 	.word	0x08009aed
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009afd 	.word	0x08009afd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009a9a:	e039      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009aa2:	e035      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009aaa:	e031      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009ab2:	e02d      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009aba:	e029      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009ac2:	e025      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009aca:	e021      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009ad2:	e01d      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009ada:	e019      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009ae2:	e015      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009aea:	e011      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009af2:	e00d      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009afa:	e009      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009b04:	e004      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
        break;
 8009b0a:	e001      	b.n	8009b10 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a4c      	ldr	r2, [pc, #304]	; (8009c64 <TIM_Base_SetConfig+0x144>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d017      	beq.n	8009b68 <TIM_Base_SetConfig+0x48>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b3e:	d013      	beq.n	8009b68 <TIM_Base_SetConfig+0x48>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a49      	ldr	r2, [pc, #292]	; (8009c68 <TIM_Base_SetConfig+0x148>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00f      	beq.n	8009b68 <TIM_Base_SetConfig+0x48>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a48      	ldr	r2, [pc, #288]	; (8009c6c <TIM_Base_SetConfig+0x14c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00b      	beq.n	8009b68 <TIM_Base_SetConfig+0x48>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a47      	ldr	r2, [pc, #284]	; (8009c70 <TIM_Base_SetConfig+0x150>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d007      	beq.n	8009b68 <TIM_Base_SetConfig+0x48>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a46      	ldr	r2, [pc, #280]	; (8009c74 <TIM_Base_SetConfig+0x154>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_Base_SetConfig+0x48>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a45      	ldr	r2, [pc, #276]	; (8009c78 <TIM_Base_SetConfig+0x158>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d108      	bne.n	8009b7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a39      	ldr	r2, [pc, #228]	; (8009c64 <TIM_Base_SetConfig+0x144>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d023      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b88:	d01f      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a36      	ldr	r2, [pc, #216]	; (8009c68 <TIM_Base_SetConfig+0x148>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d01b      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a35      	ldr	r2, [pc, #212]	; (8009c6c <TIM_Base_SetConfig+0x14c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d017      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a34      	ldr	r2, [pc, #208]	; (8009c70 <TIM_Base_SetConfig+0x150>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d013      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a33      	ldr	r2, [pc, #204]	; (8009c74 <TIM_Base_SetConfig+0x154>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00f      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a33      	ldr	r2, [pc, #204]	; (8009c7c <TIM_Base_SetConfig+0x15c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d00b      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a32      	ldr	r2, [pc, #200]	; (8009c80 <TIM_Base_SetConfig+0x160>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d007      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a31      	ldr	r2, [pc, #196]	; (8009c84 <TIM_Base_SetConfig+0x164>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d003      	beq.n	8009bca <TIM_Base_SetConfig+0xaa>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2c      	ldr	r2, [pc, #176]	; (8009c78 <TIM_Base_SetConfig+0x158>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d108      	bne.n	8009bdc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a18      	ldr	r2, [pc, #96]	; (8009c64 <TIM_Base_SetConfig+0x144>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d013      	beq.n	8009c30 <TIM_Base_SetConfig+0x110>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a1a      	ldr	r2, [pc, #104]	; (8009c74 <TIM_Base_SetConfig+0x154>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00f      	beq.n	8009c30 <TIM_Base_SetConfig+0x110>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a1a      	ldr	r2, [pc, #104]	; (8009c7c <TIM_Base_SetConfig+0x15c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00b      	beq.n	8009c30 <TIM_Base_SetConfig+0x110>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a19      	ldr	r2, [pc, #100]	; (8009c80 <TIM_Base_SetConfig+0x160>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d007      	beq.n	8009c30 <TIM_Base_SetConfig+0x110>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a18      	ldr	r2, [pc, #96]	; (8009c84 <TIM_Base_SetConfig+0x164>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_Base_SetConfig+0x110>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a13      	ldr	r2, [pc, #76]	; (8009c78 <TIM_Base_SetConfig+0x158>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d103      	bne.n	8009c38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d105      	bne.n	8009c56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f023 0201 	bic.w	r2, r3, #1
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	611a      	str	r2, [r3, #16]
  }
}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40012c00 	.word	0x40012c00
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	40013400 	.word	0x40013400
 8009c78:	40015000 	.word	0x40015000
 8009c7c:	40014000 	.word	0x40014000
 8009c80:	40014400 	.word	0x40014400
 8009c84:	40014800 	.word	0x40014800

08009c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	f023 0201 	bic.w	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f023 0303 	bic.w	r3, r3, #3
 8009cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f023 0302 	bic.w	r3, r3, #2
 8009cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a30      	ldr	r2, [pc, #192]	; (8009da4 <TIM_OC1_SetConfig+0x11c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d013      	beq.n	8009d10 <TIM_OC1_SetConfig+0x88>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a2f      	ldr	r2, [pc, #188]	; (8009da8 <TIM_OC1_SetConfig+0x120>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00f      	beq.n	8009d10 <TIM_OC1_SetConfig+0x88>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a2e      	ldr	r2, [pc, #184]	; (8009dac <TIM_OC1_SetConfig+0x124>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d00b      	beq.n	8009d10 <TIM_OC1_SetConfig+0x88>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a2d      	ldr	r2, [pc, #180]	; (8009db0 <TIM_OC1_SetConfig+0x128>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d007      	beq.n	8009d10 <TIM_OC1_SetConfig+0x88>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a2c      	ldr	r2, [pc, #176]	; (8009db4 <TIM_OC1_SetConfig+0x12c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d003      	beq.n	8009d10 <TIM_OC1_SetConfig+0x88>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a2b      	ldr	r2, [pc, #172]	; (8009db8 <TIM_OC1_SetConfig+0x130>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d10c      	bne.n	8009d2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f023 0308 	bic.w	r3, r3, #8
 8009d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f023 0304 	bic.w	r3, r3, #4
 8009d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <TIM_OC1_SetConfig+0x11c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d013      	beq.n	8009d5a <TIM_OC1_SetConfig+0xd2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <TIM_OC1_SetConfig+0x120>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00f      	beq.n	8009d5a <TIM_OC1_SetConfig+0xd2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a1b      	ldr	r2, [pc, #108]	; (8009dac <TIM_OC1_SetConfig+0x124>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00b      	beq.n	8009d5a <TIM_OC1_SetConfig+0xd2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a1a      	ldr	r2, [pc, #104]	; (8009db0 <TIM_OC1_SetConfig+0x128>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d007      	beq.n	8009d5a <TIM_OC1_SetConfig+0xd2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a19      	ldr	r2, [pc, #100]	; (8009db4 <TIM_OC1_SetConfig+0x12c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d003      	beq.n	8009d5a <TIM_OC1_SetConfig+0xd2>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a18      	ldr	r2, [pc, #96]	; (8009db8 <TIM_OC1_SetConfig+0x130>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d111      	bne.n	8009d7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	621a      	str	r2, [r3, #32]
}
 8009d98:	bf00      	nop
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	40012c00 	.word	0x40012c00
 8009da8:	40013400 	.word	0x40013400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800
 8009db8:	40015000 	.word	0x40015000

08009dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f023 0210 	bic.w	r2, r3, #16
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0320 	bic.w	r3, r3, #32
 8009e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a2c      	ldr	r2, [pc, #176]	; (8009ecc <TIM_OC2_SetConfig+0x110>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d007      	beq.n	8009e30 <TIM_OC2_SetConfig+0x74>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a2b      	ldr	r2, [pc, #172]	; (8009ed0 <TIM_OC2_SetConfig+0x114>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_OC2_SetConfig+0x74>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ed4 <TIM_OC2_SetConfig+0x118>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d10d      	bne.n	8009e4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	011b      	lsls	r3, r3, #4
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <TIM_OC2_SetConfig+0x110>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d013      	beq.n	8009e7c <TIM_OC2_SetConfig+0xc0>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a1e      	ldr	r2, [pc, #120]	; (8009ed0 <TIM_OC2_SetConfig+0x114>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00f      	beq.n	8009e7c <TIM_OC2_SetConfig+0xc0>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a1e      	ldr	r2, [pc, #120]	; (8009ed8 <TIM_OC2_SetConfig+0x11c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00b      	beq.n	8009e7c <TIM_OC2_SetConfig+0xc0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a1d      	ldr	r2, [pc, #116]	; (8009edc <TIM_OC2_SetConfig+0x120>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <TIM_OC2_SetConfig+0xc0>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a1c      	ldr	r2, [pc, #112]	; (8009ee0 <TIM_OC2_SetConfig+0x124>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_OC2_SetConfig+0xc0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <TIM_OC2_SetConfig+0x118>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d113      	bne.n	8009ea4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	40012c00 	.word	0x40012c00
 8009ed0:	40013400 	.word	0x40013400
 8009ed4:	40015000 	.word	0x40015000
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40014400 	.word	0x40014400
 8009ee0:	40014800 	.word	0x40014800

08009ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a2b      	ldr	r2, [pc, #172]	; (8009ff0 <TIM_OC3_SetConfig+0x10c>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d007      	beq.n	8009f56 <TIM_OC3_SetConfig+0x72>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a2a      	ldr	r2, [pc, #168]	; (8009ff4 <TIM_OC3_SetConfig+0x110>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_OC3_SetConfig+0x72>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a29      	ldr	r2, [pc, #164]	; (8009ff8 <TIM_OC3_SetConfig+0x114>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d10d      	bne.n	8009f72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a1e      	ldr	r2, [pc, #120]	; (8009ff0 <TIM_OC3_SetConfig+0x10c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xbe>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <TIM_OC3_SetConfig+0x110>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00f      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xbe>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a1d      	ldr	r2, [pc, #116]	; (8009ffc <TIM_OC3_SetConfig+0x118>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xbe>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a1c      	ldr	r2, [pc, #112]	; (800a000 <TIM_OC3_SetConfig+0x11c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xbe>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a1b      	ldr	r2, [pc, #108]	; (800a004 <TIM_OC3_SetConfig+0x120>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xbe>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a16      	ldr	r2, [pc, #88]	; (8009ff8 <TIM_OC3_SetConfig+0x114>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d113      	bne.n	8009fca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	621a      	str	r2, [r3, #32]
}
 8009fe4:	bf00      	nop
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	40012c00 	.word	0x40012c00
 8009ff4:	40013400 	.word	0x40013400
 8009ff8:	40015000 	.word	0x40015000
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40014400 	.word	0x40014400
 800a004:	40014800 	.word	0x40014800

0800a008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	031b      	lsls	r3, r3, #12
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a2c      	ldr	r2, [pc, #176]	; (800a118 <TIM_OC4_SetConfig+0x110>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d007      	beq.n	800a07c <TIM_OC4_SetConfig+0x74>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a2b      	ldr	r2, [pc, #172]	; (800a11c <TIM_OC4_SetConfig+0x114>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d003      	beq.n	800a07c <TIM_OC4_SetConfig+0x74>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a2a      	ldr	r2, [pc, #168]	; (800a120 <TIM_OC4_SetConfig+0x118>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d10d      	bne.n	800a098 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	031b      	lsls	r3, r3, #12
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a096:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a1f      	ldr	r2, [pc, #124]	; (800a118 <TIM_OC4_SetConfig+0x110>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d013      	beq.n	800a0c8 <TIM_OC4_SetConfig+0xc0>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a1e      	ldr	r2, [pc, #120]	; (800a11c <TIM_OC4_SetConfig+0x114>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00f      	beq.n	800a0c8 <TIM_OC4_SetConfig+0xc0>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a1e      	ldr	r2, [pc, #120]	; (800a124 <TIM_OC4_SetConfig+0x11c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00b      	beq.n	800a0c8 <TIM_OC4_SetConfig+0xc0>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a1d      	ldr	r2, [pc, #116]	; (800a128 <TIM_OC4_SetConfig+0x120>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d007      	beq.n	800a0c8 <TIM_OC4_SetConfig+0xc0>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a1c      	ldr	r2, [pc, #112]	; (800a12c <TIM_OC4_SetConfig+0x124>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d003      	beq.n	800a0c8 <TIM_OC4_SetConfig+0xc0>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a17      	ldr	r2, [pc, #92]	; (800a120 <TIM_OC4_SetConfig+0x118>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d113      	bne.n	800a0f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	019b      	lsls	r3, r3, #6
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	019b      	lsls	r3, r3, #6
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	621a      	str	r2, [r3, #32]
}
 800a10a:	bf00      	nop
 800a10c:	371c      	adds	r7, #28
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	40012c00 	.word	0x40012c00
 800a11c:	40013400 	.word	0x40013400
 800a120:	40015000 	.word	0x40015000
 800a124:	40014000 	.word	0x40014000
 800a128:	40014400 	.word	0x40014400
 800a12c:	40014800 	.word	0x40014800

0800a130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a174:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	041b      	lsls	r3, r3, #16
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a19      	ldr	r2, [pc, #100]	; (800a1ec <TIM_OC5_SetConfig+0xbc>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d013      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x82>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a18      	ldr	r2, [pc, #96]	; (800a1f0 <TIM_OC5_SetConfig+0xc0>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00f      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x82>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a17      	ldr	r2, [pc, #92]	; (800a1f4 <TIM_OC5_SetConfig+0xc4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x82>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a16      	ldr	r2, [pc, #88]	; (800a1f8 <TIM_OC5_SetConfig+0xc8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d007      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x82>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a15      	ldr	r2, [pc, #84]	; (800a1fc <TIM_OC5_SetConfig+0xcc>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <TIM_OC5_SetConfig+0x82>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a14      	ldr	r2, [pc, #80]	; (800a200 <TIM_OC5_SetConfig+0xd0>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d109      	bne.n	800a1c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	621a      	str	r2, [r3, #32]
}
 800a1e0:	bf00      	nop
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	40012c00 	.word	0x40012c00
 800a1f0:	40013400 	.word	0x40013400
 800a1f4:	40014000 	.word	0x40014000
 800a1f8:	40014400 	.word	0x40014400
 800a1fc:	40014800 	.word	0x40014800
 800a200:	40015000 	.word	0x40015000

0800a204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4313      	orrs	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a24a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	051b      	lsls	r3, r3, #20
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	4313      	orrs	r3, r2
 800a256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a1a      	ldr	r2, [pc, #104]	; (800a2c4 <TIM_OC6_SetConfig+0xc0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d013      	beq.n	800a288 <TIM_OC6_SetConfig+0x84>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a19      	ldr	r2, [pc, #100]	; (800a2c8 <TIM_OC6_SetConfig+0xc4>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d00f      	beq.n	800a288 <TIM_OC6_SetConfig+0x84>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a18      	ldr	r2, [pc, #96]	; (800a2cc <TIM_OC6_SetConfig+0xc8>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00b      	beq.n	800a288 <TIM_OC6_SetConfig+0x84>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a17      	ldr	r2, [pc, #92]	; (800a2d0 <TIM_OC6_SetConfig+0xcc>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d007      	beq.n	800a288 <TIM_OC6_SetConfig+0x84>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a16      	ldr	r2, [pc, #88]	; (800a2d4 <TIM_OC6_SetConfig+0xd0>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_OC6_SetConfig+0x84>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a15      	ldr	r2, [pc, #84]	; (800a2d8 <TIM_OC6_SetConfig+0xd4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d109      	bne.n	800a29c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a28e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	029b      	lsls	r3, r3, #10
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	621a      	str	r2, [r3, #32]
}
 800a2b6:	bf00      	nop
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	40012c00 	.word	0x40012c00
 800a2c8:	40013400 	.word	0x40013400
 800a2cc:	40014000 	.word	0x40014000
 800a2d0:	40014400 	.word	0x40014400
 800a2d4:	40014800 	.word	0x40014800
 800a2d8:	40015000 	.word	0x40015000

0800a2dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f023 0201 	bic.w	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	4313      	orrs	r3, r2
 800a310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f023 030a 	bic.w	r3, r3, #10
 800a318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	621a      	str	r2, [r3, #32]
}
 800a32e:	bf00      	nop
 800a330:	371c      	adds	r7, #28
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b087      	sub	sp, #28
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	f023 0210 	bic.w	r2, r3, #16
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	031b      	lsls	r3, r3, #12
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a376:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	621a      	str	r2, [r3, #32]
}
 800a38e:	bf00      	nop
 800a390:	371c      	adds	r7, #28
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a3b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	f043 0307 	orr.w	r3, r3, #7
 800a3c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	609a      	str	r2, [r3, #8]
}
 800a3c8:	bf00      	nop
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	021a      	lsls	r2, r3, #8
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	609a      	str	r2, [r3, #8]
}
 800a408:	bf00      	nop
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 031f 	and.w	r3, r3, #31
 800a426:	2201      	movs	r2, #1
 800a428:	fa02 f303 	lsl.w	r3, r2, r3
 800a42c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	43db      	mvns	r3, r3
 800a436:	401a      	ands	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a1a      	ldr	r2, [r3, #32]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f003 031f 	and.w	r3, r3, #31
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	fa01 f303 	lsl.w	r3, r1, r3
 800a44c:	431a      	orrs	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	621a      	str	r2, [r3, #32]
}
 800a452:	bf00      	nop
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a26      	ldr	r2, [pc, #152]	; (800a504 <TIM_ResetCallback+0xa4>)
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a25      	ldr	r2, [pc, #148]	; (800a508 <TIM_ResetCallback+0xa8>)
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a24      	ldr	r2, [pc, #144]	; (800a50c <TIM_ResetCallback+0xac>)
 800a47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a23      	ldr	r2, [pc, #140]	; (800a510 <TIM_ResetCallback+0xb0>)
 800a484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a22      	ldr	r2, [pc, #136]	; (800a514 <TIM_ResetCallback+0xb4>)
 800a48c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a21      	ldr	r2, [pc, #132]	; (800a518 <TIM_ResetCallback+0xb8>)
 800a494:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a20      	ldr	r2, [pc, #128]	; (800a51c <TIM_ResetCallback+0xbc>)
 800a49c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a1f      	ldr	r2, [pc, #124]	; (800a520 <TIM_ResetCallback+0xc0>)
 800a4a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	; (800a524 <TIM_ResetCallback+0xc4>)
 800a4ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a1d      	ldr	r2, [pc, #116]	; (800a528 <TIM_ResetCallback+0xc8>)
 800a4b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1c      	ldr	r2, [pc, #112]	; (800a52c <TIM_ResetCallback+0xcc>)
 800a4bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <TIM_ResetCallback+0xd0>)
 800a4c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a1a      	ldr	r2, [pc, #104]	; (800a534 <TIM_ResetCallback+0xd4>)
 800a4cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a19      	ldr	r2, [pc, #100]	; (800a538 <TIM_ResetCallback+0xd8>)
 800a4d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a18      	ldr	r2, [pc, #96]	; (800a53c <TIM_ResetCallback+0xdc>)
 800a4dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a17      	ldr	r2, [pc, #92]	; (800a540 <TIM_ResetCallback+0xe0>)
 800a4e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a16      	ldr	r2, [pc, #88]	; (800a544 <TIM_ResetCallback+0xe4>)
 800a4ec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a15      	ldr	r2, [pc, #84]	; (800a548 <TIM_ResetCallback+0xe8>)
 800a4f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	08004a3d 	.word	0x08004a3d
 800a508:	080097ad 	.word	0x080097ad
 800a50c:	08009825 	.word	0x08009825
 800a510:	08009839 	.word	0x08009839
 800a514:	080097d5 	.word	0x080097d5
 800a518:	080097e9 	.word	0x080097e9
 800a51c:	080097c1 	.word	0x080097c1
 800a520:	080097fd 	.word	0x080097fd
 800a524:	08009811 	.word	0x08009811
 800a528:	0800984d 	.word	0x0800984d
 800a52c:	0800a679 	.word	0x0800a679
 800a530:	0800a68d 	.word	0x0800a68d
 800a534:	0800a6a1 	.word	0x0800a6a1
 800a538:	0800a6b5 	.word	0x0800a6b5
 800a53c:	0800a6c9 	.word	0x0800a6c9
 800a540:	0800a6dd 	.word	0x0800a6dd
 800a544:	0800a6f1 	.word	0x0800a6f1
 800a548:	0800a705 	.word	0x0800a705

0800a54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a560:	2302      	movs	r3, #2
 800a562:	e074      	b.n	800a64e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a34      	ldr	r2, [pc, #208]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d009      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a33      	ldr	r2, [pc, #204]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d004      	beq.n	800a5a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a31      	ldr	r2, [pc, #196]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d108      	bne.n	800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a21      	ldr	r2, [pc, #132]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d022      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e4:	d01d      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a1f      	ldr	r2, [pc, #124]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d018      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a1d      	ldr	r2, [pc, #116]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d013      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a1c      	ldr	r2, [pc, #112]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00e      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a15      	ldr	r2, [pc, #84]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d009      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a18      	ldr	r2, [pc, #96]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d004      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a11      	ldr	r2, [pc, #68]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d10c      	bne.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4313      	orrs	r3, r2
 800a632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	40012c00 	.word	0x40012c00
 800a660:	40013400 	.word	0x40013400
 800a664:	40015000 	.word	0x40015000
 800a668:	40000400 	.word	0x40000400
 800a66c:	40000800 	.word	0x40000800
 800a670:	40000c00 	.word	0x40000c00
 800a674:	40014000 	.word	0x40014000

0800a678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e050      	b.n	800a7cc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a730:	2b00      	cmp	r3, #0
 800a732:	d114      	bne.n	800a75e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fdc5 	bl	800b2cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a21      	ldr	r2, [pc, #132]	; (800a7d4 <HAL_UART_Init+0xbc>)
 800a750:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2224      	movs	r2, #36	; 0x24
 800a762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f001 f8f2 	bl	800b968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fdf3 	bl	800b370 <UART_SetConfig>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d101      	bne.n	800a794 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e01b      	b.n	800a7cc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f042 0201 	orr.w	r2, r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 f971 	bl	800baac <UART_CheckIdleState>
 800a7ca:	4603      	mov	r3, r0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	08004f5d 	.word	0x08004f5d

0800a7d8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e09c      	b.n	800a93e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80a:	2b20      	cmp	r3, #32
 800a80c:	d16c      	bne.n	800a8e8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a80e:	7afb      	ldrb	r3, [r7, #11]
 800a810:	2b0c      	cmp	r3, #12
 800a812:	d85e      	bhi.n	800a8d2 <HAL_UART_RegisterCallback+0xfa>
 800a814:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <HAL_UART_RegisterCallback+0x44>)
 800a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81a:	bf00      	nop
 800a81c:	0800a851 	.word	0x0800a851
 800a820:	0800a85b 	.word	0x0800a85b
 800a824:	0800a865 	.word	0x0800a865
 800a828:	0800a86f 	.word	0x0800a86f
 800a82c:	0800a879 	.word	0x0800a879
 800a830:	0800a883 	.word	0x0800a883
 800a834:	0800a88d 	.word	0x0800a88d
 800a838:	0800a897 	.word	0x0800a897
 800a83c:	0800a8a1 	.word	0x0800a8a1
 800a840:	0800a8ab 	.word	0x0800a8ab
 800a844:	0800a8b5 	.word	0x0800a8b5
 800a848:	0800a8bf 	.word	0x0800a8bf
 800a84c:	0800a8c9 	.word	0x0800a8c9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a858:	e070      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a862:	e06b      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a86c:	e066      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a876:	e061      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a880:	e05c      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a88a:	e057      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a894:	e052      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a89e:	e04d      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800a8a8:	e048      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 800a8b2:	e043      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800a8bc:	e03e      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800a8c6:	e039      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800a8d0:	e034      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	75fb      	strb	r3, [r7, #23]
        break;
 800a8e6:	e029      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d11a      	bne.n	800a928 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	2b0b      	cmp	r3, #11
 800a8f6:	d002      	beq.n	800a8fe <HAL_UART_RegisterCallback+0x126>
 800a8f8:	2b0c      	cmp	r3, #12
 800a8fa:	d005      	beq.n	800a908 <HAL_UART_RegisterCallback+0x130>
 800a8fc:	e009      	b.n	800a912 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800a906:	e019      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800a910:	e014      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	75fb      	strb	r3, [r7, #23]
        break;
 800a926:	e009      	b.n	800a93c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop

0800a94c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08a      	sub	sp, #40	; 0x28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	4613      	mov	r3, r2
 800a958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a960:	2b20      	cmp	r3, #32
 800a962:	d167      	bne.n	800aa34 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d002      	beq.n	800a970 <HAL_UART_Transmit_DMA+0x24>
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e060      	b.n	800aa36 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	88fa      	ldrh	r2, [r7, #6]
 800a97e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	88fa      	ldrh	r2, [r7, #6]
 800a986:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2221      	movs	r2, #33	; 0x21
 800a996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d028      	beq.n	800a9f4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9a6:	4a26      	ldr	r2, [pc, #152]	; (800aa40 <HAL_UART_Transmit_DMA+0xf4>)
 800a9a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ae:	4a25      	ldr	r2, [pc, #148]	; (800aa44 <HAL_UART_Transmit_DMA+0xf8>)
 800a9b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9b6:	4a24      	ldr	r2, [pc, #144]	; (800aa48 <HAL_UART_Transmit_DMA+0xfc>)
 800a9b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9be:	2200      	movs	r2, #0
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3328      	adds	r3, #40	; 0x28
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	f7fc f9c7 	bl	8006d68 <HAL_DMA_Start_IT>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d009      	beq.n	800a9f4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2210      	movs	r2, #16
 800a9e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e020      	b.n	800aa36 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2240      	movs	r2, #64	; 0x40
 800a9fa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3308      	adds	r3, #8
 800aa02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	e853 3f00 	ldrex	r3, [r3]
 800aa0a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1c:	623a      	str	r2, [r7, #32]
 800aa1e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	69f9      	ldr	r1, [r7, #28]
 800aa22:	6a3a      	ldr	r2, [r7, #32]
 800aa24:	e841 2300 	strex	r3, r2, [r1]
 800aa28:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e5      	bne.n	800a9fc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	e000      	b.n	800aa36 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aa34:	2302      	movs	r3, #2
  }
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3728      	adds	r7, #40	; 0x28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800bf77 	.word	0x0800bf77
 800aa44:	0800c015 	.word	0x0800c015
 800aa48:	0800c1af 	.word	0x0800c1af

0800aa4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08a      	sub	sp, #40	; 0x28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	d137      	bne.n	800aad4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <HAL_UART_Receive_DMA+0x24>
 800aa6a:	88fb      	ldrh	r3, [r7, #6]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e030      	b.n	800aad6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a18      	ldr	r2, [pc, #96]	; (800aae0 <HAL_UART_Receive_DMA+0x94>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d01f      	beq.n	800aac4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d018      	beq.n	800aac4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	623b      	str	r3, [r7, #32]
 800aab2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69f9      	ldr	r1, [r7, #28]
 800aab6:	6a3a      	ldr	r2, [r7, #32]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e6      	bne.n	800aa92 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aac4:	88fb      	ldrh	r3, [r7, #6]
 800aac6:	461a      	mov	r2, r3
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f001 f906 	bl	800bcdc <UART_Start_Receive_DMA>
 800aad0:	4603      	mov	r3, r0
 800aad2:	e000      	b.n	800aad6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aad4:	2302      	movs	r3, #2
  }
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3728      	adds	r7, #40	; 0x28
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	40008000 	.word	0x40008000

0800aae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b0ba      	sub	sp, #232	; 0xe8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ab0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab12:	4013      	ands	r3, r2
 800ab14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ab18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d11b      	bne.n	800ab58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d015      	beq.n	800ab58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 82f3 	beq.w	800b134 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	4798      	blx	r3
      }
      return;
 800ab56:	e2ed      	b.n	800b134 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 8129 	beq.w	800adb4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab66:	4b90      	ldr	r3, [pc, #576]	; (800ada8 <HAL_UART_IRQHandler+0x2c4>)
 800ab68:	4013      	ands	r3, r2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d106      	bne.n	800ab7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab72:	4b8e      	ldr	r3, [pc, #568]	; (800adac <HAL_UART_IRQHandler+0x2c8>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 811c 	beq.w	800adb4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d011      	beq.n	800abac <HAL_UART_IRQHandler+0xc8>
 800ab88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba2:	f043 0201 	orr.w	r2, r3, #1
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abb0:	f003 0302 	and.w	r3, r3, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d011      	beq.n	800abdc <HAL_UART_IRQHandler+0xf8>
 800abb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00b      	beq.n	800abdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2202      	movs	r2, #2
 800abca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd2:	f043 0204 	orr.w	r2, r3, #4
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d011      	beq.n	800ac0c <HAL_UART_IRQHandler+0x128>
 800abe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2204      	movs	r2, #4
 800abfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac02:	f043 0202 	orr.w	r2, r3, #2
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac10:	f003 0308 	and.w	r3, r3, #8
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d017      	beq.n	800ac48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac1c:	f003 0320 	and.w	r3, r3, #32
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d105      	bne.n	800ac30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ac28:	4b5f      	ldr	r3, [pc, #380]	; (800ada8 <HAL_UART_IRQHandler+0x2c4>)
 800ac2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2208      	movs	r2, #8
 800ac36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac3e:	f043 0208 	orr.w	r2, r3, #8
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d012      	beq.n	800ac7a <HAL_UART_IRQHandler+0x196>
 800ac54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00c      	beq.n	800ac7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac70:	f043 0220 	orr.w	r2, r3, #32
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 8259 	beq.w	800b138 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d013      	beq.n	800acba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac96:	f003 0320 	and.w	r3, r3, #32
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d105      	bne.n	800acaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d007      	beq.n	800acba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acce:	2b40      	cmp	r3, #64	; 0x40
 800acd0:	d005      	beq.n	800acde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d058      	beq.n	800ad90 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 f8e3 	bl	800beaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acee:	2b40      	cmp	r3, #64	; 0x40
 800acf0:	d148      	bne.n	800ad84 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3308      	adds	r3, #8
 800acf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ad08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3308      	adds	r3, #8
 800ad1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1d9      	bne.n	800acf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d017      	beq.n	800ad78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad4e:	4a18      	ldr	r2, [pc, #96]	; (800adb0 <HAL_UART_IRQHandler+0x2cc>)
 800ad50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fc f8d9 	bl	8006f10 <HAL_DMA_Abort_IT>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d01f      	beq.n	800ada4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ad72:	4610      	mov	r0, r2
 800ad74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad76:	e015      	b.n	800ada4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad82:	e00f      	b.n	800ada4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8e:	e009      	b.n	800ada4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ada2:	e1c9      	b.n	800b138 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ada4:	bf00      	nop
    return;
 800ada6:	e1c7      	b.n	800b138 <HAL_UART_IRQHandler+0x654>
 800ada8:	10000001 	.word	0x10000001
 800adac:	04000120 	.word	0x04000120
 800adb0:	0800c233 	.word	0x0800c233

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	f040 8157 	bne.w	800b06c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8150 	beq.w	800b06c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800adcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 8149 	beq.w	800b06c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2210      	movs	r2, #16
 800ade0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adec:	2b40      	cmp	r3, #64	; 0x40
 800adee:	f040 80bd 	bne.w	800af6c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 8199 	beq.w	800b13c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae14:	429a      	cmp	r2, r3
 800ae16:	f080 8191 	bcs.w	800b13c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f040 8087 	bne.w	800af46 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1da      	bne.n	800ae38 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae94:	f023 0301 	bic.w	r3, r3, #1
 800ae98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3308      	adds	r3, #8
 800aea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aea6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aeaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aeae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aeb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e1      	bne.n	800ae82 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3308      	adds	r3, #8
 800aede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aee2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aee4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e3      	bne.n	800aebe <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af14:	f023 0310 	bic.w	r3, r3, #16
 800af18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af26:	65bb      	str	r3, [r7, #88]	; 0x58
 800af28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e4      	bne.n	800af04 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af40:	4618      	mov	r0, r3
 800af42:	f7fb ff8c 	bl	8006e5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800af5e:	b292      	uxth	r2, r2
 800af60:	1a8a      	subs	r2, r1, r2
 800af62:	b292      	uxth	r2, r2
 800af64:	4611      	mov	r1, r2
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af6a:	e0e7      	b.n	800b13c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af78:	b29b      	uxth	r3, r3
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af86:	b29b      	uxth	r3, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 80d9 	beq.w	800b140 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800af8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 80d4 	beq.w	800b140 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afba:	647b      	str	r3, [r7, #68]	; 0x44
 800afbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e4      	bne.n	800af98 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3308      	adds	r3, #8
 800afd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	623b      	str	r3, [r7, #32]
   return(result);
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afe4:	f023 0301 	bic.w	r3, r3, #1
 800afe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3308      	adds	r3, #8
 800aff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aff6:	633a      	str	r2, [r7, #48]	; 0x30
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800affc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e1      	bne.n	800afce <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	e853 3f00 	ldrex	r3, [r3]
 800b02a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0310 	bic.w	r3, r3, #16
 800b032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b040:	61fb      	str	r3, [r7, #28]
 800b042:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b044:	69b9      	ldr	r1, [r7, #24]
 800b046:	69fa      	ldr	r2, [r7, #28]
 800b048:	e841 2300 	strex	r3, r2, [r1]
 800b04c:	617b      	str	r3, [r7, #20]
   return(result);
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e4      	bne.n	800b01e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2202      	movs	r2, #2
 800b058:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b060:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b064:	4611      	mov	r1, r2
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b06a:	e069      	b.n	800b140 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d010      	beq.n	800b09a <HAL_UART_IRQHandler+0x5b6>
 800b078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b07c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00a      	beq.n	800b09a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b08c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b098:	e055      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d014      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d105      	bne.n	800b0be <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d008      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d03e      	beq.n	800b144 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
    }
    return;
 800b0ce:	e039      	b.n	800b144 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <HAL_UART_IRQHandler+0x60c>
 800b0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f8ba 	bl	800c262 <UART_EndTransmit_IT>
    return;
 800b0ee:	e02a      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <HAL_UART_IRQHandler+0x630>
 800b0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b112:	e018      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d012      	beq.n	800b146 <HAL_UART_IRQHandler+0x662>
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b124:	2b00      	cmp	r3, #0
 800b126:	da0e      	bge.n	800b146 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b132:	e008      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
      return;
 800b134:	bf00      	nop
 800b136:	e006      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
    return;
 800b138:	bf00      	nop
 800b13a:	e004      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
      return;
 800b13c:	bf00      	nop
 800b13e:	e002      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
      return;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <HAL_UART_IRQHandler+0x662>
    return;
 800b144:	bf00      	nop
  }
}
 800b146:	37e8      	adds	r7, #232	; 0xe8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a09      	ldr	r2, [pc, #36]	; (800b238 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d009      	beq.n	800b22c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	615a      	str	r2, [r3, #20]
  }
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	40008000 	.word	0x40008000

0800b23c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a18      	ldr	r2, [pc, #96]	; (800b2ac <HAL_UART_EnableReceiverTimeout+0x70>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d027      	beq.n	800b29e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b254:	2b20      	cmp	r3, #32
 800b256:	d120      	bne.n	800b29a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d101      	bne.n	800b266 <HAL_UART_EnableReceiverTimeout+0x2a>
 800b262:	2302      	movs	r3, #2
 800b264:	e01c      	b.n	800b2a0 <HAL_UART_EnableReceiverTimeout+0x64>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2224      	movs	r2, #36	; 0x24
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b284:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	e002      	b.n	800b2a0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b29a:	2302      	movs	r3, #2
 800b29c:	e000      	b.n	800b2a0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
  }
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	40008000 	.word	0x40008000

0800b2b0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
	...

0800b2cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a1a      	ldr	r2, [pc, #104]	; (800b340 <UART_InitCallbacksToDefault+0x74>)
 800b2d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a19      	ldr	r2, [pc, #100]	; (800b344 <UART_InitCallbacksToDefault+0x78>)
 800b2e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a18      	ldr	r2, [pc, #96]	; (800b348 <UART_InitCallbacksToDefault+0x7c>)
 800b2e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a17      	ldr	r2, [pc, #92]	; (800b34c <UART_InitCallbacksToDefault+0x80>)
 800b2f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a16      	ldr	r2, [pc, #88]	; (800b350 <UART_InitCallbacksToDefault+0x84>)
 800b2f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a15      	ldr	r2, [pc, #84]	; (800b354 <UART_InitCallbacksToDefault+0x88>)
 800b300:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a14      	ldr	r2, [pc, #80]	; (800b358 <UART_InitCallbacksToDefault+0x8c>)
 800b308:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a13      	ldr	r2, [pc, #76]	; (800b35c <UART_InitCallbacksToDefault+0x90>)
 800b310:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a12      	ldr	r2, [pc, #72]	; (800b360 <UART_InitCallbacksToDefault+0x94>)
 800b318:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a11      	ldr	r2, [pc, #68]	; (800b364 <UART_InitCallbacksToDefault+0x98>)
 800b320:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a10      	ldr	r2, [pc, #64]	; (800b368 <UART_InitCallbacksToDefault+0x9c>)
 800b328:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a0f      	ldr	r2, [pc, #60]	; (800b36c <UART_InitCallbacksToDefault+0xa0>)
 800b330:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	0800b161 	.word	0x0800b161
 800b344:	0800b14d 	.word	0x0800b14d
 800b348:	0800b189 	.word	0x0800b189
 800b34c:	0800b175 	.word	0x0800b175
 800b350:	0800b19d 	.word	0x0800b19d
 800b354:	0800b1b1 	.word	0x0800b1b1
 800b358:	0800b1c5 	.word	0x0800b1c5
 800b35c:	0800b1d9 	.word	0x0800b1d9
 800b360:	0800c2bd 	.word	0x0800c2bd
 800b364:	0800c2d1 	.word	0x0800c2d1
 800b368:	0800c2e5 	.word	0x0800c2e5
 800b36c:	0800b1ed 	.word	0x0800b1ed

0800b370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b374:	b08c      	sub	sp, #48	; 0x30
 800b376:	af00      	add	r7, sp, #0
 800b378:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	431a      	orrs	r2, r3
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	431a      	orrs	r2, r3
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	69db      	ldr	r3, [r3, #28]
 800b394:	4313      	orrs	r3, r2
 800b396:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4baa      	ldr	r3, [pc, #680]	; (800b648 <UART_SetConfig+0x2d8>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	6812      	ldr	r2, [r2, #0]
 800b3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a9f      	ldr	r2, [pc, #636]	; (800b64c <UART_SetConfig+0x2dc>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d004      	beq.n	800b3dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	6812      	ldr	r2, [r2, #0]
 800b3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fa:	f023 010f 	bic.w	r1, r3, #15
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a90      	ldr	r2, [pc, #576]	; (800b650 <UART_SetConfig+0x2e0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d125      	bne.n	800b460 <UART_SetConfig+0xf0>
 800b414:	4b8f      	ldr	r3, [pc, #572]	; (800b654 <UART_SetConfig+0x2e4>)
 800b416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41a:	f003 0303 	and.w	r3, r3, #3
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d81a      	bhi.n	800b458 <UART_SetConfig+0xe8>
 800b422:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <UART_SetConfig+0xb8>)
 800b424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b428:	0800b439 	.word	0x0800b439
 800b42c:	0800b449 	.word	0x0800b449
 800b430:	0800b441 	.word	0x0800b441
 800b434:	0800b451 	.word	0x0800b451
 800b438:	2301      	movs	r3, #1
 800b43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b43e:	e116      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b440:	2302      	movs	r3, #2
 800b442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b446:	e112      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b448:	2304      	movs	r3, #4
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44e:	e10e      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b450:	2308      	movs	r3, #8
 800b452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b456:	e10a      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b458:	2310      	movs	r3, #16
 800b45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b45e:	e106      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a7c      	ldr	r2, [pc, #496]	; (800b658 <UART_SetConfig+0x2e8>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d138      	bne.n	800b4dc <UART_SetConfig+0x16c>
 800b46a:	4b7a      	ldr	r3, [pc, #488]	; (800b654 <UART_SetConfig+0x2e4>)
 800b46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b470:	f003 030c 	and.w	r3, r3, #12
 800b474:	2b0c      	cmp	r3, #12
 800b476:	d82d      	bhi.n	800b4d4 <UART_SetConfig+0x164>
 800b478:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <UART_SetConfig+0x110>)
 800b47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47e:	bf00      	nop
 800b480:	0800b4b5 	.word	0x0800b4b5
 800b484:	0800b4d5 	.word	0x0800b4d5
 800b488:	0800b4d5 	.word	0x0800b4d5
 800b48c:	0800b4d5 	.word	0x0800b4d5
 800b490:	0800b4c5 	.word	0x0800b4c5
 800b494:	0800b4d5 	.word	0x0800b4d5
 800b498:	0800b4d5 	.word	0x0800b4d5
 800b49c:	0800b4d5 	.word	0x0800b4d5
 800b4a0:	0800b4bd 	.word	0x0800b4bd
 800b4a4:	0800b4d5 	.word	0x0800b4d5
 800b4a8:	0800b4d5 	.word	0x0800b4d5
 800b4ac:	0800b4d5 	.word	0x0800b4d5
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ba:	e0d8      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c2:	e0d4      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e0d0      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e0cc      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e0c8      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a5e      	ldr	r2, [pc, #376]	; (800b65c <UART_SetConfig+0x2ec>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d125      	bne.n	800b532 <UART_SetConfig+0x1c2>
 800b4e6:	4b5b      	ldr	r3, [pc, #364]	; (800b654 <UART_SetConfig+0x2e4>)
 800b4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b4f0:	2b30      	cmp	r3, #48	; 0x30
 800b4f2:	d016      	beq.n	800b522 <UART_SetConfig+0x1b2>
 800b4f4:	2b30      	cmp	r3, #48	; 0x30
 800b4f6:	d818      	bhi.n	800b52a <UART_SetConfig+0x1ba>
 800b4f8:	2b20      	cmp	r3, #32
 800b4fa:	d00a      	beq.n	800b512 <UART_SetConfig+0x1a2>
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	d814      	bhi.n	800b52a <UART_SetConfig+0x1ba>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <UART_SetConfig+0x19a>
 800b504:	2b10      	cmp	r3, #16
 800b506:	d008      	beq.n	800b51a <UART_SetConfig+0x1aa>
 800b508:	e00f      	b.n	800b52a <UART_SetConfig+0x1ba>
 800b50a:	2300      	movs	r3, #0
 800b50c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b510:	e0ad      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b512:	2302      	movs	r3, #2
 800b514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b518:	e0a9      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b51a:	2304      	movs	r3, #4
 800b51c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b520:	e0a5      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b522:	2308      	movs	r3, #8
 800b524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b528:	e0a1      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b52a:	2310      	movs	r3, #16
 800b52c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b530:	e09d      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a4a      	ldr	r2, [pc, #296]	; (800b660 <UART_SetConfig+0x2f0>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d125      	bne.n	800b588 <UART_SetConfig+0x218>
 800b53c:	4b45      	ldr	r3, [pc, #276]	; (800b654 <UART_SetConfig+0x2e4>)
 800b53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b546:	2bc0      	cmp	r3, #192	; 0xc0
 800b548:	d016      	beq.n	800b578 <UART_SetConfig+0x208>
 800b54a:	2bc0      	cmp	r3, #192	; 0xc0
 800b54c:	d818      	bhi.n	800b580 <UART_SetConfig+0x210>
 800b54e:	2b80      	cmp	r3, #128	; 0x80
 800b550:	d00a      	beq.n	800b568 <UART_SetConfig+0x1f8>
 800b552:	2b80      	cmp	r3, #128	; 0x80
 800b554:	d814      	bhi.n	800b580 <UART_SetConfig+0x210>
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <UART_SetConfig+0x1f0>
 800b55a:	2b40      	cmp	r3, #64	; 0x40
 800b55c:	d008      	beq.n	800b570 <UART_SetConfig+0x200>
 800b55e:	e00f      	b.n	800b580 <UART_SetConfig+0x210>
 800b560:	2300      	movs	r3, #0
 800b562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b566:	e082      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b568:	2302      	movs	r3, #2
 800b56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b56e:	e07e      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b570:	2304      	movs	r3, #4
 800b572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b576:	e07a      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b578:	2308      	movs	r3, #8
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b57e:	e076      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b580:	2310      	movs	r3, #16
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b586:	e072      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a35      	ldr	r2, [pc, #212]	; (800b664 <UART_SetConfig+0x2f4>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d12a      	bne.n	800b5e8 <UART_SetConfig+0x278>
 800b592:	4b30      	ldr	r3, [pc, #192]	; (800b654 <UART_SetConfig+0x2e4>)
 800b594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b59c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5a0:	d01a      	beq.n	800b5d8 <UART_SetConfig+0x268>
 800b5a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5a6:	d81b      	bhi.n	800b5e0 <UART_SetConfig+0x270>
 800b5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ac:	d00c      	beq.n	800b5c8 <UART_SetConfig+0x258>
 800b5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b2:	d815      	bhi.n	800b5e0 <UART_SetConfig+0x270>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <UART_SetConfig+0x250>
 800b5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5bc:	d008      	beq.n	800b5d0 <UART_SetConfig+0x260>
 800b5be:	e00f      	b.n	800b5e0 <UART_SetConfig+0x270>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5c6:	e052      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	e04e      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5d6:	e04a      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b5d8:	2308      	movs	r3, #8
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5de:	e046      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b5e0:	2310      	movs	r3, #16
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5e6:	e042      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a17      	ldr	r2, [pc, #92]	; (800b64c <UART_SetConfig+0x2dc>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d13a      	bne.n	800b668 <UART_SetConfig+0x2f8>
 800b5f2:	4b18      	ldr	r3, [pc, #96]	; (800b654 <UART_SetConfig+0x2e4>)
 800b5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b600:	d01a      	beq.n	800b638 <UART_SetConfig+0x2c8>
 800b602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b606:	d81b      	bhi.n	800b640 <UART_SetConfig+0x2d0>
 800b608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b60c:	d00c      	beq.n	800b628 <UART_SetConfig+0x2b8>
 800b60e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b612:	d815      	bhi.n	800b640 <UART_SetConfig+0x2d0>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d003      	beq.n	800b620 <UART_SetConfig+0x2b0>
 800b618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b61c:	d008      	beq.n	800b630 <UART_SetConfig+0x2c0>
 800b61e:	e00f      	b.n	800b640 <UART_SetConfig+0x2d0>
 800b620:	2300      	movs	r3, #0
 800b622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b626:	e022      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b628:	2302      	movs	r3, #2
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b62e:	e01e      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b630:	2304      	movs	r3, #4
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b636:	e01a      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b638:	2308      	movs	r3, #8
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b63e:	e016      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b640:	2310      	movs	r3, #16
 800b642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b646:	e012      	b.n	800b66e <UART_SetConfig+0x2fe>
 800b648:	cfff69f3 	.word	0xcfff69f3
 800b64c:	40008000 	.word	0x40008000
 800b650:	40013800 	.word	0x40013800
 800b654:	40021000 	.word	0x40021000
 800b658:	40004400 	.word	0x40004400
 800b65c:	40004800 	.word	0x40004800
 800b660:	40004c00 	.word	0x40004c00
 800b664:	40005000 	.word	0x40005000
 800b668:	2310      	movs	r3, #16
 800b66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4aae      	ldr	r2, [pc, #696]	; (800b92c <UART_SetConfig+0x5bc>)
 800b674:	4293      	cmp	r3, r2
 800b676:	f040 8097 	bne.w	800b7a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b67a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b67e:	2b08      	cmp	r3, #8
 800b680:	d823      	bhi.n	800b6ca <UART_SetConfig+0x35a>
 800b682:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <UART_SetConfig+0x318>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b6ad 	.word	0x0800b6ad
 800b68c:	0800b6cb 	.word	0x0800b6cb
 800b690:	0800b6b5 	.word	0x0800b6b5
 800b694:	0800b6cb 	.word	0x0800b6cb
 800b698:	0800b6bb 	.word	0x0800b6bb
 800b69c:	0800b6cb 	.word	0x0800b6cb
 800b6a0:	0800b6cb 	.word	0x0800b6cb
 800b6a4:	0800b6cb 	.word	0x0800b6cb
 800b6a8:	0800b6c3 	.word	0x0800b6c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6ac:	f7fc fd20 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800b6b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6b2:	e010      	b.n	800b6d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6b4:	4b9e      	ldr	r3, [pc, #632]	; (800b930 <UART_SetConfig+0x5c0>)
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6b8:	e00d      	b.n	800b6d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6ba:	f7fc fcab 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 800b6be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6c0:	e009      	b.n	800b6d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6c8:	e005      	b.n	800b6d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 8130 	beq.w	800b93e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	4a94      	ldr	r2, [pc, #592]	; (800b934 <UART_SetConfig+0x5c4>)
 800b6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	4413      	add	r3, r2
 800b6fc:	69ba      	ldr	r2, [r7, #24]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d305      	bcc.n	800b70e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b708:	69ba      	ldr	r2, [r7, #24]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d903      	bls.n	800b716 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b714:	e113      	b.n	800b93e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	2200      	movs	r2, #0
 800b71a:	60bb      	str	r3, [r7, #8]
 800b71c:	60fa      	str	r2, [r7, #12]
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	4a84      	ldr	r2, [pc, #528]	; (800b934 <UART_SetConfig+0x5c4>)
 800b724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	2200      	movs	r2, #0
 800b72c:	603b      	str	r3, [r7, #0]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b738:	f7f5 fb42 	bl	8000dc0 <__aeabi_uldivmod>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4610      	mov	r0, r2
 800b742:	4619      	mov	r1, r3
 800b744:	f04f 0200 	mov.w	r2, #0
 800b748:	f04f 0300 	mov.w	r3, #0
 800b74c:	020b      	lsls	r3, r1, #8
 800b74e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b752:	0202      	lsls	r2, r0, #8
 800b754:	6979      	ldr	r1, [r7, #20]
 800b756:	6849      	ldr	r1, [r1, #4]
 800b758:	0849      	lsrs	r1, r1, #1
 800b75a:	2000      	movs	r0, #0
 800b75c:	460c      	mov	r4, r1
 800b75e:	4605      	mov	r5, r0
 800b760:	eb12 0804 	adds.w	r8, r2, r4
 800b764:	eb43 0905 	adc.w	r9, r3, r5
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	469a      	mov	sl, r3
 800b770:	4693      	mov	fp, r2
 800b772:	4652      	mov	r2, sl
 800b774:	465b      	mov	r3, fp
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f5 fb21 	bl	8000dc0 <__aeabi_uldivmod>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4613      	mov	r3, r2
 800b784:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b78c:	d308      	bcc.n	800b7a0 <UART_SetConfig+0x430>
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b794:	d204      	bcs.n	800b7a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6a3a      	ldr	r2, [r7, #32]
 800b79c:	60da      	str	r2, [r3, #12]
 800b79e:	e0ce      	b.n	800b93e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7a6:	e0ca      	b.n	800b93e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b0:	d166      	bne.n	800b880 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b7b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7b6:	2b08      	cmp	r3, #8
 800b7b8:	d827      	bhi.n	800b80a <UART_SetConfig+0x49a>
 800b7ba:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <UART_SetConfig+0x450>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b7e5 	.word	0x0800b7e5
 800b7c4:	0800b7ed 	.word	0x0800b7ed
 800b7c8:	0800b7f5 	.word	0x0800b7f5
 800b7cc:	0800b80b 	.word	0x0800b80b
 800b7d0:	0800b7fb 	.word	0x0800b7fb
 800b7d4:	0800b80b 	.word	0x0800b80b
 800b7d8:	0800b80b 	.word	0x0800b80b
 800b7dc:	0800b80b 	.word	0x0800b80b
 800b7e0:	0800b803 	.word	0x0800b803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7e4:	f7fc fc84 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800b7e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7ea:	e014      	b.n	800b816 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7ec:	f7fc fc96 	bl	800811c <HAL_RCC_GetPCLK2Freq>
 800b7f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7f2:	e010      	b.n	800b816 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7f4:	4b4e      	ldr	r3, [pc, #312]	; (800b930 <UART_SetConfig+0x5c0>)
 800b7f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7f8:	e00d      	b.n	800b816 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7fa:	f7fc fc0b 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 800b7fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b800:	e009      	b.n	800b816 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b808:	e005      	b.n	800b816 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 8090 	beq.w	800b93e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	4a44      	ldr	r2, [pc, #272]	; (800b934 <UART_SetConfig+0x5c4>)
 800b824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b828:	461a      	mov	r2, r3
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b830:	005a      	lsls	r2, r3, #1
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	085b      	lsrs	r3, r3, #1
 800b838:	441a      	add	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b842:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b844:	6a3b      	ldr	r3, [r7, #32]
 800b846:	2b0f      	cmp	r3, #15
 800b848:	d916      	bls.n	800b878 <UART_SetConfig+0x508>
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b850:	d212      	bcs.n	800b878 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	b29b      	uxth	r3, r3
 800b856:	f023 030f 	bic.w	r3, r3, #15
 800b85a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	085b      	lsrs	r3, r3, #1
 800b860:	b29b      	uxth	r3, r3
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	b29a      	uxth	r2, r3
 800b868:	8bfb      	ldrh	r3, [r7, #30]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	8bfa      	ldrh	r2, [r7, #30]
 800b874:	60da      	str	r2, [r3, #12]
 800b876:	e062      	b.n	800b93e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b87e:	e05e      	b.n	800b93e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b884:	2b08      	cmp	r3, #8
 800b886:	d828      	bhi.n	800b8da <UART_SetConfig+0x56a>
 800b888:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <UART_SetConfig+0x520>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8bd 	.word	0x0800b8bd
 800b898:	0800b8c5 	.word	0x0800b8c5
 800b89c:	0800b8db 	.word	0x0800b8db
 800b8a0:	0800b8cb 	.word	0x0800b8cb
 800b8a4:	0800b8db 	.word	0x0800b8db
 800b8a8:	0800b8db 	.word	0x0800b8db
 800b8ac:	0800b8db 	.word	0x0800b8db
 800b8b0:	0800b8d3 	.word	0x0800b8d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8b4:	f7fc fc1c 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800b8b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8ba:	e014      	b.n	800b8e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8bc:	f7fc fc2e 	bl	800811c <HAL_RCC_GetPCLK2Freq>
 800b8c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8c2:	e010      	b.n	800b8e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8c4:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <UART_SetConfig+0x5c0>)
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8c8:	e00d      	b.n	800b8e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8ca:	f7fc fba3 	bl	8008014 <HAL_RCC_GetSysClockFreq>
 800b8ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8d0:	e009      	b.n	800b8e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8d8:	e005      	b.n	800b8e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8e4:	bf00      	nop
    }

    if (pclk != 0U)
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d028      	beq.n	800b93e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	4a10      	ldr	r2, [pc, #64]	; (800b934 <UART_SetConfig+0x5c4>)
 800b8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	085b      	lsrs	r3, r3, #1
 800b904:	441a      	add	r2, r3
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b90e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	2b0f      	cmp	r3, #15
 800b914:	d910      	bls.n	800b938 <UART_SetConfig+0x5c8>
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b91c:	d20c      	bcs.n	800b938 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	b29a      	uxth	r2, r3
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60da      	str	r2, [r3, #12]
 800b928:	e009      	b.n	800b93e <UART_SetConfig+0x5ce>
 800b92a:	bf00      	nop
 800b92c:	40008000 	.word	0x40008000
 800b930:	00f42400 	.word	0x00f42400
 800b934:	0800cd7c 	.word	0x0800cd7c
      }
      else
      {
        ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2201      	movs	r2, #1
 800b942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2201      	movs	r2, #1
 800b94a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2200      	movs	r2, #0
 800b952:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	2200      	movs	r2, #0
 800b958:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b95a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3730      	adds	r7, #48	; 0x30
 800b962:	46bd      	mov	sp, r7
 800b964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	f003 0308 	and.w	r3, r3, #8
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00a      	beq.n	800b9d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00a      	beq.n	800b9f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fc:	f003 0310 	and.w	r3, r3, #16
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00a      	beq.n	800ba1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1e:	f003 0320 	and.w	r3, r3, #32
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00a      	beq.n	800ba3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01a      	beq.n	800ba7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba66:	d10a      	bne.n	800ba7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00a      	beq.n	800baa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	430a      	orrs	r2, r1
 800ba9e:	605a      	str	r2, [r3, #4]
  }
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b098      	sub	sp, #96	; 0x60
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800babc:	f7f9 fc2c 	bl	8005318 <HAL_GetTick>
 800bac0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0308 	and.w	r3, r3, #8
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d12f      	bne.n	800bb30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bad8:	2200      	movs	r2, #0
 800bada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f88e 	bl	800bc00 <UART_WaitOnFlagUntilTimeout>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d022      	beq.n	800bb30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	e853 3f00 	ldrex	r3, [r3]
 800baf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800baf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bafe:	653b      	str	r3, [r7, #80]	; 0x50
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
 800bb06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb08:	647b      	str	r3, [r7, #68]	; 0x44
 800bb0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb10:	e841 2300 	strex	r3, r2, [r1]
 800bb14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1e6      	bne.n	800baea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2220      	movs	r2, #32
 800bb20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e063      	b.n	800bbf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0304 	and.w	r3, r3, #4
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d149      	bne.n	800bbd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb46:	2200      	movs	r2, #0
 800bb48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f857 	bl	800bc00 <UART_WaitOnFlagUntilTimeout>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d03c      	beq.n	800bbd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	e853 3f00 	ldrex	r3, [r3]
 800bb64:	623b      	str	r3, [r7, #32]
   return(result);
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb76:	633b      	str	r3, [r7, #48]	; 0x30
 800bb78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb7e:	e841 2300 	strex	r3, r2, [r1]
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1e6      	bne.n	800bb58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3308      	adds	r3, #8
 800bb90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f023 0301 	bic.w	r3, r3, #1
 800bba0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3308      	adds	r3, #8
 800bba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbaa:	61fa      	str	r2, [r7, #28]
 800bbac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	69b9      	ldr	r1, [r7, #24]
 800bbb0:	69fa      	ldr	r2, [r7, #28]
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	617b      	str	r3, [r7, #20]
   return(result);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e5      	bne.n	800bb8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2220      	movs	r2, #32
 800bbc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e012      	b.n	800bbf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3758      	adds	r7, #88	; 0x58
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc10:	e04f      	b.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc18:	d04b      	beq.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1a:	f7f9 fb7d 	bl	8005318 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d302      	bcc.n	800bc30 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e04e      	b.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0304 	and.w	r3, r3, #4
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d037      	beq.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b80      	cmp	r3, #128	; 0x80
 800bc46:	d034      	beq.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d031      	beq.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	f003 0308 	and.w	r3, r3, #8
 800bc58:	2b08      	cmp	r3, #8
 800bc5a:	d110      	bne.n	800bc7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2208      	movs	r2, #8
 800bc62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 f920 	bl	800beaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2208      	movs	r2, #8
 800bc6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e029      	b.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc8c:	d111      	bne.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 f906 	bl	800beaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2220      	movs	r2, #32
 800bca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	e00f      	b.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69da      	ldr	r2, [r3, #28]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	4013      	ands	r3, r2
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	bf0c      	ite	eq
 800bcc2:	2301      	moveq	r3, #1
 800bcc4:	2300      	movne	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d0a0      	beq.n	800bc12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
	...

0800bcdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b096      	sub	sp, #88	; 0x58
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	4613      	mov	r3, r2
 800bce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	88fa      	ldrh	r2, [r7, #6]
 800bcf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2222      	movs	r2, #34	; 0x22
 800bd04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d02d      	beq.n	800bd6e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd18:	4a40      	ldr	r2, [pc, #256]	; (800be1c <UART_Start_Receive_DMA+0x140>)
 800bd1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd22:	4a3f      	ldr	r2, [pc, #252]	; (800be20 <UART_Start_Receive_DMA+0x144>)
 800bd24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd2c:	4a3d      	ldr	r2, [pc, #244]	; (800be24 <UART_Start_Receive_DMA+0x148>)
 800bd2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd36:	2200      	movs	r2, #0
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3324      	adds	r3, #36	; 0x24
 800bd46:	4619      	mov	r1, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	f7fb f80a 	bl	8006d68 <HAL_DMA_Start_IT>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d009      	beq.n	800bd6e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2210      	movs	r2, #16
 800bd5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e051      	b.n	800be12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d018      	beq.n	800bda8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd8a:	657b      	str	r3, [r7, #84]	; 0x54
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd94:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd96:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e6      	bne.n	800bd76 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3308      	adds	r3, #8
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	f043 0301 	orr.w	r3, r3, #1
 800bdbe:	653b      	str	r3, [r7, #80]	; 0x50
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3308      	adds	r3, #8
 800bdc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdc8:	637a      	str	r2, [r7, #52]	; 0x34
 800bdca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e5      	bne.n	800bda8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3308      	adds	r3, #8
 800bde2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	e853 3f00 	ldrex	r3, [r3]
 800bdea:	613b      	str	r3, [r7, #16]
   return(result);
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdfc:	623a      	str	r2, [r7, #32]
 800bdfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be00:	69f9      	ldr	r1, [r7, #28]
 800be02:	6a3a      	ldr	r2, [r7, #32]
 800be04:	e841 2300 	strex	r3, r2, [r1]
 800be08:	61bb      	str	r3, [r7, #24]
   return(result);
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e5      	bne.n	800bddc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3758      	adds	r7, #88	; 0x58
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	0800c035 	.word	0x0800c035
 800be20:	0800c169 	.word	0x0800c169
 800be24:	0800c1af 	.word	0x0800c1af

0800be28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be28:	b480      	push	{r7}
 800be2a:	b08f      	sub	sp, #60	; 0x3c
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	e853 3f00 	ldrex	r3, [r3]
 800be3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be44:	637b      	str	r3, [r7, #52]	; 0x34
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	461a      	mov	r2, r3
 800be4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be56:	e841 2300 	strex	r3, r2, [r1]
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e6      	bne.n	800be30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3308      	adds	r3, #8
 800be68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	60bb      	str	r3, [r7, #8]
   return(result);
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be78:	633b      	str	r3, [r7, #48]	; 0x30
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3308      	adds	r3, #8
 800be80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be82:	61ba      	str	r2, [r7, #24]
 800be84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	6979      	ldr	r1, [r7, #20]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	613b      	str	r3, [r7, #16]
   return(result);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e5      	bne.n	800be62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2220      	movs	r2, #32
 800be9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800be9e:	bf00      	nop
 800bea0:	373c      	adds	r7, #60	; 0x3c
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800beaa:	b480      	push	{r7}
 800beac:	b095      	sub	sp, #84	; 0x54
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beba:	e853 3f00 	ldrex	r3, [r3]
 800bebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	461a      	mov	r2, r3
 800bece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed0:	643b      	str	r3, [r7, #64]	; 0x40
 800bed2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bed8:	e841 2300 	strex	r3, r2, [r1]
 800bedc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1e6      	bne.n	800beb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3308      	adds	r3, #8
 800beea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	e853 3f00 	ldrex	r3, [r3]
 800bef2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3308      	adds	r3, #8
 800bf06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e3      	bne.n	800bee4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d118      	bne.n	800bf56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	e853 3f00 	ldrex	r3, [r3]
 800bf30:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	f023 0310 	bic.w	r3, r3, #16
 800bf38:	647b      	str	r3, [r7, #68]	; 0x44
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf42:	61bb      	str	r3, [r7, #24]
 800bf44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf46:	6979      	ldr	r1, [r7, #20]
 800bf48:	69ba      	ldr	r2, [r7, #24]
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e6      	bne.n	800bf24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bf6a:	bf00      	nop
 800bf6c:	3754      	adds	r7, #84	; 0x54
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b090      	sub	sp, #64	; 0x40
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0320 	and.w	r3, r3, #32
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d137      	bne.n	800c002 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bf92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf94:	2200      	movs	r2, #0
 800bf96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	623b      	str	r3, [r7, #32]
   return(result);
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfba:	633a      	str	r2, [r7, #48]	; 0x30
 800bfbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e5      	bne.n	800bf9a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfec:	61fb      	str	r3, [r7, #28]
 800bfee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	69b9      	ldr	r1, [r7, #24]
 800bff2:	69fa      	ldr	r2, [r7, #28]
 800bff4:	e841 2300 	strex	r3, r2, [r1]
 800bff8:	617b      	str	r3, [r7, #20]
   return(result);
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e6      	bne.n	800bfce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c000:	e004      	b.n	800c00c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c008:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c00a:	4798      	blx	r3
}
 800c00c:	bf00      	nop
 800c00e:	3740      	adds	r7, #64	; 0x40
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c020:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c02c:	bf00      	nop
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b09c      	sub	sp, #112	; 0x70
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0320 	and.w	r3, r3, #32
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d171      	bne.n	800c134 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c052:	2200      	movs	r2, #0
 800c054:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c06c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c076:	65bb      	str	r3, [r7, #88]	; 0x58
 800c078:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c07c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c07e:	e841 2300 	strex	r3, r2, [r1]
 800c082:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e6      	bne.n	800c058 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3308      	adds	r3, #8
 800c090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09c:	f023 0301 	bic.w	r3, r3, #1
 800c0a0:	667b      	str	r3, [r7, #100]	; 0x64
 800c0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0aa:	647a      	str	r2, [r7, #68]	; 0x44
 800c0ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e5      	bne.n	800c08a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	e853 3f00 	ldrex	r3, [r3]
 800c0cc:	623b      	str	r3, [r7, #32]
   return(result);
 800c0ce:	6a3b      	ldr	r3, [r7, #32]
 800c0d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d4:	663b      	str	r3, [r7, #96]	; 0x60
 800c0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c0de:	633a      	str	r2, [r7, #48]	; 0x30
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e5      	bne.n	800c0be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c0f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d118      	bne.n	800c134 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	e853 3f00 	ldrex	r3, [r3]
 800c10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f023 0310 	bic.w	r3, r3, #16
 800c116:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c120:	61fb      	str	r3, [r7, #28]
 800c122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c124:	69b9      	ldr	r1, [r7, #24]
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	e841 2300 	strex	r3, r2, [r1]
 800c12c:	617b      	str	r3, [r7, #20]
   return(result);
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1e6      	bne.n	800c102 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c136:	2200      	movs	r2, #0
 800c138:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c13a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d109      	bne.n	800c156 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c144:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c14a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c14e:	4611      	mov	r1, r2
 800c150:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c152:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c154:	e004      	b.n	800c160 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c158:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c15c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c15e:	4798      	blx	r3
}
 800c160:	bf00      	nop
 800c162:	3770      	adds	r7, #112	; 0x70
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c174:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2201      	movs	r2, #1
 800c17a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c180:	2b01      	cmp	r3, #1
 800c182:	d10b      	bne.n	800c19c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c190:	0852      	lsrs	r2, r2, #1
 800c192:	b292      	uxth	r2, r2
 800c194:	4611      	mov	r1, r2
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c19a:	e004      	b.n	800c1a6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	4798      	blx	r3
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b086      	sub	sp, #24
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d6:	2b80      	cmp	r3, #128	; 0x80
 800c1d8:	d109      	bne.n	800c1ee <UART_DMAError+0x40>
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b21      	cmp	r3, #33	; 0x21
 800c1de:	d106      	bne.n	800c1ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c1e8:	6978      	ldr	r0, [r7, #20]
 800c1ea:	f7ff fe1d 	bl	800be28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f8:	2b40      	cmp	r3, #64	; 0x40
 800c1fa:	d109      	bne.n	800c210 <UART_DMAError+0x62>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b22      	cmp	r3, #34	; 0x22
 800c200:	d106      	bne.n	800c210 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2200      	movs	r2, #0
 800c206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c20a:	6978      	ldr	r0, [r7, #20]
 800c20c:	f7ff fe4d 	bl	800beaa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c216:	f043 0210 	orr.w	r2, r3, #16
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c226:	6978      	ldr	r0, [r7, #20]
 800c228:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c22a:	bf00      	nop
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b084      	sub	sp, #16
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b088      	sub	sp, #32
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	60bb      	str	r3, [r7, #8]
   return(result);
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c27e:	61fb      	str	r3, [r7, #28]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	61bb      	str	r3, [r7, #24]
 800c28a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6979      	ldr	r1, [r7, #20]
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	613b      	str	r3, [r7, #16]
   return(result);
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e6      	bne.n	800c26a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2b4:	bf00      	nop
 800c2b6:	3720      	adds	r7, #32
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <HAL_UARTEx_DisableFifoMode+0x16>
 800c30a:	2302      	movs	r3, #2
 800c30c:	e027      	b.n	800c35e <HAL_UARTEx_DisableFifoMode+0x66>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2224      	movs	r2, #36	; 0x24
 800c31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f022 0201 	bic.w	r2, r2, #1
 800c334:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c33c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d101      	bne.n	800c382 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c37e:	2302      	movs	r3, #2
 800c380:	e02d      	b.n	800c3de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2224      	movs	r2, #36	; 0x24
 800c38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0201 	bic.w	r2, r2, #1
 800c3a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f850 	bl	800c464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d101      	bne.n	800c3fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	e02d      	b.n	800c45a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2224      	movs	r2, #36	; 0x24
 800c40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 0201 	bic.w	r2, r2, #1
 800c424:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	430a      	orrs	r2, r1
 800c438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f812 	bl	800c464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
	...

0800c464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c470:	2b00      	cmp	r3, #0
 800c472:	d108      	bne.n	800c486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c484:	e031      	b.n	800c4ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c486:	2308      	movs	r3, #8
 800c488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c48a:	2308      	movs	r3, #8
 800c48c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	0e5b      	lsrs	r3, r3, #25
 800c496:	b2db      	uxtb	r3, r3
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	0f5b      	lsrs	r3, r3, #29
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	f003 0307 	and.w	r3, r3, #7
 800c4ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	7b3a      	ldrb	r2, [r7, #12]
 800c4b2:	4911      	ldr	r1, [pc, #68]	; (800c4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c4b4:	5c8a      	ldrb	r2, [r1, r2]
 800c4b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4ba:	7b3a      	ldrb	r2, [r7, #12]
 800c4bc:	490f      	ldr	r1, [pc, #60]	; (800c4fc <UARTEx_SetNbDataToProcess+0x98>)
 800c4be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	7b7a      	ldrb	r2, [r7, #13]
 800c4d0:	4909      	ldr	r1, [pc, #36]	; (800c4f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c4d2:	5c8a      	ldrb	r2, [r1, r2]
 800c4d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4d8:	7b7a      	ldrb	r2, [r7, #13]
 800c4da:	4908      	ldr	r1, [pc, #32]	; (800c4fc <UARTEx_SetNbDataToProcess+0x98>)
 800c4dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c4ea:	bf00      	nop
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	0800cd94 	.word	0x0800cd94
 800c4fc:	0800cd9c 	.word	0x0800cd9c

0800c500 <memset>:
 800c500:	4402      	add	r2, r0
 800c502:	4603      	mov	r3, r0
 800c504:	4293      	cmp	r3, r2
 800c506:	d100      	bne.n	800c50a <memset+0xa>
 800c508:	4770      	bx	lr
 800c50a:	f803 1b01 	strb.w	r1, [r3], #1
 800c50e:	e7f9      	b.n	800c504 <memset+0x4>

0800c510 <__errno>:
 800c510:	4b01      	ldr	r3, [pc, #4]	; (800c518 <__errno+0x8>)
 800c512:	6818      	ldr	r0, [r3, #0]
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	200002c8 	.word	0x200002c8

0800c51c <__libc_init_array>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	4d0d      	ldr	r5, [pc, #52]	; (800c554 <__libc_init_array+0x38>)
 800c520:	4c0d      	ldr	r4, [pc, #52]	; (800c558 <__libc_init_array+0x3c>)
 800c522:	1b64      	subs	r4, r4, r5
 800c524:	10a4      	asrs	r4, r4, #2
 800c526:	2600      	movs	r6, #0
 800c528:	42a6      	cmp	r6, r4
 800c52a:	d109      	bne.n	800c540 <__libc_init_array+0x24>
 800c52c:	4d0b      	ldr	r5, [pc, #44]	; (800c55c <__libc_init_array+0x40>)
 800c52e:	4c0c      	ldr	r4, [pc, #48]	; (800c560 <__libc_init_array+0x44>)
 800c530:	f000 fbe8 	bl	800cd04 <_init>
 800c534:	1b64      	subs	r4, r4, r5
 800c536:	10a4      	asrs	r4, r4, #2
 800c538:	2600      	movs	r6, #0
 800c53a:	42a6      	cmp	r6, r4
 800c53c:	d105      	bne.n	800c54a <__libc_init_array+0x2e>
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	f855 3b04 	ldr.w	r3, [r5], #4
 800c544:	4798      	blx	r3
 800c546:	3601      	adds	r6, #1
 800c548:	e7ee      	b.n	800c528 <__libc_init_array+0xc>
 800c54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c54e:	4798      	blx	r3
 800c550:	3601      	adds	r6, #1
 800c552:	e7f2      	b.n	800c53a <__libc_init_array+0x1e>
 800c554:	0800cdc4 	.word	0x0800cdc4
 800c558:	0800cdc4 	.word	0x0800cdc4
 800c55c:	0800cdc4 	.word	0x0800cdc4
 800c560:	0800cdc8 	.word	0x0800cdc8

0800c564 <memcpy>:
 800c564:	440a      	add	r2, r1
 800c566:	4291      	cmp	r1, r2
 800c568:	f100 33ff 	add.w	r3, r0, #4294967295
 800c56c:	d100      	bne.n	800c570 <memcpy+0xc>
 800c56e:	4770      	bx	lr
 800c570:	b510      	push	{r4, lr}
 800c572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c57a:	4291      	cmp	r1, r2
 800c57c:	d1f9      	bne.n	800c572 <memcpy+0xe>
 800c57e:	bd10      	pop	{r4, pc}

0800c580 <powf>:
 800c580:	b508      	push	{r3, lr}
 800c582:	ed2d 8b04 	vpush	{d8-d9}
 800c586:	eeb0 8a60 	vmov.f32	s16, s1
 800c58a:	eeb0 9a40 	vmov.f32	s18, s0
 800c58e:	f000 f881 	bl	800c694 <__ieee754_powf>
 800c592:	eeb4 8a48 	vcmp.f32	s16, s16
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	eef0 8a40 	vmov.f32	s17, s0
 800c59e:	d63e      	bvs.n	800c61e <powf+0x9e>
 800c5a0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a8:	d112      	bne.n	800c5d0 <powf+0x50>
 800c5aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	d039      	beq.n	800c628 <powf+0xa8>
 800c5b4:	eeb0 0a48 	vmov.f32	s0, s16
 800c5b8:	f000 f839 	bl	800c62e <finitef>
 800c5bc:	b378      	cbz	r0, 800c61e <powf+0x9e>
 800c5be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c6:	d52a      	bpl.n	800c61e <powf+0x9e>
 800c5c8:	f7ff ffa2 	bl	800c510 <__errno>
 800c5cc:	2322      	movs	r3, #34	; 0x22
 800c5ce:	e014      	b.n	800c5fa <powf+0x7a>
 800c5d0:	f000 f82d 	bl	800c62e <finitef>
 800c5d4:	b998      	cbnz	r0, 800c5fe <powf+0x7e>
 800c5d6:	eeb0 0a49 	vmov.f32	s0, s18
 800c5da:	f000 f828 	bl	800c62e <finitef>
 800c5de:	b170      	cbz	r0, 800c5fe <powf+0x7e>
 800c5e0:	eeb0 0a48 	vmov.f32	s0, s16
 800c5e4:	f000 f823 	bl	800c62e <finitef>
 800c5e8:	b148      	cbz	r0, 800c5fe <powf+0x7e>
 800c5ea:	eef4 8a68 	vcmp.f32	s17, s17
 800c5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f2:	d7e9      	bvc.n	800c5c8 <powf+0x48>
 800c5f4:	f7ff ff8c 	bl	800c510 <__errno>
 800c5f8:	2321      	movs	r3, #33	; 0x21
 800c5fa:	6003      	str	r3, [r0, #0]
 800c5fc:	e00f      	b.n	800c61e <powf+0x9e>
 800c5fe:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c606:	d10a      	bne.n	800c61e <powf+0x9e>
 800c608:	eeb0 0a49 	vmov.f32	s0, s18
 800c60c:	f000 f80f 	bl	800c62e <finitef>
 800c610:	b128      	cbz	r0, 800c61e <powf+0x9e>
 800c612:	eeb0 0a48 	vmov.f32	s0, s16
 800c616:	f000 f80a 	bl	800c62e <finitef>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d1d4      	bne.n	800c5c8 <powf+0x48>
 800c61e:	eeb0 0a68 	vmov.f32	s0, s17
 800c622:	ecbd 8b04 	vpop	{d8-d9}
 800c626:	bd08      	pop	{r3, pc}
 800c628:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c62c:	e7f7      	b.n	800c61e <powf+0x9e>

0800c62e <finitef>:
 800c62e:	b082      	sub	sp, #8
 800c630:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c634:	9801      	ldr	r0, [sp, #4]
 800c636:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c63a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c63e:	bfac      	ite	ge
 800c640:	2000      	movge	r0, #0
 800c642:	2001      	movlt	r0, #1
 800c644:	b002      	add	sp, #8
 800c646:	4770      	bx	lr

0800c648 <with_errnof>:
 800c648:	b513      	push	{r0, r1, r4, lr}
 800c64a:	4604      	mov	r4, r0
 800c64c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c650:	f7ff ff5e 	bl	800c510 <__errno>
 800c654:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c658:	6004      	str	r4, [r0, #0]
 800c65a:	b002      	add	sp, #8
 800c65c:	bd10      	pop	{r4, pc}

0800c65e <xflowf>:
 800c65e:	b130      	cbz	r0, 800c66e <xflowf+0x10>
 800c660:	eef1 7a40 	vneg.f32	s15, s0
 800c664:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c668:	2022      	movs	r0, #34	; 0x22
 800c66a:	f7ff bfed 	b.w	800c648 <with_errnof>
 800c66e:	eef0 7a40 	vmov.f32	s15, s0
 800c672:	e7f7      	b.n	800c664 <xflowf+0x6>

0800c674 <__math_uflowf>:
 800c674:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c67c <__math_uflowf+0x8>
 800c678:	f7ff bff1 	b.w	800c65e <xflowf>
 800c67c:	10000000 	.word	0x10000000

0800c680 <__math_oflowf>:
 800c680:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c688 <__math_oflowf+0x8>
 800c684:	f7ff bfeb 	b.w	800c65e <xflowf>
 800c688:	70000000 	.word	0x70000000

0800c68c <__ieee754_sqrtf>:
 800c68c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c690:	4770      	bx	lr
	...

0800c694 <__ieee754_powf>:
 800c694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c698:	ee10 4a90 	vmov	r4, s1
 800c69c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c6a0:	ed2d 8b02 	vpush	{d8}
 800c6a4:	ee10 7a10 	vmov	r7, s0
 800c6a8:	eeb0 8a40 	vmov.f32	s16, s0
 800c6ac:	eef0 8a60 	vmov.f32	s17, s1
 800c6b0:	d10c      	bne.n	800c6cc <__ieee754_powf+0x38>
 800c6b2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800c6b6:	007f      	lsls	r7, r7, #1
 800c6b8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800c6bc:	f240 8292 	bls.w	800cbe4 <__ieee754_powf+0x550>
 800c6c0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c6c4:	ecbd 8b02 	vpop	{d8}
 800c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6cc:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800c6d0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c6d4:	dcf4      	bgt.n	800c6c0 <__ieee754_powf+0x2c>
 800c6d6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c6da:	dd08      	ble.n	800c6ee <__ieee754_powf+0x5a>
 800c6dc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c6e0:	d1ee      	bne.n	800c6c0 <__ieee754_powf+0x2c>
 800c6e2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c6e6:	0064      	lsls	r4, r4, #1
 800c6e8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c6ec:	e7e6      	b.n	800c6bc <__ieee754_powf+0x28>
 800c6ee:	2f00      	cmp	r7, #0
 800c6f0:	da20      	bge.n	800c734 <__ieee754_powf+0xa0>
 800c6f2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c6f6:	da2d      	bge.n	800c754 <__ieee754_powf+0xc0>
 800c6f8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c6fc:	f2c0 827b 	blt.w	800cbf6 <__ieee754_powf+0x562>
 800c700:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c704:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c708:	fa48 f603 	asr.w	r6, r8, r3
 800c70c:	fa06 f303 	lsl.w	r3, r6, r3
 800c710:	4543      	cmp	r3, r8
 800c712:	f040 8270 	bne.w	800cbf6 <__ieee754_powf+0x562>
 800c716:	f006 0601 	and.w	r6, r6, #1
 800c71a:	f1c6 0602 	rsb	r6, r6, #2
 800c71e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c722:	d11f      	bne.n	800c764 <__ieee754_powf+0xd0>
 800c724:	2c00      	cmp	r4, #0
 800c726:	f280 8263 	bge.w	800cbf0 <__ieee754_powf+0x55c>
 800c72a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c72e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c732:	e7c7      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c734:	2600      	movs	r6, #0
 800c736:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c73a:	d1f0      	bne.n	800c71e <__ieee754_powf+0x8a>
 800c73c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c740:	f000 8250 	beq.w	800cbe4 <__ieee754_powf+0x550>
 800c744:	dd08      	ble.n	800c758 <__ieee754_powf+0xc4>
 800c746:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ca4c <__ieee754_powf+0x3b8>
 800c74a:	2c00      	cmp	r4, #0
 800c74c:	bfa8      	it	ge
 800c74e:	eeb0 0a68 	vmovge.f32	s0, s17
 800c752:	e7b7      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c754:	2602      	movs	r6, #2
 800c756:	e7ee      	b.n	800c736 <__ieee754_powf+0xa2>
 800c758:	2c00      	cmp	r4, #0
 800c75a:	f280 8246 	bge.w	800cbea <__ieee754_powf+0x556>
 800c75e:	eeb1 0a68 	vneg.f32	s0, s17
 800c762:	e7af      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c764:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c768:	d102      	bne.n	800c770 <__ieee754_powf+0xdc>
 800c76a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c76e:	e7a9      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c770:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c774:	eeb0 0a48 	vmov.f32	s0, s16
 800c778:	d107      	bne.n	800c78a <__ieee754_powf+0xf6>
 800c77a:	2f00      	cmp	r7, #0
 800c77c:	db05      	blt.n	800c78a <__ieee754_powf+0xf6>
 800c77e:	ecbd 8b02 	vpop	{d8}
 800c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	f7ff bf81 	b.w	800c68c <__ieee754_sqrtf>
 800c78a:	f000 fa4d 	bl	800cc28 <fabsf>
 800c78e:	b125      	cbz	r5, 800c79a <__ieee754_powf+0x106>
 800c790:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800c794:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c798:	d115      	bne.n	800c7c6 <__ieee754_powf+0x132>
 800c79a:	2c00      	cmp	r4, #0
 800c79c:	bfbc      	itt	lt
 800c79e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c7a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c7a6:	2f00      	cmp	r7, #0
 800c7a8:	da8c      	bge.n	800c6c4 <__ieee754_powf+0x30>
 800c7aa:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c7ae:	4335      	orrs	r5, r6
 800c7b0:	d104      	bne.n	800c7bc <__ieee754_powf+0x128>
 800c7b2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c7b6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c7ba:	e783      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c7bc:	2e01      	cmp	r6, #1
 800c7be:	d181      	bne.n	800c6c4 <__ieee754_powf+0x30>
 800c7c0:	eeb1 0a40 	vneg.f32	s0, s0
 800c7c4:	e77e      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c7c6:	0ff8      	lsrs	r0, r7, #31
 800c7c8:	3801      	subs	r0, #1
 800c7ca:	ea56 0300 	orrs.w	r3, r6, r0
 800c7ce:	d104      	bne.n	800c7da <__ieee754_powf+0x146>
 800c7d0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c7d4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c7d8:	e774      	b.n	800c6c4 <__ieee754_powf+0x30>
 800c7da:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c7de:	dd73      	ble.n	800c8c8 <__ieee754_powf+0x234>
 800c7e0:	4b9b      	ldr	r3, [pc, #620]	; (800ca50 <__ieee754_powf+0x3bc>)
 800c7e2:	429d      	cmp	r5, r3
 800c7e4:	dc08      	bgt.n	800c7f8 <__ieee754_powf+0x164>
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	da0b      	bge.n	800c802 <__ieee754_powf+0x16e>
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	ecbd 8b02 	vpop	{d8}
 800c7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	f7ff bf44 	b.w	800c680 <__math_oflowf>
 800c7f8:	4b96      	ldr	r3, [pc, #600]	; (800ca54 <__ieee754_powf+0x3c0>)
 800c7fa:	429d      	cmp	r5, r3
 800c7fc:	dd08      	ble.n	800c810 <__ieee754_powf+0x17c>
 800c7fe:	2c00      	cmp	r4, #0
 800c800:	dcf3      	bgt.n	800c7ea <__ieee754_powf+0x156>
 800c802:	2000      	movs	r0, #0
 800c804:	ecbd 8b02 	vpop	{d8}
 800c808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	f7ff bf32 	b.w	800c674 <__math_uflowf>
 800c810:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c814:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c818:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800ca58 <__ieee754_powf+0x3c4>
 800c81c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c820:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c828:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c82c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c830:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c834:	eddf 7a89 	vldr	s15, [pc, #548]	; 800ca5c <__ieee754_powf+0x3c8>
 800c838:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c83c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800ca60 <__ieee754_powf+0x3cc>
 800c840:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c844:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800ca64 <__ieee754_powf+0x3d0>
 800c848:	eef0 6a67 	vmov.f32	s13, s15
 800c84c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c850:	ee16 3a90 	vmov	r3, s13
 800c854:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c858:	f023 030f 	bic.w	r3, r3, #15
 800c85c:	ee06 3a90 	vmov	s13, r3
 800c860:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c864:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c868:	3e01      	subs	r6, #1
 800c86a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c86e:	4306      	orrs	r6, r0
 800c870:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c874:	f024 040f 	bic.w	r4, r4, #15
 800c878:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c87c:	bf08      	it	eq
 800c87e:	eeb0 8a47 	vmoveq.f32	s16, s14
 800c882:	ee07 4a10 	vmov	s14, r4
 800c886:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c88a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c896:	ee07 4a10 	vmov	s14, r4
 800c89a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c89e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c8a2:	ee17 1a10 	vmov	r1, s14
 800c8a6:	2900      	cmp	r1, #0
 800c8a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8ac:	f340 817c 	ble.w	800cba8 <__ieee754_powf+0x514>
 800c8b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c8b4:	f340 80f8 	ble.w	800caa8 <__ieee754_powf+0x414>
 800c8b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c0:	bf4c      	ite	mi
 800c8c2:	2001      	movmi	r0, #1
 800c8c4:	2000      	movpl	r0, #0
 800c8c6:	e791      	b.n	800c7ec <__ieee754_powf+0x158>
 800c8c8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800c8cc:	bf01      	itttt	eq
 800c8ce:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800ca68 <__ieee754_powf+0x3d4>
 800c8d2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c8d6:	f06f 0317 	mvneq.w	r3, #23
 800c8da:	ee17 5a90 	vmoveq	r5, s15
 800c8de:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800c8e2:	bf18      	it	ne
 800c8e4:	2300      	movne	r3, #0
 800c8e6:	3a7f      	subs	r2, #127	; 0x7f
 800c8e8:	441a      	add	r2, r3
 800c8ea:	4b60      	ldr	r3, [pc, #384]	; (800ca6c <__ieee754_powf+0x3d8>)
 800c8ec:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c8f0:	429d      	cmp	r5, r3
 800c8f2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c8f6:	dd06      	ble.n	800c906 <__ieee754_powf+0x272>
 800c8f8:	4b5d      	ldr	r3, [pc, #372]	; (800ca70 <__ieee754_powf+0x3dc>)
 800c8fa:	429d      	cmp	r5, r3
 800c8fc:	f340 80a4 	ble.w	800ca48 <__ieee754_powf+0x3b4>
 800c900:	3201      	adds	r2, #1
 800c902:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c906:	2500      	movs	r5, #0
 800c908:	4b5a      	ldr	r3, [pc, #360]	; (800ca74 <__ieee754_powf+0x3e0>)
 800c90a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c90e:	ee07 1a10 	vmov	s14, r1
 800c912:	edd3 5a00 	vldr	s11, [r3]
 800c916:	4b58      	ldr	r3, [pc, #352]	; (800ca78 <__ieee754_powf+0x3e4>)
 800c918:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c91c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c920:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c924:	1049      	asrs	r1, r1, #1
 800c926:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c92a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c92e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c932:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c936:	ee07 1a90 	vmov	s15, r1
 800c93a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c93e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c942:	ee15 7a10 	vmov	r7, s10
 800c946:	401f      	ands	r7, r3
 800c948:	ee06 7a90 	vmov	s13, r7
 800c94c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c950:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c954:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c958:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c95c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800ca7c <__ieee754_powf+0x3e8>
 800c960:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ca80 <__ieee754_powf+0x3ec>
 800c964:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c968:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ca84 <__ieee754_powf+0x3f0>
 800c96c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c970:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ca58 <__ieee754_powf+0x3c4>
 800c974:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c978:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ca88 <__ieee754_powf+0x3f4>
 800c97c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c980:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ca8c <__ieee754_powf+0x3f8>
 800c984:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c988:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c98c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c990:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c994:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c998:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c99c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c9a0:	eef0 5a67 	vmov.f32	s11, s15
 800c9a4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c9a8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c9ac:	ee15 1a90 	vmov	r1, s11
 800c9b0:	4019      	ands	r1, r3
 800c9b2:	ee05 1a90 	vmov	s11, r1
 800c9b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c9ba:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c9be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c9c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c9ca:	eeb0 6a67 	vmov.f32	s12, s15
 800c9ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c9d2:	ee16 1a10 	vmov	r1, s12
 800c9d6:	4019      	ands	r1, r3
 800c9d8:	ee07 1a10 	vmov	s14, r1
 800c9dc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c9e0:	ee06 1a10 	vmov	s12, r1
 800c9e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9e8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ca90 <__ieee754_powf+0x3fc>
 800c9ec:	4929      	ldr	r1, [pc, #164]	; (800ca94 <__ieee754_powf+0x400>)
 800c9ee:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ca98 <__ieee754_powf+0x404>
 800c9f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ca9c <__ieee754_powf+0x408>
 800c9fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c9fe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800ca02:	ed91 7a00 	vldr	s14, [r1]
 800ca06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca0a:	ee07 2a10 	vmov	s14, r2
 800ca0e:	eef0 6a67 	vmov.f32	s13, s15
 800ca12:	4a23      	ldr	r2, [pc, #140]	; (800caa0 <__ieee754_powf+0x40c>)
 800ca14:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ca18:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ca1c:	ed92 5a00 	vldr	s10, [r2]
 800ca20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca24:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ca28:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ca2c:	ee16 2a90 	vmov	r2, s13
 800ca30:	4013      	ands	r3, r2
 800ca32:	ee06 3a90 	vmov	s13, r3
 800ca36:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca3a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ca3e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ca42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca46:	e70f      	b.n	800c868 <__ieee754_powf+0x1d4>
 800ca48:	2501      	movs	r5, #1
 800ca4a:	e75d      	b.n	800c908 <__ieee754_powf+0x274>
 800ca4c:	00000000 	.word	0x00000000
 800ca50:	3f7ffff3 	.word	0x3f7ffff3
 800ca54:	3f800007 	.word	0x3f800007
 800ca58:	3eaaaaab 	.word	0x3eaaaaab
 800ca5c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ca60:	36eca570 	.word	0x36eca570
 800ca64:	3fb8aa00 	.word	0x3fb8aa00
 800ca68:	4b800000 	.word	0x4b800000
 800ca6c:	001cc471 	.word	0x001cc471
 800ca70:	005db3d6 	.word	0x005db3d6
 800ca74:	0800cda4 	.word	0x0800cda4
 800ca78:	fffff000 	.word	0xfffff000
 800ca7c:	3e6c3255 	.word	0x3e6c3255
 800ca80:	3e53f142 	.word	0x3e53f142
 800ca84:	3e8ba305 	.word	0x3e8ba305
 800ca88:	3edb6db7 	.word	0x3edb6db7
 800ca8c:	3f19999a 	.word	0x3f19999a
 800ca90:	3f76384f 	.word	0x3f76384f
 800ca94:	0800cdb4 	.word	0x0800cdb4
 800ca98:	3f763800 	.word	0x3f763800
 800ca9c:	369dc3a0 	.word	0x369dc3a0
 800caa0:	0800cdac 	.word	0x0800cdac
 800caa4:	3338aa3c 	.word	0x3338aa3c
 800caa8:	f040 8093 	bne.w	800cbd2 <__ieee754_powf+0x53e>
 800caac:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800caa4 <__ieee754_powf+0x410>
 800cab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cab4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cab8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac0:	f73f aefa 	bgt.w	800c8b8 <__ieee754_powf+0x224>
 800cac4:	15db      	asrs	r3, r3, #23
 800cac6:	3b7e      	subs	r3, #126	; 0x7e
 800cac8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800cacc:	4118      	asrs	r0, r3
 800cace:	4408      	add	r0, r1
 800cad0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cad4:	4a49      	ldr	r2, [pc, #292]	; (800cbfc <__ieee754_powf+0x568>)
 800cad6:	3b7f      	subs	r3, #127	; 0x7f
 800cad8:	411a      	asrs	r2, r3
 800cada:	4002      	ands	r2, r0
 800cadc:	ee07 2a10 	vmov	s14, r2
 800cae0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800cae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cae8:	f1c3 0317 	rsb	r3, r3, #23
 800caec:	4118      	asrs	r0, r3
 800caee:	2900      	cmp	r1, #0
 800caf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800caf4:	bfb8      	it	lt
 800caf6:	4240      	neglt	r0, r0
 800caf8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cafc:	eddf 6a40 	vldr	s13, [pc, #256]	; 800cc00 <__ieee754_powf+0x56c>
 800cb00:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800cc04 <__ieee754_powf+0x570>
 800cb04:	ee17 3a10 	vmov	r3, s14
 800cb08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cb0c:	f023 030f 	bic.w	r3, r3, #15
 800cb10:	ee07 3a10 	vmov	s14, r3
 800cb14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb1c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cb20:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cc08 <__ieee754_powf+0x574>
 800cb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb28:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800cb2c:	eef0 6a67 	vmov.f32	s13, s15
 800cb30:	eee7 6a06 	vfma.f32	s13, s14, s12
 800cb34:	eef0 5a66 	vmov.f32	s11, s13
 800cb38:	eee7 5a46 	vfms.f32	s11, s14, s12
 800cb3c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cb40:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cb44:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800cc0c <__ieee754_powf+0x578>
 800cb48:	eddf 5a31 	vldr	s11, [pc, #196]	; 800cc10 <__ieee754_powf+0x57c>
 800cb4c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800cb50:	eddf 5a30 	vldr	s11, [pc, #192]	; 800cc14 <__ieee754_powf+0x580>
 800cb54:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb58:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800cc18 <__ieee754_powf+0x584>
 800cb5c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb60:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cc1c <__ieee754_powf+0x588>
 800cb64:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb68:	eeb0 6a66 	vmov.f32	s12, s13
 800cb6c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800cb70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cb74:	ee66 5a86 	vmul.f32	s11, s13, s12
 800cb78:	ee36 6a47 	vsub.f32	s12, s12, s14
 800cb7c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800cb80:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800cb84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cb8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb90:	ee10 3a10 	vmov	r3, s0
 800cb94:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800cb98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb9c:	da1f      	bge.n	800cbde <__ieee754_powf+0x54a>
 800cb9e:	f000 f84b 	bl	800cc38 <scalbnf>
 800cba2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800cba6:	e58d      	b.n	800c6c4 <__ieee754_powf+0x30>
 800cba8:	4a1d      	ldr	r2, [pc, #116]	; (800cc20 <__ieee754_powf+0x58c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	dd07      	ble.n	800cbbe <__ieee754_powf+0x52a>
 800cbae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb6:	bf4c      	ite	mi
 800cbb8:	2001      	movmi	r0, #1
 800cbba:	2000      	movpl	r0, #0
 800cbbc:	e622      	b.n	800c804 <__ieee754_powf+0x170>
 800cbbe:	d108      	bne.n	800cbd2 <__ieee754_powf+0x53e>
 800cbc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbc4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	f6ff af7a 	blt.w	800cac4 <__ieee754_powf+0x430>
 800cbd0:	e7ed      	b.n	800cbae <__ieee754_powf+0x51a>
 800cbd2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800cbd6:	f73f af75 	bgt.w	800cac4 <__ieee754_powf+0x430>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e78c      	b.n	800caf8 <__ieee754_powf+0x464>
 800cbde:	ee00 3a10 	vmov	s0, r3
 800cbe2:	e7de      	b.n	800cba2 <__ieee754_powf+0x50e>
 800cbe4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cbe8:	e56c      	b.n	800c6c4 <__ieee754_powf+0x30>
 800cbea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cc24 <__ieee754_powf+0x590>
 800cbee:	e569      	b.n	800c6c4 <__ieee754_powf+0x30>
 800cbf0:	eeb0 0a48 	vmov.f32	s0, s16
 800cbf4:	e566      	b.n	800c6c4 <__ieee754_powf+0x30>
 800cbf6:	2600      	movs	r6, #0
 800cbf8:	e591      	b.n	800c71e <__ieee754_powf+0x8a>
 800cbfa:	bf00      	nop
 800cbfc:	ff800000 	.word	0xff800000
 800cc00:	3f317218 	.word	0x3f317218
 800cc04:	3f317200 	.word	0x3f317200
 800cc08:	35bfbe8c 	.word	0x35bfbe8c
 800cc0c:	b5ddea0e 	.word	0xb5ddea0e
 800cc10:	3331bb4c 	.word	0x3331bb4c
 800cc14:	388ab355 	.word	0x388ab355
 800cc18:	bb360b61 	.word	0xbb360b61
 800cc1c:	3e2aaaab 	.word	0x3e2aaaab
 800cc20:	43160000 	.word	0x43160000
 800cc24:	00000000 	.word	0x00000000

0800cc28 <fabsf>:
 800cc28:	ee10 3a10 	vmov	r3, s0
 800cc2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc30:	ee00 3a10 	vmov	s0, r3
 800cc34:	4770      	bx	lr
	...

0800cc38 <scalbnf>:
 800cc38:	ee10 3a10 	vmov	r3, s0
 800cc3c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cc40:	d02b      	beq.n	800cc9a <scalbnf+0x62>
 800cc42:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cc46:	d302      	bcc.n	800cc4e <scalbnf+0x16>
 800cc48:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc4c:	4770      	bx	lr
 800cc4e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cc52:	d123      	bne.n	800cc9c <scalbnf+0x64>
 800cc54:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <scalbnf+0xb0>)
 800cc56:	eddf 7a25 	vldr	s15, [pc, #148]	; 800ccec <scalbnf+0xb4>
 800cc5a:	4298      	cmp	r0, r3
 800cc5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cc60:	db17      	blt.n	800cc92 <scalbnf+0x5a>
 800cc62:	ee10 3a10 	vmov	r3, s0
 800cc66:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cc6a:	3a19      	subs	r2, #25
 800cc6c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800cc70:	4288      	cmp	r0, r1
 800cc72:	dd15      	ble.n	800cca0 <scalbnf+0x68>
 800cc74:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ccf0 <scalbnf+0xb8>
 800cc78:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800ccf4 <scalbnf+0xbc>
 800cc7c:	ee10 3a10 	vmov	r3, s0
 800cc80:	eeb0 7a67 	vmov.f32	s14, s15
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	bfb8      	it	lt
 800cc88:	eef0 7a66 	vmovlt.f32	s15, s13
 800cc8c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cc90:	4770      	bx	lr
 800cc92:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ccf8 <scalbnf+0xc0>
 800cc96:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cc9a:	4770      	bx	lr
 800cc9c:	0dd2      	lsrs	r2, r2, #23
 800cc9e:	e7e5      	b.n	800cc6c <scalbnf+0x34>
 800cca0:	4410      	add	r0, r2
 800cca2:	28fe      	cmp	r0, #254	; 0xfe
 800cca4:	dce6      	bgt.n	800cc74 <scalbnf+0x3c>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	dd06      	ble.n	800ccb8 <scalbnf+0x80>
 800ccaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ccb2:	ee00 3a10 	vmov	s0, r3
 800ccb6:	4770      	bx	lr
 800ccb8:	f110 0f16 	cmn.w	r0, #22
 800ccbc:	da09      	bge.n	800ccd2 <scalbnf+0x9a>
 800ccbe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ccf8 <scalbnf+0xc0>
 800ccc2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ccfc <scalbnf+0xc4>
 800ccc6:	ee10 3a10 	vmov	r3, s0
 800ccca:	eeb0 7a67 	vmov.f32	s14, s15
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	e7d9      	b.n	800cc86 <scalbnf+0x4e>
 800ccd2:	3019      	adds	r0, #25
 800ccd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccd8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ccdc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800cd00 <scalbnf+0xc8>
 800cce0:	ee07 3a90 	vmov	s15, r3
 800cce4:	e7d7      	b.n	800cc96 <scalbnf+0x5e>
 800cce6:	bf00      	nop
 800cce8:	ffff3cb0 	.word	0xffff3cb0
 800ccec:	4c000000 	.word	0x4c000000
 800ccf0:	7149f2ca 	.word	0x7149f2ca
 800ccf4:	f149f2ca 	.word	0xf149f2ca
 800ccf8:	0da24260 	.word	0x0da24260
 800ccfc:	8da24260 	.word	0x8da24260
 800cd00:	33000000 	.word	0x33000000

0800cd04 <_init>:
 800cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd06:	bf00      	nop
 800cd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0a:	bc08      	pop	{r3}
 800cd0c:	469e      	mov	lr, r3
 800cd0e:	4770      	bx	lr

0800cd10 <_fini>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	bf00      	nop
 800cd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd16:	bc08      	pop	{r3}
 800cd18:	469e      	mov	lr, r3
 800cd1a:	4770      	bx	lr
