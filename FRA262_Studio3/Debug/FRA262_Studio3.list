
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800bf78  0800bf78  0001bf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c000  0800c000  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c008  0800c008  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c008  0800c008  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c00c  0800c00c  0001c00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800c010  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  20000280  0800c290  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  0800c290  00021440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f646  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d3f  00000000  00000000  0003f939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  00043678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001223  00000000  00000000  00044da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297ac  00000000  00000000  00045fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cee9  00000000  00000000  0006f76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113c0c  00000000  00000000  0008c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006878  00000000  00000000  001a0264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001a6adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000280 	.word	0x20000280
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bf60 	.word	0x0800bf60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000284 	.word	0x20000284
 8000214:	0800bf60 	.word	0x0800bf60

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_frsub>:
 8000ba4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	e002      	b.n	8000bb0 <__addsf3>
 8000baa:	bf00      	nop

08000bac <__aeabi_fsub>:
 8000bac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb0 <__addsf3>:
 8000bb0:	0042      	lsls	r2, r0, #1
 8000bb2:	bf1f      	itttt	ne
 8000bb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb8:	ea92 0f03 	teqne	r2, r3
 8000bbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc4:	d06a      	beq.n	8000c9c <__addsf3+0xec>
 8000bc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bce:	bfc1      	itttt	gt
 8000bd0:	18d2      	addgt	r2, r2, r3
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	4048      	eorgt	r0, r1
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	2b19      	cmp	r3, #25
 8000bde:	bf88      	it	hi
 8000be0:	4770      	bxhi	lr
 8000be2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bee:	bf18      	it	ne
 8000bf0:	4240      	negne	r0, r0
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4249      	negne	r1, r1
 8000c02:	ea92 0f03 	teq	r2, r3
 8000c06:	d03f      	beq.n	8000c88 <__addsf3+0xd8>
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c10:	eb10 000c 	adds.w	r0, r0, ip
 8000c14:	f1c3 0320 	rsb	r3, r3, #32
 8000c18:	fa01 f103 	lsl.w	r1, r1, r3
 8000c1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__addsf3+0x78>
 8000c22:	4249      	negs	r1, r1
 8000c24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c2c:	d313      	bcc.n	8000c56 <__addsf3+0xa6>
 8000c2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c32:	d306      	bcc.n	8000c42 <__addsf3+0x92>
 8000c34:	0840      	lsrs	r0, r0, #1
 8000c36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3a:	f102 0201 	add.w	r2, r2, #1
 8000c3e:	2afe      	cmp	r2, #254	; 0xfe
 8000c40:	d251      	bcs.n	8000ce6 <__addsf3+0x136>
 8000c42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4a:	bf08      	it	eq
 8000c4c:	f020 0001 	biceq.w	r0, r0, #1
 8000c50:	ea40 0003 	orr.w	r0, r0, r3
 8000c54:	4770      	bx	lr
 8000c56:	0049      	lsls	r1, r1, #1
 8000c58:	eb40 0000 	adc.w	r0, r0, r0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c64:	d2ed      	bcs.n	8000c42 <__addsf3+0x92>
 8000c66:	fab0 fc80 	clz	ip, r0
 8000c6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c76:	bfaa      	itet	ge
 8000c78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c7c:	4252      	neglt	r2, r2
 8000c7e:	4318      	orrge	r0, r3
 8000c80:	bfbc      	itt	lt
 8000c82:	40d0      	lsrlt	r0, r2
 8000c84:	4318      	orrlt	r0, r3
 8000c86:	4770      	bx	lr
 8000c88:	f092 0f00 	teq	r2, #0
 8000c8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c90:	bf06      	itte	eq
 8000c92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c96:	3201      	addeq	r2, #1
 8000c98:	3b01      	subne	r3, #1
 8000c9a:	e7b5      	b.n	8000c08 <__addsf3+0x58>
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000caa:	d021      	beq.n	8000cf0 <__addsf3+0x140>
 8000cac:	ea92 0f03 	teq	r2, r3
 8000cb0:	d004      	beq.n	8000cbc <__addsf3+0x10c>
 8000cb2:	f092 0f00 	teq	r2, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	4608      	moveq	r0, r1
 8000cba:	4770      	bx	lr
 8000cbc:	ea90 0f01 	teq	r0, r1
 8000cc0:	bf1c      	itt	ne
 8000cc2:	2000      	movne	r0, #0
 8000cc4:	4770      	bxne	lr
 8000cc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cca:	d104      	bne.n	8000cd6 <__addsf3+0x126>
 8000ccc:	0040      	lsls	r0, r0, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cda:	bf3c      	itt	cc
 8000cdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce0:	4770      	bxcc	lr
 8000ce2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	4770      	bx	lr
 8000cf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf4:	bf16      	itet	ne
 8000cf6:	4608      	movne	r0, r1
 8000cf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cfc:	4601      	movne	r1, r0
 8000cfe:	0242      	lsls	r2, r0, #9
 8000d00:	bf06      	itte	eq
 8000d02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d06:	ea90 0f01 	teqeq	r0, r1
 8000d0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_ui2f>:
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e004      	b.n	8000d20 <__aeabi_i2f+0x8>
 8000d16:	bf00      	nop

08000d18 <__aeabi_i2f>:
 8000d18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d1c:	bf48      	it	mi
 8000d1e:	4240      	negmi	r0, r0
 8000d20:	ea5f 0c00 	movs.w	ip, r0
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	e01c      	b.n	8000d6e <__aeabi_l2f+0x2a>

08000d34 <__aeabi_ul2f>:
 8000d34:	ea50 0201 	orrs.w	r2, r0, r1
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e00a      	b.n	8000d58 <__aeabi_l2f+0x14>
 8000d42:	bf00      	nop

08000d44 <__aeabi_l2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d50:	d502      	bpl.n	8000d58 <__aeabi_l2f+0x14>
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	ea5f 0c01 	movs.w	ip, r1
 8000d5c:	bf02      	ittt	eq
 8000d5e:	4684      	moveq	ip, r0
 8000d60:	4601      	moveq	r1, r0
 8000d62:	2000      	moveq	r0, #0
 8000d64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d68:	bf08      	it	eq
 8000d6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d72:	fabc f28c 	clz	r2, ip
 8000d76:	3a08      	subs	r2, #8
 8000d78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d7c:	db10      	blt.n	8000da0 <__aeabi_l2f+0x5c>
 8000d7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d82:	4463      	add	r3, ip
 8000d84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d90:	fa20 f202 	lsr.w	r2, r0, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f102 0220 	add.w	r2, r2, #32
 8000da4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db0:	fa21 f202 	lsr.w	r2, r1, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b970 	b.w	80010b8 <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9e08      	ldr	r6, [sp, #32]
 8000df6:	460d      	mov	r5, r1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	460f      	mov	r7, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14a      	bne.n	8000e96 <__udivmoddi4+0xa6>
 8000e00:	428a      	cmp	r2, r1
 8000e02:	4694      	mov	ip, r2
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0xe2>
 8000e06:	fab2 f382 	clz	r3, r2
 8000e0a:	b143      	cbz	r3, 8000e1e <__udivmoddi4+0x2e>
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	f1c3 0220 	rsb	r2, r3, #32
 8000e14:	409f      	lsls	r7, r3
 8000e16:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e22:	fa1f f58c 	uxth.w	r5, ip
 8000e26:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2a:	0c22      	lsrs	r2, r4, #16
 8000e2c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e30:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e34:	fb01 f005 	mul.w	r0, r1, r5
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x62>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e44:	f080 811c 	bcs.w	8001080 <__udivmoddi4+0x290>
 8000e48:	4290      	cmp	r0, r2
 8000e4a:	f240 8119 	bls.w	8001080 <__udivmoddi4+0x290>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4462      	add	r2, ip
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	b2a4      	uxth	r4, r4
 8000e56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e62:	fb00 f505 	mul.w	r5, r0, r5
 8000e66:	42a5      	cmp	r5, r4
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x90>
 8000e6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e72:	f080 8107 	bcs.w	8001084 <__udivmoddi4+0x294>
 8000e76:	42a5      	cmp	r5, r4
 8000e78:	f240 8104 	bls.w	8001084 <__udivmoddi4+0x294>
 8000e7c:	4464      	add	r4, ip
 8000e7e:	3802      	subs	r0, #2
 8000e80:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	2100      	movs	r1, #0
 8000e88:	b11e      	cbz	r6, 8000e92 <__udivmoddi4+0xa2>
 8000e8a:	40dc      	lsrs	r4, r3
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e9c6 4300 	strd	r4, r3, [r6]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0xbc>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	f000 80ed 	beq.w	800107a <__udivmoddi4+0x28a>
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eac:	fab3 f183 	clz	r1, r3
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d149      	bne.n	8000f48 <__udivmoddi4+0x158>
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	d302      	bcc.n	8000ebe <__udivmoddi4+0xce>
 8000eb8:	4282      	cmp	r2, r0
 8000eba:	f200 80f8 	bhi.w	80010ae <__udivmoddi4+0x2be>
 8000ebe:	1a84      	subs	r4, r0, r2
 8000ec0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	4617      	mov	r7, r2
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d0e2      	beq.n	8000e92 <__udivmoddi4+0xa2>
 8000ecc:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed0:	e7df      	b.n	8000e92 <__udivmoddi4+0xa2>
 8000ed2:	b902      	cbnz	r2, 8000ed6 <__udivmoddi4+0xe6>
 8000ed4:	deff      	udf	#255	; 0xff
 8000ed6:	fab2 f382 	clz	r3, r2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 8090 	bne.w	8001000 <__udivmoddi4+0x210>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee6:	fa1f fe8c 	uxth.w	lr, ip
 8000eea:	2101      	movs	r1, #1
 8000eec:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef0:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef4:	0c22      	lsrs	r2, r4, #16
 8000ef6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efa:	fb0e f005 	mul.w	r0, lr, r5
 8000efe:	4290      	cmp	r0, r2
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x124>
 8000f02:	eb1c 0202 	adds.w	r2, ip, r2
 8000f06:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0a:	d202      	bcs.n	8000f12 <__udivmoddi4+0x122>
 8000f0c:	4290      	cmp	r0, r2
 8000f0e:	f200 80cb 	bhi.w	80010a8 <__udivmoddi4+0x2b8>
 8000f12:	4645      	mov	r5, r8
 8000f14:	1a12      	subs	r2, r2, r0
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f1c:	fb07 2210 	mls	r2, r7, r0, r2
 8000f20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f24:	fb0e fe00 	mul.w	lr, lr, r0
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x14e>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f34:	d202      	bcs.n	8000f3c <__udivmoddi4+0x14c>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	f200 80bb 	bhi.w	80010b2 <__udivmoddi4+0x2c2>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	eba4 040e 	sub.w	r4, r4, lr
 8000f42:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f46:	e79f      	b.n	8000e88 <__udivmoddi4+0x98>
 8000f48:	f1c1 0720 	rsb	r7, r1, #32
 8000f4c:	408b      	lsls	r3, r1
 8000f4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f56:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f5e:	40fd      	lsrs	r5, r7
 8000f60:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f64:	4323      	orrs	r3, r4
 8000f66:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6a:	fa1f fe8c 	uxth.w	lr, ip
 8000f6e:	fb09 5518 	mls	r5, r9, r8, r5
 8000f72:	0c1c      	lsrs	r4, r3, #16
 8000f74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f78:	fb08 f50e 	mul.w	r5, r8, lr
 8000f7c:	42a5      	cmp	r5, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	fa00 f001 	lsl.w	r0, r0, r1
 8000f86:	d90b      	bls.n	8000fa0 <__udivmoddi4+0x1b0>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f90:	f080 8088 	bcs.w	80010a4 <__udivmoddi4+0x2b4>
 8000f94:	42a5      	cmp	r5, r4
 8000f96:	f240 8085 	bls.w	80010a4 <__udivmoddi4+0x2b4>
 8000f9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9e:	4464      	add	r4, ip
 8000fa0:	1b64      	subs	r4, r4, r5
 8000fa2:	b29d      	uxth	r5, r3
 8000fa4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb4:	45a6      	cmp	lr, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x1da>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc0:	d26c      	bcs.n	800109c <__udivmoddi4+0x2ac>
 8000fc2:	45a6      	cmp	lr, r4
 8000fc4:	d96a      	bls.n	800109c <__udivmoddi4+0x2ac>
 8000fc6:	3b02      	subs	r3, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fce:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd2:	eba4 040e 	sub.w	r4, r4, lr
 8000fd6:	42ac      	cmp	r4, r5
 8000fd8:	46c8      	mov	r8, r9
 8000fda:	46ae      	mov	lr, r5
 8000fdc:	d356      	bcc.n	800108c <__udivmoddi4+0x29c>
 8000fde:	d053      	beq.n	8001088 <__udivmoddi4+0x298>
 8000fe0:	b156      	cbz	r6, 8000ff8 <__udivmoddi4+0x208>
 8000fe2:	ebb0 0208 	subs.w	r2, r0, r8
 8000fe6:	eb64 040e 	sbc.w	r4, r4, lr
 8000fea:	fa04 f707 	lsl.w	r7, r4, r7
 8000fee:	40ca      	lsrs	r2, r1
 8000ff0:	40cc      	lsrs	r4, r1
 8000ff2:	4317      	orrs	r7, r2
 8000ff4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001000:	f1c3 0120 	rsb	r1, r3, #32
 8001004:	fa02 fc03 	lsl.w	ip, r2, r3
 8001008:	fa20 f201 	lsr.w	r2, r0, r1
 800100c:	fa25 f101 	lsr.w	r1, r5, r1
 8001010:	409d      	lsls	r5, r3
 8001012:	432a      	orrs	r2, r5
 8001014:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001018:	fa1f fe8c 	uxth.w	lr, ip
 800101c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001020:	fb07 1510 	mls	r5, r7, r0, r1
 8001024:	0c11      	lsrs	r1, r2, #16
 8001026:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102a:	fb00 f50e 	mul.w	r5, r0, lr
 800102e:	428d      	cmp	r5, r1
 8001030:	fa04 f403 	lsl.w	r4, r4, r3
 8001034:	d908      	bls.n	8001048 <__udivmoddi4+0x258>
 8001036:	eb1c 0101 	adds.w	r1, ip, r1
 800103a:	f100 38ff 	add.w	r8, r0, #4294967295
 800103e:	d22f      	bcs.n	80010a0 <__udivmoddi4+0x2b0>
 8001040:	428d      	cmp	r5, r1
 8001042:	d92d      	bls.n	80010a0 <__udivmoddi4+0x2b0>
 8001044:	3802      	subs	r0, #2
 8001046:	4461      	add	r1, ip
 8001048:	1b49      	subs	r1, r1, r5
 800104a:	b292      	uxth	r2, r2
 800104c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001050:	fb07 1115 	mls	r1, r7, r5, r1
 8001054:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001058:	fb05 f10e 	mul.w	r1, r5, lr
 800105c:	4291      	cmp	r1, r2
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x282>
 8001060:	eb1c 0202 	adds.w	r2, ip, r2
 8001064:	f105 38ff 	add.w	r8, r5, #4294967295
 8001068:	d216      	bcs.n	8001098 <__udivmoddi4+0x2a8>
 800106a:	4291      	cmp	r1, r2
 800106c:	d914      	bls.n	8001098 <__udivmoddi4+0x2a8>
 800106e:	3d02      	subs	r5, #2
 8001070:	4462      	add	r2, ip
 8001072:	1a52      	subs	r2, r2, r1
 8001074:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001078:	e738      	b.n	8000eec <__udivmoddi4+0xfc>
 800107a:	4631      	mov	r1, r6
 800107c:	4630      	mov	r0, r6
 800107e:	e708      	b.n	8000e92 <__udivmoddi4+0xa2>
 8001080:	4639      	mov	r1, r7
 8001082:	e6e6      	b.n	8000e52 <__udivmoddi4+0x62>
 8001084:	4610      	mov	r0, r2
 8001086:	e6fb      	b.n	8000e80 <__udivmoddi4+0x90>
 8001088:	4548      	cmp	r0, r9
 800108a:	d2a9      	bcs.n	8000fe0 <__udivmoddi4+0x1f0>
 800108c:	ebb9 0802 	subs.w	r8, r9, r2
 8001090:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001094:	3b01      	subs	r3, #1
 8001096:	e7a3      	b.n	8000fe0 <__udivmoddi4+0x1f0>
 8001098:	4645      	mov	r5, r8
 800109a:	e7ea      	b.n	8001072 <__udivmoddi4+0x282>
 800109c:	462b      	mov	r3, r5
 800109e:	e794      	b.n	8000fca <__udivmoddi4+0x1da>
 80010a0:	4640      	mov	r0, r8
 80010a2:	e7d1      	b.n	8001048 <__udivmoddi4+0x258>
 80010a4:	46d0      	mov	r8, sl
 80010a6:	e77b      	b.n	8000fa0 <__udivmoddi4+0x1b0>
 80010a8:	3d02      	subs	r5, #2
 80010aa:	4462      	add	r2, ip
 80010ac:	e732      	b.n	8000f14 <__udivmoddi4+0x124>
 80010ae:	4608      	mov	r0, r1
 80010b0:	e70a      	b.n	8000ec8 <__udivmoddi4+0xd8>
 80010b2:	4464      	add	r4, ip
 80010b4:	3802      	subs	r0, #2
 80010b6:	e742      	b.n	8000f3e <__udivmoddi4+0x14e>

080010b8 <__aeabi_idiv0>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <Heartbeat>:
extern GetValue Value;
extern STATE;
extern test;


void Heartbeat(){
 80010bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c0:	af00      	add	r7, sp, #0
	static uint64_t timestamp = 0;
	  if(HAL_GetTick() >= timestamp)
 80010c2:	f003 fa57 	bl	8004574 <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2200      	movs	r2, #0
 80010ca:	461c      	mov	r4, r3
 80010cc:	4615      	mov	r5, r2
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <Heartbeat+0x44>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	4294      	cmp	r4, r2
 80010d6:	eb75 0303 	sbcs.w	r3, r5, r3
 80010da:	d30d      	bcc.n	80010f8 <Heartbeat+0x3c>
	  {
		  timestamp += 200;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <Heartbeat+0x44>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 80010e6:	f143 0900 	adc.w	r9, r3, #0
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <Heartbeat+0x44>)
 80010ec:	e9c3 8900 	strd	r8, r9, [r3]
		  registerFrame[0x00].U16 = 22881;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <Heartbeat+0x48>)
 80010f2:	f645 1261 	movw	r2, #22881	; 0x5961
 80010f6:	801a      	strh	r2, [r3, #0]
	  }
}
 80010f8:	bf00      	nop
 80010fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010fe:	bf00      	nop
 8001100:	200002a0 	.word	0x200002a0
 8001104:	200010b8 	.word	0x200010b8

08001108 <Routine>:

void Routine(QEIStructureTypeDef *QEI){
 8001108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	static uint64_t timestamp2 = 0;
	if(HAL_GetTick() >= timestamp2 && registerFrame[0x00].U16 == 18537) //ส่งค่าพวกนี้หลังจาก BaseSytem อ่าน Heartbeat ทุกๆ 200 ms
 8001112:	f003 fa2f 	bl	8004574 <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
 8001118:	2200      	movs	r2, #0
 800111a:	461c      	mov	r4, r3
 800111c:	4615      	mov	r5, r2
 800111e:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <Routine+0x150>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	4294      	cmp	r4, r2
 8001126:	eb75 0303 	sbcs.w	r3, r5, r3
 800112a:	f0c0 8090 	bcc.w	800124e <Routine+0x146>
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <Routine+0x154>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	f644 0269 	movw	r2, #18537	; 0x4869
 8001136:	4293      	cmp	r3, r2
 8001138:	f040 8089 	bne.w	800124e <Routine+0x146>
	{
	timestamp2 += 200;
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <Routine+0x150>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8001146:	f143 0900 	adc.w	r9, r3, #0
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <Routine+0x150>)
 800114c:	e9c3 8900 	strd	r8, r9, [r3]

	//Check Lead
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) registerFrame[0x04].U16 = 0b0010;
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f005 fb40 	bl	80067dc <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <Routine+0x62>
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <Routine+0x154>)
 8001164:	2202      	movs	r2, #2
 8001166:	811a      	strh	r2, [r3, #8]
 8001168:	e00d      	b.n	8001186 <Routine+0x7e>
	else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)) registerFrame[0x04].U16 = 0b0001;
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	483c      	ldr	r0, [pc, #240]	; (8001260 <Routine+0x158>)
 800116e:	f005 fb35 	bl	80067dc <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <Routine+0x78>
 8001178:	4b38      	ldr	r3, [pc, #224]	; (800125c <Routine+0x154>)
 800117a:	2201      	movs	r2, #1
 800117c:	811a      	strh	r2, [r3, #8]
 800117e:	e002      	b.n	8001186 <Routine+0x7e>
	else registerFrame[0x04].U16 = 0b0000;
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <Routine+0x154>)
 8001182:	2200      	movs	r2, #0
 8001184:	811a      	strh	r2, [r3, #8]

	registerFrame[0x10].U16 = status.Z_Status; //Z-axis Moving Status
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <Routine+0x15c>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <Routine+0x154>)
 800118e:	841a      	strh	r2, [r3, #32]
	registerFrame[0x11].U16 = (int16_t)(QEI->LinearPosition * 10); //Z-axis Actual Position = 19 ค่าจริง*10
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001196:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <Routine+0x154>)
 80011ac:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[0x12].U16 = (uint16_t)(fabs(QEI->LinearVelocity * 10)); //Z-axis Actual Speed = 20
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	eef0 7ae7 	vabs.f32	s15, s15
 80011c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c4:	ee17 3a90 	vmov	r3, s15
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <Routine+0x154>)
 80011cc:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[0x13].U16 = (uint16_t)(fabs(QEI->LinearAcceleration * 10)); //Z-axis Acceleration = 21
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	eef0 7ae7 	vabs.f32	s15, s15
 80011e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e4:	ee17 3a90 	vmov	r3, s15
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <Routine+0x154>)
 80011ec:	84da      	strh	r2, [r3, #38]	; 0x26
	registerFrame[0x40].U16 = 22*10; //X-axis Actual Position = 2
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <Routine+0x154>)
 80011f0:	22dc      	movs	r2, #220	; 0xdc
 80011f2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		if(registerFrame[0x02].U16 == 0b0000)
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <Routine+0x154>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d108      	bne.n	8001210 <Routine+0x108>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2120      	movs	r1, #32
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <Routine+0x158>)
 8001204:	f005 fb02 	bl	800680c <HAL_GPIO_WritePin>
			status.VacuumState = 0; //Off
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <Routine+0x15c>)
 800120a:	2200      	movs	r2, #0
 800120c:	805a      	strh	r2, [r3, #2]
 800120e:	e00b      	b.n	8001228 <Routine+0x120>
		}
		else if(registerFrame[0x02].U16 == 0b0001)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <Routine+0x154>)
 8001212:	889b      	ldrh	r3, [r3, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <Routine+0x120>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2120      	movs	r1, #32
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <Routine+0x158>)
 800121e:	f005 faf5 	bl	800680c <HAL_GPIO_WritePin>
			status.VacuumState = 1;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <Routine+0x15c>)
 8001224:	2201      	movs	r2, #1
 8001226:	805a      	strh	r2, [r3, #2]
		}

		if(registerFrame[0x03].U16 == 0b0000)
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <Routine+0x154>)
 800122a:	88db      	ldrh	r3, [r3, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <Routine+0x134>
		{
			SolenoidPull();
 8001230:	f001 fd7c 	bl	8002d2c <SolenoidPull>
			status.GripperState = 0; //Backward
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <Routine+0x15c>)
 8001236:	2200      	movs	r2, #0
 8001238:	809a      	strh	r2, [r3, #4]
		{
			SolenoidPush();
			status.GripperState = 1; //Forward
		}
	}
}
 800123a:	e008      	b.n	800124e <Routine+0x146>
		else if(registerFrame[0x03].U16 == 0b0001)
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <Routine+0x154>)
 800123e:	88db      	ldrh	r3, [r3, #6]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d104      	bne.n	800124e <Routine+0x146>
			SolenoidPush();
 8001244:	f001 fd4a 	bl	8002cdc <SolenoidPush>
			status.GripperState = 1; //Forward
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <Routine+0x15c>)
 800124a:	2201      	movs	r2, #1
 800124c:	809a      	strh	r2, [r3, #4]
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001258:	200002a8 	.word	0x200002a8
 800125c:	200010b8 	.word	0x200010b8
 8001260:	48000800 	.word	0x48000800
 8001264:	20001248 	.word	0x20001248

08001268 <GetGoalPoint>:
		status.Z_Status = 0; // z-axis reset BaseSystem status
		registerFrame[0x10].U16 = status.Z_Status;
		}

}
void GetGoalPoint(){
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	//if(registerFrame[0x01].U16 == 8){ // if run point mode
		Value.GoalPoint = (registerFrame[0x30].U16)/10 ; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <GetGoalPoint+0x24>)
 800126e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <GetGoalPoint+0x28>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <GetGoalPoint+0x2c>)
 800127e:	801a      	strh	r2, [r3, #0]
		 //ค่าที่ได้จาก BaseSytem จะได้ค่าที่เรากรอก*10 ดังนั้นต้องหาร10 ถึงจะได้ค่าจริงที่เรากรอก
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200010b8 	.word	0x200010b8
 8001290:	cccccccd 	.word	0xcccccccd
 8001294:	20001260 	.word	0x20001260

08001298 <GetPick_PlaceOrder>:
		registerFrame[0x10].U16 = status.Z_Status; // reset z-axis moving state after finish homing
		}
	}
}

void GetPick_PlaceOrder(JoystickStructureTypeDef *joy){
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	//if(registerFrame[0x01].U16 == 4){ // after pressing run button on Jogmode (before running)
		Value.PickOrder = registerFrame[0x21].U16 ; // ค่าชั้นที่ต้อง Pick from BaseSystem
 80012a0:	4ba5      	ldr	r3, [pc, #660]	; (8001538 <GetPick_PlaceOrder+0x2a0>)
 80012a2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80012a6:	4ba5      	ldr	r3, [pc, #660]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012a8:	805a      	strh	r2, [r3, #2]
		Value.PlaceOrder = registerFrame[0x22].U16 ;// ค่าชั้นที่ต้อง Place from BaseSystem
 80012aa:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <GetPick_PlaceOrder+0x2a0>)
 80012ac:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80012b0:	4ba2      	ldr	r3, [pc, #648]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012b2:	809a      	strh	r2, [r3, #4]

		Value.Pick[0] = Value.PickOrder / 10000;                     // Most significant digit (ten-thousands place)
 80012b4:	4ba1      	ldr	r3, [pc, #644]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012b6:	885b      	ldrh	r3, [r3, #2]
 80012b8:	4aa1      	ldr	r2, [pc, #644]	; (8001540 <GetPick_PlaceOrder+0x2a8>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0b5b      	lsrs	r3, r3, #13
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012c4:	80da      	strh	r2, [r3, #6]
		Value.Pick[1] = (Value.PickOrder % 10000) / 1000;            // Thousands place
 80012c6:	4b9d      	ldr	r3, [pc, #628]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012c8:	885b      	ldrh	r3, [r3, #2]
 80012ca:	4a9d      	ldr	r2, [pc, #628]	; (8001540 <GetPick_PlaceOrder+0x2a8>)
 80012cc:	fba2 1203 	umull	r1, r2, r2, r3
 80012d0:	0b52      	lsrs	r2, r2, #13
 80012d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80012d6:	fb01 f202 	mul.w	r2, r1, r2
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4a99      	ldr	r2, [pc, #612]	; (8001544 <GetPick_PlaceOrder+0x2ac>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b94      	ldr	r3, [pc, #592]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012ea:	811a      	strh	r2, [r3, #8]
		Value.Pick[2] = (Value.PickOrder % 1000) / 100;              // Hundreds place
 80012ec:	4b93      	ldr	r3, [pc, #588]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80012ee:	885b      	ldrh	r3, [r3, #2]
 80012f0:	4a94      	ldr	r2, [pc, #592]	; (8001544 <GetPick_PlaceOrder+0x2ac>)
 80012f2:	fba2 1203 	umull	r1, r2, r2, r3
 80012f6:	0992      	lsrs	r2, r2, #6
 80012f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012fc:	fb01 f202 	mul.w	r2, r1, r2
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	b29b      	uxth	r3, r3
 8001304:	4a90      	ldr	r2, [pc, #576]	; (8001548 <GetPick_PlaceOrder+0x2b0>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001310:	815a      	strh	r2, [r3, #10]
		Value.Pick[3] = (Value.PickOrder % 100) / 10;                // Tens place
 8001312:	4b8a      	ldr	r3, [pc, #552]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	4a8c      	ldr	r2, [pc, #560]	; (8001548 <GetPick_PlaceOrder+0x2b0>)
 8001318:	fba2 1203 	umull	r1, r2, r2, r3
 800131c:	0952      	lsrs	r2, r2, #5
 800131e:	2164      	movs	r1, #100	; 0x64
 8001320:	fb01 f202 	mul.w	r2, r1, r2
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	4a88      	ldr	r2, [pc, #544]	; (800154c <GetPick_PlaceOrder+0x2b4>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001334:	819a      	strh	r2, [r3, #12]
		Value.Pick[4] = Value.PickOrder % 10;
 8001336:	4b81      	ldr	r3, [pc, #516]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001338:	885a      	ldrh	r2, [r3, #2]
 800133a:	4b84      	ldr	r3, [pc, #528]	; (800154c <GetPick_PlaceOrder+0x2b4>)
 800133c:	fba3 1302 	umull	r1, r3, r3, r2
 8001340:	08d9      	lsrs	r1, r3, #3
 8001342:	460b      	mov	r3, r1
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b7b      	ldr	r3, [pc, #492]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001350:	81da      	strh	r2, [r3, #14]

		Value.Place[0] = Value.PlaceOrder / 10000;                     // Most significant digit (ten-thousands place)
 8001352:	4b7a      	ldr	r3, [pc, #488]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <GetPick_PlaceOrder+0x2a8>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0b5b      	lsrs	r3, r3, #13
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b76      	ldr	r3, [pc, #472]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001362:	821a      	strh	r2, [r3, #16]
		Value.Place[1] = (Value.PlaceOrder % 10000) / 1000;            // Thousands place
 8001364:	4b75      	ldr	r3, [pc, #468]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001366:	889b      	ldrh	r3, [r3, #4]
 8001368:	4a75      	ldr	r2, [pc, #468]	; (8001540 <GetPick_PlaceOrder+0x2a8>)
 800136a:	fba2 1203 	umull	r1, r2, r2, r3
 800136e:	0b52      	lsrs	r2, r2, #13
 8001370:	f242 7110 	movw	r1, #10000	; 0x2710
 8001374:	fb01 f202 	mul.w	r2, r1, r2
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	b29b      	uxth	r3, r3
 800137c:	4a71      	ldr	r2, [pc, #452]	; (8001544 <GetPick_PlaceOrder+0x2ac>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b6d      	ldr	r3, [pc, #436]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001388:	825a      	strh	r2, [r3, #18]
		Value.Place[2] = (Value.PlaceOrder % 1000) / 100;              // Hundreds place
 800138a:	4b6c      	ldr	r3, [pc, #432]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	4a6d      	ldr	r2, [pc, #436]	; (8001544 <GetPick_PlaceOrder+0x2ac>)
 8001390:	fba2 1203 	umull	r1, r2, r2, r3
 8001394:	0992      	lsrs	r2, r2, #6
 8001396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800139a:	fb01 f202 	mul.w	r2, r1, r2
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4a69      	ldr	r2, [pc, #420]	; (8001548 <GetPick_PlaceOrder+0x2b0>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b63      	ldr	r3, [pc, #396]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80013ae:	829a      	strh	r2, [r3, #20]
		Value.Place[3] = (Value.PlaceOrder % 100) / 10;                // Tens place
 80013b0:	4b62      	ldr	r3, [pc, #392]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	4a64      	ldr	r2, [pc, #400]	; (8001548 <GetPick_PlaceOrder+0x2b0>)
 80013b6:	fba2 1203 	umull	r1, r2, r2, r3
 80013ba:	0952      	lsrs	r2, r2, #5
 80013bc:	2164      	movs	r1, #100	; 0x64
 80013be:	fb01 f202 	mul.w	r2, r1, r2
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4a61      	ldr	r2, [pc, #388]	; (800154c <GetPick_PlaceOrder+0x2b4>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80013d2:	82da      	strh	r2, [r3, #22]
		Value.Place[4] = Value.PlaceOrder % 10;
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80013d6:	889a      	ldrh	r2, [r3, #4]
 80013d8:	4b5c      	ldr	r3, [pc, #368]	; (800154c <GetPick_PlaceOrder+0x2b4>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	08d9      	lsrs	r1, r3, #3
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80013ee:	831a      	strh	r2, [r3, #24]

		Value.PointPosition[0] = joy->PointPosition[0];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80013f6:	4a51      	ldr	r2, [pc, #324]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80013f8:	61d3      	str	r3, [r2, #28]
		Value.PointPosition[1] = joy->PointPosition[1];
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001402:	6213      	str	r3, [r2, #32]
		Value.PointPosition[2] = joy->PointPosition[2];
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800140a:	4a4c      	ldr	r2, [pc, #304]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800140c:	6253      	str	r3, [r2, #36]	; 0x24
		Value.PointPosition[3] = joy->PointPosition[3];
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001416:	6293      	str	r3, [r2, #40]	; 0x28
		Value.PointPosition[4] = joy->PointPosition[4];
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001420:	62d3      	str	r3, [r2, #44]	; 0x2c

		Value.TargetPoint[0]	=	Value.Pick[0];
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001424:	88db      	ldrh	r3, [r3, #6]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001430:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		Value.TargetPoint[1]	=	Value.Place[0];
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001436:	8a1b      	ldrh	r3, [r3, #16]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001440:	4b3e      	ldr	r3, [pc, #248]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001442:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		Value.TargetPoint[2]	=	Value.Pick[1];
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001448:	891b      	ldrh	r3, [r3, #8]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001454:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		Value.TargetPoint[3]	=	Value.Place[1];
 8001458:	4b38      	ldr	r3, [pc, #224]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800145a:	8a5b      	ldrh	r3, [r3, #18]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001466:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		Value.TargetPoint[4]	=	Value.Pick[2];
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800146c:	895b      	ldrh	r3, [r3, #10]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001478:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		Value.TargetPoint[5]	=	Value.Place[2];
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800147e:	8a9b      	ldrh	r3, [r3, #20]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800148a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		Value.TargetPoint[6]	=	Value.Pick[3];
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001490:	899b      	ldrh	r3, [r3, #12]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800149c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		Value.TargetPoint[7]	=	Value.Place[3];
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014a2:	8adb      	ldrh	r3, [r3, #22]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014ae:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		Value.TargetPoint[8]	=	Value.Pick[4];
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014b4:	89db      	ldrh	r3, [r3, #14]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014c0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		Value.TargetPoint[9]	=	Value.Place[4];
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014c6:	8b1b      	ldrh	r3, [r3, #24]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014d2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		for(int i = 0; i < 10; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e080      	b.n	80015de <GetPick_PlaceOrder+0x346>
		{
			if(Value.TargetPoint[i] == 1) Value.TargetPosition[i] = Value.PointPosition[0];
 80014dc:	4a17      	ldr	r2, [pc, #92]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	330c      	adds	r3, #12
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ee:	eef4 7a47 	vcmp.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d108      	bne.n	800150a <GetPick_PlaceOrder+0x272>
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014fa:	69da      	ldr	r2, [r3, #28]
 80014fc:	490f      	ldr	r1, [pc, #60]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3316      	adds	r3, #22
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e066      	b.n	80015d8 <GetPick_PlaceOrder+0x340>
			else if(Value.TargetPoint[i] == 2) Value.TargetPosition[i] = Value.PointPosition[1];
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	330c      	adds	r3, #12
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800151c:	eef4 7a47 	vcmp.f32	s15, s14
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d114      	bne.n	8001550 <GetPick_PlaceOrder+0x2b8>
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	4904      	ldr	r1, [pc, #16]	; (800153c <GetPick_PlaceOrder+0x2a4>)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3316      	adds	r3, #22
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e04f      	b.n	80015d8 <GetPick_PlaceOrder+0x340>
 8001538:	200010b8 	.word	0x200010b8
 800153c:	20001260 	.word	0x20001260
 8001540:	d1b71759 	.word	0xd1b71759
 8001544:	10624dd3 	.word	0x10624dd3
 8001548:	51eb851f 	.word	0x51eb851f
 800154c:	cccccccd 	.word	0xcccccccd
			else if(Value.TargetPoint[i] == 3) Value.TargetPosition[i] = Value.PointPosition[2];
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	330c      	adds	r3, #12
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001562:	eef4 7a47 	vcmp.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d108      	bne.n	800157e <GetPick_PlaceOrder+0x2e6>
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 800156e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001570:	4920      	ldr	r1, [pc, #128]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3316      	adds	r3, #22
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e02c      	b.n	80015d8 <GetPick_PlaceOrder+0x340>
			else if(Value.TargetPoint[i] == 4) Value.TargetPosition[i] = Value.PointPosition[3];
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	330c      	adds	r3, #12
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001590:	eef4 7a47 	vcmp.f32	s15, s14
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d108      	bne.n	80015ac <GetPick_PlaceOrder+0x314>
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 800159c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159e:	4915      	ldr	r1, [pc, #84]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3316      	adds	r3, #22
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e015      	b.n	80015d8 <GetPick_PlaceOrder+0x340>
			else if(Value.TargetPoint[i] == 5) Value.TargetPosition[i] = Value.PointPosition[4];
 80015ac:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80015be:	eef4 7a47 	vcmp.f32	s15, s14
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	d107      	bne.n	80015d8 <GetPick_PlaceOrder+0x340>
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 80015ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015cc:	4909      	ldr	r1, [pc, #36]	; (80015f4 <GetPick_PlaceOrder+0x35c>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3316      	adds	r3, #22
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 10; i++)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	f77f af7b 	ble.w	80014dc <GetPick_PlaceOrder+0x244>
		}
		//ค่าที่ได้จะเรียงติดกัน ex.ถ้าเซ็ตค่าในUIชั้นแรกที่ต้อง Pick คือ ชั้น1-5 ตามลำดับ ค่าชั้นที่ต้องPick จะได้ 12345
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20001260 	.word	0x20001260

080015f8 <PIDController_Init>:
uint32_t Saturation = 1000;
extern TIM_HandleTypeDef htim4;
float tolerance = 0.005;

void PIDController_Init(PIDStructureTypeDef* PID,float FWKp ,float FWKi , float FWKd, float BWKp ,float BWKi , float BWKd)	// Initialize PID Variable
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	61f8      	str	r0, [r7, #28]
 8001600:	ed87 0a06 	vstr	s0, [r7, #24]
 8001604:	edc7 0a05 	vstr	s1, [r7, #20]
 8001608:	ed87 1a04 	vstr	s2, [r7, #16]
 800160c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001610:	ed87 2a02 	vstr	s4, [r7, #8]
 8001614:	edc7 2a01 	vstr	s5, [r7, #4]
	PID->FWKp = FWKp;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	601a      	str	r2, [r3, #0]
	PID->FWKi = FWKi;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	605a      	str	r2, [r3, #4]
	PID->FWKd = FWKd;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]

	PID->BWKp = BWKp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	60da      	str	r2, [r3, #12]
	PID->BWKi = BWKi;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	611a      	str	r2, [r3, #16]
	PID->BWKd = BWKd;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	615a      	str	r2, [r3, #20]


	PID->Error[0] = 0;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
	PID->Error[2] = 0;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
	PID->Command = 0;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	PID->Command_1 = 0;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001664:	bf00      	nop
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <Motor_Control>:

void Motor_Control(int32_t cmd)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if(cmd > 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dd05      	ble.n	800168a <Motor_Control+0x1a>
 800167e:	2201      	movs	r2, #1
 8001680:	2110      	movs	r1, #16
 8001682:	4810      	ldr	r0, [pc, #64]	; (80016c4 <Motor_Control+0x54>)
 8001684:	f005 f8c2 	bl	800680c <HAL_GPIO_WritePin>
 8001688:	e007      	b.n	800169a <Motor_Control+0x2a>
	else if (cmd < 0)  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	da04      	bge.n	800169a <Motor_Control+0x2a>
 8001690:	2200      	movs	r2, #0
 8001692:	2110      	movs	r1, #16
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <Motor_Control+0x54>)
 8001696:	f005 f8b9 	bl	800680c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,fabs(cmd));
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe ff0e 	bl	80004bc <__aeabi_i2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <Motor_Control+0x58>)
 80016ac:	681e      	ldr	r6, [r3, #0]
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7ff fa07 	bl	8000ac4 <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	63b3      	str	r3, [r6, #56]	; 0x38
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	48000800 	.word	0x48000800
 80016c8:	20000564 	.word	0x20000564

080016cc <PIDControllerPosition_Command>:


void PIDControllerPosition_Command(PIDStructureTypeDef* PID,QEIStructureTypeDef* Feedback,float setpoint)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	ed87 0a01 	vstr	s0, [r7, #4]
	PID->Error[0] = setpoint - Feedback->LinearPosition;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	edc3 7a06 	vstr	s15, [r3, #24]
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]*/

	if (fabs(PID->Error[0]) > tolerance)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80016f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80016f8:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <PIDControllerPosition_Command+0x198>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dd7b      	ble.n	8001800 <PIDControllerPosition_Command+0x134>
	{
		if (PID->Error[0] >= 0)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edd3 7a06 	vldr	s15, [r3, #24]
 800170e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	db35      	blt.n	8001784 <PIDControllerPosition_Command+0xb8>
		 {
			PID->Command = PID->Command_1 +
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->FWKp + PID->FWKi + PID->FWKd)*PID->Error[0])
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	edd3 6a00 	vldr	s13, [r3]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	edd3 7a01 	vldr	s15, [r3, #4]
 800172a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	edd3 7a02 	vldr	s15, [r3, #8]
 8001734:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	edd3 7a06 	vldr	s15, [r3, #24]
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 8001742:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->FWKp+(2*PID->FWKd))*PID->Error[1])
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	edd3 6a00 	vldr	s13, [r3]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001752:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001756:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->FWKd*PID->Error[2]);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	edd3 6a02 	vldr	s13, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	edd3 7a08 	vldr	s15, [r3, #32]
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001782:	e041      	b.n	8001808 <PIDControllerPosition_Command+0x13c>
		 }
		else if (PID->Error[0] < 0)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	edd3 7a06 	vldr	s15, [r3, #24]
 800178a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d539      	bpl.n	8001808 <PIDControllerPosition_Command+0x13c>
		{
			PID->Command = PID->Command_1 +
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->BWKp + PID->BWKi + PID->BWKd)*PID->Error[0])
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	edd3 6a03 	vldr	s13, [r3, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80017a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80017b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 80017be:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->BWKp+(2*PID->BWKd))*PID->Error[1])
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80017dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e0:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->BWKd*PID->Error[2]);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	edd3 6a05 	vldr	s13, [r3, #20]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80017fe:	e003      	b.n	8001808 <PIDControllerPosition_Command+0x13c>
		}
	}
	else PID->Command = 0;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	; 0x24

	if(PID->Command >= 550) PID->Command = 550;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800180e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001868 <PIDControllerPosition_Command+0x19c>
 8001812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	db03      	blt.n	8001824 <PIDControllerPosition_Command+0x158>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <PIDControllerPosition_Command+0x1a0>)
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
 8001822:	e00c      	b.n	800183e <PIDControllerPosition_Command+0x172>
	else if (PID->Command <= -550) PID->Command = -550;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800182a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001870 <PIDControllerPosition_Command+0x1a4>
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d802      	bhi.n	800183e <PIDControllerPosition_Command+0x172>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <PIDControllerPosition_Command+0x1a8>)
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
	// Implement PID Velocity Form Algorithm

	/* Update Variable */
	PID->Command_1 = PID->Command;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
	PID->Error[2] = PID->Error[1];
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	621a      	str	r2, [r3, #32]
	PID->Error[1] = PID->Error[0];
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	61da      	str	r2, [r3, #28]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000
 8001868:	44098000 	.word	0x44098000
 800186c:	44098000 	.word	0x44098000
 8001870:	c4098000 	.word	0xc4098000
 8001874:	c4098000 	.word	0xc4098000

08001878 <PIDControllerVelocity_Command>:

void PIDControllerVelocity_Command(PIDStructureTypeDef* PID,QEIStructureTypeDef* Feedback,float setpoint)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	ed87 0a01 	vstr	s0, [r7, #4]
	PID->Error[0] = setpoint - Feedback->LinearVelocity;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800188c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	edc3 7a06 	vstr	s15, [r3, #24]
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */

//    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0)))


		if (PID->Error[0] >= 0)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	edd3 7a06 	vldr	s15, [r3, #24]
 80018a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	db35      	blt.n	8001916 <PIDControllerVelocity_Command+0x9e>
		 {
			PID->Command = PID->Command_1 +
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->FWKp + PID->FWKi + PID->FWKd)*PID->Error[0])
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	edd3 6a00 	vldr	s13, [r3]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80018d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 80018d4:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->FWKp+(2*PID->FWKd))*PID->Error[1])
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	edd3 6a00 	vldr	s13, [r3]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->FWKd*PID->Error[2]);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 7a08 	vldr	s15, [r3, #32]
 8001906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001914:	e03c      	b.n	8001990 <PIDControllerVelocity_Command+0x118>
		 }
		else if (PID->Error[0] < 0)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edd3 7a06 	vldr	s15, [r3, #24]
 800191c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d534      	bpl.n	8001990 <PIDControllerVelocity_Command+0x118>
		{
			PID->Command = PID->Command_1 +
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					((PID->BWKp + PID->BWKi + PID->BWKd)*PID->Error[0])
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	edd3 7a04 	vldr	s15, [r3, #16]
 8001938:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001942:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	edd3 7a06 	vldr	s15, [r3, #24]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID->Command = PID->Command_1 +
 8001950:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((PID->BWKp+(2*PID->BWKd))*PID->Error[1])
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	edd3 6a03 	vldr	s13, [r3, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001960:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001964:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a07 	vldr	s15, [r3, #28]
 800196e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001972:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (PID->BWKd*PID->Error[2]);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	edd3 6a05 	vldr	s13, [r3, #20]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001986:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID->Command = PID->Command_1 +
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		}


	// Implement PID Velocity Form Algorithm

	if(PID->Command >= 1000) PID->Command = 1000;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001996:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019ec <PIDControllerVelocity_Command+0x174>
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	db03      	blt.n	80019ac <PIDControllerVelocity_Command+0x134>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <PIDControllerVelocity_Command+0x178>)
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
 80019aa:	e00c      	b.n	80019c6 <PIDControllerVelocity_Command+0x14e>
	else if (PID->Command <= -1000) PID->Command = -1000;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80019f4 <PIDControllerVelocity_Command+0x17c>
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	d802      	bhi.n	80019c6 <PIDControllerVelocity_Command+0x14e>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <PIDControllerVelocity_Command+0x180>)
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

	/* Update Variable */
	PID->Command_1 = PID->Command;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
	PID->Error[2] = PID->Error[1];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	621a      	str	r2, [r3, #32]
	PID->Error[1] = PID->Error[0];
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	61da      	str	r2, [r3, #28]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	447a0000 	.word	0x447a0000
 80019f0:	447a0000 	.word	0x447a0000
 80019f4:	c47a0000 	.word	0xc47a0000
 80019f8:	c47a0000 	.word	0xc47a0000

080019fc <PIDControllerCascade_Command2>:
	PIDControllerPosition_Command(PIDposition, QEI, setpoint);
	PIDControllerVelocity_Command(PIDvelocity, QEI, PIDposition->Command);
}

void PIDControllerCascade_Command2(PIDStructureTypeDef *PIDposition , PIDStructureTypeDef *PIDvelocity ,QEIStructureTypeDef *QEI , float pf , float vf)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6178      	str	r0, [r7, #20]
 8001a04:	6139      	str	r1, [r7, #16]
 8001a06:	60fa      	str	r2, [r7, #12]
 8001a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a0c:	edc7 0a01 	vstr	s1, [r7, #4]
	PIDControllerPosition_Command(PIDposition, QEI, pf);
 8001a10:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff fe58 	bl	80016cc <PIDControllerPosition_Command>
	PIDControllerVelocity_Command(PIDvelocity, QEI, PIDposition->Command + vf);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	68f9      	ldr	r1, [r7, #12]
 8001a30:	6938      	ldr	r0, [r7, #16]
 8001a32:	f7ff ff21 	bl	8001878 <PIDControllerVelocity_Command>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	213c      	movs	r1, #60	; 0x3c
 8001a56:	4618      	mov	r0, r3
 8001a58:	f006 fba4 	bl	80081a4 <HAL_TIM_Encoder_Start>
	QEIdata->HomePosition = 65;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <QEIEncoder_Init+0x2c>)
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	42820000 	.word	0x42820000

08001a70 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b08e      	sub	sp, #56	; 0x38
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6278      	str	r0, [r7, #36]	; 0x24
 8001a7a:	6239      	str	r1, [r7, #32]
 8001a7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8001a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a86:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2200      	movs	r2, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	617a      	str	r2, [r7, #20]
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a9c:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aac:	1a84      	subs	r4, r0, r2
 8001aae:	eb61 0503 	sbc.w	r5, r1, r3
 8001ab2:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ac2:	ebb0 0a02 	subs.w	sl, r0, r2
 8001ac6:	eb61 0b03 	sbc.w	fp, r1, r3
 8001aca:	4650      	mov	r0, sl
 8001acc:	4659      	mov	r1, fp
 8001ace:	f7fe fd29 	bl	8000524 <__aeabi_ul2d>
 8001ad2:	a368      	add	r3, pc, #416	; (adr r3, 8001c74 <QEIEncoder_Update+0x204>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fd5a 	bl	8000590 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f80e 	bl	8000b04 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 8001aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001af0:	495b      	ldr	r1, [pc, #364]	; (8001c60 <QEIEncoder_Update+0x1f0>)
 8001af2:	428a      	cmp	r2, r1
 8001af4:	f173 0300 	sbcs.w	r3, r3, #0
 8001af8:	db08      	blt.n	8001b0c <QEIEncoder_Update+0x9c>
 8001afa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001afe:	1e59      	subs	r1, r3, #1
 8001b00:	60f9      	str	r1, [r7, #12]
 8001b02:	60ba      	str	r2, [r7, #8]
 8001b04:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b08:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 8001b0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001b14:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001b18:	da08      	bge.n	8001b2c <QEIEncoder_Update+0xbc>
 8001b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b1e:	1c59      	adds	r1, r3, #1
 8001b20:	6079      	str	r1, [r7, #4]
 8001b22:	603a      	str	r2, [r7, #0]
 8001b24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b28:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 8001b2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b30:	4622      	mov	r2, r4
 8001b32:	462b      	mov	r3, r5
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0119      	lsls	r1, r3, #4
 8001b3e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001b42:	0110      	lsls	r0, r2, #4
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ebb2 0804 	subs.w	r8, r2, r4
 8001b4c:	eb63 0905 	sbc.w	r9, r3, r5
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001b5c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001b60:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001b64:	4690      	mov	r8, r2
 8001b66:	4699      	mov	r9, r3
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f8e8 	bl	8000d44 <__aeabi_l2f>
 8001b74:	ee06 0a90 	vmov	s13, r0
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <QEIEncoder_Update+0x1f4>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fca0 	bl	80004e0 <__aeabi_f2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ba8:	f7fe fcc4 	bl	8000534 <__aeabi_l2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <QEIEncoder_Update+0x1f8>)
 8001bb2:	f7fe fced 	bl	8000590 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <QEIEncoder_Update+0x1f4>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc7a 	bl	80004bc <__aeabi_i2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4640      	mov	r0, r8
 8001bce:	4649      	mov	r1, r9
 8001bd0:	f7fe fe08 	bl	80007e4 <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fb22 	bl	8000224 <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff8c 	bl	8000b04 <__aeabi_d2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bf8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001bfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c00:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001c6c <QEIEncoder_Update+0x1fc>
 8001c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <QEIEncoder_Update+0x200>)
 8001c14:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <QEIEncoder_Update+0x200>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <QEIEncoder_Update+0x200>)
 8001c1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c26:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c48:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <QEIEncoder_Update+0x200>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <QEIEncoder_Update+0x200>)
 8001c52:	6053      	str	r3, [r2, #4]
}
 8001c54:	bf00      	nop
 8001c56:	3738      	adds	r7, #56	; 0x38
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	80000001 	.word	0x80000001
 8001c64:	20000004 	.word	0x20000004
 8001c68:	40300000 	.word	0x40300000
 8001c6c:	42700000 	.word	0x42700000
 8001c70:	200002b0 	.word	0x200002b0
 8001c74:	a0b5ed8d 	.word	0xa0b5ed8d
 8001c78:	3eb0c6f7 	.word	0x3eb0c6f7

08001c7c <QEIEncoder_SetHome>:

void QEIEncoder_SetHome(QEIStructureTypeDef* QEI)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	QEI->LinearPosition = QEI->HomePosition;//	Set Zero Position
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <Joystick_UpdateValue>:
*/
uint8_t DEBOUNCE_INTERVAL = 200;
extern u16u8_t registerFrame[200];

void Joystick_UpdateValue(JoystickStructureTypeDef* joystick,QEIStructureTypeDef* QEI)
{
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b098      	sub	sp, #96	; 0x60
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6578      	str	r0, [r7, #84]	; 0x54
 8001ca2:	6539      	str	r1, [r7, #80]	; 0x50
	/*			Push Button			*/
	static uint16_t tempSTATE[4] = {1,1,1,1};
	static uint64_t lastTIME[4] = {0,0,0,0};
	static uint64_t SUMX;
	static uint64_t SUMY;
	SUMX = 0;
 8001ca4:	49b9      	ldr	r1, [pc, #740]	; (8001f8c <Joystick_UpdateValue+0x2f4>)
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9c1 2300 	strd	r2, r3, [r1]
	SUMY = 0;
 8001cb2:	49b7      	ldr	r1, [pc, #732]	; (8001f90 <Joystick_UpdateValue+0x2f8>)
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]

	static uint64_t currentTIME;
	currentTIME = HAL_GetTick();
 8001cc0:	f002 fc58 	bl	8004574 <HAL_GetTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	469a      	mov	sl, r3
 8001cca:	4693      	mov	fp, r2
 8001ccc:	4bb1      	ldr	r3, [pc, #708]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001cce:	e9c3 ab00 	strd	sl, fp, [r3]
	/* Update STATE Value */

//
    if (!tempSTATE[A] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) && (currentTIME - lastTIME[A] > DEBOUNCE_INTERVAL)) {
 8001cd2:	4bb1      	ldr	r3, [pc, #708]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d125      	bne.n	8001d26 <Joystick_UpdateValue+0x8e>
 8001cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cde:	48af      	ldr	r0, [pc, #700]	; (8001f9c <Joystick_UpdateValue+0x304>)
 8001ce0:	f004 fd7c 	bl	80067dc <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01d      	beq.n	8001d26 <Joystick_UpdateValue+0x8e>
 8001cea:	4baa      	ldr	r3, [pc, #680]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	1a84      	subs	r4, r0, r2
 8001cf8:	eb61 0503 	sbc.w	r5, r1, r3
 8001cfc:	4ba9      	ldr	r3, [pc, #676]	; (8001fa4 <Joystick_UpdateValue+0x30c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2200      	movs	r2, #0
 8001d04:	4698      	mov	r8, r3
 8001d06:	4691      	mov	r9, r2
 8001d08:	45a0      	cmp	r8, r4
 8001d0a:	eb79 0305 	sbcs.w	r3, r9, r5
 8001d0e:	d20a      	bcs.n	8001d26 <Joystick_UpdateValue+0x8e>
        joystick->PIN[A] = 1;
 8001d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d12:	2301      	movs	r3, #1
 8001d14:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
        lastTIME[A] = currentTIME;
 8001d18:	4b9e      	ldr	r3, [pc, #632]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	49a0      	ldr	r1, [pc, #640]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001d20:	e9c1 2300 	strd	r2, r3, [r1]
 8001d24:	e003      	b.n	8001d2e <Joystick_UpdateValue+0x96>
    } else joystick->PIN[A] = 0;
 8001d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8a2 3194 	strh.w	r3, [r2, #404]	; 0x194
    tempSTATE[A] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d32:	489a      	ldr	r0, [pc, #616]	; (8001f9c <Joystick_UpdateValue+0x304>)
 8001d34:	f004 fd52 	bl	80067dc <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4a96      	ldr	r2, [pc, #600]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001d3e:	8013      	strh	r3, [r2, #0]

    // Check button B
    if (!tempSTATE[B] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) && (currentTIME - lastTIME[B] > DEBOUNCE_INTERVAL)) {
 8001d40:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12d      	bne.n	8001da4 <Joystick_UpdateValue+0x10c>
 8001d48:	2110      	movs	r1, #16
 8001d4a:	4894      	ldr	r0, [pc, #592]	; (8001f9c <Joystick_UpdateValue+0x304>)
 8001d4c:	f004 fd46 	bl	80067dc <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d026      	beq.n	8001da4 <Joystick_UpdateValue+0x10c>
 8001d56:	4b8f      	ldr	r3, [pc, #572]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001d5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d62:	1a84      	subs	r4, r0, r2
 8001d64:	64bc      	str	r4, [r7, #72]	; 0x48
 8001d66:	eb61 0303 	sbc.w	r3, r1, r3
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d6c:	4b8d      	ldr	r3, [pc, #564]	; (8001fa4 <Joystick_UpdateValue+0x30c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2200      	movs	r2, #0
 8001d74:	643b      	str	r3, [r7, #64]	; 0x40
 8001d76:	647a      	str	r2, [r7, #68]	; 0x44
 8001d78:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d82:	4602      	mov	r2, r0
 8001d84:	4293      	cmp	r3, r2
 8001d86:	462b      	mov	r3, r5
 8001d88:	460a      	mov	r2, r1
 8001d8a:	4193      	sbcs	r3, r2
 8001d8c:	d20a      	bcs.n	8001da4 <Joystick_UpdateValue+0x10c>
        joystick->PIN[B] = 1;
 8001d8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d90:	2301      	movs	r3, #1
 8001d92:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
        lastTIME[B] = currentTIME;
 8001d96:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	4980      	ldr	r1, [pc, #512]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001d9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001da2:	e003      	b.n	8001dac <Joystick_UpdateValue+0x114>
    } else joystick->PIN[B] = 0;
 8001da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
    tempSTATE[B] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001dac:	2110      	movs	r1, #16
 8001dae:	487b      	ldr	r0, [pc, #492]	; (8001f9c <Joystick_UpdateValue+0x304>)
 8001db0:	f004 fd14 	bl	80067dc <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001dba:	8053      	strh	r3, [r2, #2]

    // Check button C
    if (!tempSTATE[C] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && (currentTIME - lastTIME[C] > DEBOUNCE_INTERVAL)) {
 8001dbc:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001dbe:	889b      	ldrh	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12d      	bne.n	8001e20 <Joystick_UpdateValue+0x188>
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	4875      	ldr	r0, [pc, #468]	; (8001f9c <Joystick_UpdateValue+0x304>)
 8001dc8:	f004 fd08 	bl	80067dc <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d026      	beq.n	8001e20 <Joystick_UpdateValue+0x188>
 8001dd2:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001dda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001dde:	1a84      	subs	r4, r0, r2
 8001de0:	63bc      	str	r4, [r7, #56]	; 0x38
 8001de2:	eb61 0303 	sbc.w	r3, r1, r3
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de8:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <Joystick_UpdateValue+0x30c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2200      	movs	r2, #0
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
 8001df2:	637a      	str	r2, [r7, #52]	; 0x34
 8001df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001df8:	4623      	mov	r3, r4
 8001dfa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4293      	cmp	r3, r2
 8001e02:	462b      	mov	r3, r5
 8001e04:	460a      	mov	r2, r1
 8001e06:	4193      	sbcs	r3, r2
 8001e08:	d20a      	bcs.n	8001e20 <Joystick_UpdateValue+0x188>
        joystick->PIN[C] = 1;
 8001e0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
        lastTIME[C] = currentTIME;
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	4961      	ldr	r1, [pc, #388]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001e1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001e1e:	e003      	b.n	8001e28 <Joystick_UpdateValue+0x190>
    } else joystick->PIN[C] = 0;
 8001e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
    tempSTATE[C] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001e28:	2120      	movs	r1, #32
 8001e2a:	485c      	ldr	r0, [pc, #368]	; (8001f9c <Joystick_UpdateValue+0x304>)
 8001e2c:	f004 fcd6 	bl	80067dc <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001e36:	8093      	strh	r3, [r2, #4]

    // Check button D
    if (!tempSTATE[D] && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && (currentTIME - lastTIME[D] > DEBOUNCE_INTERVAL)) {
 8001e38:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001e3a:	88db      	ldrh	r3, [r3, #6]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d12f      	bne.n	8001ea0 <Joystick_UpdateValue+0x208>
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e48:	f004 fcc8 	bl	80067dc <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d026      	beq.n	8001ea0 <Joystick_UpdateValue+0x208>
 8001e52:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e58:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001e5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e5e:	1a84      	subs	r4, r0, r2
 8001e60:	62bc      	str	r4, [r7, #40]	; 0x28
 8001e62:	eb61 0303 	sbc.w	r3, r1, r3
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e68:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <Joystick_UpdateValue+0x30c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	627a      	str	r2, [r7, #36]	; 0x24
 8001e74:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e78:	4623      	mov	r3, r4
 8001e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	462b      	mov	r3, r5
 8001e84:	460a      	mov	r2, r1
 8001e86:	4193      	sbcs	r3, r2
 8001e88:	d20a      	bcs.n	8001ea0 <Joystick_UpdateValue+0x208>
        joystick->PIN[D] = 1;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
        lastTIME[D] = currentTIME;
 8001e92:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <Joystick_UpdateValue+0x2fc>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	4941      	ldr	r1, [pc, #260]	; (8001fa0 <Joystick_UpdateValue+0x308>)
 8001e9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001e9e:	e003      	b.n	8001ea8 <Joystick_UpdateValue+0x210>
    } else joystick->PIN[D] = 0;
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    tempSTATE[D] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f004 fc94 	bl	80067dc <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <Joystick_UpdateValue+0x300>)
 8001eba:	80da      	strh	r2, [r3, #6]



	/*			Joy			*/
	for(uint8_t i = 0 ; i < 100 ; i ++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ec2:	e03b      	b.n	8001f3c <Joystick_UpdateValue+0x2a4>
	{
		SUMX += joystick->XYBuffer[2*i];
 8001ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ec8:	005a      	lsls	r2, r3, #1
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	61fa      	str	r2, [r7, #28]
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <Joystick_UpdateValue+0x2f4>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	1889      	adds	r1, r1, r2
 8001ee6:	6139      	str	r1, [r7, #16]
 8001ee8:	4629      	mov	r1, r5
 8001eea:	eb41 0303 	adc.w	r3, r1, r3
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <Joystick_UpdateValue+0x2f4>)
 8001ef2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ef6:	e9c3 1200 	strd	r1, r2, [r3]
		SUMY += joystick->XYBuffer[(2*i)+1];
 8001efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	60fa      	str	r2, [r7, #12]
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <Joystick_UpdateValue+0x2f8>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	1889      	adds	r1, r1, r2
 8001f1e:	6039      	str	r1, [r7, #0]
 8001f20:	4629      	mov	r1, r5
 8001f22:	eb41 0303 	adc.w	r3, r1, r3
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <Joystick_UpdateValue+0x2f8>)
 8001f2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f2e:	e9c3 1200 	strd	r1, r2, [r3]
	for(uint8_t i = 0 ; i < 100 ; i ++)
 8001f32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f36:	3301      	adds	r3, #1
 8001f38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f40:	2b63      	cmp	r3, #99	; 0x63
 8001f42:	d9bf      	bls.n	8001ec4 <Joystick_UpdateValue+0x22c>
	}

	joystick->X = SUMX/100;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <Joystick_UpdateValue+0x2f4>)
 8001f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f4a:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	f7fe ff35 	bl	8000dc0 <__aeabi_uldivmod>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
	joystick->Y = SUMY/100;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <Joystick_UpdateValue+0x2f8>)
 8001f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f68:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f7fe ff26 	bl	8000dc0 <__aeabi_uldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192


}
 8001f80:	bf00      	nop
 8001f82:	3760      	adds	r7, #96	; 0x60
 8001f84:	46bd      	mov	sp, r7
 8001f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200002b8 	.word	0x200002b8
 8001f90:	200002c0 	.word	0x200002c0
 8001f94:	200002c8 	.word	0x200002c8
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	200002d0 	.word	0x200002d0
 8001fa4:	20000006 	.word	0x20000006

08001fa8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <modbus_1t5_Timeout+0x3c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <modbus_1t5_Timeout+0x3c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <modbus_1t5_Timeout+0x3c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <modbus_1t5_Timeout+0x3c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200002f0 	.word	0x200002f0

08001fe8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <modbus_3t5_Timeout+0x1c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	755a      	strb	r2, [r3, #21]

}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	200002f0 	.word	0x200002f0

08002008 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f008 fa7b 	bl	800a50c <HAL_UART_GetError>
 8002016:	4603      	mov	r3, r0
 8002018:	2b20      	cmp	r3, #32
 800201a:	d101      	bne.n	8002020 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800201c:	f7ff ffc4 	bl	8001fa8 <modbus_1t5_Timeout>

	}
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <Modbus_init+0xa0>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <Modbus_init+0xa0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4a21      	ldr	r2, [pc, #132]	; (80020cc <Modbus_init+0xa4>)
 8002046:	210e      	movs	r1, #14
 8002048:	4618      	mov	r0, r3
 800204a:	f006 fd37 	bl	8008abc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2110      	movs	r1, #16
 8002054:	4618      	mov	r0, r3
 8002056:	f008 fa03 	bl	800a460 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4618      	mov	r0, r3
 8002060:	f008 fa1a 	bl	800a498 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <Modbus_init+0xa8>)
 800206a:	2104      	movs	r1, #4
 800206c:	4618      	mov	r0, r3
 800206e:	f007 fce1 	bl	8009a34 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <Modbus_init+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <Modbus_init+0xa0>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <Modbus_init+0xa0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8002084:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8002088:	4413      	add	r3, r2
 800208a:	3302      	adds	r3, #2
 800208c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002090:	4619      	mov	r1, r3
 8002092:	f007 fe09 	bl	8009ca8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <Modbus_init+0xa0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10c      	bne.n	80020c0 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <Modbus_init+0xa0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fce1 	bl	8007a74 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <Modbus_init+0xa0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f005 ff30 	bl	8007f20 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200002f0 	.word	0x200002f0
 80020cc:	08001fe9 	.word	0x08001fe9
 80020d0:	08002009 	.word	0x08002009

080020d4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80020e0:	23ff      	movs	r3, #255	; 0xff
 80020e2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80020e4:	23ff      	movs	r3, #255	; 0xff
 80020e6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80020e8:	e013      	b.n	8002112 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	4053      	eors	r3, r2
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <CRC16+0x64>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	4053      	eors	r3, r2
 8002106:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002108:	4a0c      	ldr	r2, [pc, #48]	; (800213c <CRC16+0x68>)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8002112:	883b      	ldrh	r3, [r7, #0]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	803a      	strh	r2, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e6      	bne.n	80020ea <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21a      	sxth	r2, r3
 8002122:	7bbb      	ldrb	r3, [r7, #14]
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21b      	sxth	r3, r3
 800212a:	b29b      	uxth	r3, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000110 	.word	0x20000110
 800213c:	20000010 	.word	0x20000010

08002140 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002146:	4b7e      	ldr	r3, [pc, #504]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	7ddb      	ldrb	r3, [r3, #23]
 800214c:	3b01      	subs	r3, #1
 800214e:	2b03      	cmp	r3, #3
 8002150:	d80a      	bhi.n	8002168 <Modbus_Protocal_Worker+0x28>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <Modbus_Protocal_Worker+0x18>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	08002173 	.word	0x08002173
 800215c:	08002307 	.word	0x08002307
 8002160:	080021ff 	.word	0x080021ff
 8002164:	08002243 	.word	0x08002243
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	75da      	strb	r2, [r3, #23]
		break;
 8002170:	e0e1      	b.n	8002336 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002172:	4b73      	ldr	r3, [pc, #460]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2202      	movs	r2, #2
 8002184:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002186:	f000 f9d3 	bl	8002530 <Modbus_Emission>
 800218a:	e018      	b.n	80021be <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800218c:	4b6c      	ldr	r3, [pc, #432]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002196:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d00b      	beq.n	80021be <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80021a6:	4b66      	ldr	r3, [pc, #408]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80021ae:	4b64      	ldr	r3, [pc, #400]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80021b6:	4b62      	ldr	r3, [pc, #392]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2203      	movs	r2, #3
 80021bc:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80021be:	4b60      	ldr	r3, [pc, #384]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	f040 80ad 	bne.w	8002328 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80021de:	4b58      	ldr	r3, [pc, #352]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80021ea:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80021ee:	4413      	add	r3, r2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021f6:	4619      	mov	r1, r3
 80021f8:	f007 fd56 	bl	8009ca8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80021fc:	e094      	b.n	8002328 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80021fe:	4b50      	ldr	r3, [pc, #320]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	7d1b      	ldrb	r3, [r3, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8091 	beq.w	800232c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800220a:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	22fe      	movs	r2, #254	; 0xfe
 8002210:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002212:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800222e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002230:	1a8a      	subs	r2, r1, r2
 8002232:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002234:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2204      	movs	r2, #4
 800223e:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002240:	e074      	b.n	800232c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800224a:	f113 0f02 	cmn.w	r3, #2
 800224e:	d150      	bne.n	80022f2 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002250:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002258:	4b39      	ldr	r3, [pc, #228]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002268:	3b02      	subs	r3, #2
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f7ff ff31 	bl	80020d4 <CRC16>
 8002272:	4603      	mov	r3, r0
 8002274:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002276:	793a      	ldrb	r2, [r7, #4]
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8002284:	3b02      	subs	r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800228c:	429a      	cmp	r2, r3
 800228e:	d10c      	bne.n	80022aa <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002290:	797a      	ldrb	r2, [r7, #5]
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800229e:	3b01      	subs	r3, #1
 80022a0:	440b      	add	r3, r1
 80022a2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d004      	beq.n	80022b4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	22ff      	movs	r2, #255	; 0xff
 80022b0:	759a      	strb	r2, [r3, #22]
				break;
 80022b2:	e040      	b.n	8002336 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d113      	bne.n	80022ee <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80022d6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80022e0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80022e2:	461a      	mov	r2, r3
 80022e4:	f009 fa6c 	bl	800b7c0 <memcpy>

			//execute command
			Modbus_frame_response();
 80022e8:	f000 f90a 	bl	8002500 <Modbus_frame_response>
 80022ec:	e001      	b.n	80022f2 <Modbus_Protocal_Worker+0x1b2>
				break;
 80022ee:	bf00      	nop
					}
		break;


	}
}
 80022f0:	e021      	b.n	8002336 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	7d5b      	ldrb	r3, [r3, #21]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d019      	beq.n	8002330 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	75da      	strb	r2, [r3, #23]
		break;
 8002304:	e014      	b.n	8002330 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	2b20      	cmp	r3, #32
 8002312:	d10f      	bne.n	8002334 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <Modbus_Protocal_Worker+0x200>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2201      	movs	r2, #1
 8002324:	75da      	strb	r2, [r3, #23]
		break;
 8002326:	e005      	b.n	8002334 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002328:	bf00      	nop
 800232a:	e004      	b.n	8002336 <Modbus_Protocal_Worker+0x1f6>
		break;
 800232c:	bf00      	nop
 800232e:	e002      	b.n	8002336 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002330:	bf00      	nop
 8002332:	e000      	b.n	8002336 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002334:	bf00      	nop
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200002f0 	.word	0x200002f0

08002344 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <modbusWrite1Register+0x80>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	7e5b      	ldrb	r3, [r3, #25]
 8002350:	b29b      	uxth	r3, r3
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <modbusWrite1Register+0x80>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	7e9b      	ldrb	r3, [r3, #26]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4413      	add	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <modbusWrite1Register+0x80>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	d903      	bls.n	8002376 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800236e:	2002      	movs	r0, #2
 8002370:	f000 f8a4 	bl	80024bc <ModbusErrorReply>
			 return;
 8002374:	e023      	b.n	80023be <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <modbusWrite1Register+0x80>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <modbusWrite1Register+0x80>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	7ed2      	ldrb	r2, [r2, #27]
 8002388:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <modbusWrite1Register+0x80>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <modbusWrite1Register+0x80>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	440b      	add	r3, r1
 800239a:	7f12      	ldrb	r2, [r2, #28]
 800239c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <modbusWrite1Register+0x80>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
			hModbus->Rxframe,
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <modbusWrite1Register+0x80>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80023ac:	2208      	movs	r2, #8
 80023ae:	4619      	mov	r1, r3
 80023b0:	f009 fa06 	bl	800b7c0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <modbusWrite1Register+0x80>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2205      	movs	r2, #5
 80023ba:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270



}
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200002f0 	.word	0x200002f0

080023c8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <modbusRead1Register+0xf0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	7edb      	ldrb	r3, [r3, #27]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b29a      	uxth	r2, r3
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <modbusRead1Register+0xf0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	7f1b      	ldrb	r3, [r3, #28]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <modbusRead1Register+0xf0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	7e5b      	ldrb	r3, [r3, #25]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <modbusRead1Register+0xf0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	7e9b      	ldrb	r3, [r3, #26]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <modbusRead1Register+0x42>
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	2b7d      	cmp	r3, #125	; 0x7d
 8002408:	d903      	bls.n	8002412 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800240a:	2003      	movs	r0, #3
 800240c:	f000 f856 	bl	80024bc <ModbusErrorReply>
		 return;
 8002410:	e04e      	b.n	80024b0 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002412:	88ba      	ldrh	r2, [r7, #4]
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <modbusRead1Register+0xf0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	d808      	bhi.n	8002430 <modbusRead1Register+0x68>
 800241e:	88ba      	ldrh	r2, [r7, #4]
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	4413      	add	r3, r2
 8002424:	461a      	mov	r2, r3
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <modbusRead1Register+0xf0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d903      	bls.n	8002438 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002430:	2002      	movs	r0, #2
 8002432:	f000 f843 	bl	80024bc <ModbusErrorReply>
		 return;
 8002436:	e03b      	b.n	80024b0 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <modbusRead1Register+0xf0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <modbusRead1Register+0xf0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0052      	lsls	r2, r2, #1
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002452:	2400      	movs	r4, #0
 8002454:	e020      	b.n	8002498 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <modbusRead1Register+0xf0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	88bb      	ldrh	r3, [r7, #4]
 800245e:	4423      	add	r3, r4
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	18d1      	adds	r1, r2, r3
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <modbusRead1Register+0xf0>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	1c63      	adds	r3, r4, #1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	7849      	ldrb	r1, [r1, #1]
 800246e:	4413      	add	r3, r2
 8002470:	460a      	mov	r2, r1
 8002472:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <modbusRead1Register+0xf0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	88bb      	ldrh	r3, [r7, #4]
 800247e:	4423      	add	r3, r4
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	18d1      	adds	r1, r2, r3
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <modbusRead1Register+0xf0>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	0063      	lsls	r3, r4, #1
 800248a:	3303      	adds	r3, #3
 800248c:	7809      	ldrb	r1, [r1, #0]
 800248e:	4413      	add	r3, r2
 8002490:	460a      	mov	r2, r1
 8002492:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8002496:	3401      	adds	r4, #1
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	429c      	cmp	r4, r3
 800249c:	dbdb      	blt.n	8002456 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <modbusRead1Register+0xf0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0052      	lsls	r2, r2, #1
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270

}
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200002f0 	.word	0x200002f0

080024bc <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <ModbusErrorReply+0x40>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	7e1a      	ldrb	r2, [r3, #24]
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <ModbusErrorReply+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	hModbus->Txframe[1] = Errorcode;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <ModbusErrorReply+0x40>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	79fa      	ldrb	r2, [r7, #7]
 80024e0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->TxCount = 2;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <ModbusErrorReply+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200002f0 	.word	0x200002f0

08002500 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <Modbus_frame_response+0x2c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	7e1b      	ldrb	r3, [r3, #24]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d004      	beq.n	8002518 <Modbus_frame_response+0x18>
 800250e:	2b06      	cmp	r3, #6
 8002510:	d105      	bne.n	800251e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002512:	f7ff ff17 	bl	8002344 <modbusWrite1Register>
		break;
 8002516:	e006      	b.n	8002526 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002518:	f7ff ff56 	bl	80023c8 <modbusRead1Register>
		break;
 800251c:	e003      	b.n	8002526 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff ffcc 	bl	80024bc <ModbusErrorReply>
		break;
 8002524:	bf00      	nop

	}
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200002f0 	.word	0x200002f0

08002530 <Modbus_Emission>:

void Modbus_Emission()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <Modbus_Emission+0xe8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	2b20      	cmp	r3, #32
 8002542:	d15d      	bne.n	8002600 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002544:	4b34      	ldr	r3, [pc, #208]	; (8002618 <Modbus_Emission+0xe8>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b33      	ldr	r3, [pc, #204]	; (8002618 <Modbus_Emission+0xe8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <Modbus_Emission+0xe8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 800255a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <Modbus_Emission+0xe8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 71a2 	add.w	r1, r3, #324	; 0x144
				hModbus->TxCount
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <Modbus_Emission+0xe8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
		memcpy
 800256c:	461a      	mov	r2, r3
 800256e:	f009 f927 	bl	800b7c0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <Modbus_Emission+0xe8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <Modbus_Emission+0xe8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3203      	adds	r2, #3
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <Modbus_Emission+0xe8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <Modbus_Emission+0xe8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002598:	3b02      	subs	r3, #2
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7ff fd99 	bl	80020d4 <CRC16>
 80025a2:	4603      	mov	r3, r0
 80025a4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <Modbus_Emission+0xe8>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <Modbus_Emission+0xe8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80025b2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80025b4:	7939      	ldrb	r1, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	460a      	mov	r2, r1
 80025ba:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <Modbus_Emission+0xe8>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <Modbus_Emission+0xe8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80025ca:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80025cc:	7979      	ldrb	r1, [r7, #5]
 80025ce:	4413      	add	r3, r2
 80025d0:	460a      	mov	r2, r1
 80025d2:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <Modbus_Emission+0xe8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d10d      	bne.n	8002600 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <Modbus_Emission+0xe8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <Modbus_Emission+0xe8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <Modbus_Emission+0xe8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80025f6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80025fa:	461a      	mov	r2, r3
 80025fc:	f007 fad4 	bl	8009ba8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <Modbus_Emission+0xe8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <Modbus_Emission+0xe8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	755a      	strb	r2, [r3, #21]

}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200002f0 	.word	0x200002f0

0800261c <SetShelve_mode>:
{
	OUT,IN,PULL
}solenoidSTATE;

void SetShelve_mode(FlagTypeDef *flag,JoystickStructureTypeDef *joystick , QEIStructureTypeDef *QEI)
{
 800261c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002620:	b08c      	sub	sp, #48	; 0x30
 8002622:	af00      	add	r7, sp, #0
 8002624:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002626:	62b9      	str	r1, [r7, #40]	; 0x28
 8002628:	627a      	str	r2, [r7, #36]	; 0x24
	flag->setShelve = 1;
 800262a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262c:	2301      	movs	r3, #1
 800262e:	7053      	strb	r3, [r2, #1]
	static int8_t POINT = 0;
	if(POINT > 4) POINT = 4;
 8002630:	4bbf      	ldr	r3, [pc, #764]	; (8002930 <SetShelve_mode+0x314>)
 8002632:	f993 3000 	ldrsb.w	r3, [r3]
 8002636:	2b04      	cmp	r3, #4
 8002638:	dd03      	ble.n	8002642 <SetShelve_mode+0x26>
 800263a:	4abd      	ldr	r2, [pc, #756]	; (8002930 <SetShelve_mode+0x314>)
 800263c:	2304      	movs	r3, #4
 800263e:	7013      	strb	r3, [r2, #0]
 8002640:	e007      	b.n	8002652 <SetShelve_mode+0x36>
	else if(POINT < 0) POINT = 0;
 8002642:	4bbb      	ldr	r3, [pc, #748]	; (8002930 <SetShelve_mode+0x314>)
 8002644:	f993 3000 	ldrsb.w	r3, [r3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	da02      	bge.n	8002652 <SetShelve_mode+0x36>
 800264c:	4ab8      	ldr	r2, [pc, #736]	; (8002930 <SetShelve_mode+0x314>)
 800264e:	2300      	movs	r3, #0
 8002650:	7013      	strb	r3, [r2, #0]
	Joystick_UpdateValue(joystick, QEI);
 8002652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002656:	f7ff fb1f 	bl	8001c98 <Joystick_UpdateValue>

    if(joystick->PIN[A] == 1)
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 8002660:	2b01      	cmp	r3, #1
 8002662:	d14e      	bne.n	8002702 <SetShelve_mode+0xe6>
	{
		registerFrame[0x23].U16 = joystick->PointPosition[0]*10; // ค่า Shelve ที่ต้องส่งให้ BaseSytem
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 800266a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800266e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002676:	ee17 3a90 	vmov	r3, s15
 800267a:	b29b      	uxth	r3, r3
 800267c:	4aad      	ldr	r2, [pc, #692]	; (8002934 <SetShelve_mode+0x318>)
 800267e:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
		registerFrame[0x24].U16 = joystick->PointPosition[1]*10;
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8002688:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800268c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002694:	ee17 3a90 	vmov	r3, s15
 8002698:	b29b      	uxth	r3, r3
 800269a:	4aa6      	ldr	r2, [pc, #664]	; (8002934 <SetShelve_mode+0x318>)
 800269c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
		registerFrame[0x25].U16 = joystick->PointPosition[2]*10;
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 80026a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b2:	ee17 3a90 	vmov	r3, s15
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4a9e      	ldr	r2, [pc, #632]	; (8002934 <SetShelve_mode+0x318>)
 80026ba:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
		registerFrame[0x26].U16 = joystick->PointPosition[3]*10;
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80026c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d0:	ee17 3a90 	vmov	r3, s15
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4a97      	ldr	r2, [pc, #604]	; (8002934 <SetShelve_mode+0x318>)
 80026d8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
		registerFrame[0x27].U16 = joystick->PointPosition[4]*10;
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 80026e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ee:	ee17 3a90 	vmov	r3, s15
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4a8f      	ldr	r2, [pc, #572]	; (8002934 <SetShelve_mode+0x318>)
 80026f6:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
		flag->setShelve = 2;
 80026fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fc:	2302      	movs	r3, #2
 80026fe:	7053      	strb	r3, [r2, #1]
 8002700:	e056      	b.n	80027b0 <SetShelve_mode+0x194>
	}
    else if(joystick->PIN[B] == 1)
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8002708:	2b01      	cmp	r3, #1
 800270a:	d116      	bne.n	800273a <SetShelve_mode+0x11e>
	{
		joystick->PointPosition[POINT] = QEI->LinearPosition;
 800270c:	4b88      	ldr	r3, [pc, #544]	; (8002930 <SetShelve_mode+0x314>)
 800270e:	f993 3000 	ldrsb.w	r3, [r3]
 8002712:	4618      	mov	r0, r3
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271a:	f100 0366 	add.w	r3, r0, #102	; 0x66
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	6019      	str	r1, [r3, #0]
		POINT++;
 8002726:	4b82      	ldr	r3, [pc, #520]	; (8002930 <SetShelve_mode+0x314>)
 8002728:	f993 3000 	ldrsb.w	r3, [r3]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4a7e      	ldr	r2, [pc, #504]	; (8002930 <SetShelve_mode+0x314>)
 8002736:	7013      	strb	r3, [r2, #0]
 8002738:	e03a      	b.n	80027b0 <SetShelve_mode+0x194>
	}
	else if(joystick->PIN[C] == 1)
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002740:	2b01      	cmp	r3, #1
 8002742:	d11c      	bne.n	800277e <SetShelve_mode+0x162>
	{
		joystick->PointPosition[0] = 0;
 8002744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		joystick->PointPosition[1] = 0;
 800274e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		joystick->PointPosition[2] = 0;
 8002758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		joystick->PointPosition[3] = 0;
 8002762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
		joystick->PointPosition[4] = 0;
 800276c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		POINT = 0;
 8002776:	4a6e      	ldr	r2, [pc, #440]	; (8002930 <SetShelve_mode+0x314>)
 8002778:	2300      	movs	r3, #0
 800277a:	7013      	strb	r3, [r2, #0]
 800277c:	e018      	b.n	80027b0 <SetShelve_mode+0x194>
	}
	else if(joystick->PIN[D] == 1)
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8002784:	2b01      	cmp	r3, #1
 8002786:	d113      	bne.n	80027b0 <SetShelve_mode+0x194>
	{
		joystick->PointPosition[POINT] = 0;
 8002788:	4b69      	ldr	r3, [pc, #420]	; (8002930 <SetShelve_mode+0x314>)
 800278a:	f993 3000 	ldrsb.w	r3, [r3]
 800278e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002790:	3366      	adds	r3, #102	; 0x66
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	1d1a      	adds	r2, r3, #4
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	6013      	str	r3, [r2, #0]
		POINT--;
 800279e:	4b64      	ldr	r3, [pc, #400]	; (8002930 <SetShelve_mode+0x314>)
 80027a0:	f993 3000 	ldrsb.w	r3, [r3]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	4a60      	ldr	r2, [pc, #384]	; (8002930 <SetShelve_mode+0x314>)
 80027ae:	7013      	strb	r3, [r2, #0]
	}

	if(joystick->Y < 2146 && joystick->Y >1950)
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	f8b3 2192 	ldrh.w	r2, [r3, #402]	; 0x192
 80027b6:	f640 0361 	movw	r3, #2145	; 0x861
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d80f      	bhi.n	80027de <SetShelve_mode+0x1c2>
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	f8b3 2192 	ldrh.w	r2, [r3, #402]	; 0x192
 80027c4:	f240 739e 	movw	r3, #1950	; 0x79e
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d908      	bls.n	80027de <SetShelve_mode+0x1c2>
	{
		Motor_Control(_BACKDRIVE_FACTOR);
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <SetShelve_mode+0x31c>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe ff4b 	bl	8001670 <Motor_Control>
	{
 80027da:	bf00      	nop
	else if(joystick->Y < 1950)
	{
		Motor_Control(-(uint16_t)(((1975-joystick->Y)*MAX_SPEED)/1975));
	}
	else Motor_Control(_BACKDRIVE_FACTOR);
}
 80027dc:	e0a2      	b.n	8002924 <SetShelve_mode+0x308>
	else if(joystick->Y > 2146)
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	f8b3 2192 	ldrh.w	r2, [r3, #402]	; 0x192
 80027e4:	f640 0362 	movw	r3, #2146	; 0x862
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d963      	bls.n	80028b4 <SetShelve_mode+0x298>
		if( (uint16_t)(((joystick->Y-2000)*MAX_SPEED)/2000) > _BACKDRIVE_FACTOR) Motor_Control((uint16_t)(((joystick->Y-2000)*MAX_SPEED)/2000));
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80027f2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80027f6:	17da      	asrs	r2, r3, #31
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	61fa      	str	r2, [r7, #28]
 80027fc:	4b4f      	ldr	r3, [pc, #316]	; (800293c <SetShelve_mode+0x320>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002806:	4629      	mov	r1, r5
 8002808:	fb02 f001 	mul.w	r0, r2, r1
 800280c:	4621      	mov	r1, r4
 800280e:	fb01 f103 	mul.w	r1, r1, r3
 8002812:	4401      	add	r1, r0
 8002814:	4620      	mov	r0, r4
 8002816:	fba0 ab02 	umull	sl, fp, r0, r2
 800281a:	eb01 030b 	add.w	r3, r1, fp
 800281e:	469b      	mov	fp, r3
 8002820:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	4650      	mov	r0, sl
 800282a:	4659      	mov	r1, fp
 800282c:	f7fe fac8 	bl	8000dc0 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	b293      	uxth	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	2200      	movs	r2, #0
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	617a      	str	r2, [r7, #20]
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <SetShelve_mode+0x31c>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002848:	4621      	mov	r1, r4
 800284a:	428a      	cmp	r2, r1
 800284c:	4629      	mov	r1, r5
 800284e:	418b      	sbcs	r3, r1
 8002850:	d228      	bcs.n	80028a4 <SetShelve_mode+0x288>
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 8002858:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800285c:	17da      	asrs	r2, r3, #31
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	60fa      	str	r2, [r7, #12]
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <SetShelve_mode+0x320>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800286c:	4629      	mov	r1, r5
 800286e:	fb02 f001 	mul.w	r0, r2, r1
 8002872:	4621      	mov	r1, r4
 8002874:	fb01 f103 	mul.w	r1, r1, r3
 8002878:	4401      	add	r1, r0
 800287a:	4620      	mov	r0, r4
 800287c:	fba0 8902 	umull	r8, r9, r0, r2
 8002880:	eb01 0309 	add.w	r3, r1, r9
 8002884:	4699      	mov	r9, r3
 8002886:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	4640      	mov	r0, r8
 8002890:	4649      	mov	r1, r9
 8002892:	f7fe fa95 	bl	8000dc0 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	b293      	uxth	r3, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fee7 	bl	8001670 <Motor_Control>
}
 80028a2:	e03f      	b.n	8002924 <SetShelve_mode+0x308>
		else Motor_Control(_BACKDRIVE_FACTOR);
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <SetShelve_mode+0x31c>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe fedf 	bl	8001670 <Motor_Control>
}
 80028b2:	e037      	b.n	8002924 <SetShelve_mode+0x308>
	else if(joystick->Y < 1950)
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80028ba:	f240 729d 	movw	r2, #1949	; 0x79d
 80028be:	4293      	cmp	r3, r2
 80028c0:	d829      	bhi.n	8002916 <SetShelve_mode+0x2fa>
		Motor_Control(-(uint16_t)(((1975-joystick->Y)*MAX_SPEED)/1975));
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
 80028c8:	f5c3 63f6 	rsb	r3, r3, #1968	; 0x7b0
 80028cc:	3307      	adds	r3, #7
 80028ce:	17da      	asrs	r2, r3, #31
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <SetShelve_mode+0x320>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	e9d7 8900 	ldrd	r8, r9, [r7]
 80028de:	4649      	mov	r1, r9
 80028e0:	fb02 f001 	mul.w	r0, r2, r1
 80028e4:	4641      	mov	r1, r8
 80028e6:	fb01 f103 	mul.w	r1, r1, r3
 80028ea:	4401      	add	r1, r0
 80028ec:	4640      	mov	r0, r8
 80028ee:	fba0 4502 	umull	r4, r5, r0, r2
 80028f2:	194b      	adds	r3, r1, r5
 80028f4:	461d      	mov	r5, r3
 80028f6:	f240 72b7 	movw	r2, #1975	; 0x7b7
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	4620      	mov	r0, r4
 8002900:	4629      	mov	r1, r5
 8002902:	f7fe fa5d 	bl	8000dc0 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	b293      	uxth	r3, r2
 800290c:	425b      	negs	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe feae 	bl	8001670 <Motor_Control>
}
 8002914:	e006      	b.n	8002924 <SetShelve_mode+0x308>
	else Motor_Control(_BACKDRIVE_FACTOR);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <SetShelve_mode+0x31c>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe fea6 	bl	8001670 <Motor_Control>
}
 8002924:	bf00      	nop
 8002926:	3730      	adds	r7, #48	; 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292e:	bf00      	nop
 8002930:	200002f4 	.word	0x200002f4
 8002934:	200010b8 	.word	0x200010b8
 8002938:	20000210 	.word	0x20000210
 800293c:	20000218 	.word	0x20000218

08002940 <SetHome_mode>:

void SetHome_mode(FlagTypeDef *flag ,QEIStructureTypeDef *QEI)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	static uint8_t pre_state = 0;
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && !pre_state)		// IF found PHOTOELECTRIC
 800294a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800294e:	4816      	ldr	r0, [pc, #88]	; (80029a8 <SetHome_mode+0x68>)
 8002950:	f003 ff44 	bl	80067dc <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d011      	beq.n	800297e <SetHome_mode+0x3e>
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <SetHome_mode+0x6c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <SetHome_mode+0x3e>
	{
		flag->setHome = 2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	701a      	strb	r2, [r3, #0]
		Motor_Control(_BACKDRIVE_FACTOR);
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <SetHome_mode+0x70>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe fe7d 	bl	8001670 <Motor_Control>
		QEIEncoder_SetHome(QEI);
 8002976:	6838      	ldr	r0, [r7, #0]
 8002978:	f7ff f980 	bl	8001c7c <QEIEncoder_SetHome>
	{
 800297c:	e010      	b.n	80029a0 <SetHome_mode+0x60>
	}
	else
	{
		flag->setHome = 1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
		Motor_Control(-125);
 8002984:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002988:	f7fe fe72 	bl	8001670 <Motor_Control>
		pre_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800298c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <SetHome_mode+0x68>)
 8002992:	f003 ff23 	bl	80067dc <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <SetHome_mode+0x6c>)
 800299c:	701a      	strb	r2, [r3, #0]
	}


// HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)		- ของจริง
//	HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)    - สำรอง
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	48000400 	.word	0x48000400
 80029ac:	200002f5 	.word	0x200002f5
 80029b0:	20000210 	.word	0x20000210
 80029b4:	00000000 	.word	0x00000000

080029b8 <Point_mode>:

void Point_mode(FlagTypeDef *flag,PIDStructureTypeDef *PIDp , PIDStructureTypeDef *PIDv , QEIStructureTypeDef *QEI,QuinticTypeDef *quintic , float goal)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6178      	str	r0, [r7, #20]
 80029c0:	6139      	str	r1, [r7, #16]
 80029c2:	60fa      	str	r2, [r7, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	ed87 0a01 	vstr	s0, [r7, #4]
	flag->Point = 1;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2201      	movs	r2, #1
 80029ce:	709a      	strb	r2, [r3, #2]
	flag->TrejectoryGen = 1;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2201      	movs	r2, #1
 80029d4:	711a      	strb	r2, [r3, #4]
	PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	ed93 7a01 	vldr	s14, [r3, #4]
 80029e2:	eef0 0a47 	vmov.f32	s1, s14
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	6938      	ldr	r0, [r7, #16]
 80029f0:	f7ff f804 	bl	80019fc <PIDControllerCascade_Command2>
	Motor_Control((int32_t)PIDv->Command);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fe:	ee17 0a90 	vmov	r0, s15
 8002a02:	f7fe fe35 	bl	8001670 <Motor_Control>
	if(fabs(QEI->LinearPosition - goal) <= 0.05)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a14:	eef0 7ae7 	vabs.f32	s15, s15
 8002a18:	ee17 0a90 	vmov	r0, s15
 8002a1c:	f7fd fd60 	bl	80004e0 <__aeabi_f2d>
 8002a20:	a309      	add	r3, pc, #36	; (adr r3, 8002a48 <Point_mode+0x90>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fe f82f 	bl	8000a88 <__aeabi_dcmple>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d100      	bne.n	8002a32 <Point_mode+0x7a>
	{
		flag->Point = 2;
		flag->TrejectoryGen =0;
	}
}
 8002a30:	e005      	b.n	8002a3e <Point_mode+0x86>
		flag->Point = 2;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2202      	movs	r2, #2
 8002a36:	709a      	strb	r2, [r3, #2]
		flag->TrejectoryGen =0;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	711a      	strb	r2, [r3, #4]
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	9999999a 	.word	0x9999999a
 8002a4c:	3fa99999 	.word	0x3fa99999

08002a50 <Jog_mode>:



void Jog_mode(FlagTypeDef *flag,PIDStructureTypeDef *PIDp , PIDStructureTypeDef *PIDv , QEIStructureTypeDef *QEI,QuinticTypeDef *quintic)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
	static uint8_t SUBSTATE = IDLE;
	static uint64_t timestamp;
	switch (SUBSTATE) {
 8002a5e:	4b98      	ldr	r3, [pc, #608]	; (8002cc0 <Jog_mode+0x270>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	f200 80ee 	bhi.w	8002c44 <Jog_mode+0x1f4>
 8002a68:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <Jog_mode+0x20>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002ad9 	.word	0x08002ad9
 8002a78:	08002bb3 	.word	0x08002bb3
 8002a7c:	08002bf9 	.word	0x08002bf9
		case IDLE:
			if(flag->Jog == 0) flag->jogTIME = 0;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	78db      	ldrb	r3, [r3, #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <Jog_mode+0x3e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	715a      	strb	r2, [r3, #5]

			flag->Jog = 1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	70da      	strb	r2, [r3, #3]
			flag->TrejectoryGen = 1;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	711a      	strb	r2, [r3, #4]
			if (flag->jogTIME < 10)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	795b      	ldrb	r3, [r3, #5]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d80f      	bhi.n	8002ac2 <Jog_mode+0x72>
			{
				SetPosition = Value.TargetPosition[flag->jogTIME];
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	795b      	ldrb	r3, [r3, #5]
 8002aa6:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <Jog_mode+0x274>)
 8002aa8:	3316      	adds	r3, #22
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a85      	ldr	r2, [pc, #532]	; (8002cc8 <Jog_mode+0x278>)
 8002ab2:	6013      	str	r3, [r2, #0]
				QuinticTrajectory_SetReady(quintic);
 8002ab4:	6a38      	ldr	r0, [r7, #32]
 8002ab6:	f000 fb8d 	bl	80031d4 <QuinticTrajectory_SetReady>
				SUBSTATE = GOING;
 8002aba:	4b81      	ldr	r3, [pc, #516]	; (8002cc0 <Jog_mode+0x270>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
				flag->Jog = 2;
				SolenoidSuck(0);
				SteadyPosition = SetPosition;
				return;
			}
			break;
 8002ac0:	e0c0      	b.n	8002c44 <Jog_mode+0x1f4>
				flag->Jog = 2;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	70da      	strb	r2, [r3, #3]
				SolenoidSuck(0);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f000 f957 	bl	8002d7c <SolenoidSuck>
				SteadyPosition = SetPosition;
 8002ace:	4b7e      	ldr	r3, [pc, #504]	; (8002cc8 <Jog_mode+0x278>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7e      	ldr	r2, [pc, #504]	; (8002ccc <Jog_mode+0x27c>)
 8002ad4:	6013      	str	r3, [r2, #0]
				return;
 8002ad6:	e0e9      	b.n	8002cac <Jog_mode+0x25c>
		case GOING:
			if(flag->jogTIME % 2 == 0) status.Z_Status = 4;				//	Pick
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	795b      	ldrb	r3, [r3, #5]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <Jog_mode+0x9e>
 8002ae6:	4b7a      	ldr	r3, [pc, #488]	; (8002cd0 <Jog_mode+0x280>)
 8002ae8:	2204      	movs	r2, #4
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e009      	b.n	8002b02 <Jog_mode+0xb2>
			else if(flag->jogTIME % 2 == 1) status.Z_Status = 8;		//	Place
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	795b      	ldrb	r3, [r3, #5]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <Jog_mode+0xb2>
 8002afc:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <Jog_mode+0x280>)
 8002afe:	2208      	movs	r2, #8
 8002b00:	609a      	str	r2, [r3, #8]
			PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b0e:	eef0 0a47 	vmov.f32	s1, s14
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68b8      	ldr	r0, [r7, #8]
 8002b1c:	f7fe ff6e 	bl	80019fc <PIDControllerCascade_Command2>
			Motor_Control((int32_t)PIDv->Command);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b2a:	ee17 0a90 	vmov	r0, s15
 8002b2e:	f7fe fd9f 	bl	8001670 <Motor_Control>
			SolenoidPull();
 8002b32:	f000 f8fb 	bl	8002d2c <SolenoidPull>
			SolenoidSuck(1);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f000 f920 	bl	8002d7c <SolenoidSuck>

			if(fabs(QEI->LinearPosition - SetPosition) <= 0.05)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <Jog_mode+0x278>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002b50:	ee17 0a90 	vmov	r0, s15
 8002b54:	f7fd fcc4 	bl	80004e0 <__aeabi_f2d>
 8002b58:	a357      	add	r3, pc, #348	; (adr r3, 8002cb8 <Jog_mode+0x268>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd ff93 	bl	8000a88 <__aeabi_dcmple>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d100      	bne.n	8002b6a <Jog_mode+0x11a>
				if(flag->jogTIME % 2 == 0) SUBSTATE = PICKING;				//	Pick
				else if(flag->jogTIME % 2 == 1) SUBSTATE = PLACING;		//	Place
				timestamp = micros() + 1500000;
			}

			break;
 8002b68:	e06c      	b.n	8002c44 <Jog_mode+0x1f4>
				flag->TrejectoryGen = 0;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	711a      	strb	r2, [r3, #4]
				if(flag->jogTIME % 2 == 0) SUBSTATE = PICKING;				//	Pick
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	795b      	ldrb	r3, [r3, #5]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <Jog_mode+0x136>
 8002b7e:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <Jog_mode+0x270>)
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e009      	b.n	8002b9a <Jog_mode+0x14a>
				else if(flag->jogTIME % 2 == 1) SUBSTATE = PLACING;		//	Place
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	795b      	ldrb	r3, [r3, #5]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <Jog_mode+0x14a>
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <Jog_mode+0x270>)
 8002b96:	2203      	movs	r2, #3
 8002b98:	701a      	strb	r2, [r3, #0]
				timestamp = micros() + 1500000;
 8002b9a:	f001 f929 	bl	8003df0 <micros>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	494c      	ldr	r1, [pc, #304]	; (8002cd4 <Jog_mode+0x284>)
 8002ba4:	1854      	adds	r4, r2, r1
 8002ba6:	f143 0500 	adc.w	r5, r3, #0
 8002baa:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <Jog_mode+0x288>)
 8002bac:	e9c3 4500 	strd	r4, r5, [r3]
			break;
 8002bb0:	e048      	b.n	8002c44 <Jog_mode+0x1f4>
		case PICKING:

			if(micros() <= timestamp)
 8002bb2:	f001 f91d 	bl	8003df0 <micros>
 8002bb6:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <Jog_mode+0x288>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	4282      	cmp	r2, r0
 8002bbe:	418b      	sbcs	r3, r1
 8002bc0:	d30e      	bcc.n	8002be0 <Jog_mode+0x190>
			{
				SolenoidPush();
 8002bc2:	f000 f88b 	bl	8002cdc <SolenoidPush>
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) SolenoidSuck(1);
 8002bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bce:	f003 fe05 	bl	80067dc <HAL_GPIO_ReadPin>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d132      	bne.n	8002c3e <Jog_mode+0x1ee>
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f000 f8cf 	bl	8002d7c <SolenoidSuck>
				SolenoidPull();
				flag->jogTIME +=1;
				SUBSTATE = IDLE;
			}

			break;
 8002bde:	e02e      	b.n	8002c3e <Jog_mode+0x1ee>
				SolenoidPull();
 8002be0:	f000 f8a4 	bl	8002d2c <SolenoidPull>
				flag->jogTIME +=1;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	795b      	ldrb	r3, [r3, #5]
 8002be8:	3301      	adds	r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	715a      	strb	r2, [r3, #5]
				SUBSTATE = IDLE;
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <Jog_mode+0x270>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
			break;
 8002bf6:	e022      	b.n	8002c3e <Jog_mode+0x1ee>


		case PLACING:
			if(micros() <= timestamp)
 8002bf8:	f001 f8fa 	bl	8003df0 <micros>
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <Jog_mode+0x288>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	4282      	cmp	r2, r0
 8002c04:	418b      	sbcs	r3, r1
 8002c06:	d30e      	bcc.n	8002c26 <Jog_mode+0x1d6>
			{
				SolenoidPush();
 8002c08:	f000 f868 	bl	8002cdc <SolenoidPush>
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0) SolenoidSuck(0);
 8002c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c14:	f003 fde2 	bl	80067dc <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d111      	bne.n	8002c42 <Jog_mode+0x1f2>
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f000 f8ac 	bl	8002d7c <SolenoidSuck>
				SolenoidPull();
				flag->jogTIME +=1;
				SUBSTATE = IDLE;
			}

			break;
 8002c24:	e00d      	b.n	8002c42 <Jog_mode+0x1f2>
				SolenoidPull();
 8002c26:	f000 f881 	bl	8002d2c <SolenoidPull>
				flag->jogTIME +=1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	795b      	ldrb	r3, [r3, #5]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	715a      	strb	r2, [r3, #5]
				SUBSTATE = IDLE;
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <Jog_mode+0x270>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
			break;
 8002c3c:	e001      	b.n	8002c42 <Jog_mode+0x1f2>
			break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <Jog_mode+0x1f4>
			break;
 8002c42:	bf00      	nop
	}
	if(flag->Jog == 0) flag->jogTIME = 0;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	78db      	ldrb	r3, [r3, #3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <Jog_mode+0x202>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	715a      	strb	r2, [r3, #5]

	PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c5e:	eef0 0a47 	vmov.f32	s1, s14
 8002c62:	eeb0 0a67 	vmov.f32	s0, s15
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	f7fe fec6 	bl	80019fc <PIDControllerCascade_Command2>
	Motor_Control((int32_t)PIDv->Command);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c7a:	ee17 0a90 	vmov	r0, s15
 8002c7e:	f7fe fcf7 	bl	8001670 <Motor_Control>

	if(flag->jogTIME % 2 == 0) status.Z_Status = 4;				//	Pick
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	795b      	ldrb	r3, [r3, #5]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <Jog_mode+0x248>
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <Jog_mode+0x280>)
 8002c92:	2204      	movs	r2, #4
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	e009      	b.n	8002cac <Jog_mode+0x25c>
	else if(flag->jogTIME % 2 == 1) status.Z_Status = 8;		//	Place
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	795b      	ldrb	r3, [r3, #5]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <Jog_mode+0x25c>
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <Jog_mode+0x280>)
 8002ca8:	2208      	movs	r2, #8
 8002caa:	609a      	str	r2, [r3, #8]

}
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	9999999a 	.word	0x9999999a
 8002cbc:	3fa99999 	.word	0x3fa99999
 8002cc0:	200002f6 	.word	0x200002f6
 8002cc4:	20001260 	.word	0x20001260
 8002cc8:	20000bdc 	.word	0x20000bdc
 8002ccc:	20000bd8 	.word	0x20000bd8
 8002cd0:	20001248 	.word	0x20001248
 8002cd4:	0016e360 	.word	0x0016e360
 8002cd8:	200002f8 	.word	0x200002f8

08002cdc <SolenoidPush>:

void SolenoidPush()
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != 0)	// ไม่เจอหน้าสุด
 8002ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce8:	f003 fd78 	bl	80067dc <HAL_GPIO_ReadPin>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <SolenoidPush+0x32>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfc:	f003 fd86 	bl	800680c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d08:	f003 fd80 	bl	800680c <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}
}
 8002d0c:	e00c      	b.n	8002d28 <SolenoidPush+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f003 fd78 	bl	800680c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d24:	f003 fd72 	bl	800680c <HAL_GPIO_WritePin>
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <SolenoidPull>:

void SolenoidPull()
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) != 0)
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	4811      	ldr	r0, [pc, #68]	; (8002d78 <SolenoidPull+0x4c>)
 8002d34:	f003 fd52 	bl	80067dc <HAL_GPIO_ReadPin>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <SolenoidPull+0x2e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d48:	f003 fd60 	bl	800680c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d54:	f003 fd5a 	bl	800680c <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}

}
 8002d58:	e00c      	b.n	8002d74 <SolenoidPull+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d64:	f003 fd52 	bl	800680c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d70:	f003 fd4c 	bl	800680c <HAL_GPIO_WritePin>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	48000800 	.word	0x48000800

08002d7c <SolenoidSuck>:

void SolenoidSuck(uint8_t trig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
	if(trig == 1) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <SolenoidSuck+0x1c>
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2120      	movs	r1, #32
 8002d90:	4806      	ldr	r0, [pc, #24]	; (8002dac <SolenoidSuck+0x30>)
 8002d92:	f003 fd3b 	bl	800680c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
}
 8002d96:	e004      	b.n	8002da2 <SolenoidSuck+0x26>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <SolenoidSuck+0x30>)
 8002d9e:	f003 fd35 	bl	800680c <HAL_GPIO_WritePin>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	48000800 	.word	0x48000800

08002db0 <QuinticTrajectory_Init>:
}state;

float period = 0.001;

void QuinticTrajectory_Init(QuinticTypeDef *q)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	q->Pi = 0;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
	q->Pf = 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
	q->t = 0;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
	q->tf = 0;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
	q->Position = 0;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
	q->Velocity = 0;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	605a      	str	r2, [r3, #4]
	q->Acceleration = 0;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]

}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <QuinticTrajectory_Generator>:

void QuinticTrajectory_Generator(QuinticTypeDef *q, float pi ,float pf , float tf)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	ed2d 8b02 	vpush	{d8}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e14:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e18:	ed87 1a00 	vstr	s2, [r7]
	switch(q->STATE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	f200 81c8 	bhi.w	80031b8 <QuinticTrajectory_Generator+0x3b4>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <QuinticTrajectory_Generator+0x2c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e4b 	.word	0x08002e4b
 8002e38:	08002f8d 	.word	0x08002f8d
 8002e3c:	0800319f 	.word	0x0800319f
	{
	case READY:
//		if(q->Pi != q->Pf) q->STATE = CALCULATE;
		q->STATE = CALCULATE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8002e48:	e1b6      	b.n	80031b8 <QuinticTrajectory_Generator+0x3b4>
	case CALCULATE:
		q->t = 0;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]

		q->Pi = pi;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	615a      	str	r2, [r3, #20]
		q->Pf = pf;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
		q->tf = tf;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	611a      	str	r2, [r3, #16]

		float s = pf - pi;
 8002e64:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e70:	edc7 7a05 	vstr	s15, [r7, #20]
		/*Coefficient Calculated*/
		q->c[0] = q->Pi;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	61da      	str	r2, [r3, #28]
		q->c[1] = 0;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
		q->c[2] = 0;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
		q->c[3] = 10.0*s/powf(q->tf,3);
 8002e8c:	6978      	ldr	r0, [r7, #20]
 8002e8e:	f7fd fb27 	bl	80004e0 <__aeabi_f2d>
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	4bcb      	ldr	r3, [pc, #812]	; (80031c4 <QuinticTrajectory_Generator+0x3c0>)
 8002e98:	f7fd fb7a 	bl	8000590 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eaa:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002eae:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb2:	f008 fc93 	bl	800b7dc <powf>
 8002eb6:	ee10 3a10 	vmov	r3, s0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb10 	bl	80004e0 <__aeabi_f2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fc8c 	bl	80007e4 <__aeabi_ddiv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fe16 	bl	8000b04 <__aeabi_d2f>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
		q->c[4] = -15.0*s/powf(q->tf,4);
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7fd fafe 	bl	80004e0 <__aeabi_f2d>
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4bb7      	ldr	r3, [pc, #732]	; (80031c8 <QuinticTrajectory_Generator+0x3c4>)
 8002eea:	f7fd fb51 	bl	8000590 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4614      	mov	r4, r2
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002efc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002f00:	eeb0 0a67 	vmov.f32	s0, s15
 8002f04:	f008 fc6a 	bl	800b7dc <powf>
 8002f08:	ee10 3a10 	vmov	r3, s0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fae7 	bl	80004e0 <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4620      	mov	r0, r4
 8002f18:	4629      	mov	r1, r5
 8002f1a:	f7fd fc63 	bl	80007e4 <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f7fd fded 	bl	8000b04 <__aeabi_d2f>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
		q->c[5] = 6.0*s/powf(q->tf,5);
 8002f30:	6978      	ldr	r0, [r7, #20]
 8002f32:	f7fd fad5 	bl	80004e0 <__aeabi_f2d>
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	4ba4      	ldr	r3, [pc, #656]	; (80031cc <QuinticTrajectory_Generator+0x3c8>)
 8002f3c:	f7fd fb28 	bl	8000590 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f4e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002f52:	eeb0 0a67 	vmov.f32	s0, s15
 8002f56:	f008 fc41 	bl	800b7dc <powf>
 8002f5a:	ee10 3a10 	vmov	r3, s0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fabe 	bl	80004e0 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	f7fd fc3a 	bl	80007e4 <__aeabi_ddiv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fdc4 	bl	8000b04 <__aeabi_d2f>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30

		q->STATE = WORKING;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8002f8a:	e115      	b.n	80031b8 <QuinticTrajectory_Generator+0x3b4>

	case WORKING:
		q->Position = q->c[0] +
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	ed93 7a07 	vldr	s14, [r3, #28]
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		q->Position = q->c[0] +
 8002fa2:	ee37 8a27 	vadd.f32	s16, s14, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fb2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fba:	f008 fc0f 	bl	800b7dc <powf>
 8002fbe:	eef0 7a40 	vmov.f32	s15, s0
 8002fc2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002fc6:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[3]*powf(q->t,3) +
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd6:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002fda:	eeb0 0a67 	vmov.f32	s0, s15
 8002fde:	f008 fbfd 	bl	800b7dc <powf>
 8002fe2:	eef0 7a40 	vmov.f32	s15, s0
 8002fe6:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[1]*q->t + q->c[2]*powf(q->t,2) +
 8002fea:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[4]*powf(q->t,4) +
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ffa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	f008 fbeb 	bl	800b7dc <powf>
 8003006:	eef0 7a40 	vmov.f32	s15, s0
 800300a:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[3]*powf(q->t,3) +
 800300e:	ee38 8a27 	vadd.f32	s16, s16, s15
						q->c[5]*powf(q->t,5);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	edd3 7a03 	vldr	s15, [r3, #12]
 800301e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003022:	eeb0 0a67 	vmov.f32	s0, s15
 8003026:	f008 fbd9 	bl	800b7dc <powf>
 800302a:	eef0 7a40 	vmov.f32	s15, s0
 800302e:	ee68 7aa7 	vmul.f32	s15, s17, s15
						q->c[4]*powf(q->t,4) +
 8003032:	ee78 7a27 	vadd.f32	s15, s16, s15
		q->Position = q->c[0] +
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	edc3 7a00 	vstr	s15, [r3]

		q->Velocity = q->c[1] + 2*q->c[2]*q->t + 3*q->c[3]*powf(q->t,2) + 4*q->c[4]*powf(q->t,3) + 5*q->c[5]*powf(q->t,4);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003048:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003056:	ee37 8a27 	vadd.f32	s16, s14, s15
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003060:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003064:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	edd3 7a03 	vldr	s15, [r3, #12]
 800306e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003072:	eeb0 0a67 	vmov.f32	s0, s15
 8003076:	f008 fbb1 	bl	800b7dc <powf>
 800307a:	eef0 7a40 	vmov.f32	s15, s0
 800307e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003082:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800308c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003090:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	edd3 7a03 	vldr	s15, [r3, #12]
 800309a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800309e:	eeb0 0a67 	vmov.f32	s0, s15
 80030a2:	f008 fb9b 	bl	800b7dc <powf>
 80030a6:	eef0 7a40 	vmov.f32	s15, s0
 80030aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80030ae:	ee38 8a27 	vadd.f32	s16, s16, s15
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80030b8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80030bc:	ee67 8a87 	vmul.f32	s17, s15, s14
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80030c6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	f008 fb85 	bl	800b7dc <powf>
 80030d2:	eef0 7a40 	vmov.f32	s15, s0
 80030d6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80030da:	ee78 7a27 	vadd.f32	s15, s16, s15
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	edc3 7a01 	vstr	s15, [r3, #4]
		q->Acceleration = 2*q->c[2] + 6*q->c[3]*q->t + 12*q->c[4]*powf(q->t,2) + 20*q->c[5]*powf(q->t,3);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030f4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80030f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003106:	ee37 8a27 	vadd.f32	s16, s14, s15
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003110:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003114:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	edd3 7a03 	vldr	s15, [r3, #12]
 800311e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	f008 fb59 	bl	800b7dc <powf>
 800312a:	eef0 7a40 	vmov.f32	s15, s0
 800312e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003132:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800313c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003140:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	edd3 7a03 	vldr	s15, [r3, #12]
 800314a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	f008 fb43 	bl	800b7dc <powf>
 8003156:	eef0 7a40 	vmov.f32	s15, s0
 800315a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800315e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	edc3 7a02 	vstr	s15, [r3, #8]
		q->t += period;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	ed93 7a03 	vldr	s14, [r3, #12]
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <QuinticTrajectory_Generator+0x3cc>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	edc3 7a03 	vstr	s15, [r3, #12]
		if(q->t >= tf) q->STATE = FINISH;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	edd3 7a03 	vldr	s15, [r3, #12]
 8003184:	ed97 7a00 	vldr	s14, [r7]
 8003188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	d900      	bls.n	8003194 <QuinticTrajectory_Generator+0x390>
		break;
 8003192:	e011      	b.n	80031b8 <QuinticTrajectory_Generator+0x3b4>
		if(q->t >= tf) q->STATE = FINISH;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2203      	movs	r2, #3
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 800319c:	e00c      	b.n	80031b8 <QuinticTrajectory_Generator+0x3b4>

	case FINISH:
		q->Velocity = 0;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
		q->Acceleration = 0;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
		q->Pi = q->Pf;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	615a      	str	r2, [r3, #20]
		break;
 80031b6:	bf00      	nop
	}
}
 80031b8:	bf00      	nop
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	ecbd 8b02 	vpop	{d8}
 80031c2:	bdb0      	pop	{r4, r5, r7, pc}
 80031c4:	40240000 	.word	0x40240000
 80031c8:	c02e0000 	.word	0xc02e0000
 80031cc:	40180000 	.word	0x40180000
 80031d0:	20000220 	.word	0x20000220

080031d4 <QuinticTrajectory_SetReady>:

void QuinticTrajectory_SetReady(QuinticTypeDef *q)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	q->STATE = READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031f4:	b08e      	sub	sp, #56	; 0x38
 80031f6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031f8:	f001 f957 	bl	80044aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031fc:	f000 f9fe 	bl	80035fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003200:	f000 fcd2 	bl	8003ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003204:	f000 fc96 	bl	8003b34 <MX_DMA_Init>
  MX_TIM5_Init();
 8003208:	f000 fbc0 	bl	800398c <MX_TIM5_Init>
  MX_TIM2_Init();
 800320c:	f000 fac8 	bl	80037a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003210:	f000 fb14 	bl	800383c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003214:	f000 fc40 	bl	8003a98 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003218:	f000 fb5e 	bl	80038d8 <MX_TIM4_Init>
  MX_ADC1_Init();
 800321c:	f000 fa38 	bl	8003690 <MX_ADC1_Init>
  MX_TIM16_Init();
 8003220:	f000 fc0a 	bl	8003a38 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  /* Initial Modbus Variable */
  hmodbus.huart = &huart2;
 8003224:	4b94      	ldr	r3, [pc, #592]	; (8003478 <main+0x288>)
 8003226:	4a95      	ldr	r2, [pc, #596]	; (800347c <main+0x28c>)
 8003228:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 800322a:	4b93      	ldr	r3, [pc, #588]	; (8003478 <main+0x288>)
 800322c:	4a94      	ldr	r2, [pc, #592]	; (8003480 <main+0x290>)
 800322e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8003230:	4b91      	ldr	r3, [pc, #580]	; (8003478 <main+0x288>)
 8003232:	2215      	movs	r2, #21
 8003234:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8003236:	4b90      	ldr	r3, [pc, #576]	; (8003478 <main+0x288>)
 8003238:	22c8      	movs	r2, #200	; 0xc8
 800323a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800323c:	4991      	ldr	r1, [pc, #580]	; (8003484 <main+0x294>)
 800323e:	488e      	ldr	r0, [pc, #568]	; (8003478 <main+0x288>)
 8003240:	f7fe fef2 	bl	8002028 <Modbus_init>

  pon = 0;
 8003244:	4b90      	ldr	r3, [pc, #576]	; (8003488 <main+0x298>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]



  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 800324a:	4890      	ldr	r0, [pc, #576]	; (800348c <main+0x29c>)
 800324c:	f004 fc12 	bl	8007a74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 8003250:	488f      	ldr	r0, [pc, #572]	; (8003490 <main+0x2a0>)
 8003252:	f004 fc0f 	bl	8007a74 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim4);							// Initialize PMW Signal Timer
 8003256:	488f      	ldr	r0, [pc, #572]	; (8003494 <main+0x2a4>)
 8003258:	f004 fb9c 	bl	8007994 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800325c:	2104      	movs	r1, #4
 800325e:	488d      	ldr	r0, [pc, #564]	; (8003494 <main+0x2a4>)
 8003260:	f004 fce4 	bl	8007c2c <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, Joystick.XYBuffer, 200);
 8003264:	22c8      	movs	r2, #200	; 0xc8
 8003266:	498c      	ldr	r1, [pc, #560]	; (8003498 <main+0x2a8>)
 8003268:	488c      	ldr	r0, [pc, #560]	; (800349c <main+0x2ac>)
 800326a:	f001 fd69 	bl	8004d40 <HAL_ADC_Start_DMA>

  float PID_P_up[3] = {0.82 ,0.000038, 0}; //{0.84 ,0.0000023, 0};
 800326e:	4a8c      	ldr	r2, [pc, #560]	; (80034a0 <main+0x2b0>)
 8003270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003274:	ca07      	ldmia	r2, {r0, r1, r2}
 8003276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_P_down[3] = {0.88 ,0.000028, 0}; //{1.6 ,0.000000067, 0}
 800327a:	4a8a      	ldr	r2, [pc, #552]	; (80034a4 <main+0x2b4>)
 800327c:	f107 0318 	add.w	r3, r7, #24
 8003280:	ca07      	ldmia	r2, {r0, r1, r2}
 8003282:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float PID_V_up[3] = {3.7 ,0.0013, 0.00000054}; //{4.38 ,0.005, 0.0000039}  {4.35 ,0.0038, 0.0000039}
 8003286:	4a88      	ldr	r2, [pc, #544]	; (80034a8 <main+0x2b8>)
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	ca07      	ldmia	r2, {r0, r1, r2}
 800328e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float PID_V_down[3] = {3.4 ,0.00085, 0.00000054};
 8003292:	4a86      	ldr	r2, [pc, #536]	; (80034ac <main+0x2bc>)
 8003294:	463b      	mov	r3, r7
 8003296:	ca07      	ldmia	r2, {r0, r1, r2}
 8003298:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 800329c:	4984      	ldr	r1, [pc, #528]	; (80034b0 <main+0x2c0>)
 800329e:	4885      	ldr	r0, [pc, #532]	; (80034b4 <main+0x2c4>)
 80032a0:	f7fe fbce 	bl	8001a40 <QEIEncoder_Init>
  PIDController_Init(&PIDp, PID_P_up[0], PID_P_up[1], PID_P_up[2] , PID_P_down[0], PID_P_down[1], PID_P_down[2]);	// Initialize Position Controller
 80032a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80032ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80032b0:	ed97 6a06 	vldr	s12, [r7, #24]
 80032b4:	edd7 5a07 	vldr	s11, [r7, #28]
 80032b8:	ed97 5a08 	vldr	s10, [r7, #32]
 80032bc:	eef0 2a45 	vmov.f32	s5, s10
 80032c0:	eeb0 2a65 	vmov.f32	s4, s11
 80032c4:	eef0 1a46 	vmov.f32	s3, s12
 80032c8:	eeb0 1a66 	vmov.f32	s2, s13
 80032cc:	eef0 0a47 	vmov.f32	s1, s14
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	4878      	ldr	r0, [pc, #480]	; (80034b8 <main+0x2c8>)
 80032d6:	f7fe f98f 	bl	80015f8 <PIDController_Init>
  PIDController_Init(&PIDv, PID_V_up[0], PID_V_up[1], PID_V_up[2] , PID_V_down[0], PID_V_down[1], PID_V_down[2]);	// Initialize Velocity Controller
 80032da:	edd7 7a03 	vldr	s15, [r7, #12]
 80032de:	ed97 7a04 	vldr	s14, [r7, #16]
 80032e2:	edd7 6a05 	vldr	s13, [r7, #20]
 80032e6:	ed97 6a00 	vldr	s12, [r7]
 80032ea:	edd7 5a01 	vldr	s11, [r7, #4]
 80032ee:	ed97 5a02 	vldr	s10, [r7, #8]
 80032f2:	eef0 2a45 	vmov.f32	s5, s10
 80032f6:	eeb0 2a65 	vmov.f32	s4, s11
 80032fa:	eef0 1a46 	vmov.f32	s3, s12
 80032fe:	eeb0 1a66 	vmov.f32	s2, s13
 8003302:	eef0 0a47 	vmov.f32	s1, s14
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	486c      	ldr	r0, [pc, #432]	; (80034bc <main+0x2cc>)
 800330c:	f7fe f974 	bl	80015f8 <PIDController_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// SET to UPWARD
 8003310:	2201      	movs	r2, #1
 8003312:	2110      	movs	r1, #16
 8003314:	486a      	ldr	r0, [pc, #424]	; (80034c0 <main+0x2d0>)
 8003316:	f003 fa79 	bl	800680c <HAL_GPIO_WritePin>

  QuinticTrajectory_Init(&quintic);
 800331a:	486a      	ldr	r0, [pc, #424]	; (80034c4 <main+0x2d4>)
 800331c:	f7ff fd48 	bl	8002db0 <QuinticTrajectory_Init>
  STATE = IDLE;
 8003320:	4b69      	ldr	r3, [pc, #420]	; (80034c8 <main+0x2d8>)
 8003322:	2200      	movs	r2, #0
 8003324:	801a      	strh	r2, [r3, #0]
  SteadyPosition = QEI.LinearPosition;
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <main+0x2c4>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	4a68      	ldr	r2, [pc, #416]	; (80034cc <main+0x2dc>)
 800332c:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Protocol Part */
	  status.StateFrame = registerFrame[0x01].U16;
 800332e:	4b55      	ldr	r3, [pc, #340]	; (8003484 <main+0x294>)
 8003330:	885b      	ldrh	r3, [r3, #2]
 8003332:	461a      	mov	r2, r3
 8003334:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <main+0x2e0>)
 8003336:	611a      	str	r2, [r3, #16]
	  pon = 1;
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <main+0x298>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
	  Modbus_Protocal_Worker();
 800333e:	f7fe feff 	bl	8002140 <Modbus_Protocal_Worker>
	  Heartbeat();
 8003342:	f7fd febb 	bl	80010bc <Heartbeat>
	  Routine(&QEI);
 8003346:	485b      	ldr	r0, [pc, #364]	; (80034b4 <main+0x2c4>)
 8003348:	f7fd fede 	bl	8001108 <Routine>
	  switch (STATE) {
 800334c:	4b5e      	ldr	r3, [pc, #376]	; (80034c8 <main+0x2d8>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	f200 811a 	bhi.w	800358a <main+0x39a>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <main+0x16c>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003371 	.word	0x08003371
 8003360:	080033e1 	.word	0x080033e1
 8003364:	0800353d 	.word	0x0800353d
 8003368:	080034dd 	.word	0x080034dd
 800336c:	0800342b 	.word	0x0800342b
		case IDLE:
			if(registerFrame[0x01].U16 == 2) STATE = SETHOME;
 8003370:	4b44      	ldr	r3, [pc, #272]	; (8003484 <main+0x294>)
 8003372:	885b      	ldrh	r3, [r3, #2]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d103      	bne.n	8003380 <main+0x190>
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <main+0x2d8>)
 800337a:	2201      	movs	r2, #1
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	e016      	b.n	80033ae <main+0x1be>
			else if(registerFrame[0x01].U16 == 1) STATE = SETSHELVE;
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <main+0x294>)
 8003382:	885b      	ldrh	r3, [r3, #2]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d103      	bne.n	8003390 <main+0x1a0>
 8003388:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <main+0x2d8>)
 800338a:	2204      	movs	r2, #4
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e00e      	b.n	80033ae <main+0x1be>
			else if(registerFrame[0x01].U16 == 8) STATE = POINT;
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <main+0x294>)
 8003392:	885b      	ldrh	r3, [r3, #2]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d103      	bne.n	80033a0 <main+0x1b0>
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <main+0x2d8>)
 800339a:	2203      	movs	r2, #3
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	e006      	b.n	80033ae <main+0x1be>
			else if(registerFrame[0x01].U16 == 4) STATE = JOG;
 80033a0:	4b38      	ldr	r3, [pc, #224]	; (8003484 <main+0x294>)
 80033a2:	885b      	ldrh	r3, [r3, #2]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d102      	bne.n	80033ae <main+0x1be>
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <main+0x2d8>)
 80033aa:	2202      	movs	r2, #2
 80033ac:	801a      	strh	r2, [r3, #0]


			PIDControllerCascade_Command2(&PIDp, &PIDv, &QEI, SteadyPosition, 0);
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <main+0x2dc>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	eddf 0a47 	vldr	s1, [pc, #284]	; 80034d4 <main+0x2e4>
 80033b8:	eeb0 0a67 	vmov.f32	s0, s15
 80033bc:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <main+0x2c4>)
 80033be:	493f      	ldr	r1, [pc, #252]	; (80034bc <main+0x2cc>)
 80033c0:	483d      	ldr	r0, [pc, #244]	; (80034b8 <main+0x2c8>)
 80033c2:	f7fe fb1b 	bl	80019fc <PIDControllerCascade_Command2>
			Motor_Control((int32_t)(PIDv.Command));
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <main+0x2cc>)
 80033c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d0:	ee17 0a90 	vmov	r0, s15
 80033d4:	f7fe f94c 	bl	8001670 <Motor_Control>
			QuinticTrajectory_SetReady(&quintic);
 80033d8:	483a      	ldr	r0, [pc, #232]	; (80034c4 <main+0x2d4>)
 80033da:	f7ff fefb 	bl	80031d4 <QuinticTrajectory_SetReady>
//			SolenoidSuck(0);
			break;
 80033de:	e0d4      	b.n	800358a <main+0x39a>

		case SETHOME:
			SetHome_mode(&Flag, &QEI);
 80033e0:	4934      	ldr	r1, [pc, #208]	; (80034b4 <main+0x2c4>)
 80033e2:	483d      	ldr	r0, [pc, #244]	; (80034d8 <main+0x2e8>)
 80033e4:	f7ff faac 	bl	8002940 <SetHome_mode>
			status.Z_Status = 2;
 80033e8:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <main+0x2e0>)
 80033ea:	2202      	movs	r2, #2
 80033ec:	609a      	str	r2, [r3, #8]
			registerFrame[0x10].U16 = status.Z_Status; // update Z-axis moving status "Home"
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <main+0x2e0>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <main+0x294>)
 80033f6:	841a      	strh	r2, [r3, #32]
			if(Flag.setHome == 2)	// If finish sethome
 80033f8:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <main+0x2e8>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	f040 80bd 	bne.w	800357c <main+0x38c>
			{
				Flag.setHome = 0;
 8003402:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <main+0x2e8>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
				status.reset = 0;
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <main+0x2e0>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <main+0x294>)
 8003410:	2200      	movs	r2, #0
 8003412:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <main+0x2e0>)
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]

				SteadyPosition = QEI.LinearPosition;
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <main+0x2c4>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <main+0x2dc>)
 8003420:	6013      	str	r3, [r2, #0]

				STATE = IDLE;
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <main+0x2d8>)
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003428:	e0a8      	b.n	800357c <main+0x38c>

		case SETSHELVE:
			SetShelve_mode(&Flag,&Joystick, &QEI);
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <main+0x2c4>)
 800342c:	491a      	ldr	r1, [pc, #104]	; (8003498 <main+0x2a8>)
 800342e:	482a      	ldr	r0, [pc, #168]	; (80034d8 <main+0x2e8>)
 8003430:	f7ff f8f4 	bl	800261c <SetShelve_mode>
			status.Z_Status = 1;
 8003434:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <main+0x2e0>)
 8003436:	2201      	movs	r2, #1
 8003438:	609a      	str	r2, [r3, #8]
			registerFrame[0x10].U16 = status.Z_Status;
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <main+0x2e0>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	b29a      	uxth	r2, r3
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <main+0x294>)
 8003442:	841a      	strh	r2, [r3, #32]
			if(Flag.setShelve == 2)	// Finish SetShelve
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <main+0x2e8>)
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	2b02      	cmp	r3, #2
 800344a:	f040 8099 	bne.w	8003580 <main+0x390>
			{
				Flag.setShelve = 0;
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <main+0x2e8>)
 8003450:	2200      	movs	r2, #0
 8003452:	705a      	strb	r2, [r3, #1]
				status.reset = 0;
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <main+0x2e0>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <main+0x294>)
 800345c:	2200      	movs	r2, #0
 800345e:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <main+0x2e0>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]

				SteadyPosition = QEI.LinearPosition;
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <main+0x2c4>)
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <main+0x2dc>)
 800346c:	6013      	str	r3, [r2, #0]
				STATE = IDLE;
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <main+0x2d8>)
 8003470:	2200      	movs	r2, #0
 8003472:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003474:	e084      	b.n	8003580 <main+0x390>
 8003476:	bf00      	nop
 8003478:	20000be0 	.word	0x20000be0
 800347c:	200007c8 	.word	0x200007c8
 8003480:	200006fc 	.word	0x200006fc
 8003484:	200010b8 	.word	0x200010b8
 8003488:	20001300 	.word	0x20001300
 800348c:	200003cc 	.word	0x200003cc
 8003490:	20000498 	.word	0x20000498
 8003494:	20000564 	.word	0x20000564
 8003498:	200009f0 	.word	0x200009f0
 800349c:	20000300 	.word	0x20000300
 80034a0:	0800bf78 	.word	0x0800bf78
 80034a4:	0800bf84 	.word	0x0800bf84
 80034a8:	0800bf90 	.word	0x0800bf90
 80034ac:	0800bf9c 	.word	0x0800bf9c
 80034b0:	20000630 	.word	0x20000630
 80034b4:	20000960 	.word	0x20000960
 80034b8:	20000998 	.word	0x20000998
 80034bc:	200009c4 	.word	0x200009c4
 80034c0:	48000800 	.word	0x48000800
 80034c4:	20000ba0 	.word	0x20000ba0
 80034c8:	200012e0 	.word	0x200012e0
 80034cc:	20000bd8 	.word	0x20000bd8
 80034d0:	20001248 	.word	0x20001248
 80034d4:	00000000 	.word	0x00000000
 80034d8:	200012e4 	.word	0x200012e4
		case POINT:
			status.Z_Status = 16;
 80034dc:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <main+0x3d0>)
 80034de:	2210      	movs	r2, #16
 80034e0:	609a      	str	r2, [r3, #8]
			GetGoalPoint();
 80034e2:	f7fd fec1 	bl	8001268 <GetGoalPoint>
			SetPosition = (float)Value.GoalPoint;
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <main+0x3d4>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <main+0x3d8>)
 80034f4:	edc3 7a00 	vstr	s15, [r3]
			Point_mode(&Flag,&PIDp,&PIDv,&QEI,&quintic,SetPosition);
 80034f8:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <main+0x3d8>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	4b33      	ldr	r3, [pc, #204]	; (80035cc <main+0x3dc>)
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	eeb0 0a67 	vmov.f32	s0, s15
 8003506:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <main+0x3e0>)
 8003508:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <main+0x3e4>)
 800350a:	4933      	ldr	r1, [pc, #204]	; (80035d8 <main+0x3e8>)
 800350c:	4833      	ldr	r0, [pc, #204]	; (80035dc <main+0x3ec>)
 800350e:	f7ff fa53 	bl	80029b8 <Point_mode>
			if(Flag.Point == 2)				// Finish Point
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <main+0x3ec>)
 8003514:	789b      	ldrb	r3, [r3, #2]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d134      	bne.n	8003584 <main+0x394>
			{
				Flag.Point = 0;
 800351a:	4b30      	ldr	r3, [pc, #192]	; (80035dc <main+0x3ec>)
 800351c:	2200      	movs	r2, #0
 800351e:	709a      	strb	r2, [r3, #2]
				registerFrame[0x01].U16 = 0; //reset Base System Status
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <main+0x3f0>)
 8003522:	2200      	movs	r2, #0
 8003524:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <main+0x3d0>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]

				SteadyPosition = quintic.Pf;
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <main+0x3dc>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <main+0x3f4>)
 8003532:	6013      	str	r3, [r2, #0]

				STATE = IDLE;
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <main+0x3f8>)
 8003536:	2200      	movs	r2, #0
 8003538:	801a      	strh	r2, [r3, #0]
			}
			break;
 800353a:	e023      	b.n	8003584 <main+0x394>
		case JOG:
			GetPick_PlaceOrder(&Joystick);
 800353c:	482b      	ldr	r0, [pc, #172]	; (80035ec <main+0x3fc>)
 800353e:	f7fd feab 	bl	8001298 <GetPick_PlaceOrder>
			Jog_mode(&Flag, &PIDp, &PIDv, &QEI, &quintic);
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <main+0x3dc>)
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <main+0x3e0>)
 8003548:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <main+0x3e4>)
 800354a:	4923      	ldr	r1, [pc, #140]	; (80035d8 <main+0x3e8>)
 800354c:	4823      	ldr	r0, [pc, #140]	; (80035dc <main+0x3ec>)
 800354e:	f7ff fa7f 	bl	8002a50 <Jog_mode>
			if(Flag.Jog == 2)
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <main+0x3ec>)
 8003554:	78db      	ldrb	r3, [r3, #3]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d116      	bne.n	8003588 <main+0x398>
			{
				Flag.Jog = 0;
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <main+0x3ec>)
 800355c:	2200      	movs	r2, #0
 800355e:	70da      	strb	r2, [r3, #3]
				registerFrame[0x01].U16 = 0;
 8003560:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <main+0x3f0>)
 8003562:	2200      	movs	r2, #0
 8003564:	805a      	strh	r2, [r3, #2]
				status.Z_Status = 0;
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <main+0x3d0>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
				SteadyPosition = quintic.Pf;
 800356c:	4b17      	ldr	r3, [pc, #92]	; (80035cc <main+0x3dc>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <main+0x3f4>)
 8003572:	6013      	str	r3, [r2, #0]
				STATE = IDLE;
 8003574:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <main+0x3f8>)
 8003576:	2200      	movs	r2, #0
 8003578:	801a      	strh	r2, [r3, #0]
			}
			break;
 800357a:	e005      	b.n	8003588 <main+0x398>
			break;
 800357c:	bf00      	nop
 800357e:	e004      	b.n	800358a <main+0x39a>
			break;
 8003580:	bf00      	nop
 8003582:	e002      	b.n	800358a <main+0x39a>
			break;
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <main+0x39a>
			break;
 8003588:	bf00      	nop
//		case EMERGENCY:
//			Motor_Control(0);
//			break;
	}
	  FwReed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800358a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800358e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003592:	f003 f923 	bl	80067dc <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2200      	movs	r2, #0
 800359c:	4698      	mov	r8, r3
 800359e:	4691      	mov	r9, r2
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <main+0x400>)
 80035a2:	e9c3 8900 	strd	r8, r9, [r3]
	  BwReed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	4812      	ldr	r0, [pc, #72]	; (80035f4 <main+0x404>)
 80035aa:	f003 f917 	bl	80067dc <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2200      	movs	r2, #0
 80035b4:	461c      	mov	r4, r3
 80035b6:	4615      	mov	r5, r2
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <main+0x408>)
 80035ba:	e9c3 4500 	strd	r4, r5, [r3]
	  status.StateFrame = registerFrame[0x01].U16;
 80035be:	e6b6      	b.n	800332e <main+0x13e>
 80035c0:	20001248 	.word	0x20001248
 80035c4:	20001260 	.word	0x20001260
 80035c8:	20000bdc 	.word	0x20000bdc
 80035cc:	20000ba0 	.word	0x20000ba0
 80035d0:	20000960 	.word	0x20000960
 80035d4:	200009c4 	.word	0x200009c4
 80035d8:	20000998 	.word	0x20000998
 80035dc:	200012e4 	.word	0x200012e4
 80035e0:	200010b8 	.word	0x200010b8
 80035e4:	20000bd8 	.word	0x20000bd8
 80035e8:	200012e0 	.word	0x200012e0
 80035ec:	200009f0 	.word	0x200009f0
 80035f0:	200012f0 	.word	0x200012f0
 80035f4:	48000800 	.word	0x48000800
 80035f8:	200012f8 	.word	0x200012f8

080035fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b094      	sub	sp, #80	; 0x50
 8003600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003602:	f107 0318 	add.w	r3, r7, #24
 8003606:	2238      	movs	r2, #56	; 0x38
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f008 f8a6 	bl	800b75c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800361e:	2000      	movs	r0, #0
 8003620:	f003 f924 	bl	800686c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003624:	2301      	movs	r3, #1
 8003626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800362e:	2302      	movs	r3, #2
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003632:	2303      	movs	r3, #3
 8003634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8003636:	2306      	movs	r3, #6
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800363a:	2355      	movs	r3, #85	; 0x55
 800363c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800363e:	2302      	movs	r3, #2
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003642:	2302      	movs	r3, #2
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003646:	2302      	movs	r3, #2
 8003648:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800364a:	f107 0318 	add.w	r3, r7, #24
 800364e:	4618      	mov	r0, r3
 8003650:	f003 f9c0 	bl	80069d4 <HAL_RCC_OscConfig>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800365a:	f000 fbe3 	bl	8003e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800365e:	230f      	movs	r3, #15
 8003660:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003662:	2303      	movs	r3, #3
 8003664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	2104      	movs	r1, #4
 8003676:	4618      	mov	r0, r3
 8003678:	f003 fcbe 	bl	8006ff8 <HAL_RCC_ClockConfig>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003682:	f000 fbcf 	bl	8003e24 <Error_Handler>
  }
}
 8003686:	bf00      	nop
 8003688:	3750      	adds	r7, #80	; 0x50
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	2220      	movs	r2, #32
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f008 f857 	bl	800b75c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <MX_ADC1_Init+0x104>)
 80036b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80036b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <MX_ADC1_Init+0x104>)
 80036b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036be:	4b35      	ldr	r3, [pc, #212]	; (8003794 <MX_ADC1_Init+0x104>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <MX_ADC1_Init+0x104>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80036ca:	4b32      	ldr	r3, [pc, #200]	; (8003794 <MX_ADC1_Init+0x104>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <MX_ADC1_Init+0x104>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <MX_ADC1_Init+0x104>)
 80036d8:	2204      	movs	r2, #4
 80036da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <MX_ADC1_Init+0x104>)
 80036de:	2200      	movs	r2, #0
 80036e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <MX_ADC1_Init+0x104>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <MX_ADC1_Init+0x104>)
 80036ea:	2202      	movs	r2, #2
 80036ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <MX_ADC1_Init+0x104>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <MX_ADC1_Init+0x104>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <MX_ADC1_Init+0x104>)
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <MX_ADC1_Init+0x104>)
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <MX_ADC1_Init+0x104>)
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <MX_ADC1_Init+0x104>)
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003718:	481e      	ldr	r0, [pc, #120]	; (8003794 <MX_ADC1_Init+0x104>)
 800371a:	f001 f955 	bl	80049c8 <HAL_ADC_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003724:	f000 fb7e 	bl	8003e24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800372c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003730:	4619      	mov	r1, r3
 8003732:	4818      	ldr	r0, [pc, #96]	; (8003794 <MX_ADC1_Init+0x104>)
 8003734:	f002 f986 	bl	8005a44 <HAL_ADCEx_MultiModeConfigChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800373e:	f000 fb71 	bl	8003e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <MX_ADC1_Init+0x108>)
 8003744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003746:	2306      	movs	r3, #6
 8003748:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800374a:	2307      	movs	r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800374e:	237f      	movs	r3, #127	; 0x7f
 8003750:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003752:	2304      	movs	r3, #4
 8003754:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	4619      	mov	r1, r3
 800375e:	480d      	ldr	r0, [pc, #52]	; (8003794 <MX_ADC1_Init+0x104>)
 8003760:	f001 fbe0 	bl	8004f24 <HAL_ADC_ConfigChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800376a:	f000 fb5b 	bl	8003e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <MX_ADC1_Init+0x10c>)
 8003770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003772:	230c      	movs	r3, #12
 8003774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4806      	ldr	r0, [pc, #24]	; (8003794 <MX_ADC1_Init+0x104>)
 800377c:	f001 fbd2 	bl	8004f24 <HAL_ADC_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003786:	f000 fb4d 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800378a:	bf00      	nop
 800378c:	3730      	adds	r7, #48	; 0x30
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000300 	.word	0x20000300
 8003798:	1d500080 	.word	0x1d500080
 800379c:	3ef08000 	.word	0x3ef08000

080037a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <MX_TIM2_Init+0x98>)
 80037c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <MX_TIM2_Init+0x98>)
 80037c8:	22a9      	movs	r2, #169	; 0xa9
 80037ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <MX_TIM2_Init+0x98>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <MX_TIM2_Init+0x98>)
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <MX_TIM2_Init+0x98>)
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <MX_TIM2_Init+0x98>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037e6:	4814      	ldr	r0, [pc, #80]	; (8003838 <MX_TIM2_Init+0x98>)
 80037e8:	f004 f870 	bl	80078cc <HAL_TIM_Base_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037f2:	f000 fb17 	bl	8003e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037fc:	f107 0310 	add.w	r3, r7, #16
 8003800:	4619      	mov	r1, r3
 8003802:	480d      	ldr	r0, [pc, #52]	; (8003838 <MX_TIM2_Init+0x98>)
 8003804:	f004 ffea 	bl	80087dc <HAL_TIM_ConfigClockSource>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800380e:	f000 fb09 	bl	8003e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4806      	ldr	r0, [pc, #24]	; (8003838 <MX_TIM2_Init+0x98>)
 8003820:	f005 ffc2 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800382a:	f000 fafb 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800382e:	bf00      	nop
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200003cc 	.word	0x200003cc

0800383c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	f107 0310 	add.w	r3, r7, #16
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <MX_TIM3_Init+0x94>)
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <MX_TIM3_Init+0x98>)
 800385e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <MX_TIM3_Init+0x94>)
 8003862:	22a9      	movs	r2, #169	; 0xa9
 8003864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <MX_TIM3_Init+0x94>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <MX_TIM3_Init+0x94>)
 800386e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <MX_TIM3_Init+0x94>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <MX_TIM3_Init+0x94>)
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003880:	4813      	ldr	r0, [pc, #76]	; (80038d0 <MX_TIM3_Init+0x94>)
 8003882:	f004 f823 	bl	80078cc <HAL_TIM_Base_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800388c:	f000 faca 	bl	8003e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4619      	mov	r1, r3
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <MX_TIM3_Init+0x94>)
 800389e:	f004 ff9d 	bl	80087dc <HAL_TIM_ConfigClockSource>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80038a8:	f000 fabc 	bl	8003e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ac:	2300      	movs	r3, #0
 80038ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <MX_TIM3_Init+0x94>)
 80038ba:	f005 ff75 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80038c4:	f000 faae 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000498 	.word	0x20000498
 80038d4:	40000400 	.word	0x40000400

080038d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ea:	463b      	mov	r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
 80038f8:	615a      	str	r2, [r3, #20]
 80038fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <MX_TIM4_Init+0xac>)
 80038fe:	4a22      	ldr	r2, [pc, #136]	; (8003988 <MX_TIM4_Init+0xb0>)
 8003900:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <MX_TIM4_Init+0xac>)
 8003904:	22a9      	movs	r2, #169	; 0xa9
 8003906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <MX_TIM4_Init+0xac>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <MX_TIM4_Init+0xac>)
 8003910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003914:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <MX_TIM4_Init+0xac>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_TIM4_Init+0xac>)
 800391e:	2200      	movs	r2, #0
 8003920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003922:	4818      	ldr	r0, [pc, #96]	; (8003984 <MX_TIM4_Init+0xac>)
 8003924:	f004 f91e 	bl	8007b64 <HAL_TIM_PWM_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800392e:	f000 fa79 	bl	8003e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800393a:	f107 031c 	add.w	r3, r7, #28
 800393e:	4619      	mov	r1, r3
 8003940:	4810      	ldr	r0, [pc, #64]	; (8003984 <MX_TIM4_Init+0xac>)
 8003942:	f005 ff31 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800394c:	f000 fa6a 	bl	8003e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003950:	2360      	movs	r3, #96	; 0x60
 8003952:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003960:	463b      	mov	r3, r7
 8003962:	2204      	movs	r2, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <MX_TIM4_Init+0xac>)
 8003968:	f004 fe24 	bl	80085b4 <HAL_TIM_PWM_ConfigChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003972:	f000 fa57 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003976:	4803      	ldr	r0, [pc, #12]	; (8003984 <MX_TIM4_Init+0xac>)
 8003978:	f000 fbe2 	bl	8004140 <HAL_TIM_MspPostInit>

}
 800397c:	bf00      	nop
 800397e:	3728      	adds	r7, #40	; 0x28
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000564 	.word	0x20000564
 8003988:	40000800 	.word	0x40000800

0800398c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f007 fede 	bl	800b75c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a0:	463b      	mov	r3, r7
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <MX_TIM5_Init+0xa8>)
 80039ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039be:	f04f 32ff 	mov.w	r2, #4294967295
 80039c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039d0:	2303      	movs	r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039e4:	2300      	movs	r3, #0
 80039e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039e8:	2301      	movs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039ec:	2300      	movs	r3, #0
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	4619      	mov	r1, r3
 80039fa:	480d      	ldr	r0, [pc, #52]	; (8003a30 <MX_TIM5_Init+0xa4>)
 80039fc:	f004 fb1e 	bl	800803c <HAL_TIM_Encoder_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003a06:	f000 fa0d 	bl	8003e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a12:	463b      	mov	r3, r7
 8003a14:	4619      	mov	r1, r3
 8003a16:	4806      	ldr	r0, [pc, #24]	; (8003a30 <MX_TIM5_Init+0xa4>)
 8003a18:	f005 fec6 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003a22:	f000 f9ff 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a26:	bf00      	nop
 8003a28:	3730      	adds	r7, #48	; 0x30
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000630 	.word	0x20000630
 8003a34:	40000c00 	.word	0x40000c00

08003a38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003a3c:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a3e:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <MX_TIM16_Init+0x5c>)
 8003a40:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a44:	22a9      	movs	r2, #169	; 0xa9
 8003a46:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a50:	f240 4279 	movw	r2, #1145	; 0x479
 8003a54:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a68:	4809      	ldr	r0, [pc, #36]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a6a:	f003 ff2f 	bl	80078cc <HAL_TIM_Base_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003a74:	f000 f9d6 	bl	8003e24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a78:	2108      	movs	r1, #8
 8003a7a:	4805      	ldr	r0, [pc, #20]	; (8003a90 <MX_TIM16_Init+0x58>)
 8003a7c:	f004 f9e8 	bl	8007e50 <HAL_TIM_OnePulse_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003a86:	f000 f9cd 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200006fc 	.word	0x200006fc
 8003a94:	40014400 	.word	0x40014400

08003a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003a9e:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <MX_USART2_UART_Init+0x98>)
 8003aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003aa4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ab0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ae4:	4811      	ldr	r0, [pc, #68]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003ae6:	f005 ff45 	bl	8009974 <HAL_UART_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003af0:	f000 f998 	bl	8003e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003af4:	2100      	movs	r1, #0
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003af8:	f007 fd65 	bl	800b5c6 <HAL_UARTEx_SetTxFifoThreshold>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003b02:	f000 f98f 	bl	8003e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b06:	2100      	movs	r1, #0
 8003b08:	4808      	ldr	r0, [pc, #32]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003b0a:	f007 fd9a 	bl	800b642 <HAL_UARTEx_SetRxFifoThreshold>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003b14:	f000 f986 	bl	8003e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003b18:	4804      	ldr	r0, [pc, #16]	; (8003b2c <MX_USART2_UART_Init+0x94>)
 8003b1a:	f007 fd1b 	bl	800b554 <HAL_UARTEx_DisableFifoMode>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003b24:	f000 f97e 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200007c8 	.word	0x200007c8
 8003b30:	40004400 	.word	0x40004400

08003b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <MX_DMA_Init+0x70>)
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3e:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <MX_DMA_Init+0x70>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6493      	str	r3, [r2, #72]	; 0x48
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <MX_DMA_Init+0x70>)
 8003b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <MX_DMA_Init+0x70>)
 8003b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b56:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <MX_DMA_Init+0x70>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6493      	str	r3, [r2, #72]	; 0x48
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <MX_DMA_Init+0x70>)
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	200b      	movs	r0, #11
 8003b70:	f002 f94b 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b74:	200b      	movs	r0, #11
 8003b76:	f002 f962 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	200c      	movs	r0, #12
 8003b80:	f002 f943 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003b84:	200c      	movs	r0, #12
 8003b86:	f002 f95a 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	200d      	movs	r0, #13
 8003b90:	f002 f93b 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003b94:	200d      	movs	r0, #13
 8003b96:	f002 f952 	bl	8005e3e <HAL_NVIC_EnableIRQ>

}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bbe:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	4a60      	ldr	r2, [pc, #384]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bca:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	4a5a      	ldr	r2, [pc, #360]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be2:	4b58      	ldr	r3, [pc, #352]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bfa:	4b52      	ldr	r3, [pc, #328]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	4a4e      	ldr	r2, [pc, #312]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c12:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <MX_GPIO_Init+0x19c>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	607b      	str	r3, [r7, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c28:	f002 fdf0 	bl	800680c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2130      	movs	r1, #48	; 0x30
 8003c30:	4845      	ldr	r0, [pc, #276]	; (8003d48 <MX_GPIO_Init+0x1a0>)
 8003c32:	f002 fdeb 	bl	800680c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	483e      	ldr	r0, [pc, #248]	; (8003d48 <MX_GPIO_Init+0x1a0>)
 8003c4e:	f002 fc43 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c52:	2304      	movs	r3, #4
 8003c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	4619      	mov	r1, r3
 8003c64:	4838      	ldr	r0, [pc, #224]	; (8003d48 <MX_GPIO_Init+0x1a0>)
 8003c66:	f002 fc37 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 8003c6a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4619      	mov	r1, r3
 8003c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c86:	f002 fc27 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c8a:	2330      	movs	r3, #48	; 0x30
 8003c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4829      	ldr	r0, [pc, #164]	; (8003d48 <MX_GPIO_Init+0x1a0>)
 8003ca2:	f002 fc19 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8003ca6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4824      	ldr	r0, [pc, #144]	; (8003d4c <MX_GPIO_Init+0x1a4>)
 8003cbc:	f002 fc0c 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	481d      	ldr	r0, [pc, #116]	; (8003d4c <MX_GPIO_Init+0x1a4>)
 8003cd8:	f002 fbfe 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003cdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4816      	ldr	r0, [pc, #88]	; (8003d4c <MX_GPIO_Init+0x1a4>)
 8003cf2:	f002 fbf1 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	4619      	mov	r1, r3
 8003d08:	480f      	ldr	r0, [pc, #60]	; (8003d48 <MX_GPIO_Init+0x1a0>)
 8003d0a:	f002 fbe5 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4619      	mov	r1, r3
 8003d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d26:	f002 fbd7 	bl	80064d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2028      	movs	r0, #40	; 0x28
 8003d30:	f002 f86b 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d34:	2028      	movs	r0, #40	; 0x28
 8003d36:	f002 f882 	bl	8005e3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d3a:	bf00      	nop
 8003d3c:	3728      	adds	r7, #40	; 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	48000800 	.word	0x48000800
 8003d4c:	48000400 	.word	0x48000400

08003d50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8003d50:	b5b0      	push	{r4, r5, r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d108      	bne.n	8003d72 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	1c54      	adds	r4, r2, #1
 8003d68:	f143 0500 	adc.w	r5, r3, #0
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d6e:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3) // [1 microseconds]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d11a      	bne.n	8003db0 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		QEIEncoder_Update(&QEI, &htim5, micros());
 8003d7a:	f000 f839 	bl	8003df0 <micros>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4910      	ldr	r1, [pc, #64]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d84:	4810      	ldr	r0, [pc, #64]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d86:	f7fd fe73 	bl	8001a70 <QEIEncoder_Update>
		if(Flag.TrejectoryGen == 1)
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003d8c:	791b      	ldrb	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			QuinticTrajectory_Generator(&quintic, QEI.LinearPosition, SetPosition, 2);
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d9a:	ed93 7a00 	vldr	s14, [r3]
 8003d9e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8003da2:	eef0 0a47 	vmov.f32	s1, s14
 8003da6:	eeb0 0a67 	vmov.f32	s0, s15
 8003daa:	480a      	ldr	r0, [pc, #40]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003dac:	f7ff f82a 	bl	8002e04 <QuinticTrajectory_Generator>
		}
	}
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bdb0      	pop	{r4, r5, r7, pc}
 8003db8:	200003cc 	.word	0x200003cc
 8003dbc:	20000958 	.word	0x20000958
 8003dc0:	20000498 	.word	0x20000498
 8003dc4:	20000630 	.word	0x20000630
 8003dc8:	20000960 	.word	0x20000960
 8003dcc:	200012e4 	.word	0x200012e4
 8003dd0:	20000bdc 	.word	0x20000bdc
 8003dd4:	20000ba0 	.word	0x20000ba0

08003dd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
	}
	else if(GPIO_Pin == GPIO_PIN_12)			// Emergency
	{
//		STATE = EMERGENCY;
	}
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <micros>:

uint64_t micros()	// System Time
{
 8003df0:	b4b0      	push	{r4, r5, r7}
 8003df2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <micros+0x2c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <micros+0x30>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	1884      	adds	r4, r0, r2
 8003e08:	eb41 0503 	adc.w	r5, r1, r3
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	462b      	mov	r3, r5
}
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bcb0      	pop	{r4, r5, r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	200003cc 	.word	0x200003cc
 8003e20:	20000958 	.word	0x20000958

08003e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
}
 8003e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <Error_Handler+0x8>
	...

08003e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <HAL_MspInit+0x44>)
 8003e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3a:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <HAL_MspInit+0x44>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6613      	str	r3, [r2, #96]	; 0x60
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_MspInit+0x44>)
 8003e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_MspInit+0x44>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <HAL_MspInit+0x44>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6593      	str	r3, [r2, #88]	; 0x58
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_MspInit+0x44>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e66:	f002 fda5 	bl	80069b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b0a0      	sub	sp, #128	; 0x80
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e90:	f107 0318 	add.w	r3, r7, #24
 8003e94:	2254      	movs	r2, #84	; 0x54
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f007 fc5f 	bl	800b75c <memset>
  if(hadc->Instance==ADC1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea6:	d176      	bne.n	8003f96 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003eae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eb4:	f107 0318 	add.w	r3, r7, #24
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 fab9 	bl	8007430 <HAL_RCCEx_PeriphCLKConfig>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ec4:	f7ff ffae 	bl	8003e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003ece:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee0:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eec:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_ADC_MspInit+0x128>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f10:	2302      	movs	r3, #2
 8003f12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f14:	2303      	movs	r3, #3
 8003f16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f20:	4619      	mov	r1, r3
 8003f22:	4820      	ldr	r0, [pc, #128]	; (8003fa4 <HAL_ADC_MspInit+0x12c>)
 8003f24:	f002 fad8 	bl	80064d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f38:	4619      	mov	r1, r3
 8003f3a:	481b      	ldr	r0, [pc, #108]	; (8003fa8 <HAL_ADC_MspInit+0x130>)
 8003f3c:	f002 facc 	bl	80064d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f42:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <HAL_ADC_MspInit+0x138>)
 8003f44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f48:	2205      	movs	r2, #5
 8003f4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f70:	2220      	movs	r2, #32
 8003f72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f7a:	480c      	ldr	r0, [pc, #48]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f7c:	f001 ff7a 	bl	8005e74 <HAL_DMA_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8003f86:	f7ff ff4d 	bl	8003e24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f90:	4a06      	ldr	r2, [pc, #24]	; (8003fac <HAL_ADC_MspInit+0x134>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f96:	bf00      	nop
 8003f98:	3780      	adds	r7, #128	; 0x80
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	48000800 	.word	0x48000800
 8003fa8:	48000400 	.word	0x48000400
 8003fac:	2000036c 	.word	0x2000036c
 8003fb0:	40020030 	.word	0x40020030

08003fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d114      	bne.n	8003ff0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	4a25      	ldr	r2, [pc, #148]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	201c      	movs	r0, #28
 8003fe4:	f001 ff11 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fe8:	201c      	movs	r0, #28
 8003fea:	f001 ff28 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003fee:	e032      	b.n	8004056 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_TIM_Base_MspInit+0xb0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d114      	bne.n	8004024 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
 8004006:	4b16      	ldr	r3, [pc, #88]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004012:	2200      	movs	r2, #0
 8004014:	2100      	movs	r1, #0
 8004016:	201d      	movs	r0, #29
 8004018:	f001 fef7 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800401c:	201d      	movs	r0, #29
 800401e:	f001 ff0e 	bl	8005e3e <HAL_NVIC_EnableIRQ>
}
 8004022:	e018      	b.n	8004056 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <HAL_TIM_Base_MspInit+0xb4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d113      	bne.n	8004056 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 8004034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004038:	6613      	str	r3, [r2, #96]	; 0x60
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_TIM_Base_MspInit+0xac>)
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004046:	2200      	movs	r2, #0
 8004048:	2100      	movs	r1, #0
 800404a:	2019      	movs	r0, #25
 800404c:	f001 fedd 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004050:	2019      	movs	r0, #25
 8004052:	f001 fef4 	bl	8005e3e <HAL_NVIC_EnableIRQ>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	40000400 	.word	0x40000400
 8004068:	40014400 	.word	0x40014400

0800406c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_TIM_PWM_MspInit+0x38>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10b      	bne.n	8004096 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6593      	str	r3, [r2, #88]	; 0x58
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40021000 	.word	0x40021000

080040ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_TIM_Encoder_MspInit+0x8c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d130      	bne.n	8004130 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_TIM_Encoder_MspInit+0x90>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_TIM_Encoder_MspInit+0x90>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_TIM_Encoder_MspInit+0x90>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_TIM_Encoder_MspInit+0x90>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	4a14      	ldr	r2, [pc, #80]	; (800413c <HAL_TIM_Encoder_MspInit+0x90>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_TIM_Encoder_MspInit+0x90>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040fe:	2303      	movs	r3, #3
 8004100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	2302      	movs	r3, #2
 8004104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800410e:	2302      	movs	r3, #2
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800411c:	f002 f9dc 	bl	80064d8 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004120:	2200      	movs	r2, #0
 8004122:	2100      	movs	r1, #0
 8004124:	2032      	movs	r0, #50	; 0x32
 8004126:	f001 fe70 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800412a:	2032      	movs	r0, #50	; 0x32
 800412c:	f001 fe87 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004130:	bf00      	nop
 8004132:	3728      	adds	r7, #40	; 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 030c 	add.w	r3, r7, #12
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <HAL_TIM_MspPostInit+0x68>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d11d      	bne.n	800419e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_TIM_MspPostInit+0x6c>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_TIM_MspPostInit+0x6c>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <HAL_TIM_MspPostInit+0x6c>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800417a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800417e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800418c:	230a      	movs	r3, #10
 800418e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004190:	f107 030c 	add.w	r3, r7, #12
 8004194:	4619      	mov	r1, r3
 8004196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800419a:	f002 f99d 	bl	80064d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800419e:	bf00      	nop
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40021000 	.word	0x40021000

080041b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b09e      	sub	sp, #120	; 0x78
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	2254      	movs	r2, #84	; 0x54
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f007 fac3 	bl	800b75c <memset>
  if(huart->Instance==USART2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4d      	ldr	r2, [pc, #308]	; (8004310 <HAL_UART_MspInit+0x160>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	f040 8092 	bne.w	8004306 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041e2:	2302      	movs	r3, #2
 80041e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ea:	f107 0310 	add.w	r3, r7, #16
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 f91e 	bl	8007430 <HAL_RCCEx_PeriphCLKConfig>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80041fa:	f7ff fe13 	bl	8003e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041fe:	4b45      	ldr	r3, [pc, #276]	; (8004314 <HAL_UART_MspInit+0x164>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a44      	ldr	r2, [pc, #272]	; (8004314 <HAL_UART_MspInit+0x164>)
 8004204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
 800420a:	4b42      	ldr	r3, [pc, #264]	; (8004314 <HAL_UART_MspInit+0x164>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <HAL_UART_MspInit+0x164>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	4a3e      	ldr	r2, [pc, #248]	; (8004314 <HAL_UART_MspInit+0x164>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004222:	4b3c      	ldr	r3, [pc, #240]	; (8004314 <HAL_UART_MspInit+0x164>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800422e:	230c      	movs	r3, #12
 8004230:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423a:	2300      	movs	r3, #0
 800423c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800423e:	2307      	movs	r3, #7
 8004240:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004242:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004246:	4619      	mov	r1, r3
 8004248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800424c:	f002 f944 	bl	80064d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004250:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004252:	4a32      	ldr	r2, [pc, #200]	; (800431c <HAL_UART_MspInit+0x16c>)
 8004254:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004256:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004258:	221a      	movs	r2, #26
 800425a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800425c:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_UART_MspInit+0x168>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004262:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004264:	2200      	movs	r2, #0
 8004266:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004268:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <HAL_UART_MspInit+0x168>)
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004270:	2200      	movs	r2, #0
 8004272:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004276:	2200      	movs	r2, #0
 8004278:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800427a:	4b27      	ldr	r3, [pc, #156]	; (8004318 <HAL_UART_MspInit+0x168>)
 800427c:	2200      	movs	r2, #0
 800427e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004282:	2200      	movs	r2, #0
 8004284:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004286:	4824      	ldr	r0, [pc, #144]	; (8004318 <HAL_UART_MspInit+0x168>)
 8004288:	f001 fdf4 	bl	8005e74 <HAL_DMA_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004292:	f7ff fdc7 	bl	8003e24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_UART_MspInit+0x168>)
 800429a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800429e:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_UART_MspInit+0x168>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042a6:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_UART_MspInit+0x174>)
 80042a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042ac:	221b      	movs	r2, #27
 80042ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042b2:	2210      	movs	r2, #16
 80042b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042da:	4811      	ldr	r0, [pc, #68]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042dc:	f001 fdca 	bl	8005e74 <HAL_DMA_Init>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80042e6:	f7ff fd9d 	bl	8003e24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80042f0:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <HAL_UART_MspInit+0x170>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2100      	movs	r1, #0
 80042fa:	2026      	movs	r0, #38	; 0x26
 80042fc:	f001 fd85 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004300:	2026      	movs	r0, #38	; 0x26
 8004302:	f001 fd9c 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004306:	bf00      	nop
 8004308:	3778      	adds	r7, #120	; 0x78
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40004400 	.word	0x40004400
 8004314:	40021000 	.word	0x40021000
 8004318:	20000894 	.word	0x20000894
 800431c:	4002001c 	.word	0x4002001c
 8004320:	200008f4 	.word	0x200008f4
 8004324:	40020008 	.word	0x40020008

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800432c:	e7fe      	b.n	800432c <NMI_Handler+0x4>

0800432e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004332:	e7fe      	b.n	8004332 <HardFault_Handler+0x4>

08004334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004338:	e7fe      	b.n	8004338 <MemManage_Handler+0x4>

0800433a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800433e:	e7fe      	b.n	800433e <BusFault_Handler+0x4>

08004340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <UsageFault_Handler+0x4>

08004346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004374:	f000 f8ec 	bl	8004550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}

0800437c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <DMA1_Channel1_IRQHandler+0x10>)
 8004382:	f001 ff5a 	bl	800623a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200008f4 	.word	0x200008f4

08004390 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <DMA1_Channel2_IRQHandler+0x10>)
 8004396:	f001 ff50 	bl	800623a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000894 	.word	0x20000894

080043a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <DMA1_Channel3_IRQHandler+0x10>)
 80043aa:	f001 ff46 	bl	800623a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	2000036c 	.word	0x2000036c

080043b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80043be:	f003 ff7f 	bl	80082c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200006fc 	.word	0x200006fc

080043cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <TIM2_IRQHandler+0x10>)
 80043d2:	f003 ff75 	bl	80082c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200003cc 	.word	0x200003cc

080043e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <TIM3_IRQHandler+0x10>)
 80043e6:	f003 ff6b 	bl	80082c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000498 	.word	0x20000498

080043f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80043f8:	4802      	ldr	r0, [pc, #8]	; (8004404 <USART2_IRQHandler+0x10>)
 80043fa:	f005 fca1 	bl	8009d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200007c8 	.word	0x200007c8

08004408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800440c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004410:	f002 fa14 	bl	800683c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004414:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004418:	f002 fa10 	bl	800683c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}

08004420 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <TIM5_IRQHandler+0x10>)
 8004426:	f003 ff4b 	bl	80082c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000630 	.word	0x20000630

08004434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SystemInit+0x20>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <SystemInit+0x20>)
 8004440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004458:	480d      	ldr	r0, [pc, #52]	; (8004490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800445a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800445c:	f7ff ffea 	bl	8004434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004460:	480c      	ldr	r0, [pc, #48]	; (8004494 <LoopForever+0x6>)
  ldr r1, =_edata
 8004462:	490d      	ldr	r1, [pc, #52]	; (8004498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <LoopForever+0xe>)
  movs r3, #0
 8004466:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004468:	e002      	b.n	8004470 <LoopCopyDataInit>

0800446a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800446a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800446c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446e:	3304      	adds	r3, #4

08004470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004474:	d3f9      	bcc.n	800446a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004478:	4c0a      	ldr	r4, [pc, #40]	; (80044a4 <LoopForever+0x16>)
  movs r3, #0
 800447a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800447c:	e001      	b.n	8004482 <LoopFillZerobss>

0800447e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004480:	3204      	adds	r2, #4

08004482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004484:	d3fb      	bcc.n	800447e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004486:	f007 f977 	bl	800b778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800448a:	f7fe feb1 	bl	80031f0 <main>

0800448e <LoopForever>:

LoopForever:
    b LoopForever
 800448e:	e7fe      	b.n	800448e <LoopForever>
  ldr   r0, =_estack
 8004490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004498:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 800449c:	0800c010 	.word	0x0800c010
  ldr r2, =_sbss
 80044a0:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80044a4:	20001440 	.word	0x20001440

080044a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC1_2_IRQHandler>

080044aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b4:	2003      	movs	r0, #3
 80044b6:	f001 fc9d 	bl	8005df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044ba:	2000      	movs	r0, #0
 80044bc:	f000 f80e 	bl	80044dc <HAL_InitTick>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	71fb      	strb	r3, [r7, #7]
 80044ca:	e001      	b.n	80044d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044cc:	f7ff fcb0 	bl	8003e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044d0:	79fb      	ldrb	r3, [r7, #7]

}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_InitTick+0x68>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80044f0:	4b15      	ldr	r3, [pc, #84]	; (8004548 <HAL_InitTick+0x6c>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_InitTick+0x68>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	4618      	mov	r0, r3
 8004506:	f001 fca8 	bl	8005e5a <HAL_SYSTICK_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10f      	bne.n	8004530 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d809      	bhi.n	800452a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004516:	2200      	movs	r2, #0
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	f04f 30ff 	mov.w	r0, #4294967295
 800451e:	f001 fc74 	bl	8005e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <HAL_InitTick+0x70>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e007      	b.n	800453a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e004      	b.n	800453a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	e001      	b.n	800453a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	2000022c 	.word	0x2000022c
 8004548:	20000224 	.word	0x20000224
 800454c:	20000228 	.word	0x20000228

08004550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_IncTick+0x1c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_IncTick+0x20>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4413      	add	r3, r2
 800455e:	4a03      	ldr	r2, [pc, #12]	; (800456c <HAL_IncTick+0x1c>)
 8004560:	6013      	str	r3, [r2, #0]
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20001304 	.word	0x20001304
 8004570:	2000022c 	.word	0x2000022c

08004574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return uwTick;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_GetTick+0x14>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20001304 	.word	0x20001304

0800458c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3360      	adds	r3, #96	; 0x60
 8004606:	461a      	mov	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <LL_ADC_SetOffset+0x44>)
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	03fff000 	.word	0x03fff000

0800463c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3360      	adds	r3, #96	; 0x60
 800464a:	461a      	mov	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3360      	adds	r3, #96	; 0x60
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	431a      	orrs	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800469e:	b480      	push	{r7}
 80046a0:	b087      	sub	sp, #28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3360      	adds	r3, #96	; 0x60
 80046ae:	461a      	mov	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3360      	adds	r3, #96	; 0x60
 80046e4:	461a      	mov	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	615a      	str	r2, [r3, #20]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004756:	b480      	push	{r7}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3330      	adds	r3, #48	; 0x30
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	4413      	add	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	211f      	movs	r1, #31
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0e9b      	lsrs	r3, r3, #26
 800478e:	f003 011f 	and.w	r1, r3, #31
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	431a      	orrs	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3314      	adds	r3, #20
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0e5b      	lsrs	r3, r3, #25
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	4413      	add	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	0d1b      	lsrs	r3, r3, #20
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2107      	movs	r1, #7
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	401a      	ands	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	0d1b      	lsrs	r3, r3, #20
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	431a      	orrs	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481c:	43db      	mvns	r3, r3
 800481e:	401a      	ands	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f003 0318 	and.w	r3, r3, #24
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004828:	40d9      	lsrs	r1, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	400b      	ands	r3, r1
 800482e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004832:	431a      	orrs	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	0007ffff 	.word	0x0007ffff

0800484c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 031f 	and.w	r3, r3, #31
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6093      	str	r3, [r2, #8]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800489c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a0:	d101      	bne.n	80048a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80048c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f0:	d101      	bne.n	80048f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004914:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004918:	f043 0201 	orr.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <LL_ADC_IsEnabled+0x18>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <LL_ADC_IsEnabled+0x1a>
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004962:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d101      	bne.n	8004992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d101      	bne.n	80049b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b089      	sub	sp, #36	; 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e1a9      	b.n	8004d36 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fa41 	bl	8003e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff3f 	bl	800488c <LL_ADC_IsDeepPowerDownEnabled>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff25 	bl	8004868 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff ff5a 	bl	80048dc <LL_ADC_IsInternalRegulatorEnabled>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ff3e 	bl	80048b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a38:	4b9c      	ldr	r3, [pc, #624]	; (8004cac <HAL_ADC_Init+0x2e4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	4a9c      	ldr	r2, [pc, #624]	; (8004cb0 <HAL_ADC_Init+0x2e8>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	3301      	adds	r3, #1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a4c:	e002      	b.n	8004a54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f9      	bne.n	8004a4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff ff3c 	bl	80048dc <LL_ADC_IsInternalRegulatorEnabled>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	f043 0210 	orr.w	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	f043 0201 	orr.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ff75 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004a90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 8142 	bne.w	8004d24 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 813e 	bne.w	8004d24 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ab0:	f043 0202 	orr.w	r2, r3, #2
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff ff35 	bl	800492c <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d141      	bne.n	8004b4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad0:	d004      	beq.n	8004adc <HAL_ADC_Init+0x114>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a77      	ldr	r2, [pc, #476]	; (8004cb4 <HAL_ADC_Init+0x2ec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10f      	bne.n	8004afc <HAL_ADC_Init+0x134>
 8004adc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ae0:	f7ff ff24 	bl	800492c <LL_ADC_IsEnabled>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	4873      	ldr	r0, [pc, #460]	; (8004cb4 <HAL_ADC_Init+0x2ec>)
 8004ae8:	f7ff ff20 	bl	800492c <LL_ADC_IsEnabled>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4323      	orrs	r3, r4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e012      	b.n	8004b22 <HAL_ADC_Init+0x15a>
 8004afc:	486e      	ldr	r0, [pc, #440]	; (8004cb8 <HAL_ADC_Init+0x2f0>)
 8004afe:	f7ff ff15 	bl	800492c <LL_ADC_IsEnabled>
 8004b02:	4604      	mov	r4, r0
 8004b04:	486d      	ldr	r0, [pc, #436]	; (8004cbc <HAL_ADC_Init+0x2f4>)
 8004b06:	f7ff ff11 	bl	800492c <LL_ADC_IsEnabled>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	431c      	orrs	r4, r3
 8004b0e:	486c      	ldr	r0, [pc, #432]	; (8004cc0 <HAL_ADC_Init+0x2f8>)
 8004b10:	f7ff ff0c 	bl	800492c <LL_ADC_IsEnabled>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4323      	orrs	r3, r4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b2e:	d004      	beq.n	8004b3a <HAL_ADC_Init+0x172>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5f      	ldr	r2, [pc, #380]	; (8004cb4 <HAL_ADC_Init+0x2ec>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_Init+0x176>
 8004b3a:	4a62      	ldr	r2, [pc, #392]	; (8004cc4 <HAL_ADC_Init+0x2fc>)
 8004b3c:	e000      	b.n	8004b40 <HAL_ADC_Init+0x178>
 8004b3e:	4a62      	ldr	r2, [pc, #392]	; (8004cc8 <HAL_ADC_Init+0x300>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7ff fd20 	bl	800458c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7f5b      	ldrb	r3, [r3, #29]
 8004b50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004b5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004b62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d106      	bne.n	8004b88 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	045b      	lsls	r3, r3, #17
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_ADC_Init+0x304>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	69b9      	ldr	r1, [r7, #24]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fee4 	bl	80049a0 <LL_ADC_INJ_IsConversionOngoing>
 8004bd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d17f      	bne.n	8004ce0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d17c      	bne.n	8004ce0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bf2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c02:	f023 0302 	bic.w	r3, r3, #2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	69b9      	ldr	r1, [r7, #24]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d017      	beq.n	8004c48 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6911      	ldr	r1, [r2, #16]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004c46:	e013      	b.n	8004c70 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d12a      	bne.n	8004cd0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c96:	4311      	orrs	r1, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e019      	b.n	8004ce0 <HAL_ADC_Init+0x318>
 8004cac:	20000224 	.word	0x20000224
 8004cb0:	053e2d63 	.word	0x053e2d63
 8004cb4:	50000100 	.word	0x50000100
 8004cb8:	50000400 	.word	0x50000400
 8004cbc:	50000500 	.word	0x50000500
 8004cc0:	50000600 	.word	0x50000600
 8004cc4:	50000300 	.word	0x50000300
 8004cc8:	50000700 	.word	0x50000700
 8004ccc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10c      	bne.n	8004d02 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f023 010f 	bic.w	r1, r3, #15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	1e5a      	subs	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8004d00:	e007      	b.n	8004d12 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 020f 	bic.w	r2, r2, #15
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d22:	e007      	b.n	8004d34 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	f043 0210 	orr.w	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3724      	adds	r7, #36	; 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd90      	pop	{r4, r7, pc}
 8004d3e:	bf00      	nop

08004d40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d54:	d004      	beq.n	8004d60 <HAL_ADC_Start_DMA+0x20>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a5a      	ldr	r2, [pc, #360]	; (8004ec4 <HAL_ADC_Start_DMA+0x184>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_Start_DMA+0x24>
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_ADC_Start_DMA+0x188>)
 8004d62:	e000      	b.n	8004d66 <HAL_ADC_Start_DMA+0x26>
 8004d64:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_ADC_Start_DMA+0x18c>)
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fd70 	bl	800484c <LL_ADC_GetMultimode>
 8004d6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fe01 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 809b 	bne.w	8004eb6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_ADC_Start_DMA+0x4e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e096      	b.n	8004ebc <HAL_ADC_Start_DMA+0x17c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a4d      	ldr	r2, [pc, #308]	; (8004ed0 <HAL_ADC_Start_DMA+0x190>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d008      	beq.n	8004db2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d002      	beq.n	8004db2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b09      	cmp	r3, #9
 8004db0:	d17a      	bne.n	8004ea8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fcf6 	bl	80057a4 <ADC_Enable>
 8004db8:	4603      	mov	r3, r0
 8004dba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d16d      	bne.n	8004e9e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3a      	ldr	r2, [pc, #232]	; (8004ec4 <HAL_ADC_Start_DMA+0x184>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_ADC_Start_DMA+0xb4>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3b      	ldr	r2, [pc, #236]	; (8004ed4 <HAL_ADC_Start_DMA+0x194>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d002      	beq.n	8004df0 <HAL_ADC_Start_DMA+0xb0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <HAL_ADC_Start_DMA+0xb8>
 8004df0:	4b39      	ldr	r3, [pc, #228]	; (8004ed8 <HAL_ADC_Start_DMA+0x198>)
 8004df2:	e001      	b.n	8004df8 <HAL_ADC_Start_DMA+0xb8>
 8004df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d002      	beq.n	8004e06 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	f023 0206 	bic.w	r2, r3, #6
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	661a      	str	r2, [r3, #96]	; 0x60
 8004e2a:	e002      	b.n	8004e32 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <HAL_ADC_Start_DMA+0x19c>)
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <HAL_ADC_Start_DMA+0x1a0>)
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <HAL_ADC_Start_DMA+0x1a4>)
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	221c      	movs	r2, #28
 8004e50:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0210 	orr.w	r2, r2, #16
 8004e68:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3340      	adds	r3, #64	; 0x40
 8004e84:	4619      	mov	r1, r3
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f001 f89b 	bl	8005fc4 <HAL_DMA_Start_IT>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fd5b 	bl	8004952 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004e9c:	e00d      	b.n	8004eba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004ea6:	e008      	b.n	8004eba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004eb4:	e001      	b.n	8004eba <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	50000100 	.word	0x50000100
 8004ec8:	50000300 	.word	0x50000300
 8004ecc:	50000700 	.word	0x50000700
 8004ed0:	50000600 	.word	0x50000600
 8004ed4:	50000500 	.word	0x50000500
 8004ed8:	50000400 	.word	0x50000400
 8004edc:	080058d1 	.word	0x080058d1
 8004ee0:	080059a9 	.word	0x080059a9
 8004ee4:	080059c5 	.word	0x080059c5

08004ee8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b0b6      	sub	sp, #216	; 0xd8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d102      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x24>
 8004f42:	2302      	movs	r3, #2
 8004f44:	f000 bc13 	b.w	800576e <HAL_ADC_ConfigChannel+0x84a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fd10 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 83f3 	bne.w	8005748 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7ff fbf1 	bl	8004756 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fcfe 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004f7e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fd0a 	bl	80049a0 <LL_ADC_INJ_IsConversionOngoing>
 8004f8c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 81d9 	bne.w	800534c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 81d4 	bne.w	800534c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fac:	d10f      	bne.n	8004fce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f7ff fbf8 	bl	80047ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fb9f 	bl	800470a <LL_ADC_SetSamplingTimeCommonConfig>
 8004fcc:	e00e      	b.n	8004fec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6819      	ldr	r1, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f7ff fbe7 	bl	80047ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fb8f 	bl	800470a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	08db      	lsrs	r3, r3, #3
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d022      	beq.n	8005054 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6919      	ldr	r1, [r3, #16]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800501e:	f7ff fae9 	bl	80045f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6919      	ldr	r1, [r3, #16]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	461a      	mov	r2, r3
 8005030:	f7ff fb35 	bl	800469e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005040:	2b01      	cmp	r3, #1
 8005042:	d102      	bne.n	800504a <HAL_ADC_ConfigChannel+0x126>
 8005044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005048:	e000      	b.n	800504c <HAL_ADC_ConfigChannel+0x128>
 800504a:	2300      	movs	r3, #0
 800504c:	461a      	mov	r2, r3
 800504e:	f7ff fb41 	bl	80046d4 <LL_ADC_SetOffsetSaturation>
 8005052:	e17b      	b.n	800534c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff faee 	bl	800463c <LL_ADC_GetOffsetChannel>
 8005060:	4603      	mov	r3, r0
 8005062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x15c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fae3 	bl	800463c <LL_ADC_GetOffsetChannel>
 8005076:	4603      	mov	r3, r0
 8005078:	0e9b      	lsrs	r3, r3, #26
 800507a:	f003 021f 	and.w	r2, r3, #31
 800507e:	e01e      	b.n	80050be <HAL_ADC_ConfigChannel+0x19a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fad8 	bl	800463c <LL_ADC_GetOffsetChannel>
 800508c:	4603      	mov	r3, r0
 800508e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800509e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80050ae:	2320      	movs	r3, #32
 80050b0:	e004      	b.n	80050bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80050b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0x1b2>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0e9b      	lsrs	r3, r3, #26
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	e018      	b.n	8005108 <HAL_ADC_ConfigChannel+0x1e4>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80050ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80050f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80050fa:	2320      	movs	r3, #32
 80050fc:	e004      	b.n	8005108 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80050fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005108:	429a      	cmp	r2, r3
 800510a:	d106      	bne.n	800511a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2200      	movs	r2, #0
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff faa7 	bl	8004668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2101      	movs	r1, #1
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fa8b 	bl	800463c <LL_ADC_GetOffsetChannel>
 8005126:	4603      	mov	r3, r0
 8005128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <HAL_ADC_ConfigChannel+0x222>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fa80 	bl	800463c <LL_ADC_GetOffsetChannel>
 800513c:	4603      	mov	r3, r0
 800513e:	0e9b      	lsrs	r3, r3, #26
 8005140:	f003 021f 	and.w	r2, r3, #31
 8005144:	e01e      	b.n	8005184 <HAL_ADC_ConfigChannel+0x260>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2101      	movs	r1, #1
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fa75 	bl	800463c <LL_ADC_GetOffsetChannel>
 8005152:	4603      	mov	r3, r0
 8005154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800515c:	fa93 f3a3 	rbit	r3, r3
 8005160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800516c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e004      	b.n	8005182 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <HAL_ADC_ConfigChannel+0x278>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	0e9b      	lsrs	r3, r3, #26
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	e018      	b.n	80051ce <HAL_ADC_ConfigChannel+0x2aa>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80051b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80051b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80051c0:	2320      	movs	r3, #32
 80051c2:	e004      	b.n	80051ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80051c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d106      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	2101      	movs	r1, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fa44 	bl	8004668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fa28 	bl	800463c <LL_ADC_GetOffsetChannel>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_ADC_ConfigChannel+0x2e8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2102      	movs	r1, #2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fa1d 	bl	800463c <LL_ADC_GetOffsetChannel>
 8005202:	4603      	mov	r3, r0
 8005204:	0e9b      	lsrs	r3, r3, #26
 8005206:	f003 021f 	and.w	r2, r3, #31
 800520a:	e01e      	b.n	800524a <HAL_ADC_ConfigChannel+0x326>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2102      	movs	r1, #2
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fa12 	bl	800463c <LL_ADC_GetOffsetChannel>
 8005218:	4603      	mov	r3, r0
 800521a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800522a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800522e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800523a:	2320      	movs	r3, #32
 800523c:	e004      	b.n	8005248 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800523e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005242:	fab3 f383 	clz	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005252:	2b00      	cmp	r3, #0
 8005254:	d105      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x33e>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	0e9b      	lsrs	r3, r3, #26
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	e016      	b.n	8005290 <HAL_ADC_ConfigChannel+0x36c>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800526e:	fa93 f3a3 	rbit	r3, r3
 8005272:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005274:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800527a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005282:	2320      	movs	r3, #32
 8005284:	e004      	b.n	8005290 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005290:	429a      	cmp	r2, r3
 8005292:	d106      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff f9e3 	bl	8004668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2103      	movs	r1, #3
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff f9c7 	bl	800463c <LL_ADC_GetOffsetChannel>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x3aa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2103      	movs	r1, #3
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f9bc 	bl	800463c <LL_ADC_GetOffsetChannel>
 80052c4:	4603      	mov	r3, r0
 80052c6:	0e9b      	lsrs	r3, r3, #26
 80052c8:	f003 021f 	and.w	r2, r3, #31
 80052cc:	e017      	b.n	80052fe <HAL_ADC_ConfigChannel+0x3da>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2103      	movs	r1, #3
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff f9b1 	bl	800463c <LL_ADC_GetOffsetChannel>
 80052da:	4603      	mov	r3, r0
 80052dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	fa93 f3a3 	rbit	r3, r3
 80052e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80052e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80052ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80052f0:	2320      	movs	r3, #32
 80052f2:	e003      	b.n	80052fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80052f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f6:	fab3 f383 	clz	r3, r3
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x3f2>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	0e9b      	lsrs	r3, r3, #26
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	e011      	b.n	800533a <HAL_ADC_ConfigChannel+0x416>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005326:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800532e:	2320      	movs	r3, #32
 8005330:	e003      	b.n	800533a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800533a:	429a      	cmp	r2, r3
 800533c:	d106      	bne.n	800534c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	2103      	movs	r1, #3
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff f98e 	bl	8004668 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff faeb 	bl	800492c <LL_ADC_IsEnabled>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	f040 813d 	bne.w	80055d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6819      	ldr	r1, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f7ff fa4a 	bl	8004804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4aa2      	ldr	r2, [pc, #648]	; (8005600 <HAL_ADC_ConfigChannel+0x6dc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	f040 812e 	bne.w	80055d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x480>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0e9b      	lsrs	r3, r3, #26
 8005392:	3301      	adds	r3, #1
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2b09      	cmp	r3, #9
 800539a:	bf94      	ite	ls
 800539c:	2301      	movls	r3, #1
 800539e:	2300      	movhi	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e019      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x4b4>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ac:	fa93 f3a3 	rbit	r3, r3
 80053b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80053b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80053b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80053bc:	2320      	movs	r3, #32
 80053be:	e003      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80053c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c2:	fab3 f383 	clz	r3, r3
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	3301      	adds	r3, #1
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	bf94      	ite	ls
 80053d2:	2301      	movls	r3, #1
 80053d4:	2300      	movhi	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d079      	beq.n	80054d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x4d4>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	3301      	adds	r3, #1
 80053f0:	069b      	lsls	r3, r3, #26
 80053f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053f6:	e015      	b.n	8005424 <HAL_ADC_ConfigChannel+0x500>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800540a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005410:	2320      	movs	r3, #32
 8005412:	e003      	b.n	800541c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	fab3 f383 	clz	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	3301      	adds	r3, #1
 800541e:	069b      	lsls	r3, r3, #26
 8005420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x520>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	0e9b      	lsrs	r3, r3, #26
 8005436:	3301      	adds	r3, #1
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	e017      	b.n	8005474 <HAL_ADC_ConfigChannel+0x550>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800545c:	2320      	movs	r3, #32
 800545e:	e003      	b.n	8005468 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	3301      	adds	r3, #1
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2101      	movs	r1, #1
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	ea42 0103 	orr.w	r1, r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <HAL_ADC_ConfigChannel+0x576>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	0e9b      	lsrs	r3, r3, #26
 800548a:	3301      	adds	r3, #1
 800548c:	f003 021f 	and.w	r2, r3, #31
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	051b      	lsls	r3, r3, #20
 8005498:	e018      	b.n	80054cc <HAL_ADC_ConfigChannel+0x5a8>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	fa93 f3a3 	rbit	r3, r3
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80054b2:	2320      	movs	r3, #32
 80054b4:	e003      	b.n	80054be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	fab3 f383 	clz	r3, r3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	f003 021f 	and.w	r2, r3, #31
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054cc:	430b      	orrs	r3, r1
 80054ce:	e07e      	b.n	80055ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x5c8>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e9b      	lsrs	r3, r3, #26
 80054e2:	3301      	adds	r3, #1
 80054e4:	069b      	lsls	r3, r3, #26
 80054e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054ea:	e015      	b.n	8005518 <HAL_ADC_ConfigChannel+0x5f4>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	fa93 f3a3 	rbit	r3, r3
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005504:	2320      	movs	r3, #32
 8005506:	e003      	b.n	8005510 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	3301      	adds	r3, #1
 8005512:	069b      	lsls	r3, r3, #26
 8005514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x614>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	0e9b      	lsrs	r3, r3, #26
 800552a:	3301      	adds	r3, #1
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	e017      	b.n	8005568 <HAL_ADC_ConfigChannel+0x644>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	fa93 f3a3 	rbit	r3, r3
 8005544:	61fb      	str	r3, [r7, #28]
  return result;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005550:	2320      	movs	r3, #32
 8005552:	e003      	b.n	800555c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2101      	movs	r1, #1
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	ea42 0103 	orr.w	r1, r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10d      	bne.n	8005594 <HAL_ADC_ConfigChannel+0x670>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0e9b      	lsrs	r3, r3, #26
 800557e:	3301      	adds	r3, #1
 8005580:	f003 021f 	and.w	r2, r3, #31
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	3b1e      	subs	r3, #30
 800558c:	051b      	lsls	r3, r3, #20
 800558e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005592:	e01b      	b.n	80055cc <HAL_ADC_ConfigChannel+0x6a8>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	fa93 f3a3 	rbit	r3, r3
 80055a0:	613b      	str	r3, [r7, #16]
  return result;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80055ac:	2320      	movs	r3, #32
 80055ae:	e003      	b.n	80055b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	fab3 f383 	clz	r3, r3
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	3301      	adds	r3, #1
 80055ba:	f003 021f 	and.w	r2, r3, #31
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	3b1e      	subs	r3, #30
 80055c6:	051b      	lsls	r3, r3, #20
 80055c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055d2:	4619      	mov	r1, r3
 80055d4:	f7ff f8eb 	bl	80047ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_ADC_ConfigChannel+0x6e0>)
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80be 	beq.w	8005762 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ee:	d004      	beq.n	80055fa <HAL_ADC_ConfigChannel+0x6d6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a04      	ldr	r2, [pc, #16]	; (8005608 <HAL_ADC_ConfigChannel+0x6e4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d10a      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x6ec>
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_ADC_ConfigChannel+0x6e8>)
 80055fc:	e009      	b.n	8005612 <HAL_ADC_ConfigChannel+0x6ee>
 80055fe:	bf00      	nop
 8005600:	407f0000 	.word	0x407f0000
 8005604:	80080000 	.word	0x80080000
 8005608:	50000100 	.word	0x50000100
 800560c:	50000300 	.word	0x50000300
 8005610:	4b59      	ldr	r3, [pc, #356]	; (8005778 <HAL_ADC_ConfigChannel+0x854>)
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe ffe0 	bl	80045d8 <LL_ADC_GetCommonPathInternalCh>
 8005618:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a56      	ldr	r2, [pc, #344]	; (800577c <HAL_ADC_ConfigChannel+0x858>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_ADC_ConfigChannel+0x70c>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a55      	ldr	r2, [pc, #340]	; (8005780 <HAL_ADC_ConfigChannel+0x85c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d13a      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d134      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005644:	d005      	beq.n	8005652 <HAL_ADC_ConfigChannel+0x72e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a4e      	ldr	r2, [pc, #312]	; (8005784 <HAL_ADC_ConfigChannel+0x860>)
 800564c:	4293      	cmp	r3, r2
 800564e:	f040 8085 	bne.w	800575c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800565a:	d004      	beq.n	8005666 <HAL_ADC_ConfigChannel+0x742>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a49      	ldr	r2, [pc, #292]	; (8005788 <HAL_ADC_ConfigChannel+0x864>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <HAL_ADC_ConfigChannel+0x746>
 8005666:	4a49      	ldr	r2, [pc, #292]	; (800578c <HAL_ADC_ConfigChannel+0x868>)
 8005668:	e000      	b.n	800566c <HAL_ADC_ConfigChannel+0x748>
 800566a:	4a43      	ldr	r2, [pc, #268]	; (8005778 <HAL_ADC_ConfigChannel+0x854>)
 800566c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7fe ff9b 	bl	80045b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800567c:	4b44      	ldr	r3, [pc, #272]	; (8005790 <HAL_ADC_ConfigChannel+0x86c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	099b      	lsrs	r3, r3, #6
 8005682:	4a44      	ldr	r2, [pc, #272]	; (8005794 <HAL_ADC_ConfigChannel+0x870>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	099b      	lsrs	r3, r3, #6
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	4613      	mov	r3, r2
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005696:	e002      	b.n	800569e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b01      	subs	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f9      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056a4:	e05a      	b.n	800575c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3b      	ldr	r2, [pc, #236]	; (8005798 <HAL_ADC_ConfigChannel+0x874>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d125      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d11f      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a31      	ldr	r2, [pc, #196]	; (8005788 <HAL_ADC_ConfigChannel+0x864>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d104      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x7ac>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a34      	ldr	r2, [pc, #208]	; (800579c <HAL_ADC_ConfigChannel+0x878>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d047      	beq.n	8005760 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056d8:	d004      	beq.n	80056e4 <HAL_ADC_ConfigChannel+0x7c0>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <HAL_ADC_ConfigChannel+0x864>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_ADC_ConfigChannel+0x7c4>
 80056e4:	4a29      	ldr	r2, [pc, #164]	; (800578c <HAL_ADC_ConfigChannel+0x868>)
 80056e6:	e000      	b.n	80056ea <HAL_ADC_ConfigChannel+0x7c6>
 80056e8:	4a23      	ldr	r2, [pc, #140]	; (8005778 <HAL_ADC_ConfigChannel+0x854>)
 80056ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f7fe ff5c 	bl	80045b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056fa:	e031      	b.n	8005760 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <HAL_ADC_ConfigChannel+0x87c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d12d      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800570a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d127      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <HAL_ADC_ConfigChannel+0x864>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005724:	d004      	beq.n	8005730 <HAL_ADC_ConfigChannel+0x80c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <HAL_ADC_ConfigChannel+0x864>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d101      	bne.n	8005734 <HAL_ADC_ConfigChannel+0x810>
 8005730:	4a16      	ldr	r2, [pc, #88]	; (800578c <HAL_ADC_ConfigChannel+0x868>)
 8005732:	e000      	b.n	8005736 <HAL_ADC_ConfigChannel+0x812>
 8005734:	4a10      	ldr	r2, [pc, #64]	; (8005778 <HAL_ADC_ConfigChannel+0x854>)
 8005736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800573a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7fe ff36 	bl	80045b2 <LL_ADC_SetCommonPathInternalCh>
 8005746:	e00c      	b.n	8005762 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800575a:	e002      	b.n	8005762 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005760:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800576a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800576e:	4618      	mov	r0, r3
 8005770:	37d8      	adds	r7, #216	; 0xd8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	50000700 	.word	0x50000700
 800577c:	c3210000 	.word	0xc3210000
 8005780:	90c00010 	.word	0x90c00010
 8005784:	50000600 	.word	0x50000600
 8005788:	50000100 	.word	0x50000100
 800578c:	50000300 	.word	0x50000300
 8005790:	20000224 	.word	0x20000224
 8005794:	053e2d63 	.word	0x053e2d63
 8005798:	c7520000 	.word	0xc7520000
 800579c:	50000500 	.word	0x50000500
 80057a0:	cb840000 	.word	0xcb840000

080057a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff f8b9 	bl	800492c <LL_ADC_IsEnabled>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d176      	bne.n	80058ae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <ADC_Enable+0x114>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00d      	beq.n	80057ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f043 0210 	orr.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e062      	b.n	80058b0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff f888 	bl	8004904 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057fc:	d004      	beq.n	8005808 <ADC_Enable+0x64>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2e      	ldr	r2, [pc, #184]	; (80058bc <ADC_Enable+0x118>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d101      	bne.n	800580c <ADC_Enable+0x68>
 8005808:	4b2d      	ldr	r3, [pc, #180]	; (80058c0 <ADC_Enable+0x11c>)
 800580a:	e000      	b.n	800580e <ADC_Enable+0x6a>
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <ADC_Enable+0x120>)
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fee2 	bl	80045d8 <LL_ADC_GetCommonPathInternalCh>
 8005814:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800581a:	2b00      	cmp	r3, #0
 800581c:	d013      	beq.n	8005846 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800581e:	4b2a      	ldr	r3, [pc, #168]	; (80058c8 <ADC_Enable+0x124>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	099b      	lsrs	r3, r3, #6
 8005824:	4a29      	ldr	r2, [pc, #164]	; (80058cc <ADC_Enable+0x128>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	4613      	mov	r3, r2
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005838:	e002      	b.n	8005840 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3b01      	subs	r3, #1
 800583e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f9      	bne.n	800583a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005846:	f7fe fe95 	bl	8004574 <HAL_GetTick>
 800584a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800584c:	e028      	b.n	80058a0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f86a 	bl	800492c <LL_ADC_IsEnabled>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d104      	bne.n	8005868 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff f84e 	bl	8004904 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005868:	f7fe fe84 	bl	8004574 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d914      	bls.n	80058a0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d00d      	beq.n	80058a0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f043 0210 	orr.w	r2, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e007      	b.n	80058b0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d1cf      	bne.n	800584e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	8000003f 	.word	0x8000003f
 80058bc:	50000100 	.word	0x50000100
 80058c0:	50000300 	.word	0x50000300
 80058c4:	50000700 	.word	0x50000700
 80058c8:	20000224 	.word	0x20000224
 80058cc:	053e2d63 	.word	0x053e2d63

080058d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d14b      	bne.n	8005982 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d021      	beq.n	8005948 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe ff11 	bl	8004730 <LL_ADC_REG_IsTriggerSourceSWStart>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d032      	beq.n	800597a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d12b      	bne.n	800597a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11f      	bne.n	800597a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	65da      	str	r2, [r3, #92]	; 0x5c
 8005946:	e018      	b.n	800597a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d111      	bne.n	800597a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005972:	f043 0201 	orr.w	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fab4 	bl	8004ee8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005980:	e00e      	b.n	80059a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff fabe 	bl	8004f10 <HAL_ADC_ErrorCallback>
}
 8005994:	e004      	b.n	80059a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff faa0 	bl	8004efc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fa90 	bl	8004f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <LL_ADC_IsEnabled>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <LL_ADC_IsEnabled+0x18>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <LL_ADC_IsEnabled+0x1a>
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_ADC_REG_IsConversionOngoing>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d101      	bne.n	8005a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b0a1      	sub	sp, #132	; 0x84
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e0e7      	b.n	8005c32 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a7a:	d102      	bne.n	8005a82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	e009      	b.n	8005a96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6e      	ldr	r2, [pc, #440]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d102      	bne.n	8005a92 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005a8c:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	e001      	b.n	8005a96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0be      	b.n	8005c32 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ffb1 	bl	8005a1e <LL_ADC_REG_IsConversionOngoing>
 8005abc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff ffab 	bl	8005a1e <LL_ADC_REG_IsConversionOngoing>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 80a0 	bne.w	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 809c 	bne.w	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae0:	d004      	beq.n	8005aec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a55      	ldr	r2, [pc, #340]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005aec:	4b56      	ldr	r3, [pc, #344]	; (8005c48 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005aee:	e000      	b.n	8005af2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005af0:	4b56      	ldr	r3, [pc, #344]	; (8005c4c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005af2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d04b      	beq.n	8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b0e:	035b      	lsls	r3, r3, #13
 8005b10:	430b      	orrs	r3, r1
 8005b12:	431a      	orrs	r2, r3
 8005b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b20:	d004      	beq.n	8005b2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a45      	ldr	r2, [pc, #276]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d10f      	bne.n	8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005b2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005b30:	f7ff ff62 	bl	80059f8 <LL_ADC_IsEnabled>
 8005b34:	4604      	mov	r4, r0
 8005b36:	4841      	ldr	r0, [pc, #260]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b38:	f7ff ff5e 	bl	80059f8 <LL_ADC_IsEnabled>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4323      	orrs	r3, r4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e012      	b.n	8005b72 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005b4c:	483c      	ldr	r0, [pc, #240]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b4e:	f7ff ff53 	bl	80059f8 <LL_ADC_IsEnabled>
 8005b52:	4604      	mov	r4, r0
 8005b54:	483b      	ldr	r0, [pc, #236]	; (8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b56:	f7ff ff4f 	bl	80059f8 <LL_ADC_IsEnabled>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	431c      	orrs	r4, r3
 8005b5e:	483c      	ldr	r0, [pc, #240]	; (8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005b60:	f7ff ff4a 	bl	80059f8 <LL_ADC_IsEnabled>
 8005b64:	4603      	mov	r3, r0
 8005b66:	4323      	orrs	r3, r4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d056      	beq.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b7e:	f023 030f 	bic.w	r3, r3, #15
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	6811      	ldr	r1, [r2, #0]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b90:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b92:	e047      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba8:	d004      	beq.n	8005bb4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005bb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005bb8:	f7ff ff1e 	bl	80059f8 <LL_ADC_IsEnabled>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	481f      	ldr	r0, [pc, #124]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bc0:	f7ff ff1a 	bl	80059f8 <LL_ADC_IsEnabled>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4323      	orrs	r3, r4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e012      	b.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005bd4:	481a      	ldr	r0, [pc, #104]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005bd6:	f7ff ff0f 	bl	80059f8 <LL_ADC_IsEnabled>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4819      	ldr	r0, [pc, #100]	; (8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005bde:	f7ff ff0b 	bl	80059f8 <LL_ADC_IsEnabled>
 8005be2:	4603      	mov	r3, r0
 8005be4:	431c      	orrs	r4, r3
 8005be6:	481a      	ldr	r0, [pc, #104]	; (8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005be8:	f7ff ff06 	bl	80059f8 <LL_ADC_IsEnabled>
 8005bec:	4603      	mov	r3, r0
 8005bee:	4323      	orrs	r3, r4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005c06:	f023 030f 	bic.w	r3, r3, #15
 8005c0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005c0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c0e:	e009      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c22:	e000      	b.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3784      	adds	r7, #132	; 0x84
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd90      	pop	{r4, r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	50000100 	.word	0x50000100
 8005c40:	50000400 	.word	0x50000400
 8005c44:	50000500 	.word	0x50000500
 8005c48:	50000300 	.word	0x50000300
 8005c4c:	50000700 	.word	0x50000700
 8005c50:	50000600 	.word	0x50000600

08005c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <__NVIC_SetPriorityGrouping+0x44>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c86:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <__NVIC_SetPriorityGrouping+0x44>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	60d3      	str	r3, [r2, #12]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000ed00 	.word	0xe000ed00

08005c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	f003 0307 	and.w	r3, r3, #7
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db0b      	blt.n	8005ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	f003 021f 	and.w	r2, r3, #31
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <__NVIC_EnableIRQ+0x38>)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2001      	movs	r0, #1
 8005cda:	fa00 f202 	lsl.w	r2, r0, r2
 8005cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e100 	.word	0xe000e100

08005cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	db0a      	blt.n	8005d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <__NVIC_SetPriority+0x4c>)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	0112      	lsls	r2, r2, #4
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d1c:	e00a      	b.n	8005d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	4908      	ldr	r1, [pc, #32]	; (8005d44 <__NVIC_SetPriority+0x50>)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	761a      	strb	r2, [r3, #24]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000e100 	.word	0xe000e100
 8005d44:	e000ed00 	.word	0xe000ed00

08005d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	bf28      	it	cs
 8005d66:	2304      	movcs	r3, #4
 8005d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d902      	bls.n	8005d78 <NVIC_EncodePriority+0x30>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3b03      	subs	r3, #3
 8005d76:	e000      	b.n	8005d7a <NVIC_EncodePriority+0x32>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d90:	f04f 31ff 	mov.w	r1, #4294967295
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	43d9      	mvns	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	4313      	orrs	r3, r2
         );
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc0:	d301      	bcc.n	8005dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e00f      	b.n	8005de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <SysTick_Config+0x40>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dce:	210f      	movs	r1, #15
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	f7ff ff8e 	bl	8005cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <SysTick_Config+0x40>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <SysTick_Config+0x40>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000e010 	.word	0xe000e010

08005df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff29 	bl	8005c54 <__NVIC_SetPriorityGrouping>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4603      	mov	r3, r0
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e18:	f7ff ff40 	bl	8005c9c <__NVIC_GetPriorityGrouping>
 8005e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	6978      	ldr	r0, [r7, #20]
 8005e24:	f7ff ff90 	bl	8005d48 <NVIC_EncodePriority>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ff5f 	bl	8005cf4 <__NVIC_SetPriority>
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	4603      	mov	r3, r0
 8005e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff33 	bl	8005cb8 <__NVIC_EnableIRQ>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ffa4 	bl	8005db0 <SysTick_Config>
 8005e68:	4603      	mov	r3, r0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e08d      	b.n	8005fa2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_DMA_Init+0x138>)
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d80f      	bhi.n	8005eb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <HAL_DMA_Init+0x13c>)
 8005e9a:	4413      	add	r3, r2
 8005e9c:	4a45      	ldr	r2, [pc, #276]	; (8005fb4 <HAL_DMA_Init+0x140>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	091b      	lsrs	r3, r3, #4
 8005ea4:	009a      	lsls	r2, r3, #2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a42      	ldr	r2, [pc, #264]	; (8005fb8 <HAL_DMA_Init+0x144>)
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
 8005eb0:	e00e      	b.n	8005ed0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4b40      	ldr	r3, [pc, #256]	; (8005fbc <HAL_DMA_Init+0x148>)
 8005eba:	4413      	add	r3, r2
 8005ebc:	4a3d      	ldr	r2, [pc, #244]	; (8005fb4 <HAL_DMA_Init+0x140>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	009a      	lsls	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <HAL_DMA_Init+0x14c>)
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fa76 	bl	8006414 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f30:	d102      	bne.n	8005f38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <HAL_DMA_Init+0x104>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d80c      	bhi.n	8005f78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa96 	bl	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e008      	b.n	8005f8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40020407 	.word	0x40020407
 8005fb0:	bffdfff8 	.word	0xbffdfff8
 8005fb4:	cccccccd 	.word	0xcccccccd
 8005fb8:	40020000 	.word	0x40020000
 8005fbc:	bffdfbf8 	.word	0xbffdfbf8
 8005fc0:	40020400 	.word	0x40020400

08005fc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_DMA_Start_IT+0x20>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e066      	b.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d155      	bne.n	80060a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f9bb 	bl	8006398 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 020e 	orr.w	r2, r2, #14
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e00f      	b.n	800605c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0204 	bic.w	r2, r2, #4
 800604a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 020a 	orr.w	r2, r2, #10
 800605a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006078:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006090:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e005      	b.n	80060b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
 80060ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d005      	beq.n	80060de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2204      	movs	r2, #4
 80060d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
 80060dc:	e037      	b.n	800614e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 020e 	bic.w	r2, r2, #14
 80060ec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f003 021f 	and.w	r2, r3, #31
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f202 	lsl.w	r2, r1, r2
 8006120:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800612a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006142:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800614c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d00d      	beq.n	80061a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2204      	movs	r2, #4
 8006188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	e047      	b.n	8006230 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 020e 	bic.w	r2, r2, #14
 80061ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	f003 021f 	and.w	r2, r3, #31
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f202 	lsl.w	r2, r1, r2
 80061e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00c      	beq.n	8006210 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006204:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800620e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
    }
  }
  return status;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2204      	movs	r2, #4
 800625c:	409a      	lsls	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d026      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x7a>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d021      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d107      	bne.n	800628e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0204 	bic.w	r2, r2, #4
 800628c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f003 021f 	and.w	r2, r3, #31
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2104      	movs	r1, #4
 800629c:	fa01 f202 	lsl.w	r2, r1, r2
 80062a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d071      	beq.n	800638e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80062b2:	e06c      	b.n	800638e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2202      	movs	r2, #2
 80062be:	409a      	lsls	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d02e      	beq.n	8006326 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d029      	beq.n	8006326 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 020a 	bic.w	r2, r2, #10
 80062ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	2102      	movs	r1, #2
 8006306:	fa01 f202 	lsl.w	r2, r1, r2
 800630a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d038      	beq.n	800638e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006324:	e033      	b.n	800638e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2208      	movs	r2, #8
 8006330:	409a      	lsls	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d02a      	beq.n	8006390 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d025      	beq.n	8006390 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 020e 	bic.w	r2, r2, #14
 8006352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006358:	f003 021f 	and.w	r2, r3, #31
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f202 	lsl.w	r2, r1, r2
 8006366:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800638e:	bf00      	nop
 8006390:	bf00      	nop
}
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f003 021f 	and.w	r2, r3, #31
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	2101      	movs	r1, #1
 80063d0:	fa01 f202 	lsl.w	r2, r1, r2
 80063d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b10      	cmp	r3, #16
 80063e4:	d108      	bne.n	80063f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063f6:	e007      	b.n	8006408 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	4b16      	ldr	r3, [pc, #88]	; (800647c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006424:	429a      	cmp	r2, r3
 8006426:	d802      	bhi.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006428:	4b15      	ldr	r3, [pc, #84]	; (8006480 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e001      	b.n	8006432 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006430:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	3b08      	subs	r3, #8
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	091b      	lsrs	r3, r3, #4
 8006446:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	009a      	lsls	r2, r3, #2
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a0b      	ldr	r2, [pc, #44]	; (800648c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800645e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2201      	movs	r2, #1
 8006468:	409a      	lsls	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40020407 	.word	0x40020407
 8006480:	40020800 	.word	0x40020800
 8006484:	40020820 	.word	0x40020820
 8006488:	cccccccd 	.word	0xcccccccd
 800648c:	40020880 	.word	0x40020880

08006490 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80064b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2201      	movs	r2, #1
 80064be:	409a      	lsls	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	1000823f 	.word	0x1000823f
 80064d4:	40020940 	.word	0x40020940

080064d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064e6:	e15a      	b.n	800679e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 814c 	beq.w	8006798 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d005      	beq.n	8006518 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006514:	2b02      	cmp	r3, #2
 8006516:	d130      	bne.n	800657a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	2203      	movs	r2, #3
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800654e:	2201      	movs	r2, #1
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4013      	ands	r3, r2
 800655c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0201 	and.w	r2, r3, #1
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	2b03      	cmp	r3, #3
 8006584:	d017      	beq.n	80065b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2203      	movs	r2, #3
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4013      	ands	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d123      	bne.n	800660a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	08da      	lsrs	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3208      	adds	r2, #8
 80065ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	220f      	movs	r2, #15
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4013      	ands	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	08da      	lsrs	r2, r3, #3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3208      	adds	r2, #8
 8006604:	6939      	ldr	r1, [r7, #16]
 8006606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	2203      	movs	r2, #3
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 0203 	and.w	r2, r3, #3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80a6 	beq.w	8006798 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800664c:	4b5b      	ldr	r3, [pc, #364]	; (80067bc <HAL_GPIO_Init+0x2e4>)
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	4a5a      	ldr	r2, [pc, #360]	; (80067bc <HAL_GPIO_Init+0x2e4>)
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	6613      	str	r3, [r2, #96]	; 0x60
 8006658:	4b58      	ldr	r3, [pc, #352]	; (80067bc <HAL_GPIO_Init+0x2e4>)
 800665a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006664:	4a56      	ldr	r2, [pc, #344]	; (80067c0 <HAL_GPIO_Init+0x2e8>)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	089b      	lsrs	r3, r3, #2
 800666a:	3302      	adds	r3, #2
 800666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	220f      	movs	r2, #15
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800668e:	d01f      	beq.n	80066d0 <HAL_GPIO_Init+0x1f8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a4c      	ldr	r2, [pc, #304]	; (80067c4 <HAL_GPIO_Init+0x2ec>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d019      	beq.n	80066cc <HAL_GPIO_Init+0x1f4>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a4b      	ldr	r2, [pc, #300]	; (80067c8 <HAL_GPIO_Init+0x2f0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <HAL_GPIO_Init+0x1f0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <HAL_GPIO_Init+0x2f4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00d      	beq.n	80066c4 <HAL_GPIO_Init+0x1ec>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a49      	ldr	r2, [pc, #292]	; (80067d0 <HAL_GPIO_Init+0x2f8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <HAL_GPIO_Init+0x1e8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a48      	ldr	r2, [pc, #288]	; (80067d4 <HAL_GPIO_Init+0x2fc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d101      	bne.n	80066bc <HAL_GPIO_Init+0x1e4>
 80066b8:	2305      	movs	r3, #5
 80066ba:	e00a      	b.n	80066d2 <HAL_GPIO_Init+0x1fa>
 80066bc:	2306      	movs	r3, #6
 80066be:	e008      	b.n	80066d2 <HAL_GPIO_Init+0x1fa>
 80066c0:	2304      	movs	r3, #4
 80066c2:	e006      	b.n	80066d2 <HAL_GPIO_Init+0x1fa>
 80066c4:	2303      	movs	r3, #3
 80066c6:	e004      	b.n	80066d2 <HAL_GPIO_Init+0x1fa>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e002      	b.n	80066d2 <HAL_GPIO_Init+0x1fa>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_GPIO_Init+0x1fa>
 80066d0:	2300      	movs	r3, #0
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	f002 0203 	and.w	r2, r2, #3
 80066d8:	0092      	lsls	r2, r2, #2
 80066da:	4093      	lsls	r3, r2
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066e2:	4937      	ldr	r1, [pc, #220]	; (80067c0 <HAL_GPIO_Init+0x2e8>)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	089b      	lsrs	r3, r3, #2
 80066e8:	3302      	adds	r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066f0:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <HAL_GPIO_Init+0x300>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4013      	ands	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006714:	4a30      	ldr	r2, [pc, #192]	; (80067d8 <HAL_GPIO_Init+0x300>)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800671a:	4b2f      	ldr	r3, [pc, #188]	; (80067d8 <HAL_GPIO_Init+0x300>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	43db      	mvns	r3, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4013      	ands	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800673e:	4a26      	ldr	r2, [pc, #152]	; (80067d8 <HAL_GPIO_Init+0x300>)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006744:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <HAL_GPIO_Init+0x300>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	43db      	mvns	r3, r3
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4013      	ands	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <HAL_GPIO_Init+0x300>)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <HAL_GPIO_Init+0x300>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	43db      	mvns	r3, r3
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4013      	ands	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006792:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <HAL_GPIO_Init+0x300>)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	3301      	adds	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f ae9d 	bne.w	80064e8 <HAL_GPIO_Init+0x10>
  }
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40010000 	.word	0x40010000
 80067c4:	48000400 	.word	0x48000400
 80067c8:	48000800 	.word	0x48000800
 80067cc:	48000c00 	.word	0x48000c00
 80067d0:	48001000 	.word	0x48001000
 80067d4:	48001400 	.word	0x48001400
 80067d8:	40010400 	.word	0x40010400

080067dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e001      	b.n	80067fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	807b      	strh	r3, [r7, #2]
 8006818:	4613      	mov	r3, r2
 800681a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800681c:	787b      	ldrb	r3, [r7, #1]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006822:	887a      	ldrh	r2, [r7, #2]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006828:	e002      	b.n	8006830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800682a:	887a      	ldrh	r2, [r7, #2]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006846:	4b08      	ldr	r3, [pc, #32]	; (8006868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006852:	4a05      	ldr	r2, [pc, #20]	; (8006868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd fabc 	bl	8003dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40010400 	.word	0x40010400

0800686c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d141      	bne.n	80068fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800687a:	4b4b      	ldr	r3, [pc, #300]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d131      	bne.n	80068ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006888:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688e:	4a46      	ldr	r2, [pc, #280]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006898:	4b43      	ldr	r3, [pc, #268]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068a0:	4a41      	ldr	r2, [pc, #260]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068a8:	4b40      	ldr	r3, [pc, #256]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2232      	movs	r2, #50	; 0x32
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	4a3f      	ldr	r2, [pc, #252]	; (80069b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	0c9b      	lsrs	r3, r3, #18
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068be:	e002      	b.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068c6:	4b38      	ldr	r3, [pc, #224]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d102      	bne.n	80068da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f2      	bne.n	80068c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068da:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e6:	d158      	bne.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e057      	b.n	800699c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068ec:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f2:	4a2d      	ldr	r2, [pc, #180]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068fc:	e04d      	b.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006904:	d141      	bne.n	800698a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006906:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d131      	bne.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691a:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006924:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692c:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2232      	movs	r2, #50	; 0x32
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	0c9b      	lsrs	r3, r3, #18
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800694a:	e002      	b.n	8006952 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3b01      	subs	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d102      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f2      	bne.n	800694c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006972:	d112      	bne.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e011      	b.n	800699c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006988:	e007      	b.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006992:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006998:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40007000 	.word	0x40007000
 80069ac:	20000224 	.word	0x20000224
 80069b0:	431bde83 	.word	0x431bde83

080069b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069c2:	6093      	str	r3, [r2, #8]
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40007000 	.word	0x40007000

080069d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e2fe      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d075      	beq.n	8006ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f2:	4b97      	ldr	r3, [pc, #604]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069fc:	4b94      	ldr	r3, [pc, #592]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d102      	bne.n	8006a12 <HAL_RCC_OscConfig+0x3e>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d002      	beq.n	8006a18 <HAL_RCC_OscConfig+0x44>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d10b      	bne.n	8006a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a18:	4b8d      	ldr	r3, [pc, #564]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d05b      	beq.n	8006adc <HAL_RCC_OscConfig+0x108>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d157      	bne.n	8006adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e2d9      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d106      	bne.n	8006a48 <HAL_RCC_OscConfig+0x74>
 8006a3a:	4b85      	ldr	r3, [pc, #532]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a84      	ldr	r2, [pc, #528]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e01d      	b.n	8006a84 <HAL_RCC_OscConfig+0xb0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x98>
 8006a52:	4b7f      	ldr	r3, [pc, #508]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7e      	ldr	r2, [pc, #504]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b7c      	ldr	r3, [pc, #496]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7b      	ldr	r2, [pc, #492]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCC_OscConfig+0xb0>
 8006a6c:	4b78      	ldr	r3, [pc, #480]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a77      	ldr	r2, [pc, #476]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b75      	ldr	r3, [pc, #468]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a74      	ldr	r2, [pc, #464]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fd fd72 	bl	8004574 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fd fd6e 	bl	8004574 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e29e      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aa6:	4b6a      	ldr	r3, [pc, #424]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0xc0>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fd fd5e 	bl	8004574 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fd fd5a 	bl	8004574 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	; 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e28a      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ace:	4b60      	ldr	r3, [pc, #384]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0xe8>
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d075      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aea:	4b59      	ldr	r3, [pc, #356]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006af4:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d102      	bne.n	8006b0a <HAL_RCC_OscConfig+0x136>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d002      	beq.n	8006b10 <HAL_RCC_OscConfig+0x13c>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d11f      	bne.n	8006b50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b10:	4b4f      	ldr	r3, [pc, #316]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_OscConfig+0x154>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e25d      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b28:	4b49      	ldr	r3, [pc, #292]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	4946      	ldr	r1, [pc, #280]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b3c:	4b45      	ldr	r3, [pc, #276]	; (8006c54 <HAL_RCC_OscConfig+0x280>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd fccb 	bl	80044dc <HAL_InitTick>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d043      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e249      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d023      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b58:	4b3d      	ldr	r3, [pc, #244]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a3c      	ldr	r2, [pc, #240]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fd fd06 	bl	8004574 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6c:	f7fd fd02 	bl	8004574 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e232      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	492d      	ldr	r1, [pc, #180]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	604b      	str	r3, [r1, #4]
 8006b9e:	e01a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2a      	ldr	r2, [pc, #168]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fd fce2 	bl	8004574 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bb4:	f7fd fcde 	bl	8004574 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e20e      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bc6:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x1e0>
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d041      	beq.n	8006c66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01c      	beq.n	8006c24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfa:	f7fd fcbb 	bl	8004574 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c02:	f7fd fcb7 	bl	8004574 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e1e7      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ef      	beq.n	8006c02 <HAL_RCC_OscConfig+0x22e>
 8006c22:	e020      	b.n	8006c66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c2a:	4a09      	ldr	r2, [pc, #36]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c34:	f7fd fc9e 	bl	8004574 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c3a:	e00d      	b.n	8006c58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3c:	f7fd fc9a 	bl	8004574 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d906      	bls.n	8006c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e1ca      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
 8006c4e:	bf00      	nop
 8006c50:	40021000 	.word	0x40021000
 8006c54:	20000228 	.word	0x20000228
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c58:	4b8c      	ldr	r3, [pc, #560]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1ea      	bne.n	8006c3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80a6 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c74:	2300      	movs	r3, #0
 8006c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c78:	4b84      	ldr	r3, [pc, #528]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_OscConfig+0x2b4>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x2b6>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c8e:	4b7f      	ldr	r3, [pc, #508]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	4a7e      	ldr	r2, [pc, #504]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c98:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9a:	4b7c      	ldr	r3, [pc, #496]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006caa:	4b79      	ldr	r3, [pc, #484]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d118      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb6:	4b76      	ldr	r3, [pc, #472]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a75      	ldr	r2, [pc, #468]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cc2:	f7fd fc57 	bl	8004574 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cca:	f7fd fc53 	bl	8004574 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e183      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cdc:	4b6c      	ldr	r3, [pc, #432]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d108      	bne.n	8006d02 <HAL_RCC_OscConfig+0x32e>
 8006cf0:	4b66      	ldr	r3, [pc, #408]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf6:	4a65      	ldr	r2, [pc, #404]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d00:	e024      	b.n	8006d4c <HAL_RCC_OscConfig+0x378>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d110      	bne.n	8006d2c <HAL_RCC_OscConfig+0x358>
 8006d0a:	4b60      	ldr	r3, [pc, #384]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d10:	4a5e      	ldr	r2, [pc, #376]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d12:	f043 0304 	orr.w	r3, r3, #4
 8006d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d1a:	4b5c      	ldr	r3, [pc, #368]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	4a5a      	ldr	r2, [pc, #360]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f043 0301 	orr.w	r3, r3, #1
 8006d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d2a:	e00f      	b.n	8006d4c <HAL_RCC_OscConfig+0x378>
 8006d2c:	4b57      	ldr	r3, [pc, #348]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	4a56      	ldr	r2, [pc, #344]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d3c:	4b53      	ldr	r3, [pc, #332]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	4a52      	ldr	r2, [pc, #328]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d44:	f023 0304 	bic.w	r3, r3, #4
 8006d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fd fc0e 	bl	8004574 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5c:	f7fd fc0a 	bl	8004574 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e138      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d72:	4b46      	ldr	r3, [pc, #280]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0ed      	beq.n	8006d5c <HAL_RCC_OscConfig+0x388>
 8006d80:	e015      	b.n	8006dae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fd fbf7 	bl	8004574 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fd fbf3 	bl	8004574 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e121      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006da0:	4b3a      	ldr	r3, [pc, #232]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1ed      	bne.n	8006d8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dae:	7ffb      	ldrb	r3, [r7, #31]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db4:	4b35      	ldr	r3, [pc, #212]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	4a34      	ldr	r2, [pc, #208]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03c      	beq.n	8006e46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01c      	beq.n	8006e0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dda:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006ddc:	f043 0301 	orr.w	r3, r3, #1
 8006de0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de4:	f7fd fbc6 	bl	8004574 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dec:	f7fd fbc2 	bl	8004574 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e0f2      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dfe:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0ef      	beq.n	8006dec <HAL_RCC_OscConfig+0x418>
 8006e0c:	e01b      	b.n	8006e46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e0e:	4b1f      	ldr	r3, [pc, #124]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1e:	f7fd fba9 	bl	8004574 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e26:	f7fd fba5 	bl	8004574 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0d5      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e38:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1ef      	bne.n	8006e26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80c9 	beq.w	8006fe2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e50:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 030c 	and.w	r3, r3, #12
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	f000 8083 	beq.w	8006f64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d15e      	bne.n	8006f24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fd fb7f 	bl	8004574 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e78:	e00c      	b.n	8006e94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7a:	f7fd fb7b 	bl	8004574 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d905      	bls.n	8006e94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e0ab      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e94:	4b55      	ldr	r3, [pc, #340]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ec      	bne.n	8006e7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea0:	4b52      	ldr	r3, [pc, #328]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <HAL_RCC_OscConfig+0x61c>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6a11      	ldr	r1, [r2, #32]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eb0:	3a01      	subs	r2, #1
 8006eb2:	0112      	lsls	r2, r2, #4
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006eba:	0212      	lsls	r2, r2, #8
 8006ebc:	4311      	orrs	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ec2:	0852      	lsrs	r2, r2, #1
 8006ec4:	3a01      	subs	r2, #1
 8006ec6:	0552      	lsls	r2, r2, #21
 8006ec8:	4311      	orrs	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ece:	0852      	lsrs	r2, r2, #1
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	0652      	lsls	r2, r2, #25
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006eda:	06d2      	lsls	r2, r2, #27
 8006edc:	430a      	orrs	r2, r1
 8006ede:	4943      	ldr	r1, [pc, #268]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ee4:	4b41      	ldr	r3, [pc, #260]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a40      	ldr	r2, [pc, #256]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ef0:	4b3e      	ldr	r3, [pc, #248]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4a3d      	ldr	r2, [pc, #244]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006efa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fd fb3a 	bl	8004574 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f04:	f7fd fb36 	bl	8004574 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e066      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f16:	4b35      	ldr	r3, [pc, #212]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0f0      	beq.n	8006f04 <HAL_RCC_OscConfig+0x530>
 8006f22:	e05e      	b.n	8006fe2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f24:	4b31      	ldr	r3, [pc, #196]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a30      	ldr	r2, [pc, #192]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fd fb20 	bl	8004574 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f38:	f7fd fb1c 	bl	8004574 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e04c      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f4a:	4b28      	ldr	r3, [pc, #160]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f0      	bne.n	8006f38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f56:	4b25      	ldr	r3, [pc, #148]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	4924      	ldr	r1, [pc, #144]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <HAL_RCC_OscConfig+0x620>)
 8006f5e:	4013      	ands	r3, r2
 8006f60:	60cb      	str	r3, [r1, #12]
 8006f62:	e03e      	b.n	8006fe2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e039      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f70:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <HAL_RCC_OscConfig+0x618>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f003 0203 	and.w	r2, r3, #3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d12c      	bne.n	8006fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d123      	bne.n	8006fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d11b      	bne.n	8006fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d113      	bne.n	8006fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d109      	bne.n	8006fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d001      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	019f800c 	.word	0x019f800c
 8006ff4:	feeefffc 	.word	0xfeeefffc

08006ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e11e      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007010:	4b91      	ldr	r3, [pc, #580]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d910      	bls.n	8007040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701e:	4b8e      	ldr	r3, [pc, #568]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 020f 	bic.w	r2, r3, #15
 8007026:	498c      	ldr	r1, [pc, #560]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	4313      	orrs	r3, r2
 800702c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800702e:	4b8a      	ldr	r3, [pc, #552]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d001      	beq.n	8007040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e106      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d073      	beq.n	8007134 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d129      	bne.n	80070a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007054:	4b81      	ldr	r3, [pc, #516]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0f4      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007064:	f000 f99e 	bl	80073a4 <RCC_GetSysClockFreqFromPLLSource>
 8007068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4a7c      	ldr	r2, [pc, #496]	; (8007260 <HAL_RCC_ClockConfig+0x268>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d93f      	bls.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007072:	4b7a      	ldr	r3, [pc, #488]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007086:	2b00      	cmp	r3, #0
 8007088:	d033      	beq.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800708e:	2b00      	cmp	r3, #0
 8007090:	d12f      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007092:	4b72      	ldr	r3, [pc, #456]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800709a:	4a70      	ldr	r2, [pc, #448]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	e024      	b.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d107      	bne.n	80070c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070b0:	4b6a      	ldr	r3, [pc, #424]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e0c6      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c0:	4b66      	ldr	r3, [pc, #408]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0be      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070d0:	f000 f8ce 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 80070d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4a61      	ldr	r2, [pc, #388]	; (8007260 <HAL_RCC_ClockConfig+0x268>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d909      	bls.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070de:	4b5f      	ldr	r3, [pc, #380]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070e6:	4a5d      	ldr	r2, [pc, #372]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070f2:	4b5a      	ldr	r3, [pc, #360]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 0203 	bic.w	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4957      	ldr	r1, [pc, #348]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007100:	4313      	orrs	r3, r2
 8007102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007104:	f7fd fa36 	bl	8004574 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	e00a      	b.n	8007122 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710c:	f7fd fa32 	bl	8004574 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e095      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	4b4e      	ldr	r3, [pc, #312]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 020c 	and.w	r2, r3, #12
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d1eb      	bne.n	800710c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d023      	beq.n	8007188 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800714c:	4b43      	ldr	r3, [pc, #268]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	4a42      	ldr	r2, [pc, #264]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007156:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007164:	4b3d      	ldr	r3, [pc, #244]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800716c:	4a3b      	ldr	r2, [pc, #236]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800716e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007174:	4b39      	ldr	r3, [pc, #228]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4936      	ldr	r1, [pc, #216]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
 8007186:	e008      	b.n	800719a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b80      	cmp	r3, #128	; 0x80
 800718c:	d105      	bne.n	800719a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4a32      	ldr	r2, [pc, #200]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007198:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800719a:	4b2f      	ldr	r3, [pc, #188]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d21d      	bcs.n	80071e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a8:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 020f 	bic.w	r2, r3, #15
 80071b0:	4929      	ldr	r1, [pc, #164]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071b8:	f7fd f9dc 	bl	8004574 <HAL_GetTick>
 80071bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071be:	e00a      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c0:	f7fd f9d8 	bl	8004574 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e03b      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071d6:	4b20      	ldr	r3, [pc, #128]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d1ed      	bne.n	80071c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071f0:	4b1a      	ldr	r3, [pc, #104]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4917      	ldr	r1, [pc, #92]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	490f      	ldr	r1, [pc, #60]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800721e:	4313      	orrs	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007222:	f000 f825 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 8007226:	4602      	mov	r2, r0
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	091b      	lsrs	r3, r3, #4
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	490c      	ldr	r1, [pc, #48]	; (8007264 <HAL_RCC_ClockConfig+0x26c>)
 8007234:	5ccb      	ldrb	r3, [r1, r3]
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	fa22 f303 	lsr.w	r3, r2, r3
 800723e:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <HAL_RCC_ClockConfig+0x270>)
 8007240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <HAL_RCC_ClockConfig+0x274>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f7fd f948 	bl	80044dc <HAL_InitTick>
 800724c:	4603      	mov	r3, r0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40022000 	.word	0x40022000
 800725c:	40021000 	.word	0x40021000
 8007260:	04c4b400 	.word	0x04c4b400
 8007264:	0800bfa8 	.word	0x0800bfa8
 8007268:	20000224 	.word	0x20000224
 800726c:	20000228 	.word	0x20000228

08007270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007276:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 030c 	and.w	r3, r3, #12
 800727e:	2b04      	cmp	r3, #4
 8007280:	d102      	bne.n	8007288 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007282:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	e047      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007288:	4b27      	ldr	r3, [pc, #156]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 030c 	and.w	r3, r3, #12
 8007290:	2b08      	cmp	r3, #8
 8007292:	d102      	bne.n	800729a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007294:	4b26      	ldr	r3, [pc, #152]	; (8007330 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	e03e      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f003 030c 	and.w	r3, r3, #12
 80072a2:	2b0c      	cmp	r3, #12
 80072a4:	d136      	bne.n	8007314 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072a6:	4b20      	ldr	r3, [pc, #128]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	3301      	adds	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d10c      	bne.n	80072de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c4:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072ce:	68d2      	ldr	r2, [r2, #12]
 80072d0:	0a12      	lsrs	r2, r2, #8
 80072d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	617b      	str	r3, [r7, #20]
      break;
 80072dc:	e00c      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <HAL_RCC_GetSysClockFreq+0xbc>)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e8:	68d2      	ldr	r2, [r2, #12]
 80072ea:	0a12      	lsrs	r2, r2, #8
 80072ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]
      break;
 80072f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	0e5b      	lsrs	r3, r3, #25
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	3301      	adds	r3, #1
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e001      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007318:	693b      	ldr	r3, [r7, #16]
}
 800731a:	4618      	mov	r0, r3
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	00f42400 	.word	0x00f42400
 8007330:	016e3600 	.word	0x016e3600

08007334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007338:	4b03      	ldr	r3, [pc, #12]	; (8007348 <HAL_RCC_GetHCLKFreq+0x14>)
 800733a:	681b      	ldr	r3, [r3, #0]
}
 800733c:	4618      	mov	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000224 	.word	0x20000224

0800734c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007350:	f7ff fff0 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8007354:	4602      	mov	r2, r0
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	4904      	ldr	r1, [pc, #16]	; (8007374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007362:	5ccb      	ldrb	r3, [r1, r3]
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40021000 	.word	0x40021000
 8007374:	0800bfb8 	.word	0x0800bfb8

08007378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800737c:	f7ff ffda 	bl	8007334 <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	0adb      	lsrs	r3, r3, #11
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40021000 	.word	0x40021000
 80073a0:	0800bfb8 	.word	0x0800bfb8

080073a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073aa:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073b4:	4b1b      	ldr	r3, [pc, #108]	; (8007424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	3301      	adds	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d10c      	bne.n	80073e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073c8:	4a17      	ldr	r2, [pc, #92]	; (8007428 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	4a14      	ldr	r2, [pc, #80]	; (8007424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073d2:	68d2      	ldr	r2, [r2, #12]
 80073d4:	0a12      	lsrs	r2, r2, #8
 80073d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	617b      	str	r3, [r7, #20]
    break;
 80073e0:	e00c      	b.n	80073fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073e2:	4a12      	ldr	r2, [pc, #72]	; (800742c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ea:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073ec:	68d2      	ldr	r2, [r2, #12]
 80073ee:	0a12      	lsrs	r2, r2, #8
 80073f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073f4:	fb02 f303 	mul.w	r3, r2, r3
 80073f8:	617b      	str	r3, [r7, #20]
    break;
 80073fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	0e5b      	lsrs	r3, r3, #25
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	3301      	adds	r3, #1
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	fbb2 f3f3 	udiv	r3, r2, r3
 8007414:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007416:	687b      	ldr	r3, [r7, #4]
}
 8007418:	4618      	mov	r0, r3
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40021000 	.word	0x40021000
 8007428:	016e3600 	.word	0x016e3600
 800742c:	00f42400 	.word	0x00f42400

08007430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007438:	2300      	movs	r3, #0
 800743a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800743c:	2300      	movs	r3, #0
 800743e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8098 	beq.w	800757e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800744e:	2300      	movs	r3, #0
 8007450:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007452:	4b43      	ldr	r3, [pc, #268]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10d      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800745e:	4b40      	ldr	r3, [pc, #256]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	4a3f      	ldr	r2, [pc, #252]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007468:	6593      	str	r3, [r2, #88]	; 0x58
 800746a:	4b3d      	ldr	r3, [pc, #244]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007472:	60bb      	str	r3, [r7, #8]
 8007474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007476:	2301      	movs	r3, #1
 8007478:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800747a:	4b3a      	ldr	r3, [pc, #232]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a39      	ldr	r2, [pc, #228]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007486:	f7fd f875 	bl	8004574 <HAL_GetTick>
 800748a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800748c:	e009      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748e:	f7fd f871 	bl	8004574 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d902      	bls.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	74fb      	strb	r3, [r7, #19]
        break;
 80074a0:	e005      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a2:	4b30      	ldr	r3, [pc, #192]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0ef      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074ae:	7cfb      	ldrb	r3, [r7, #19]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d159      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074b4:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01e      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d019      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074d0:	4b23      	ldr	r3, [pc, #140]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074dc:	4b20      	ldr	r3, [pc, #128]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	4a1f      	ldr	r2, [pc, #124]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074ec:	4b1c      	ldr	r3, [pc, #112]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f2:	4a1b      	ldr	r2, [pc, #108]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074fc:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d016      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750e:	f7fd f831 	bl	8004574 <HAL_GetTick>
 8007512:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007514:	e00b      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007516:	f7fd f82d 	bl	8004574 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	f241 3288 	movw	r2, #5000	; 0x1388
 8007524:	4293      	cmp	r3, r2
 8007526:	d902      	bls.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	74fb      	strb	r3, [r7, #19]
            break;
 800752c:	e006      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0ec      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800753c:	7cfb      	ldrb	r3, [r7, #19]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10b      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	4903      	ldr	r1, [pc, #12]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007558:	e008      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800755a:	7cfb      	ldrb	r3, [r7, #19]
 800755c:	74bb      	strb	r3, [r7, #18]
 800755e:	e005      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007560:	40021000 	.word	0x40021000
 8007564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800756c:	7c7b      	ldrb	r3, [r7, #17]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d105      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007572:	4ba7      	ldr	r3, [pc, #668]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007576:	4aa6      	ldr	r2, [pc, #664]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800757c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800758a:	4ba1      	ldr	r3, [pc, #644]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007590:	f023 0203 	bic.w	r2, r3, #3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	499d      	ldr	r1, [pc, #628]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075ac:	4b98      	ldr	r3, [pc, #608]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	f023 020c 	bic.w	r2, r3, #12
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	4995      	ldr	r1, [pc, #596]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075ce:	4b90      	ldr	r3, [pc, #576]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	498c      	ldr	r1, [pc, #560]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075f0:	4b87      	ldr	r3, [pc, #540]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	4984      	ldr	r1, [pc, #528]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007612:	4b7f      	ldr	r3, [pc, #508]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	497b      	ldr	r1, [pc, #492]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007634:	4b76      	ldr	r3, [pc, #472]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	4973      	ldr	r1, [pc, #460]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007656:	4b6e      	ldr	r3, [pc, #440]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	496a      	ldr	r1, [pc, #424]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007678:	4b65      	ldr	r3, [pc, #404]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	4962      	ldr	r1, [pc, #392]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800769a:	4b5d      	ldr	r3, [pc, #372]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	4959      	ldr	r1, [pc, #356]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076bc:	4b54      	ldr	r3, [pc, #336]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076c2:	f023 0203 	bic.w	r2, r3, #3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	4951      	ldr	r1, [pc, #324]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076de:	4b4c      	ldr	r3, [pc, #304]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4948      	ldr	r1, [pc, #288]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d015      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007700:	4b43      	ldr	r3, [pc, #268]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	4940      	ldr	r1, [pc, #256]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800771e:	d105      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007720:	4b3b      	ldr	r3, [pc, #236]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4a3a      	ldr	r2, [pc, #232]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800772a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007738:	4b35      	ldr	r3, [pc, #212]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007746:	4932      	ldr	r1, [pc, #200]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007756:	d105      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d015      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007770:	4b27      	ldr	r3, [pc, #156]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007776:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	4924      	ldr	r1, [pc, #144]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800778e:	d105      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007790:	4b1f      	ldr	r3, [pc, #124]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d015      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077a8:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b6:	4916      	ldr	r1, [pc, #88]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077c6:	d105      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077c8:	4b11      	ldr	r3, [pc, #68]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4a10      	ldr	r2, [pc, #64]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d019      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	4908      	ldr	r1, [pc, #32]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077fe:	d109      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007800:	4b03      	ldr	r3, [pc, #12]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4a02      	ldr	r2, [pc, #8]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800780a:	60d3      	str	r3, [r2, #12]
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d015      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007820:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782e:	4926      	ldr	r1, [pc, #152]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007830:	4313      	orrs	r3, r2
 8007832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800783e:	d105      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007840:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4a20      	ldr	r2, [pc, #128]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d015      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007858:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007866:	4918      	ldr	r1, [pc, #96]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007868:	4313      	orrs	r3, r2
 800786a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d105      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	4a12      	ldr	r2, [pc, #72]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800787e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007882:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d015      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	490a      	ldr	r1, [pc, #40]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ae:	d105      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078b0:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	4a04      	ldr	r2, [pc, #16]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40021000 	.word	0x40021000

080078cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e054      	b.n	8007988 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d111      	bne.n	800790e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fee2 	bl	80096bc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a23      	ldr	r2, [pc, #140]	; (8007990 <HAL_TIM_Base_Init+0xc4>)
 8007904:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f001 fa2b 	bl	8008d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	08003fb5 	.word	0x08003fb5

08007994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d001      	beq.n	80079ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e04c      	b.n	8007a46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a26      	ldr	r2, [pc, #152]	; (8007a54 <HAL_TIM_Base_Start+0xc0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d022      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c6:	d01d      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <HAL_TIM_Base_Start+0xc4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d018      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <HAL_TIM_Base_Start+0xc8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <HAL_TIM_Base_Start+0xcc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00e      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <HAL_TIM_Base_Start+0xd0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d009      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_TIM_Base_Start+0xd4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_TIM_Base_Start+0xd8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d115      	bne.n	8007a30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <HAL_TIM_Base_Start+0xdc>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d015      	beq.n	8007a42 <HAL_TIM_Base_Start+0xae>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	d011      	beq.n	8007a42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2e:	e008      	b.n	8007a42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	e000      	b.n	8007a44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40015000 	.word	0x40015000
 8007a70:	00010007 	.word	0x00010007

08007a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e054      	b.n	8007b36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a26      	ldr	r2, [pc, #152]	; (8007b44 <HAL_TIM_Base_Start_IT+0xd0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d022      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d01d      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a22      	ldr	r2, [pc, #136]	; (8007b48 <HAL_TIM_Base_Start_IT+0xd4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d018      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d013      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1f      	ldr	r2, [pc, #124]	; (8007b50 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00e      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <HAL_TIM_Base_Start_IT+0xe0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <HAL_TIM_Base_Start_IT+0xe4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x80>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1b      	ldr	r2, [pc, #108]	; (8007b5c <HAL_TIM_Base_Start_IT+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d115      	bne.n	8007b20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	4b19      	ldr	r3, [pc, #100]	; (8007b60 <HAL_TIM_Base_Start_IT+0xec>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b06      	cmp	r3, #6
 8007b04:	d015      	beq.n	8007b32 <HAL_TIM_Base_Start_IT+0xbe>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d011      	beq.n	8007b32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0201 	orr.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1e:	e008      	b.n	8007b32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e000      	b.n	8007b34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40012c00 	.word	0x40012c00
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40013400 	.word	0x40013400
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40015000 	.word	0x40015000
 8007b60:	00010007 	.word	0x00010007

08007b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e054      	b.n	8007c20 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d111      	bne.n	8007ba6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fd96 	bl	80096bc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a23      	ldr	r2, [pc, #140]	; (8007c28 <HAL_TIM_PWM_Init+0xc4>)
 8007b9c:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f001 f8df 	bl	8008d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	0800406d 	.word	0x0800406d

08007c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <HAL_TIM_PWM_Start+0x24>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	bf14      	ite	ne
 8007c48:	2301      	movne	r3, #1
 8007c4a:	2300      	moveq	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	e03c      	b.n	8007cca <HAL_TIM_PWM_Start+0x9e>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d109      	bne.n	8007c6a <HAL_TIM_PWM_Start+0x3e>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	bf14      	ite	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	2300      	moveq	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	e02f      	b.n	8007cca <HAL_TIM_PWM_Start+0x9e>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d109      	bne.n	8007c84 <HAL_TIM_PWM_Start+0x58>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e022      	b.n	8007cca <HAL_TIM_PWM_Start+0x9e>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	d109      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x72>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e015      	b.n	8007cca <HAL_TIM_PWM_Start+0x9e>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d109      	bne.n	8007cb8 <HAL_TIM_PWM_Start+0x8c>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e008      	b.n	8007cca <HAL_TIM_PWM_Start+0x9e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e0a6      	b.n	8007e20 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d104      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0xb6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce0:	e023      	b.n	8007d2a <HAL_TIM_PWM_Start+0xfe>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d104      	bne.n	8007cf2 <HAL_TIM_PWM_Start+0xc6>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf0:	e01b      	b.n	8007d2a <HAL_TIM_PWM_Start+0xfe>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d104      	bne.n	8007d02 <HAL_TIM_PWM_Start+0xd6>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d00:	e013      	b.n	8007d2a <HAL_TIM_PWM_Start+0xfe>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b0c      	cmp	r3, #12
 8007d06:	d104      	bne.n	8007d12 <HAL_TIM_PWM_Start+0xe6>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d10:	e00b      	b.n	8007d2a <HAL_TIM_PWM_Start+0xfe>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d104      	bne.n	8007d22 <HAL_TIM_PWM_Start+0xf6>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d20:	e003      	b.n	8007d2a <HAL_TIM_PWM_Start+0xfe>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 fc9c 	bl	8009670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a3a      	ldr	r2, [pc, #232]	; (8007e28 <HAL_TIM_PWM_Start+0x1fc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d018      	beq.n	8007d74 <HAL_TIM_PWM_Start+0x148>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a39      	ldr	r2, [pc, #228]	; (8007e2c <HAL_TIM_PWM_Start+0x200>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d013      	beq.n	8007d74 <HAL_TIM_PWM_Start+0x148>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a37      	ldr	r2, [pc, #220]	; (8007e30 <HAL_TIM_PWM_Start+0x204>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00e      	beq.n	8007d74 <HAL_TIM_PWM_Start+0x148>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a36      	ldr	r2, [pc, #216]	; (8007e34 <HAL_TIM_PWM_Start+0x208>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d009      	beq.n	8007d74 <HAL_TIM_PWM_Start+0x148>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a34      	ldr	r2, [pc, #208]	; (8007e38 <HAL_TIM_PWM_Start+0x20c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d004      	beq.n	8007d74 <HAL_TIM_PWM_Start+0x148>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a33      	ldr	r2, [pc, #204]	; (8007e3c <HAL_TIM_PWM_Start+0x210>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d101      	bne.n	8007d78 <HAL_TIM_PWM_Start+0x14c>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <HAL_TIM_PWM_Start+0x14e>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a25      	ldr	r2, [pc, #148]	; (8007e28 <HAL_TIM_PWM_Start+0x1fc>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d022      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da0:	d01d      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a26      	ldr	r2, [pc, #152]	; (8007e40 <HAL_TIM_PWM_Start+0x214>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d018      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a24      	ldr	r2, [pc, #144]	; (8007e44 <HAL_TIM_PWM_Start+0x218>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d013      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a23      	ldr	r2, [pc, #140]	; (8007e48 <HAL_TIM_PWM_Start+0x21c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00e      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a19      	ldr	r2, [pc, #100]	; (8007e2c <HAL_TIM_PWM_Start+0x200>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d009      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a18      	ldr	r2, [pc, #96]	; (8007e30 <HAL_TIM_PWM_Start+0x204>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d004      	beq.n	8007dde <HAL_TIM_PWM_Start+0x1b2>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a18      	ldr	r2, [pc, #96]	; (8007e3c <HAL_TIM_PWM_Start+0x210>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d115      	bne.n	8007e0a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <HAL_TIM_PWM_Start+0x220>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b06      	cmp	r3, #6
 8007dee:	d015      	beq.n	8007e1c <HAL_TIM_PWM_Start+0x1f0>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df6:	d011      	beq.n	8007e1c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e08:	e008      	b.n	8007e1c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0201 	orr.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e000      	b.n	8007e1e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40013400 	.word	0x40013400
 8007e30:	40014000 	.word	0x40014000
 8007e34:	40014400 	.word	0x40014400
 8007e38:	40014800 	.word	0x40014800
 8007e3c:	40015000 	.word	0x40015000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	00010007 	.word	0x00010007

08007e50 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e04c      	b.n	8007efe <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d111      	bne.n	8007e94 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fc1f 	bl	80096bc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <HAL_TIM_OnePulse_Init+0xb8>)
 8007e8a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	f000 ff68 	bl	8008d7c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0208 	bic.w	r2, r2, #8
 8007eba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	08007f0d 	.word	0x08007f0d

08007f0c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f48:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d108      	bne.n	8007f62 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d105      	bne.n	8007f62 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f56:	7b7b      	ldrb	r3, [r7, #13]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d102      	bne.n	8007f62 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f5c:	7b3b      	ldrb	r3, [r7, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d001      	beq.n	8007f66 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e059      	b.n	800801a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0202 	orr.w	r2, r2, #2
 8007f94:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0204 	orr.w	r2, r2, #4
 8007fa4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2201      	movs	r2, #1
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fb5e 	bl	8009670 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	2104      	movs	r1, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fb57 	bl	8009670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a17      	ldr	r2, [pc, #92]	; (8008024 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d018      	beq.n	8007ffe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a15      	ldr	r2, [pc, #84]	; (8008028 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a14      	ldr	r2, [pc, #80]	; (800802c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00e      	beq.n	8007ffe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a12      	ldr	r2, [pc, #72]	; (8008030 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a11      	ldr	r2, [pc, #68]	; (8008034 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d004      	beq.n	8007ffe <HAL_TIM_OnePulse_Start_IT+0xde>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d101      	bne.n	8008002 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008016:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40014000 	.word	0x40014000
 8008030:	40014400 	.word	0x40014400
 8008034:	40014800 	.word	0x40014800
 8008038:	40015000 	.word	0x40015000

0800803c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0a2      	b.n	8008196 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d111      	bne.n	8008080 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 fb29 	bl	80096bc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806e:	2b00      	cmp	r3, #0
 8008070:	d102      	bne.n	8008078 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a4a      	ldr	r2, [pc, #296]	; (80081a0 <HAL_TIM_Encoder_Init+0x164>)
 8008076:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008096:	f023 0307 	bic.w	r3, r3, #7
 800809a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f000 fe68 	bl	8008d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d4:	f023 0303 	bic.w	r3, r3, #3
 80080d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	4313      	orrs	r3, r2
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80080f2:	f023 030c 	bic.w	r3, r3, #12
 80080f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	4313      	orrs	r3, r2
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	011a      	lsls	r2, r3, #4
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	4313      	orrs	r3, r2
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008130:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008138:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	4313      	orrs	r3, r2
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	080040ad 	.word	0x080040ad

080081a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d110      	bne.n	80081f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d102      	bne.n	80081e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80081da:	7b7b      	ldrb	r3, [r7, #13]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d001      	beq.n	80081e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e069      	b.n	80082b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f4:	e031      	b.n	800825a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d110      	bne.n	800821e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d102      	bne.n	8008208 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008202:	7b3b      	ldrb	r3, [r7, #12]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d001      	beq.n	800820c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e055      	b.n	80082b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800821c:	e01d      	b.n	800825a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d108      	bne.n	8008236 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d105      	bne.n	8008236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800822a:	7b7b      	ldrb	r3, [r7, #13]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d102      	bne.n	8008236 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008230:	7b3b      	ldrb	r3, [r7, #12]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d001      	beq.n	800823a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e03e      	b.n	80082b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_TIM_Encoder_Start+0xc4>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b04      	cmp	r3, #4
 8008264:	d008      	beq.n	8008278 <HAL_TIM_Encoder_Start+0xd4>
 8008266:	e00f      	b.n	8008288 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	2100      	movs	r1, #0
 8008270:	4618      	mov	r0, r3
 8008272:	f001 f9fd 	bl	8009670 <TIM_CCxChannelCmd>
      break;
 8008276:	e016      	b.n	80082a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2201      	movs	r2, #1
 800827e:	2104      	movs	r1, #4
 8008280:	4618      	mov	r0, r3
 8008282:	f001 f9f5 	bl	8009670 <TIM_CCxChannelCmd>
      break;
 8008286:	e00e      	b.n	80082a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	2100      	movs	r1, #0
 8008290:	4618      	mov	r0, r3
 8008292:	f001 f9ed 	bl	8009670 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2201      	movs	r2, #1
 800829c:	2104      	movs	r1, #4
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f9e6 	bl	8009670 <TIM_CCxChannelCmd>
      break;
 80082a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f042 0201 	orr.w	r2, r2, #1
 80082b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d026      	beq.n	8008330 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d021      	beq.n	8008330 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0202 	mvn.w	r2, #2
 80082f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
 8008314:	e009      	b.n	800832a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d026      	beq.n	8008388 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d021      	beq.n	8008388 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0204 	mvn.w	r2, #4
 800834c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2202      	movs	r2, #2
 8008352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800835e:	2b00      	cmp	r3, #0
 8008360:	d005      	beq.n	800836e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4798      	blx	r3
 800836c:	e009      	b.n	8008382 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d026      	beq.n	80083e0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d021      	beq.n	80083e0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0208 	mvn.w	r2, #8
 80083a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
 80083c4:	e009      	b.n	80083da <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d026      	beq.n	8008438 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d021      	beq.n	8008438 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0210 	mvn.w	r2, #16
 80083fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2208      	movs	r2, #8
 8008402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
 800841c:	e009      	b.n	8008432 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00e      	beq.n	8008460 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0201 	mvn.w	r2, #1
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d104      	bne.n	8008474 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00e      	beq.n	8008492 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00e      	beq.n	80084ba <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00e      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00e      	beq.n	800850a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f06f 0220 	mvn.w	r2, #32
 80084fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800854e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800859e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e0ff      	b.n	80087d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b14      	cmp	r3, #20
 80085de:	f200 80f0 	bhi.w	80087c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800863d 	.word	0x0800863d
 80085ec:	080087c3 	.word	0x080087c3
 80085f0:	080087c3 	.word	0x080087c3
 80085f4:	080087c3 	.word	0x080087c3
 80085f8:	0800867d 	.word	0x0800867d
 80085fc:	080087c3 	.word	0x080087c3
 8008600:	080087c3 	.word	0x080087c3
 8008604:	080087c3 	.word	0x080087c3
 8008608:	080086bf 	.word	0x080086bf
 800860c:	080087c3 	.word	0x080087c3
 8008610:	080087c3 	.word	0x080087c3
 8008614:	080087c3 	.word	0x080087c3
 8008618:	080086ff 	.word	0x080086ff
 800861c:	080087c3 	.word	0x080087c3
 8008620:	080087c3 	.word	0x080087c3
 8008624:	080087c3 	.word	0x080087c3
 8008628:	08008741 	.word	0x08008741
 800862c:	080087c3 	.word	0x080087c3
 8008630:	080087c3 	.word	0x080087c3
 8008634:	080087c3 	.word	0x080087c3
 8008638:	08008781 	.word	0x08008781
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fc4e 	bl	8008ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0208 	orr.w	r2, r2, #8
 8008656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699a      	ldr	r2, [r3, #24]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0204 	bic.w	r2, r2, #4
 8008666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6999      	ldr	r1, [r3, #24]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	619a      	str	r2, [r3, #24]
      break;
 800867a:	e0a5      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fcc8 	bl	8009018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699a      	ldr	r2, [r3, #24]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699a      	ldr	r2, [r3, #24]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6999      	ldr	r1, [r3, #24]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	021a      	lsls	r2, r3, #8
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	619a      	str	r2, [r3, #24]
      break;
 80086bc:	e084      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fd3b 	bl	8009140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f042 0208 	orr.w	r2, r2, #8
 80086d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0204 	bic.w	r2, r2, #4
 80086e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69d9      	ldr	r1, [r3, #28]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	61da      	str	r2, [r3, #28]
      break;
 80086fc:	e064      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fdad 	bl	8009264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69da      	ldr	r2, [r3, #28]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	69da      	ldr	r2, [r3, #28]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69d9      	ldr	r1, [r3, #28]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	021a      	lsls	r2, r3, #8
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	61da      	str	r2, [r3, #28]
      break;
 800873e:	e043      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fe20 	bl	800938c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0208 	orr.w	r2, r2, #8
 800875a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0204 	bic.w	r2, r2, #4
 800876a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	691a      	ldr	r2, [r3, #16]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800877e:	e023      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fe6a 	bl	8009460 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800879a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	021a      	lsls	r2, r3, #8
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80087c0:	e002      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	75fb      	strb	r3, [r7, #23]
      break;
 80087c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop

080087dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIM_ConfigClockSource+0x1c>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e0f6      	b.n	80089e6 <HAL_TIM_ConfigClockSource+0x20a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800881a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a6f      	ldr	r2, [pc, #444]	; (80089f0 <HAL_TIM_ConfigClockSource+0x214>)
 8008832:	4293      	cmp	r3, r2
 8008834:	f000 80c1 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008838:	4a6d      	ldr	r2, [pc, #436]	; (80089f0 <HAL_TIM_ConfigClockSource+0x214>)
 800883a:	4293      	cmp	r3, r2
 800883c:	f200 80c6 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 8008840:	4a6c      	ldr	r2, [pc, #432]	; (80089f4 <HAL_TIM_ConfigClockSource+0x218>)
 8008842:	4293      	cmp	r3, r2
 8008844:	f000 80b9 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008848:	4a6a      	ldr	r2, [pc, #424]	; (80089f4 <HAL_TIM_ConfigClockSource+0x218>)
 800884a:	4293      	cmp	r3, r2
 800884c:	f200 80be 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 8008850:	4a69      	ldr	r2, [pc, #420]	; (80089f8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	f000 80b1 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008858:	4a67      	ldr	r2, [pc, #412]	; (80089f8 <HAL_TIM_ConfigClockSource+0x21c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	f200 80b6 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 8008860:	4a66      	ldr	r2, [pc, #408]	; (80089fc <HAL_TIM_ConfigClockSource+0x220>)
 8008862:	4293      	cmp	r3, r2
 8008864:	f000 80a9 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008868:	4a64      	ldr	r2, [pc, #400]	; (80089fc <HAL_TIM_ConfigClockSource+0x220>)
 800886a:	4293      	cmp	r3, r2
 800886c:	f200 80ae 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 8008870:	4a63      	ldr	r2, [pc, #396]	; (8008a00 <HAL_TIM_ConfigClockSource+0x224>)
 8008872:	4293      	cmp	r3, r2
 8008874:	f000 80a1 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008878:	4a61      	ldr	r2, [pc, #388]	; (8008a00 <HAL_TIM_ConfigClockSource+0x224>)
 800887a:	4293      	cmp	r3, r2
 800887c:	f200 80a6 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 8008880:	4a60      	ldr	r2, [pc, #384]	; (8008a04 <HAL_TIM_ConfigClockSource+0x228>)
 8008882:	4293      	cmp	r3, r2
 8008884:	f000 8099 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008888:	4a5e      	ldr	r2, [pc, #376]	; (8008a04 <HAL_TIM_ConfigClockSource+0x228>)
 800888a:	4293      	cmp	r3, r2
 800888c:	f200 809e 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 8008890:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008894:	f000 8091 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008898:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800889c:	f200 8096 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088a4:	f000 8089 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 80088a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ac:	f200 808e 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b4:	d03e      	beq.n	8008934 <HAL_TIM_ConfigClockSource+0x158>
 80088b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ba:	f200 8087 	bhi.w	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c2:	f000 8086 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1f6>
 80088c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ca:	d87f      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088cc:	2b70      	cmp	r3, #112	; 0x70
 80088ce:	d01a      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x12a>
 80088d0:	2b70      	cmp	r3, #112	; 0x70
 80088d2:	d87b      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088d4:	2b60      	cmp	r3, #96	; 0x60
 80088d6:	d050      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x19e>
 80088d8:	2b60      	cmp	r3, #96	; 0x60
 80088da:	d877      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088dc:	2b50      	cmp	r3, #80	; 0x50
 80088de:	d03c      	beq.n	800895a <HAL_TIM_ConfigClockSource+0x17e>
 80088e0:	2b50      	cmp	r3, #80	; 0x50
 80088e2:	d873      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	d058      	beq.n	800899a <HAL_TIM_ConfigClockSource+0x1be>
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d86f      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088ec:	2b30      	cmp	r3, #48	; 0x30
 80088ee:	d064      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d86b      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d060      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d867      	bhi.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d05c      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008900:	2b10      	cmp	r3, #16
 8008902:	d05a      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x1de>
 8008904:	e062      	b.n	80089cc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008916:	f000 fe8b 	bl	8009630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	609a      	str	r2, [r3, #8]
      break;
 8008932:	e04f      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008944:	f000 fe74 	bl	8009630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008956:	609a      	str	r2, [r3, #8]
      break;
 8008958:	e03c      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008966:	461a      	mov	r2, r3
 8008968:	f000 fde6 	bl	8009538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2150      	movs	r1, #80	; 0x50
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fe3f 	bl	80095f6 <TIM_ITRx_SetConfig>
      break;
 8008978:	e02c      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008986:	461a      	mov	r2, r3
 8008988:	f000 fe05 	bl	8009596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2160      	movs	r1, #96	; 0x60
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fe2f 	bl	80095f6 <TIM_ITRx_SetConfig>
      break;
 8008998:	e01c      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089a6:	461a      	mov	r2, r3
 80089a8:	f000 fdc6 	bl	8009538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2140      	movs	r1, #64	; 0x40
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fe1f 	bl	80095f6 <TIM_ITRx_SetConfig>
      break;
 80089b8:	e00c      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f000 fe16 	bl	80095f6 <TIM_ITRx_SetConfig>
      break;
 80089ca:	e003      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
      break;
 80089d0:	e000      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80089d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	00100070 	.word	0x00100070
 80089f4:	00100060 	.word	0x00100060
 80089f8:	00100050 	.word	0x00100050
 80089fc:	00100040 	.word	0x00100040
 8008a00:	00100030 	.word	0x00100030
 8008a04:	00100020 	.word	0x00100020

08008a08 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e14a      	b.n	8008d6e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	f040 80dd 	bne.w	8008ca0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	2b1f      	cmp	r3, #31
 8008aea:	f200 80d6 	bhi.w	8008c9a <HAL_TIM_RegisterCallback+0x1de>
 8008aee:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <HAL_TIM_RegisterCallback+0x38>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b75 	.word	0x08008b75
 8008af8:	08008b7d 	.word	0x08008b7d
 8008afc:	08008b85 	.word	0x08008b85
 8008b00:	08008b8d 	.word	0x08008b8d
 8008b04:	08008b95 	.word	0x08008b95
 8008b08:	08008b9d 	.word	0x08008b9d
 8008b0c:	08008ba5 	.word	0x08008ba5
 8008b10:	08008bad 	.word	0x08008bad
 8008b14:	08008bb5 	.word	0x08008bb5
 8008b18:	08008bbd 	.word	0x08008bbd
 8008b1c:	08008bc5 	.word	0x08008bc5
 8008b20:	08008bcd 	.word	0x08008bcd
 8008b24:	08008bd5 	.word	0x08008bd5
 8008b28:	08008bdd 	.word	0x08008bdd
 8008b2c:	08008be7 	.word	0x08008be7
 8008b30:	08008bf1 	.word	0x08008bf1
 8008b34:	08008bfb 	.word	0x08008bfb
 8008b38:	08008c05 	.word	0x08008c05
 8008b3c:	08008c0f 	.word	0x08008c0f
 8008b40:	08008c19 	.word	0x08008c19
 8008b44:	08008c23 	.word	0x08008c23
 8008b48:	08008c2d 	.word	0x08008c2d
 8008b4c:	08008c37 	.word	0x08008c37
 8008b50:	08008c41 	.word	0x08008c41
 8008b54:	08008c4b 	.word	0x08008c4b
 8008b58:	08008c55 	.word	0x08008c55
 8008b5c:	08008c5f 	.word	0x08008c5f
 8008b60:	08008c69 	.word	0x08008c69
 8008b64:	08008c73 	.word	0x08008c73
 8008b68:	08008c7d 	.word	0x08008c7d
 8008b6c:	08008c87 	.word	0x08008c87
 8008b70:	08008c91 	.word	0x08008c91
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008b7a:	e0f7      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008b82:	e0f3      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008b8a:	e0ef      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008b92:	e0eb      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008b9a:	e0e7      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008ba2:	e0e3      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008baa:	e0df      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008bb2:	e0db      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008bba:	e0d7      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008bc2:	e0d3      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008bca:	e0cf      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008bd2:	e0cb      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008bda:	e0c7      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008be4:	e0c2      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008bee:	e0bd      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008bf8:	e0b8      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008c02:	e0b3      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8008c0c:	e0ae      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008c16:	e0a9      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8008c20:	e0a4      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8008c2a:	e09f      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8008c34:	e09a      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8008c3e:	e095      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8008c48:	e090      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008c52:	e08b      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8008c5c:	e086      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8008c66:	e081      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8008c70:	e07c      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8008c7a:	e077      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8008c84:	e072      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8008c8e:	e06d      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8008c98:	e068      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
        break;
 8008c9e:	e065      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d15d      	bne.n	8008d68 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008cac:	7afb      	ldrb	r3, [r7, #11]
 8008cae:	2b0d      	cmp	r3, #13
 8008cb0:	d857      	bhi.n	8008d62 <HAL_TIM_RegisterCallback+0x2a6>
 8008cb2:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <HAL_TIM_RegisterCallback+0x1fc>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008cf1 	.word	0x08008cf1
 8008cbc:	08008cf9 	.word	0x08008cf9
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d09 	.word	0x08008d09
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d19 	.word	0x08008d19
 8008cd0:	08008d21 	.word	0x08008d21
 8008cd4:	08008d29 	.word	0x08008d29
 8008cd8:	08008d31 	.word	0x08008d31
 8008cdc:	08008d39 	.word	0x08008d39
 8008ce0:	08008d41 	.word	0x08008d41
 8008ce4:	08008d49 	.word	0x08008d49
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008d59 	.word	0x08008d59
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008cf6:	e039      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008cfe:	e035      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008d06:	e031      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008d0e:	e02d      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008d16:	e029      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008d1e:	e025      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8008d26:	e021      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8008d2e:	e01d      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008d36:	e019      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008d3e:	e015      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8008d46:	e011      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8008d4e:	e00d      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8008d56:	e009      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8008d60:	e004      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
        break;
 8008d66:	e001      	b.n	8008d6c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a4c      	ldr	r2, [pc, #304]	; (8008ec0 <TIM_Base_SetConfig+0x144>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d017      	beq.n	8008dc4 <TIM_Base_SetConfig+0x48>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9a:	d013      	beq.n	8008dc4 <TIM_Base_SetConfig+0x48>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a49      	ldr	r2, [pc, #292]	; (8008ec4 <TIM_Base_SetConfig+0x148>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00f      	beq.n	8008dc4 <TIM_Base_SetConfig+0x48>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a48      	ldr	r2, [pc, #288]	; (8008ec8 <TIM_Base_SetConfig+0x14c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00b      	beq.n	8008dc4 <TIM_Base_SetConfig+0x48>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a47      	ldr	r2, [pc, #284]	; (8008ecc <TIM_Base_SetConfig+0x150>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d007      	beq.n	8008dc4 <TIM_Base_SetConfig+0x48>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a46      	ldr	r2, [pc, #280]	; (8008ed0 <TIM_Base_SetConfig+0x154>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_Base_SetConfig+0x48>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a45      	ldr	r2, [pc, #276]	; (8008ed4 <TIM_Base_SetConfig+0x158>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d108      	bne.n	8008dd6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a39      	ldr	r2, [pc, #228]	; (8008ec0 <TIM_Base_SetConfig+0x144>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d023      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de4:	d01f      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a36      	ldr	r2, [pc, #216]	; (8008ec4 <TIM_Base_SetConfig+0x148>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d01b      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a35      	ldr	r2, [pc, #212]	; (8008ec8 <TIM_Base_SetConfig+0x14c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d017      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a34      	ldr	r2, [pc, #208]	; (8008ecc <TIM_Base_SetConfig+0x150>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d013      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a33      	ldr	r2, [pc, #204]	; (8008ed0 <TIM_Base_SetConfig+0x154>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00f      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a33      	ldr	r2, [pc, #204]	; (8008ed8 <TIM_Base_SetConfig+0x15c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00b      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a32      	ldr	r2, [pc, #200]	; (8008edc <TIM_Base_SetConfig+0x160>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d007      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a31      	ldr	r2, [pc, #196]	; (8008ee0 <TIM_Base_SetConfig+0x164>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <TIM_Base_SetConfig+0xaa>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a2c      	ldr	r2, [pc, #176]	; (8008ed4 <TIM_Base_SetConfig+0x158>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d108      	bne.n	8008e38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a18      	ldr	r2, [pc, #96]	; (8008ec0 <TIM_Base_SetConfig+0x144>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d013      	beq.n	8008e8c <TIM_Base_SetConfig+0x110>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <TIM_Base_SetConfig+0x154>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00f      	beq.n	8008e8c <TIM_Base_SetConfig+0x110>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <TIM_Base_SetConfig+0x15c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d00b      	beq.n	8008e8c <TIM_Base_SetConfig+0x110>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a19      	ldr	r2, [pc, #100]	; (8008edc <TIM_Base_SetConfig+0x160>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d007      	beq.n	8008e8c <TIM_Base_SetConfig+0x110>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a18      	ldr	r2, [pc, #96]	; (8008ee0 <TIM_Base_SetConfig+0x164>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d003      	beq.n	8008e8c <TIM_Base_SetConfig+0x110>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <TIM_Base_SetConfig+0x158>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d103      	bne.n	8008e94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	691a      	ldr	r2, [r3, #16]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d105      	bne.n	8008eb2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f023 0201 	bic.w	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	611a      	str	r2, [r3, #16]
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	40000400 	.word	0x40000400
 8008ec8:	40000800 	.word	0x40000800
 8008ecc:	40000c00 	.word	0x40000c00
 8008ed0:	40013400 	.word	0x40013400
 8008ed4:	40015000 	.word	0x40015000
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	40014400 	.word	0x40014400
 8008ee0:	40014800 	.word	0x40014800

08008ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	f023 0201 	bic.w	r2, r3, #1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f023 0302 	bic.w	r3, r3, #2
 8008f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a30      	ldr	r2, [pc, #192]	; (8009000 <TIM_OC1_SetConfig+0x11c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d013      	beq.n	8008f6c <TIM_OC1_SetConfig+0x88>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a2f      	ldr	r2, [pc, #188]	; (8009004 <TIM_OC1_SetConfig+0x120>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00f      	beq.n	8008f6c <TIM_OC1_SetConfig+0x88>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a2e      	ldr	r2, [pc, #184]	; (8009008 <TIM_OC1_SetConfig+0x124>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00b      	beq.n	8008f6c <TIM_OC1_SetConfig+0x88>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a2d      	ldr	r2, [pc, #180]	; (800900c <TIM_OC1_SetConfig+0x128>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_OC1_SetConfig+0x88>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a2c      	ldr	r2, [pc, #176]	; (8009010 <TIM_OC1_SetConfig+0x12c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_OC1_SetConfig+0x88>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a2b      	ldr	r2, [pc, #172]	; (8009014 <TIM_OC1_SetConfig+0x130>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d10c      	bne.n	8008f86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0308 	bic.w	r3, r3, #8
 8008f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f023 0304 	bic.w	r3, r3, #4
 8008f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1d      	ldr	r2, [pc, #116]	; (8009000 <TIM_OC1_SetConfig+0x11c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d013      	beq.n	8008fb6 <TIM_OC1_SetConfig+0xd2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a1c      	ldr	r2, [pc, #112]	; (8009004 <TIM_OC1_SetConfig+0x120>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00f      	beq.n	8008fb6 <TIM_OC1_SetConfig+0xd2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a1b      	ldr	r2, [pc, #108]	; (8009008 <TIM_OC1_SetConfig+0x124>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00b      	beq.n	8008fb6 <TIM_OC1_SetConfig+0xd2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a1a      	ldr	r2, [pc, #104]	; (800900c <TIM_OC1_SetConfig+0x128>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d007      	beq.n	8008fb6 <TIM_OC1_SetConfig+0xd2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a19      	ldr	r2, [pc, #100]	; (8009010 <TIM_OC1_SetConfig+0x12c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d003      	beq.n	8008fb6 <TIM_OC1_SetConfig+0xd2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	; (8009014 <TIM_OC1_SetConfig+0x130>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d111      	bne.n	8008fda <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	621a      	str	r2, [r3, #32]
}
 8008ff4:	bf00      	nop
 8008ff6:	371c      	adds	r7, #28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	40012c00 	.word	0x40012c00
 8009004:	40013400 	.word	0x40013400
 8009008:	40014000 	.word	0x40014000
 800900c:	40014400 	.word	0x40014400
 8009010:	40014800 	.word	0x40014800
 8009014:	40015000 	.word	0x40015000

08009018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	f023 0210 	bic.w	r2, r3, #16
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800904a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f023 0320 	bic.w	r3, r3, #32
 8009066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	4313      	orrs	r3, r2
 8009072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a2c      	ldr	r2, [pc, #176]	; (8009128 <TIM_OC2_SetConfig+0x110>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d007      	beq.n	800908c <TIM_OC2_SetConfig+0x74>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a2b      	ldr	r2, [pc, #172]	; (800912c <TIM_OC2_SetConfig+0x114>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_OC2_SetConfig+0x74>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a2a      	ldr	r2, [pc, #168]	; (8009130 <TIM_OC2_SetConfig+0x118>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d10d      	bne.n	80090a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a1f      	ldr	r2, [pc, #124]	; (8009128 <TIM_OC2_SetConfig+0x110>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d013      	beq.n	80090d8 <TIM_OC2_SetConfig+0xc0>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a1e      	ldr	r2, [pc, #120]	; (800912c <TIM_OC2_SetConfig+0x114>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00f      	beq.n	80090d8 <TIM_OC2_SetConfig+0xc0>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <TIM_OC2_SetConfig+0x11c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00b      	beq.n	80090d8 <TIM_OC2_SetConfig+0xc0>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <TIM_OC2_SetConfig+0x120>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d007      	beq.n	80090d8 <TIM_OC2_SetConfig+0xc0>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a1c      	ldr	r2, [pc, #112]	; (800913c <TIM_OC2_SetConfig+0x124>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d003      	beq.n	80090d8 <TIM_OC2_SetConfig+0xc0>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a17      	ldr	r2, [pc, #92]	; (8009130 <TIM_OC2_SetConfig+0x118>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d113      	bne.n	8009100 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40012c00 	.word	0x40012c00
 800912c:	40013400 	.word	0x40013400
 8009130:	40015000 	.word	0x40015000
 8009134:	40014000 	.word	0x40014000
 8009138:	40014400 	.word	0x40014400
 800913c:	40014800 	.word	0x40014800

08009140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800916e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800918c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a2b      	ldr	r2, [pc, #172]	; (800924c <TIM_OC3_SetConfig+0x10c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d007      	beq.n	80091b2 <TIM_OC3_SetConfig+0x72>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a2a      	ldr	r2, [pc, #168]	; (8009250 <TIM_OC3_SetConfig+0x110>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d003      	beq.n	80091b2 <TIM_OC3_SetConfig+0x72>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a29      	ldr	r2, [pc, #164]	; (8009254 <TIM_OC3_SetConfig+0x114>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d10d      	bne.n	80091ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a1e      	ldr	r2, [pc, #120]	; (800924c <TIM_OC3_SetConfig+0x10c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d013      	beq.n	80091fe <TIM_OC3_SetConfig+0xbe>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <TIM_OC3_SetConfig+0x110>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d00f      	beq.n	80091fe <TIM_OC3_SetConfig+0xbe>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a1d      	ldr	r2, [pc, #116]	; (8009258 <TIM_OC3_SetConfig+0x118>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00b      	beq.n	80091fe <TIM_OC3_SetConfig+0xbe>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	; (800925c <TIM_OC3_SetConfig+0x11c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d007      	beq.n	80091fe <TIM_OC3_SetConfig+0xbe>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <TIM_OC3_SetConfig+0x120>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d003      	beq.n	80091fe <TIM_OC3_SetConfig+0xbe>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a16      	ldr	r2, [pc, #88]	; (8009254 <TIM_OC3_SetConfig+0x114>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d113      	bne.n	8009226 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800920c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	4313      	orrs	r3, r2
 8009218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	621a      	str	r2, [r3, #32]
}
 8009240:	bf00      	nop
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	40012c00 	.word	0x40012c00
 8009250:	40013400 	.word	0x40013400
 8009254:	40015000 	.word	0x40015000
 8009258:	40014000 	.word	0x40014000
 800925c:	40014400 	.word	0x40014400
 8009260:	40014800 	.word	0x40014800

08009264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800929e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	031b      	lsls	r3, r3, #12
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	4313      	orrs	r3, r2
 80092be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a2c      	ldr	r2, [pc, #176]	; (8009374 <TIM_OC4_SetConfig+0x110>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_OC4_SetConfig+0x74>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a2b      	ldr	r2, [pc, #172]	; (8009378 <TIM_OC4_SetConfig+0x114>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_OC4_SetConfig+0x74>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a2a      	ldr	r2, [pc, #168]	; (800937c <TIM_OC4_SetConfig+0x118>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d10d      	bne.n	80092f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	031b      	lsls	r3, r3, #12
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a1f      	ldr	r2, [pc, #124]	; (8009374 <TIM_OC4_SetConfig+0x110>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d013      	beq.n	8009324 <TIM_OC4_SetConfig+0xc0>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <TIM_OC4_SetConfig+0x114>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00f      	beq.n	8009324 <TIM_OC4_SetConfig+0xc0>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a1e      	ldr	r2, [pc, #120]	; (8009380 <TIM_OC4_SetConfig+0x11c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00b      	beq.n	8009324 <TIM_OC4_SetConfig+0xc0>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <TIM_OC4_SetConfig+0x120>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d007      	beq.n	8009324 <TIM_OC4_SetConfig+0xc0>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a1c      	ldr	r2, [pc, #112]	; (8009388 <TIM_OC4_SetConfig+0x124>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d003      	beq.n	8009324 <TIM_OC4_SetConfig+0xc0>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a17      	ldr	r2, [pc, #92]	; (800937c <TIM_OC4_SetConfig+0x118>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d113      	bne.n	800934c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800932a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009332:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	019b      	lsls	r3, r3, #6
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	4313      	orrs	r3, r2
 800933e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	019b      	lsls	r3, r3, #6
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	4313      	orrs	r3, r2
 800934a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	621a      	str	r2, [r3, #32]
}
 8009366:	bf00      	nop
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40012c00 	.word	0x40012c00
 8009378:	40013400 	.word	0x40013400
 800937c:	40015000 	.word	0x40015000
 8009380:	40014000 	.word	0x40014000
 8009384:	40014400 	.word	0x40014400
 8009388:	40014800 	.word	0x40014800

0800938c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a19      	ldr	r2, [pc, #100]	; (8009448 <TIM_OC5_SetConfig+0xbc>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <TIM_OC5_SetConfig+0x82>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a18      	ldr	r2, [pc, #96]	; (800944c <TIM_OC5_SetConfig+0xc0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00f      	beq.n	800940e <TIM_OC5_SetConfig+0x82>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a17      	ldr	r2, [pc, #92]	; (8009450 <TIM_OC5_SetConfig+0xc4>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00b      	beq.n	800940e <TIM_OC5_SetConfig+0x82>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a16      	ldr	r2, [pc, #88]	; (8009454 <TIM_OC5_SetConfig+0xc8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <TIM_OC5_SetConfig+0x82>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a15      	ldr	r2, [pc, #84]	; (8009458 <TIM_OC5_SetConfig+0xcc>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_OC5_SetConfig+0x82>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a14      	ldr	r2, [pc, #80]	; (800945c <TIM_OC5_SetConfig+0xd0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d109      	bne.n	8009422 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	621a      	str	r2, [r3, #32]
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	40012c00 	.word	0x40012c00
 800944c:	40013400 	.word	0x40013400
 8009450:	40014000 	.word	0x40014000
 8009454:	40014400 	.word	0x40014400
 8009458:	40014800 	.word	0x40014800
 800945c:	40015000 	.word	0x40015000

08009460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800948e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	051b      	lsls	r3, r3, #20
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1a      	ldr	r2, [pc, #104]	; (8009520 <TIM_OC6_SetConfig+0xc0>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d013      	beq.n	80094e4 <TIM_OC6_SetConfig+0x84>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a19      	ldr	r2, [pc, #100]	; (8009524 <TIM_OC6_SetConfig+0xc4>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00f      	beq.n	80094e4 <TIM_OC6_SetConfig+0x84>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a18      	ldr	r2, [pc, #96]	; (8009528 <TIM_OC6_SetConfig+0xc8>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00b      	beq.n	80094e4 <TIM_OC6_SetConfig+0x84>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a17      	ldr	r2, [pc, #92]	; (800952c <TIM_OC6_SetConfig+0xcc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d007      	beq.n	80094e4 <TIM_OC6_SetConfig+0x84>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a16      	ldr	r2, [pc, #88]	; (8009530 <TIM_OC6_SetConfig+0xd0>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC6_SetConfig+0x84>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a15      	ldr	r2, [pc, #84]	; (8009534 <TIM_OC6_SetConfig+0xd4>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d109      	bne.n	80094f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	029b      	lsls	r3, r3, #10
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40012c00 	.word	0x40012c00
 8009524:	40013400 	.word	0x40013400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800
 8009534:	40015000 	.word	0x40015000

08009538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	f023 0201 	bic.w	r2, r3, #1
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f023 030a 	bic.w	r3, r3, #10
 8009574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	621a      	str	r2, [r3, #32]
}
 800958a:	bf00      	nop
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009596:	b480      	push	{r7}
 8009598:	b087      	sub	sp, #28
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	f023 0210 	bic.w	r2, r3, #16
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	031b      	lsls	r3, r3, #12
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	621a      	str	r2, [r3, #32]
}
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800960c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	f043 0307 	orr.w	r3, r3, #7
 800961c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	609a      	str	r2, [r3, #8]
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800964a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	021a      	lsls	r2, r3, #8
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	431a      	orrs	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4313      	orrs	r3, r2
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	609a      	str	r2, [r3, #8]
}
 8009664:	bf00      	nop
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f003 031f 	and.w	r3, r3, #31
 8009682:	2201      	movs	r2, #1
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a1a      	ldr	r2, [r3, #32]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	43db      	mvns	r3, r3
 8009692:	401a      	ands	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a1a      	ldr	r2, [r3, #32]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f003 031f 	and.w	r3, r3, #31
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	fa01 f303 	lsl.w	r3, r1, r3
 80096a8:	431a      	orrs	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	621a      	str	r2, [r3, #32]
}
 80096ae:	bf00      	nop
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a26      	ldr	r2, [pc, #152]	; (8009760 <TIM_ResetCallback+0xa4>)
 80096c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a25      	ldr	r2, [pc, #148]	; (8009764 <TIM_ResetCallback+0xa8>)
 80096d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a24      	ldr	r2, [pc, #144]	; (8009768 <TIM_ResetCallback+0xac>)
 80096d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a23      	ldr	r2, [pc, #140]	; (800976c <TIM_ResetCallback+0xb0>)
 80096e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a22      	ldr	r2, [pc, #136]	; (8009770 <TIM_ResetCallback+0xb4>)
 80096e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a21      	ldr	r2, [pc, #132]	; (8009774 <TIM_ResetCallback+0xb8>)
 80096f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a20      	ldr	r2, [pc, #128]	; (8009778 <TIM_ResetCallback+0xbc>)
 80096f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a1f      	ldr	r2, [pc, #124]	; (800977c <TIM_ResetCallback+0xc0>)
 8009700:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a1e      	ldr	r2, [pc, #120]	; (8009780 <TIM_ResetCallback+0xc4>)
 8009708:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a1d      	ldr	r2, [pc, #116]	; (8009784 <TIM_ResetCallback+0xc8>)
 8009710:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a1c      	ldr	r2, [pc, #112]	; (8009788 <TIM_ResetCallback+0xcc>)
 8009718:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a1b      	ldr	r2, [pc, #108]	; (800978c <TIM_ResetCallback+0xd0>)
 8009720:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a1a      	ldr	r2, [pc, #104]	; (8009790 <TIM_ResetCallback+0xd4>)
 8009728:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a19      	ldr	r2, [pc, #100]	; (8009794 <TIM_ResetCallback+0xd8>)
 8009730:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a18      	ldr	r2, [pc, #96]	; (8009798 <TIM_ResetCallback+0xdc>)
 8009738:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a17      	ldr	r2, [pc, #92]	; (800979c <TIM_ResetCallback+0xe0>)
 8009740:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a16      	ldr	r2, [pc, #88]	; (80097a0 <TIM_ResetCallback+0xe4>)
 8009748:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <TIM_ResetCallback+0xe8>)
 8009750:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	08003d51 	.word	0x08003d51
 8009764:	08008a09 	.word	0x08008a09
 8009768:	08008a81 	.word	0x08008a81
 800976c:	08008a95 	.word	0x08008a95
 8009770:	08008a31 	.word	0x08008a31
 8009774:	08008a45 	.word	0x08008a45
 8009778:	08008a1d 	.word	0x08008a1d
 800977c:	08008a59 	.word	0x08008a59
 8009780:	08008a6d 	.word	0x08008a6d
 8009784:	08008aa9 	.word	0x08008aa9
 8009788:	080098d5 	.word	0x080098d5
 800978c:	080098e9 	.word	0x080098e9
 8009790:	080098fd 	.word	0x080098fd
 8009794:	08009911 	.word	0x08009911
 8009798:	08009925 	.word	0x08009925
 800979c:	08009939 	.word	0x08009939
 80097a0:	0800994d 	.word	0x0800994d
 80097a4:	08009961 	.word	0x08009961

080097a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d101      	bne.n	80097c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097bc:	2302      	movs	r3, #2
 80097be:	e074      	b.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a34      	ldr	r2, [pc, #208]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a33      	ldr	r2, [pc, #204]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a31      	ldr	r2, [pc, #196]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d108      	bne.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009804:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a21      	ldr	r2, [pc, #132]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d022      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009840:	d01d      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a1f      	ldr	r2, [pc, #124]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d018      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1d      	ldr	r2, [pc, #116]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1c      	ldr	r2, [pc, #112]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00e      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a15      	ldr	r2, [pc, #84]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d009      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d004      	beq.n	800987e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d10c      	bne.n	8009898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	4313      	orrs	r3, r2
 800988e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	40015000 	.word	0x40015000
 80098c4:	40000400 	.word	0x40000400
 80098c8:	40000800 	.word	0x40000800
 80098cc:	40000c00 	.word	0x40000c00
 80098d0:	40014000 	.word	0x40014000

080098d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e050      	b.n	8009a28 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800998c:	2b00      	cmp	r3, #0
 800998e:	d114      	bne.n	80099ba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fdc5 	bl	800a528 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <HAL_UART_Init+0xbc>)
 80099ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2224      	movs	r2, #36	; 0x24
 80099be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0201 	bic.w	r2, r2, #1
 80099d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f001 f8f2 	bl	800abc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fdf3 	bl	800a5cc <UART_SetConfig>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d101      	bne.n	80099f0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e01b      	b.n	8009a28 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0201 	orr.w	r2, r2, #1
 8009a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 f971 	bl	800ad08 <UART_CheckIdleState>
 8009a26:	4603      	mov	r3, r0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	080041b1 	.word	0x080041b1

08009a34 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d109      	bne.n	8009a60 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e09c      	b.n	8009b9a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d16c      	bne.n	8009b44 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	2b0c      	cmp	r3, #12
 8009a6e:	d85e      	bhi.n	8009b2e <HAL_UART_RegisterCallback+0xfa>
 8009a70:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <HAL_UART_RegisterCallback+0x44>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009aad 	.word	0x08009aad
 8009a7c:	08009ab7 	.word	0x08009ab7
 8009a80:	08009ac1 	.word	0x08009ac1
 8009a84:	08009acb 	.word	0x08009acb
 8009a88:	08009ad5 	.word	0x08009ad5
 8009a8c:	08009adf 	.word	0x08009adf
 8009a90:	08009ae9 	.word	0x08009ae9
 8009a94:	08009af3 	.word	0x08009af3
 8009a98:	08009afd 	.word	0x08009afd
 8009a9c:	08009b07 	.word	0x08009b07
 8009aa0:	08009b11 	.word	0x08009b11
 8009aa4:	08009b1b 	.word	0x08009b1b
 8009aa8:	08009b25 	.word	0x08009b25
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009ab4:	e070      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009abe:	e06b      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009ac8:	e066      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009ad2:	e061      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009adc:	e05c      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009ae6:	e057      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009af0:	e052      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009afa:	e04d      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8009b04:	e048      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8009b0e:	e043      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8009b18:	e03e      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8009b22:	e039      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8009b2c:	e034      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75fb      	strb	r3, [r7, #23]
        break;
 8009b42:	e029      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d11a      	bne.n	8009b84 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009b4e:	7afb      	ldrb	r3, [r7, #11]
 8009b50:	2b0b      	cmp	r3, #11
 8009b52:	d002      	beq.n	8009b5a <HAL_UART_RegisterCallback+0x126>
 8009b54:	2b0c      	cmp	r3, #12
 8009b56:	d005      	beq.n	8009b64 <HAL_UART_RegisterCallback+0x130>
 8009b58:	e009      	b.n	8009b6e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8009b62:	e019      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8009b6c:	e014      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	75fb      	strb	r3, [r7, #23]
        break;
 8009b82:	e009      	b.n	8009b98 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop

08009ba8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d167      	bne.n	8009c90 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_UART_Transmit_DMA+0x24>
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e060      	b.n	8009c92 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	88fa      	ldrh	r2, [r7, #6]
 8009bda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	88fa      	ldrh	r2, [r7, #6]
 8009be2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2221      	movs	r2, #33	; 0x21
 8009bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d028      	beq.n	8009c50 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c02:	4a26      	ldr	r2, [pc, #152]	; (8009c9c <HAL_UART_Transmit_DMA+0xf4>)
 8009c04:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0a:	4a25      	ldr	r2, [pc, #148]	; (8009ca0 <HAL_UART_Transmit_DMA+0xf8>)
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c12:	4a24      	ldr	r2, [pc, #144]	; (8009ca4 <HAL_UART_Transmit_DMA+0xfc>)
 8009c14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c26:	4619      	mov	r1, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3328      	adds	r3, #40	; 0x28
 8009c2e:	461a      	mov	r2, r3
 8009c30:	88fb      	ldrh	r3, [r7, #6]
 8009c32:	f7fc f9c7 	bl	8005fc4 <HAL_DMA_Start_IT>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d009      	beq.n	8009c50 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2210      	movs	r2, #16
 8009c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e020      	b.n	8009c92 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2240      	movs	r2, #64	; 0x40
 8009c56:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	613b      	str	r3, [r7, #16]
   return(result);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3308      	adds	r3, #8
 8009c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c78:	623a      	str	r2, [r7, #32]
 8009c7a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	69f9      	ldr	r1, [r7, #28]
 8009c7e:	6a3a      	ldr	r2, [r7, #32]
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e5      	bne.n	8009c58 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e000      	b.n	8009c92 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009c90:	2302      	movs	r3, #2
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3728      	adds	r7, #40	; 0x28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800b1d3 	.word	0x0800b1d3
 8009ca0:	0800b271 	.word	0x0800b271
 8009ca4:	0800b40b 	.word	0x0800b40b

08009ca8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d137      	bne.n	8009d30 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <HAL_UART_Receive_DMA+0x24>
 8009cc6:	88fb      	ldrh	r3, [r7, #6]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e030      	b.n	8009d32 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a18      	ldr	r2, [pc, #96]	; (8009d3c <HAL_UART_Receive_DMA+0x94>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d01f      	beq.n	8009d20 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d018      	beq.n	8009d20 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	623b      	str	r3, [r7, #32]
 8009d0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	69f9      	ldr	r1, [r7, #28]
 8009d12:	6a3a      	ldr	r2, [r7, #32]
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e6      	bne.n	8009cee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009d20:	88fb      	ldrh	r3, [r7, #6]
 8009d22:	461a      	mov	r2, r3
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f001 f906 	bl	800af38 <UART_Start_Receive_DMA>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	e000      	b.n	8009d32 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3728      	adds	r7, #40	; 0x28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40008000 	.word	0x40008000

08009d40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b0ba      	sub	sp, #232	; 0xe8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d6e:	4013      	ands	r3, r2
 8009d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d11b      	bne.n	8009db4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d015      	beq.n	8009db4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d8c:	f003 0320 	and.w	r3, r3, #32
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d009      	beq.n	8009db4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 82f3 	beq.w	800a390 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
      }
      return;
 8009db2:	e2ed      	b.n	800a390 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 8129 	beq.w	800a010 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009dc2:	4b90      	ldr	r3, [pc, #576]	; (800a004 <HAL_UART_IRQHandler+0x2c4>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009dca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009dce:	4b8e      	ldr	r3, [pc, #568]	; (800a008 <HAL_UART_IRQHandler+0x2c8>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 811c 	beq.w	800a010 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d011      	beq.n	8009e08 <HAL_UART_IRQHandler+0xc8>
 8009de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2201      	movs	r2, #1
 8009df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dfe:	f043 0201 	orr.w	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d011      	beq.n	8009e38 <HAL_UART_IRQHandler+0xf8>
 8009e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2202      	movs	r2, #2
 8009e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2e:	f043 0204 	orr.w	r2, r3, #4
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d011      	beq.n	8009e68 <HAL_UART_IRQHandler+0x128>
 8009e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2204      	movs	r2, #4
 8009e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e5e:	f043 0202 	orr.w	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d017      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d105      	bne.n	8009e8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009e84:	4b5f      	ldr	r3, [pc, #380]	; (800a004 <HAL_UART_IRQHandler+0x2c4>)
 8009e86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2208      	movs	r2, #8
 8009e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e9a:	f043 0208 	orr.w	r2, r3, #8
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d012      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x196>
 8009eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ecc:	f043 0220 	orr.w	r2, r3, #32
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 8259 	beq.w	800a394 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d013      	beq.n	8009f16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d105      	bne.n	8009f06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d007      	beq.n	8009f16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2a:	2b40      	cmp	r3, #64	; 0x40
 8009f2c:	d005      	beq.n	8009f3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d058      	beq.n	8009fec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 f8e3 	bl	800b106 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d148      	bne.n	8009fe0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3308      	adds	r3, #8
 8009f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1d9      	bne.n	8009f4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d017      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009faa:	4a18      	ldr	r2, [pc, #96]	; (800a00c <HAL_UART_IRQHandler+0x2cc>)
 8009fac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fc f8d9 	bl	800616c <HAL_DMA_Abort_IT>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01f      	beq.n	800a000 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009fce:	4610      	mov	r0, r2
 8009fd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd2:	e015      	b.n	800a000 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fde:	e00f      	b.n	800a000 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fea:	e009      	b.n	800a000 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009ffe:	e1c9      	b.n	800a394 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a000:	bf00      	nop
    return;
 800a002:	e1c7      	b.n	800a394 <HAL_UART_IRQHandler+0x654>
 800a004:	10000001 	.word	0x10000001
 800a008:	04000120 	.word	0x04000120
 800a00c:	0800b48f 	.word	0x0800b48f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a014:	2b01      	cmp	r3, #1
 800a016:	f040 8157 	bne.w	800a2c8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a01e:	f003 0310 	and.w	r3, r3, #16
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 8150 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 8149 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2210      	movs	r2, #16
 800a03c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	f040 80bd 	bne.w	800a1c8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a05c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 8199 	beq.w	800a398 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a06c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a070:	429a      	cmp	r2, r3
 800a072:	f080 8191 	bcs.w	800a398 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a07c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f040 8087 	bne.w	800a1a2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1da      	bne.n	800a094 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a102:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a106:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a10a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e1      	bne.n	800a0de <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3308      	adds	r3, #8
 800a120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a13e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a14c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e3      	bne.n	800a11a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a170:	f023 0310 	bic.w	r3, r3, #16
 800a174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a182:	65bb      	str	r3, [r7, #88]	; 0x58
 800a184:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e4      	bne.n	800a160 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fb ff8c 	bl	80060ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800a1ba:	b292      	uxth	r2, r2
 800a1bc:	1a8a      	subs	r2, r1, r2
 800a1be:	b292      	uxth	r2, r2
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1c6:	e0e7      	b.n	800a398 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80d9 	beq.w	800a39c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a1ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 80d4 	beq.w	800a39c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a216:	647b      	str	r3, [r7, #68]	; 0x44
 800a218:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a21c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a21e:	e841 2300 	strex	r3, r2, [r1]
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1e4      	bne.n	800a1f4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3308      	adds	r3, #8
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	623b      	str	r3, [r7, #32]
   return(result);
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a240:	f023 0301 	bic.w	r3, r3, #1
 800a244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3308      	adds	r3, #8
 800a24e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a252:	633a      	str	r2, [r7, #48]	; 0x30
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e1      	bne.n	800a22a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	60fb      	str	r3, [r7, #12]
   return(result);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0310 	bic.w	r3, r3, #16
 800a28e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	69b9      	ldr	r1, [r7, #24]
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e4      	bne.n	800a27a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a2bc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2c6:	e069      	b.n	800a39c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d010      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x5b6>
 800a2d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00a      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a2e8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2f4:	e055      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d014      	beq.n	800a32c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d008      	beq.n	800a32c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d03e      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
    }
    return;
 800a32a:	e039      	b.n	800a3a0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <HAL_UART_IRQHandler+0x60c>
 800a338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 f8ba 	bl	800b4be <UART_EndTransmit_IT>
    return;
 800a34a:	e02a      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <HAL_UART_IRQHandler+0x630>
 800a358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a35c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a36e:	e018      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d012      	beq.n	800a3a2 <HAL_UART_IRQHandler+0x662>
 800a37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a380:	2b00      	cmp	r3, #0
 800a382:	da0e      	bge.n	800a3a2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a38e:	e008      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
      return;
 800a390:	bf00      	nop
 800a392:	e006      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
    return;
 800a394:	bf00      	nop
 800a396:	e004      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
      return;
 800a398:	bf00      	nop
 800a39a:	e002      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
      return;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <HAL_UART_IRQHandler+0x662>
    return;
 800a3a0:	bf00      	nop
  }
}
 800a3a2:	37e8      	adds	r7, #232	; 0xe8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d009      	beq.n	800a488 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	615a      	str	r2, [r3, #20]
  }
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	40008000 	.word	0x40008000

0800a498 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a18      	ldr	r2, [pc, #96]	; (800a508 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d027      	beq.n	800a4fa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b0:	2b20      	cmp	r3, #32
 800a4b2:	d120      	bne.n	800a4f6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e01c      	b.n	800a4fc <HAL_UART_EnableReceiverTimeout+0x64>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2224      	movs	r2, #36	; 0x24
 800a4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a4e0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e002      	b.n	800a4fc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e000      	b.n	800a4fc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
  }
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	40008000 	.word	0x40008000

0800a50c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a1a      	ldr	r2, [pc, #104]	; (800a59c <UART_InitCallbacksToDefault+0x74>)
 800a534:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a19      	ldr	r2, [pc, #100]	; (800a5a0 <UART_InitCallbacksToDefault+0x78>)
 800a53c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a18      	ldr	r2, [pc, #96]	; (800a5a4 <UART_InitCallbacksToDefault+0x7c>)
 800a544:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a17      	ldr	r2, [pc, #92]	; (800a5a8 <UART_InitCallbacksToDefault+0x80>)
 800a54c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a16      	ldr	r2, [pc, #88]	; (800a5ac <UART_InitCallbacksToDefault+0x84>)
 800a554:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <UART_InitCallbacksToDefault+0x88>)
 800a55c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a14      	ldr	r2, [pc, #80]	; (800a5b4 <UART_InitCallbacksToDefault+0x8c>)
 800a564:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a13      	ldr	r2, [pc, #76]	; (800a5b8 <UART_InitCallbacksToDefault+0x90>)
 800a56c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a12      	ldr	r2, [pc, #72]	; (800a5bc <UART_InitCallbacksToDefault+0x94>)
 800a574:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a11      	ldr	r2, [pc, #68]	; (800a5c0 <UART_InitCallbacksToDefault+0x98>)
 800a57c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a10      	ldr	r2, [pc, #64]	; (800a5c4 <UART_InitCallbacksToDefault+0x9c>)
 800a584:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a0f      	ldr	r2, [pc, #60]	; (800a5c8 <UART_InitCallbacksToDefault+0xa0>)
 800a58c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	0800a3bd 	.word	0x0800a3bd
 800a5a0:	0800a3a9 	.word	0x0800a3a9
 800a5a4:	0800a3e5 	.word	0x0800a3e5
 800a5a8:	0800a3d1 	.word	0x0800a3d1
 800a5ac:	0800a3f9 	.word	0x0800a3f9
 800a5b0:	0800a40d 	.word	0x0800a40d
 800a5b4:	0800a421 	.word	0x0800a421
 800a5b8:	0800a435 	.word	0x0800a435
 800a5bc:	0800b519 	.word	0x0800b519
 800a5c0:	0800b52d 	.word	0x0800b52d
 800a5c4:	0800b541 	.word	0x0800b541
 800a5c8:	0800a449 	.word	0x0800a449

0800a5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5d0:	b08c      	sub	sp, #48	; 0x30
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4baa      	ldr	r3, [pc, #680]	; (800a8a4 <UART_SetConfig+0x2d8>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a604:	430b      	orrs	r3, r1
 800a606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a9f      	ldr	r2, [pc, #636]	; (800a8a8 <UART_SetConfig+0x2dc>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d004      	beq.n	800a638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a634:	4313      	orrs	r3, r2
 800a636:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a642:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a64c:	430b      	orrs	r3, r1
 800a64e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	f023 010f 	bic.w	r1, r3, #15
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a90      	ldr	r2, [pc, #576]	; (800a8ac <UART_SetConfig+0x2e0>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d125      	bne.n	800a6bc <UART_SetConfig+0xf0>
 800a670:	4b8f      	ldr	r3, [pc, #572]	; (800a8b0 <UART_SetConfig+0x2e4>)
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	f003 0303 	and.w	r3, r3, #3
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d81a      	bhi.n	800a6b4 <UART_SetConfig+0xe8>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <UART_SetConfig+0xb8>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a695 	.word	0x0800a695
 800a688:	0800a6a5 	.word	0x0800a6a5
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a6ad 	.word	0x0800a6ad
 800a694:	2301      	movs	r3, #1
 800a696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a69a:	e116      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a69c:	2302      	movs	r3, #2
 800a69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6a2:	e112      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6aa:	e10e      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6b2:	e10a      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a6b4:	2310      	movs	r3, #16
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ba:	e106      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a7c      	ldr	r2, [pc, #496]	; (800a8b4 <UART_SetConfig+0x2e8>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d138      	bne.n	800a738 <UART_SetConfig+0x16c>
 800a6c6:	4b7a      	ldr	r3, [pc, #488]	; (800a8b0 <UART_SetConfig+0x2e4>)
 800a6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6cc:	f003 030c 	and.w	r3, r3, #12
 800a6d0:	2b0c      	cmp	r3, #12
 800a6d2:	d82d      	bhi.n	800a730 <UART_SetConfig+0x164>
 800a6d4:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <UART_SetConfig+0x110>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a711 	.word	0x0800a711
 800a6e0:	0800a731 	.word	0x0800a731
 800a6e4:	0800a731 	.word	0x0800a731
 800a6e8:	0800a731 	.word	0x0800a731
 800a6ec:	0800a721 	.word	0x0800a721
 800a6f0:	0800a731 	.word	0x0800a731
 800a6f4:	0800a731 	.word	0x0800a731
 800a6f8:	0800a731 	.word	0x0800a731
 800a6fc:	0800a719 	.word	0x0800a719
 800a700:	0800a731 	.word	0x0800a731
 800a704:	0800a731 	.word	0x0800a731
 800a708:	0800a731 	.word	0x0800a731
 800a70c:	0800a729 	.word	0x0800a729
 800a710:	2300      	movs	r3, #0
 800a712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a716:	e0d8      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a718:	2302      	movs	r3, #2
 800a71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a71e:	e0d4      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a720:	2304      	movs	r3, #4
 800a722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a726:	e0d0      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a728:	2308      	movs	r3, #8
 800a72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a72e:	e0cc      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a730:	2310      	movs	r3, #16
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a736:	e0c8      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a5e      	ldr	r2, [pc, #376]	; (800a8b8 <UART_SetConfig+0x2ec>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d125      	bne.n	800a78e <UART_SetConfig+0x1c2>
 800a742:	4b5b      	ldr	r3, [pc, #364]	; (800a8b0 <UART_SetConfig+0x2e4>)
 800a744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a74c:	2b30      	cmp	r3, #48	; 0x30
 800a74e:	d016      	beq.n	800a77e <UART_SetConfig+0x1b2>
 800a750:	2b30      	cmp	r3, #48	; 0x30
 800a752:	d818      	bhi.n	800a786 <UART_SetConfig+0x1ba>
 800a754:	2b20      	cmp	r3, #32
 800a756:	d00a      	beq.n	800a76e <UART_SetConfig+0x1a2>
 800a758:	2b20      	cmp	r3, #32
 800a75a:	d814      	bhi.n	800a786 <UART_SetConfig+0x1ba>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <UART_SetConfig+0x19a>
 800a760:	2b10      	cmp	r3, #16
 800a762:	d008      	beq.n	800a776 <UART_SetConfig+0x1aa>
 800a764:	e00f      	b.n	800a786 <UART_SetConfig+0x1ba>
 800a766:	2300      	movs	r3, #0
 800a768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a76c:	e0ad      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a76e:	2302      	movs	r3, #2
 800a770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a774:	e0a9      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a776:	2304      	movs	r3, #4
 800a778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a77c:	e0a5      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a77e:	2308      	movs	r3, #8
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a784:	e0a1      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a786:	2310      	movs	r3, #16
 800a788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a78c:	e09d      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a4a      	ldr	r2, [pc, #296]	; (800a8bc <UART_SetConfig+0x2f0>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d125      	bne.n	800a7e4 <UART_SetConfig+0x218>
 800a798:	4b45      	ldr	r3, [pc, #276]	; (800a8b0 <UART_SetConfig+0x2e4>)
 800a79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7a2:	2bc0      	cmp	r3, #192	; 0xc0
 800a7a4:	d016      	beq.n	800a7d4 <UART_SetConfig+0x208>
 800a7a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7a8:	d818      	bhi.n	800a7dc <UART_SetConfig+0x210>
 800a7aa:	2b80      	cmp	r3, #128	; 0x80
 800a7ac:	d00a      	beq.n	800a7c4 <UART_SetConfig+0x1f8>
 800a7ae:	2b80      	cmp	r3, #128	; 0x80
 800a7b0:	d814      	bhi.n	800a7dc <UART_SetConfig+0x210>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <UART_SetConfig+0x1f0>
 800a7b6:	2b40      	cmp	r3, #64	; 0x40
 800a7b8:	d008      	beq.n	800a7cc <UART_SetConfig+0x200>
 800a7ba:	e00f      	b.n	800a7dc <UART_SetConfig+0x210>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7c2:	e082      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ca:	e07e      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7d2:	e07a      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7da:	e076      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a7dc:	2310      	movs	r3, #16
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7e2:	e072      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a35      	ldr	r2, [pc, #212]	; (800a8c0 <UART_SetConfig+0x2f4>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d12a      	bne.n	800a844 <UART_SetConfig+0x278>
 800a7ee:	4b30      	ldr	r3, [pc, #192]	; (800a8b0 <UART_SetConfig+0x2e4>)
 800a7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7fc:	d01a      	beq.n	800a834 <UART_SetConfig+0x268>
 800a7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a802:	d81b      	bhi.n	800a83c <UART_SetConfig+0x270>
 800a804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a808:	d00c      	beq.n	800a824 <UART_SetConfig+0x258>
 800a80a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a80e:	d815      	bhi.n	800a83c <UART_SetConfig+0x270>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d003      	beq.n	800a81c <UART_SetConfig+0x250>
 800a814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a818:	d008      	beq.n	800a82c <UART_SetConfig+0x260>
 800a81a:	e00f      	b.n	800a83c <UART_SetConfig+0x270>
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a822:	e052      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a824:	2302      	movs	r3, #2
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a82a:	e04e      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a82c:	2304      	movs	r3, #4
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a832:	e04a      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a834:	2308      	movs	r3, #8
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a83a:	e046      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a83c:	2310      	movs	r3, #16
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a842:	e042      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a17      	ldr	r2, [pc, #92]	; (800a8a8 <UART_SetConfig+0x2dc>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d13a      	bne.n	800a8c4 <UART_SetConfig+0x2f8>
 800a84e:	4b18      	ldr	r3, [pc, #96]	; (800a8b0 <UART_SetConfig+0x2e4>)
 800a850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a85c:	d01a      	beq.n	800a894 <UART_SetConfig+0x2c8>
 800a85e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a862:	d81b      	bhi.n	800a89c <UART_SetConfig+0x2d0>
 800a864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a868:	d00c      	beq.n	800a884 <UART_SetConfig+0x2b8>
 800a86a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a86e:	d815      	bhi.n	800a89c <UART_SetConfig+0x2d0>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <UART_SetConfig+0x2b0>
 800a874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a878:	d008      	beq.n	800a88c <UART_SetConfig+0x2c0>
 800a87a:	e00f      	b.n	800a89c <UART_SetConfig+0x2d0>
 800a87c:	2300      	movs	r3, #0
 800a87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a882:	e022      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a884:	2302      	movs	r3, #2
 800a886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a88a:	e01e      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a88c:	2304      	movs	r3, #4
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a892:	e01a      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a894:	2308      	movs	r3, #8
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a89a:	e016      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a89c:	2310      	movs	r3, #16
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8a2:	e012      	b.n	800a8ca <UART_SetConfig+0x2fe>
 800a8a4:	cfff69f3 	.word	0xcfff69f3
 800a8a8:	40008000 	.word	0x40008000
 800a8ac:	40013800 	.word	0x40013800
 800a8b0:	40021000 	.word	0x40021000
 800a8b4:	40004400 	.word	0x40004400
 800a8b8:	40004800 	.word	0x40004800
 800a8bc:	40004c00 	.word	0x40004c00
 800a8c0:	40005000 	.word	0x40005000
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4aae      	ldr	r2, [pc, #696]	; (800ab88 <UART_SetConfig+0x5bc>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	f040 8097 	bne.w	800aa04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8da:	2b08      	cmp	r3, #8
 800a8dc:	d823      	bhi.n	800a926 <UART_SetConfig+0x35a>
 800a8de:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <UART_SetConfig+0x318>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a909 	.word	0x0800a909
 800a8e8:	0800a927 	.word	0x0800a927
 800a8ec:	0800a911 	.word	0x0800a911
 800a8f0:	0800a927 	.word	0x0800a927
 800a8f4:	0800a917 	.word	0x0800a917
 800a8f8:	0800a927 	.word	0x0800a927
 800a8fc:	0800a927 	.word	0x0800a927
 800a900:	0800a927 	.word	0x0800a927
 800a904:	0800a91f 	.word	0x0800a91f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a908:	f7fc fd20 	bl	800734c <HAL_RCC_GetPCLK1Freq>
 800a90c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a90e:	e010      	b.n	800a932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a910:	4b9e      	ldr	r3, [pc, #632]	; (800ab8c <UART_SetConfig+0x5c0>)
 800a912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a914:	e00d      	b.n	800a932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a916:	f7fc fcab 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 800a91a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a91c:	e009      	b.n	800a932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a924:	e005      	b.n	800a932 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8130 	beq.w	800ab9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	4a94      	ldr	r2, [pc, #592]	; (800ab90 <UART_SetConfig+0x5c4>)
 800a940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a944:	461a      	mov	r2, r3
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	fbb3 f3f2 	udiv	r3, r3, r2
 800a94c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	4613      	mov	r3, r2
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	4413      	add	r3, r2
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d305      	bcc.n	800a96a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	429a      	cmp	r2, r3
 800a968:	d903      	bls.n	800a972 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a970:	e113      	b.n	800ab9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	2200      	movs	r2, #0
 800a976:	60bb      	str	r3, [r7, #8]
 800a978:	60fa      	str	r2, [r7, #12]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	4a84      	ldr	r2, [pc, #528]	; (800ab90 <UART_SetConfig+0x5c4>)
 800a980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a984:	b29b      	uxth	r3, r3
 800a986:	2200      	movs	r2, #0
 800a988:	603b      	str	r3, [r7, #0]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a994:	f7f6 fa14 	bl	8000dc0 <__aeabi_uldivmod>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4610      	mov	r0, r2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	020b      	lsls	r3, r1, #8
 800a9aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9ae:	0202      	lsls	r2, r0, #8
 800a9b0:	6979      	ldr	r1, [r7, #20]
 800a9b2:	6849      	ldr	r1, [r1, #4]
 800a9b4:	0849      	lsrs	r1, r1, #1
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	eb12 0804 	adds.w	r8, r2, r4
 800a9c0:	eb43 0905 	adc.w	r9, r3, r5
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	469a      	mov	sl, r3
 800a9cc:	4693      	mov	fp, r2
 800a9ce:	4652      	mov	r2, sl
 800a9d0:	465b      	mov	r3, fp
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f6 f9f3 	bl	8000dc0 <__aeabi_uldivmod>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4613      	mov	r3, r2
 800a9e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9e8:	d308      	bcc.n	800a9fc <UART_SetConfig+0x430>
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9f0:	d204      	bcs.n	800a9fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6a3a      	ldr	r2, [r7, #32]
 800a9f8:	60da      	str	r2, [r3, #12]
 800a9fa:	e0ce      	b.n	800ab9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aa02:	e0ca      	b.n	800ab9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0c:	d166      	bne.n	800aadc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aa0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa12:	2b08      	cmp	r3, #8
 800aa14:	d827      	bhi.n	800aa66 <UART_SetConfig+0x49a>
 800aa16:	a201      	add	r2, pc, #4	; (adr r2, 800aa1c <UART_SetConfig+0x450>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aa41 	.word	0x0800aa41
 800aa20:	0800aa49 	.word	0x0800aa49
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	0800aa67 	.word	0x0800aa67
 800aa2c:	0800aa57 	.word	0x0800aa57
 800aa30:	0800aa67 	.word	0x0800aa67
 800aa34:	0800aa67 	.word	0x0800aa67
 800aa38:	0800aa67 	.word	0x0800aa67
 800aa3c:	0800aa5f 	.word	0x0800aa5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa40:	f7fc fc84 	bl	800734c <HAL_RCC_GetPCLK1Freq>
 800aa44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa46:	e014      	b.n	800aa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa48:	f7fc fc96 	bl	8007378 <HAL_RCC_GetPCLK2Freq>
 800aa4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa4e:	e010      	b.n	800aa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa50:	4b4e      	ldr	r3, [pc, #312]	; (800ab8c <UART_SetConfig+0x5c0>)
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa54:	e00d      	b.n	800aa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa56:	f7fc fc0b 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 800aa5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa5c:	e009      	b.n	800aa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa64:	e005      	b.n	800aa72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aa70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8090 	beq.w	800ab9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	4a44      	ldr	r2, [pc, #272]	; (800ab90 <UART_SetConfig+0x5c4>)
 800aa80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa84:	461a      	mov	r2, r3
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa8c:	005a      	lsls	r2, r3, #1
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	085b      	lsrs	r3, r3, #1
 800aa94:	441a      	add	r2, r3
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	2b0f      	cmp	r3, #15
 800aaa4:	d916      	bls.n	800aad4 <UART_SetConfig+0x508>
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaac:	d212      	bcs.n	800aad4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	f023 030f 	bic.w	r3, r3, #15
 800aab6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	085b      	lsrs	r3, r3, #1
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	f003 0307 	and.w	r3, r3, #7
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	8bfb      	ldrh	r3, [r7, #30]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	8bfa      	ldrh	r2, [r7, #30]
 800aad0:	60da      	str	r2, [r3, #12]
 800aad2:	e062      	b.n	800ab9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aada:	e05e      	b.n	800ab9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aadc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d828      	bhi.n	800ab36 <UART_SetConfig+0x56a>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <UART_SetConfig+0x520>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab11 	.word	0x0800ab11
 800aaf0:	0800ab19 	.word	0x0800ab19
 800aaf4:	0800ab21 	.word	0x0800ab21
 800aaf8:	0800ab37 	.word	0x0800ab37
 800aafc:	0800ab27 	.word	0x0800ab27
 800ab00:	0800ab37 	.word	0x0800ab37
 800ab04:	0800ab37 	.word	0x0800ab37
 800ab08:	0800ab37 	.word	0x0800ab37
 800ab0c:	0800ab2f 	.word	0x0800ab2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab10:	f7fc fc1c 	bl	800734c <HAL_RCC_GetPCLK1Freq>
 800ab14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab16:	e014      	b.n	800ab42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab18:	f7fc fc2e 	bl	8007378 <HAL_RCC_GetPCLK2Freq>
 800ab1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab1e:	e010      	b.n	800ab42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab20:	4b1a      	ldr	r3, [pc, #104]	; (800ab8c <UART_SetConfig+0x5c0>)
 800ab22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab24:	e00d      	b.n	800ab42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab26:	f7fc fba3 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 800ab2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab2c:	e009      	b.n	800ab42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab34:	e005      	b.n	800ab42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ab40:	bf00      	nop
    }

    if (pclk != 0U)
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d028      	beq.n	800ab9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	4a10      	ldr	r2, [pc, #64]	; (800ab90 <UART_SetConfig+0x5c4>)
 800ab4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab52:	461a      	mov	r2, r3
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	085b      	lsrs	r3, r3, #1
 800ab60:	441a      	add	r2, r3
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	2b0f      	cmp	r3, #15
 800ab70:	d910      	bls.n	800ab94 <UART_SetConfig+0x5c8>
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab78:	d20c      	bcs.n	800ab94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60da      	str	r2, [r3, #12]
 800ab84:	e009      	b.n	800ab9a <UART_SetConfig+0x5ce>
 800ab86:	bf00      	nop
 800ab88:	40008000 	.word	0x40008000
 800ab8c:	00f42400 	.word	0x00f42400
 800ab90:	0800bfc0 	.word	0x0800bfc0
      }
      else
      {
        ret = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2200      	movs	r2, #0
 800abae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2200      	movs	r2, #0
 800abb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800abb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3730      	adds	r7, #48	; 0x30
 800abbe:	46bd      	mov	sp, r7
 800abc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800abc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	f003 0308 	and.w	r3, r3, #8
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00a      	beq.n	800abee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac14:	f003 0302 	and.w	r3, r3, #2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00a      	beq.n	800ac32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	430a      	orrs	r2, r1
 800ac30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac36:	f003 0304 	and.w	r3, r3, #4
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac58:	f003 0310 	and.w	r3, r3, #16
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01a      	beq.n	800acda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc2:	d10a      	bne.n	800acda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	605a      	str	r2, [r3, #4]
  }
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b098      	sub	sp, #96	; 0x60
 800ad0c:	af02      	add	r7, sp, #8
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad18:	f7f9 fc2c 	bl	8004574 <HAL_GetTick>
 800ad1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0308 	and.w	r3, r3, #8
 800ad28:	2b08      	cmp	r3, #8
 800ad2a:	d12f      	bne.n	800ad8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad34:	2200      	movs	r2, #0
 800ad36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f88e 	bl	800ae5c <UART_WaitOnFlagUntilTimeout>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d022      	beq.n	800ad8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	e853 3f00 	ldrex	r3, [r3]
 800ad52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad5a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	461a      	mov	r2, r3
 800ad62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad64:	647b      	str	r3, [r7, #68]	; 0x44
 800ad66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad6c:	e841 2300 	strex	r3, r2, [r1]
 800ad70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1e6      	bne.n	800ad46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e063      	b.n	800ae54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d149      	bne.n	800ae2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ada2:	2200      	movs	r2, #0
 800ada4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f857 	bl	800ae5c <UART_WaitOnFlagUntilTimeout>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d03c      	beq.n	800ae2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	e853 3f00 	ldrex	r3, [r3]
 800adc0:	623b      	str	r3, [r7, #32]
   return(result);
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add2:	633b      	str	r3, [r7, #48]	; 0x30
 800add4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800add8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1e6      	bne.n	800adb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3308      	adds	r3, #8
 800adec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f023 0301 	bic.w	r3, r3, #1
 800adfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3308      	adds	r3, #8
 800ae04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae06:	61fa      	str	r2, [r7, #28]
 800ae08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	69b9      	ldr	r1, [r7, #24]
 800ae0c:	69fa      	ldr	r2, [r7, #28]
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	617b      	str	r3, [r7, #20]
   return(result);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e5      	bne.n	800ade6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2220      	movs	r2, #32
 800ae1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e012      	b.n	800ae54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2220      	movs	r2, #32
 800ae32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3758      	adds	r7, #88	; 0x58
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	603b      	str	r3, [r7, #0]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae6c:	e04f      	b.n	800af0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d04b      	beq.n	800af0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae76:	f7f9 fb7d 	bl	8004574 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d302      	bcc.n	800ae8c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e04e      	b.n	800af2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0304 	and.w	r3, r3, #4
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d037      	beq.n	800af0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b80      	cmp	r3, #128	; 0x80
 800aea2:	d034      	beq.n	800af0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b40      	cmp	r3, #64	; 0x40
 800aea8:	d031      	beq.n	800af0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d110      	bne.n	800aeda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2208      	movs	r2, #8
 800aebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f920 	bl	800b106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2208      	movs	r2, #8
 800aeca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e029      	b.n	800af2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aee8:	d111      	bne.n	800af0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 f906 	bl	800b106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e00f      	b.n	800af2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69da      	ldr	r2, [r3, #28]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4013      	ands	r3, r2
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	bf0c      	ite	eq
 800af1e:	2301      	moveq	r3, #1
 800af20:	2300      	movne	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	461a      	mov	r2, r3
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d0a0      	beq.n	800ae6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b096      	sub	sp, #88	; 0x58
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	4613      	mov	r3, r2
 800af44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	88fa      	ldrh	r2, [r7, #6]
 800af50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2222      	movs	r2, #34	; 0x22
 800af60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d02d      	beq.n	800afca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af74:	4a40      	ldr	r2, [pc, #256]	; (800b078 <UART_Start_Receive_DMA+0x140>)
 800af76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7e:	4a3f      	ldr	r2, [pc, #252]	; (800b07c <UART_Start_Receive_DMA+0x144>)
 800af80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af88:	4a3d      	ldr	r2, [pc, #244]	; (800b080 <UART_Start_Receive_DMA+0x148>)
 800af8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af92:	2200      	movs	r2, #0
 800af94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3324      	adds	r3, #36	; 0x24
 800afa2:	4619      	mov	r1, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa8:	461a      	mov	r2, r3
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	f7fb f80a 	bl	8005fc4 <HAL_DMA_Start_IT>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2210      	movs	r2, #16
 800afba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2220      	movs	r2, #32
 800afc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e051      	b.n	800b06e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d018      	beq.n	800b004 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afe6:	657b      	str	r3, [r7, #84]	; 0x54
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	461a      	mov	r2, r3
 800afee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aff2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800affe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e6      	bne.n	800afd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3308      	adds	r3, #8
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	e853 3f00 	ldrex	r3, [r3]
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	f043 0301 	orr.w	r3, r3, #1
 800b01a:	653b      	str	r3, [r7, #80]	; 0x50
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3308      	adds	r3, #8
 800b022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b024:	637a      	str	r2, [r7, #52]	; 0x34
 800b026:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e5      	bne.n	800b004 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3308      	adds	r3, #8
 800b03e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	613b      	str	r3, [r7, #16]
   return(result);
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3308      	adds	r3, #8
 800b056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b058:	623a      	str	r2, [r7, #32]
 800b05a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05c:	69f9      	ldr	r1, [r7, #28]
 800b05e:	6a3a      	ldr	r2, [r7, #32]
 800b060:	e841 2300 	strex	r3, r2, [r1]
 800b064:	61bb      	str	r3, [r7, #24]
   return(result);
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1e5      	bne.n	800b038 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3758      	adds	r7, #88	; 0x58
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	0800b291 	.word	0x0800b291
 800b07c:	0800b3c5 	.word	0x0800b3c5
 800b080:	0800b40b 	.word	0x0800b40b

0800b084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b08f      	sub	sp, #60	; 0x3c
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	61fb      	str	r3, [r7, #28]
   return(result);
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e6      	bne.n	800b08c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3308      	adds	r3, #8
 800b0c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b0d4:	633b      	str	r3, [r7, #48]	; 0x30
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0de:	61ba      	str	r2, [r7, #24]
 800b0e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6979      	ldr	r1, [r7, #20]
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e5      	bne.n	800b0be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b0fa:	bf00      	nop
 800b0fc:	373c      	adds	r7, #60	; 0x3c
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b106:	b480      	push	{r7}
 800b108:	b095      	sub	sp, #84	; 0x54
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	e853 3f00 	ldrex	r3, [r3]
 800b11a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b122:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	643b      	str	r3, [r7, #64]	; 0x40
 800b12e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b134:	e841 2300 	strex	r3, r2, [r1]
 800b138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1e6      	bne.n	800b10e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3308      	adds	r3, #8
 800b146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	e853 3f00 	ldrex	r3, [r3]
 800b14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b156:	f023 0301 	bic.w	r3, r3, #1
 800b15a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b164:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e3      	bne.n	800b140 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d118      	bne.n	800b1b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	e853 3f00 	ldrex	r3, [r3]
 800b18c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	f023 0310 	bic.w	r3, r3, #16
 800b194:	647b      	str	r3, [r7, #68]	; 0x44
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19e:	61bb      	str	r3, [r7, #24]
 800b1a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a2:	6979      	ldr	r1, [r7, #20]
 800b1a4:	69ba      	ldr	r2, [r7, #24]
 800b1a6:	e841 2300 	strex	r3, r2, [r1]
 800b1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1e6      	bne.n	800b180 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b1c6:	bf00      	nop
 800b1c8:	3754      	adds	r7, #84	; 0x54
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b090      	sub	sp, #64	; 0x40
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d137      	bne.n	800b25e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	623b      	str	r3, [r7, #32]
   return(result);
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b20c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3308      	adds	r3, #8
 800b214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b216:	633a      	str	r2, [r7, #48]	; 0x30
 800b218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b21e:	e841 2300 	strex	r3, r2, [r1]
 800b222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e5      	bne.n	800b1f6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	60fb      	str	r3, [r7, #12]
   return(result);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23e:	637b      	str	r3, [r7, #52]	; 0x34
 800b240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	61fb      	str	r3, [r7, #28]
 800b24a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	69b9      	ldr	r1, [r7, #24]
 800b24e:	69fa      	ldr	r2, [r7, #28]
 800b250:	e841 2300 	strex	r3, r2, [r1]
 800b254:	617b      	str	r3, [r7, #20]
   return(result);
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e6      	bne.n	800b22a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b25c:	e004      	b.n	800b268 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b264:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b266:	4798      	blx	r3
}
 800b268:	bf00      	nop
 800b26a:	3740      	adds	r7, #64	; 0x40
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b288:	bf00      	nop
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b09c      	sub	sp, #112	; 0x70
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d171      	bne.n	800b390 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2da:	e841 2300 	strex	r3, r2, [r1]
 800b2de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e6      	bne.n	800b2b4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b306:	647a      	str	r2, [r7, #68]	; 0x44
 800b308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b30c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b30e:	e841 2300 	strex	r3, r2, [r1]
 800b312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e5      	bne.n	800b2e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3308      	adds	r3, #8
 800b320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	623b      	str	r3, [r7, #32]
   return(result);
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b330:	663b      	str	r3, [r7, #96]	; 0x60
 800b332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3308      	adds	r3, #8
 800b338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b33a:	633a      	str	r2, [r7, #48]	; 0x30
 800b33c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b342:	e841 2300 	strex	r3, r2, [r1]
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e5      	bne.n	800b31a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b350:	2220      	movs	r2, #32
 800b352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d118      	bne.n	800b390 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0310 	bic.w	r3, r3, #16
 800b372:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b37c:	61fb      	str	r3, [r7, #28]
 800b37e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	69b9      	ldr	r1, [r7, #24]
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	617b      	str	r3, [r7, #20]
   return(result);
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b392:	2200      	movs	r2, #0
 800b394:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d109      	bne.n	800b3b2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b39e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b3a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3ae:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3b0:	e004      	b.n	800b3bc <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3ba:	4798      	blx	r3
}
 800b3bc:	bf00      	nop
 800b3be:	3770      	adds	r7, #112	; 0x70
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d10b      	bne.n	800b3f8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800b3ec:	0852      	lsrs	r2, r2, #1
 800b3ee:	b292      	uxth	r2, r2
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3f6:	e004      	b.n	800b402 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	4798      	blx	r3
}
 800b402:	bf00      	nop
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b416:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b426:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b432:	2b80      	cmp	r3, #128	; 0x80
 800b434:	d109      	bne.n	800b44a <UART_DMAError+0x40>
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b21      	cmp	r3, #33	; 0x21
 800b43a:	d106      	bne.n	800b44a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b444:	6978      	ldr	r0, [r7, #20]
 800b446:	f7ff fe1d 	bl	800b084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b454:	2b40      	cmp	r3, #64	; 0x40
 800b456:	d109      	bne.n	800b46c <UART_DMAError+0x62>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b22      	cmp	r3, #34	; 0x22
 800b45c:	d106      	bne.n	800b46c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	2200      	movs	r2, #0
 800b462:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b466:	6978      	ldr	r0, [r7, #20]
 800b468:	f7ff fe4d 	bl	800b106 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b472:	f043 0210 	orr.w	r2, r3, #16
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b482:	6978      	ldr	r0, [r7, #20]
 800b484:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b486:	bf00      	nop
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4b6:	bf00      	nop
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b088      	sub	sp, #32
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	e853 3f00 	ldrex	r3, [r3]
 800b4d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	61bb      	str	r3, [r7, #24]
 800b4e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	6979      	ldr	r1, [r7, #20]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e6      	bne.n	800b4c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b510:	bf00      	nop
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b562:	2b01      	cmp	r3, #1
 800b564:	d101      	bne.n	800b56a <HAL_UARTEx_DisableFifoMode+0x16>
 800b566:	2302      	movs	r3, #2
 800b568:	e027      	b.n	800b5ba <HAL_UARTEx_DisableFifoMode+0x66>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2224      	movs	r2, #36	; 0x24
 800b576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f022 0201 	bic.w	r2, r2, #1
 800b590:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b598:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2220      	movs	r2, #32
 800b5ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d101      	bne.n	800b5de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e02d      	b.n	800b63a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2224      	movs	r2, #36	; 0x24
 800b5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 0201 	bic.w	r2, r2, #1
 800b604:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f850 	bl	800b6c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b652:	2b01      	cmp	r3, #1
 800b654:	d101      	bne.n	800b65a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b656:	2302      	movs	r3, #2
 800b658:	e02d      	b.n	800b6b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2224      	movs	r2, #36	; 0x24
 800b666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f022 0201 	bic.w	r2, r2, #1
 800b680:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	430a      	orrs	r2, r1
 800b694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f812 	bl	800b6c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d108      	bne.n	800b6e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6e0:	e031      	b.n	800b746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6e2:	2308      	movs	r3, #8
 800b6e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	0e5b      	lsrs	r3, r3, #25
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 0307 	and.w	r3, r3, #7
 800b6f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	0f5b      	lsrs	r3, r3, #29
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 0307 	and.w	r3, r3, #7
 800b708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	7b3a      	ldrb	r2, [r7, #12]
 800b70e:	4911      	ldr	r1, [pc, #68]	; (800b754 <UARTEx_SetNbDataToProcess+0x94>)
 800b710:	5c8a      	ldrb	r2, [r1, r2]
 800b712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b716:	7b3a      	ldrb	r2, [r7, #12]
 800b718:	490f      	ldr	r1, [pc, #60]	; (800b758 <UARTEx_SetNbDataToProcess+0x98>)
 800b71a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b720:	b29a      	uxth	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	7b7a      	ldrb	r2, [r7, #13]
 800b72c:	4909      	ldr	r1, [pc, #36]	; (800b754 <UARTEx_SetNbDataToProcess+0x94>)
 800b72e:	5c8a      	ldrb	r2, [r1, r2]
 800b730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b734:	7b7a      	ldrb	r2, [r7, #13]
 800b736:	4908      	ldr	r1, [pc, #32]	; (800b758 <UARTEx_SetNbDataToProcess+0x98>)
 800b738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b73a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b73e:	b29a      	uxth	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b746:	bf00      	nop
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	0800bfd8 	.word	0x0800bfd8
 800b758:	0800bfe0 	.word	0x0800bfe0

0800b75c <memset>:
 800b75c:	4402      	add	r2, r0
 800b75e:	4603      	mov	r3, r0
 800b760:	4293      	cmp	r3, r2
 800b762:	d100      	bne.n	800b766 <memset+0xa>
 800b764:	4770      	bx	lr
 800b766:	f803 1b01 	strb.w	r1, [r3], #1
 800b76a:	e7f9      	b.n	800b760 <memset+0x4>

0800b76c <__errno>:
 800b76c:	4b01      	ldr	r3, [pc, #4]	; (800b774 <__errno+0x8>)
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	2000027c 	.word	0x2000027c

0800b778 <__libc_init_array>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	4d0d      	ldr	r5, [pc, #52]	; (800b7b0 <__libc_init_array+0x38>)
 800b77c:	4c0d      	ldr	r4, [pc, #52]	; (800b7b4 <__libc_init_array+0x3c>)
 800b77e:	1b64      	subs	r4, r4, r5
 800b780:	10a4      	asrs	r4, r4, #2
 800b782:	2600      	movs	r6, #0
 800b784:	42a6      	cmp	r6, r4
 800b786:	d109      	bne.n	800b79c <__libc_init_array+0x24>
 800b788:	4d0b      	ldr	r5, [pc, #44]	; (800b7b8 <__libc_init_array+0x40>)
 800b78a:	4c0c      	ldr	r4, [pc, #48]	; (800b7bc <__libc_init_array+0x44>)
 800b78c:	f000 fbe8 	bl	800bf60 <_init>
 800b790:	1b64      	subs	r4, r4, r5
 800b792:	10a4      	asrs	r4, r4, #2
 800b794:	2600      	movs	r6, #0
 800b796:	42a6      	cmp	r6, r4
 800b798:	d105      	bne.n	800b7a6 <__libc_init_array+0x2e>
 800b79a:	bd70      	pop	{r4, r5, r6, pc}
 800b79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a0:	4798      	blx	r3
 800b7a2:	3601      	adds	r6, #1
 800b7a4:	e7ee      	b.n	800b784 <__libc_init_array+0xc>
 800b7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7aa:	4798      	blx	r3
 800b7ac:	3601      	adds	r6, #1
 800b7ae:	e7f2      	b.n	800b796 <__libc_init_array+0x1e>
 800b7b0:	0800c008 	.word	0x0800c008
 800b7b4:	0800c008 	.word	0x0800c008
 800b7b8:	0800c008 	.word	0x0800c008
 800b7bc:	0800c00c 	.word	0x0800c00c

0800b7c0 <memcpy>:
 800b7c0:	440a      	add	r2, r1
 800b7c2:	4291      	cmp	r1, r2
 800b7c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7c8:	d100      	bne.n	800b7cc <memcpy+0xc>
 800b7ca:	4770      	bx	lr
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7d6:	4291      	cmp	r1, r2
 800b7d8:	d1f9      	bne.n	800b7ce <memcpy+0xe>
 800b7da:	bd10      	pop	{r4, pc}

0800b7dc <powf>:
 800b7dc:	b508      	push	{r3, lr}
 800b7de:	ed2d 8b04 	vpush	{d8-d9}
 800b7e2:	eeb0 8a60 	vmov.f32	s16, s1
 800b7e6:	eeb0 9a40 	vmov.f32	s18, s0
 800b7ea:	f000 f85b 	bl	800b8a4 <__ieee754_powf>
 800b7ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800b7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f6:	eef0 8a40 	vmov.f32	s17, s0
 800b7fa:	d63e      	bvs.n	800b87a <powf+0x9e>
 800b7fc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b804:	d112      	bne.n	800b82c <powf+0x50>
 800b806:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80e:	d039      	beq.n	800b884 <powf+0xa8>
 800b810:	eeb0 0a48 	vmov.f32	s0, s16
 800b814:	f000 f839 	bl	800b88a <finitef>
 800b818:	b378      	cbz	r0, 800b87a <powf+0x9e>
 800b81a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b822:	d52a      	bpl.n	800b87a <powf+0x9e>
 800b824:	f7ff ffa2 	bl	800b76c <__errno>
 800b828:	2322      	movs	r3, #34	; 0x22
 800b82a:	e014      	b.n	800b856 <powf+0x7a>
 800b82c:	f000 f82d 	bl	800b88a <finitef>
 800b830:	b998      	cbnz	r0, 800b85a <powf+0x7e>
 800b832:	eeb0 0a49 	vmov.f32	s0, s18
 800b836:	f000 f828 	bl	800b88a <finitef>
 800b83a:	b170      	cbz	r0, 800b85a <powf+0x7e>
 800b83c:	eeb0 0a48 	vmov.f32	s0, s16
 800b840:	f000 f823 	bl	800b88a <finitef>
 800b844:	b148      	cbz	r0, 800b85a <powf+0x7e>
 800b846:	eef4 8a68 	vcmp.f32	s17, s17
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	d7e9      	bvc.n	800b824 <powf+0x48>
 800b850:	f7ff ff8c 	bl	800b76c <__errno>
 800b854:	2321      	movs	r3, #33	; 0x21
 800b856:	6003      	str	r3, [r0, #0]
 800b858:	e00f      	b.n	800b87a <powf+0x9e>
 800b85a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b862:	d10a      	bne.n	800b87a <powf+0x9e>
 800b864:	eeb0 0a49 	vmov.f32	s0, s18
 800b868:	f000 f80f 	bl	800b88a <finitef>
 800b86c:	b128      	cbz	r0, 800b87a <powf+0x9e>
 800b86e:	eeb0 0a48 	vmov.f32	s0, s16
 800b872:	f000 f80a 	bl	800b88a <finitef>
 800b876:	2800      	cmp	r0, #0
 800b878:	d1d4      	bne.n	800b824 <powf+0x48>
 800b87a:	eeb0 0a68 	vmov.f32	s0, s17
 800b87e:	ecbd 8b04 	vpop	{d8-d9}
 800b882:	bd08      	pop	{r3, pc}
 800b884:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b888:	e7f7      	b.n	800b87a <powf+0x9e>

0800b88a <finitef>:
 800b88a:	b082      	sub	sp, #8
 800b88c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b890:	9801      	ldr	r0, [sp, #4]
 800b892:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b896:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b89a:	bfac      	ite	ge
 800b89c:	2000      	movge	r0, #0
 800b89e:	2001      	movlt	r0, #1
 800b8a0:	b002      	add	sp, #8
 800b8a2:	4770      	bx	lr

0800b8a4 <__ieee754_powf>:
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	ee10 4a90 	vmov	r4, s1
 800b8ac:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800b8b0:	ed2d 8b02 	vpush	{d8}
 800b8b4:	ee10 7a10 	vmov	r7, s0
 800b8b8:	eeb0 8a40 	vmov.f32	s16, s0
 800b8bc:	eef0 8a60 	vmov.f32	s17, s1
 800b8c0:	d10c      	bne.n	800b8dc <__ieee754_powf+0x38>
 800b8c2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800b8c6:	007f      	lsls	r7, r7, #1
 800b8c8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800b8cc:	f240 8292 	bls.w	800bdf4 <__ieee754_powf+0x550>
 800b8d0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b8d4:	ecbd 8b02 	vpop	{d8}
 800b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8dc:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800b8e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b8e4:	dcf4      	bgt.n	800b8d0 <__ieee754_powf+0x2c>
 800b8e6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b8ea:	dd08      	ble.n	800b8fe <__ieee754_powf+0x5a>
 800b8ec:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b8f0:	d1ee      	bne.n	800b8d0 <__ieee754_powf+0x2c>
 800b8f2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b8f6:	0064      	lsls	r4, r4, #1
 800b8f8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b8fc:	e7e6      	b.n	800b8cc <__ieee754_powf+0x28>
 800b8fe:	2f00      	cmp	r7, #0
 800b900:	da20      	bge.n	800b944 <__ieee754_powf+0xa0>
 800b902:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800b906:	da2d      	bge.n	800b964 <__ieee754_powf+0xc0>
 800b908:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b90c:	f2c0 827b 	blt.w	800be06 <__ieee754_powf+0x562>
 800b910:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800b914:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b918:	fa48 f603 	asr.w	r6, r8, r3
 800b91c:	fa06 f303 	lsl.w	r3, r6, r3
 800b920:	4543      	cmp	r3, r8
 800b922:	f040 8270 	bne.w	800be06 <__ieee754_powf+0x562>
 800b926:	f006 0601 	and.w	r6, r6, #1
 800b92a:	f1c6 0602 	rsb	r6, r6, #2
 800b92e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b932:	d11f      	bne.n	800b974 <__ieee754_powf+0xd0>
 800b934:	2c00      	cmp	r4, #0
 800b936:	f280 8263 	bge.w	800be00 <__ieee754_powf+0x55c>
 800b93a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b93e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b942:	e7c7      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b944:	2600      	movs	r6, #0
 800b946:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b94a:	d1f0      	bne.n	800b92e <__ieee754_powf+0x8a>
 800b94c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b950:	f000 8250 	beq.w	800bdf4 <__ieee754_powf+0x550>
 800b954:	dd08      	ble.n	800b968 <__ieee754_powf+0xc4>
 800b956:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800bc5c <__ieee754_powf+0x3b8>
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	bfa8      	it	ge
 800b95e:	eeb0 0a68 	vmovge.f32	s0, s17
 800b962:	e7b7      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b964:	2602      	movs	r6, #2
 800b966:	e7ee      	b.n	800b946 <__ieee754_powf+0xa2>
 800b968:	2c00      	cmp	r4, #0
 800b96a:	f280 8246 	bge.w	800bdfa <__ieee754_powf+0x556>
 800b96e:	eeb1 0a68 	vneg.f32	s0, s17
 800b972:	e7af      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b974:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b978:	d102      	bne.n	800b980 <__ieee754_powf+0xdc>
 800b97a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b97e:	e7a9      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b980:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b984:	eeb0 0a48 	vmov.f32	s0, s16
 800b988:	d107      	bne.n	800b99a <__ieee754_powf+0xf6>
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	db05      	blt.n	800b99a <__ieee754_powf+0xf6>
 800b98e:	ecbd 8b02 	vpop	{d8}
 800b992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	f000 badf 	b.w	800bf58 <__ieee754_sqrtf>
 800b99a:	f000 fa4d 	bl	800be38 <fabsf>
 800b99e:	b125      	cbz	r5, 800b9aa <__ieee754_powf+0x106>
 800b9a0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800b9a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b9a8:	d115      	bne.n	800b9d6 <__ieee754_powf+0x132>
 800b9aa:	2c00      	cmp	r4, #0
 800b9ac:	bfbc      	itt	lt
 800b9ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b9b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b9b6:	2f00      	cmp	r7, #0
 800b9b8:	da8c      	bge.n	800b8d4 <__ieee754_powf+0x30>
 800b9ba:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800b9be:	4335      	orrs	r5, r6
 800b9c0:	d104      	bne.n	800b9cc <__ieee754_powf+0x128>
 800b9c2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b9c6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b9ca:	e783      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b9cc:	2e01      	cmp	r6, #1
 800b9ce:	d181      	bne.n	800b8d4 <__ieee754_powf+0x30>
 800b9d0:	eeb1 0a40 	vneg.f32	s0, s0
 800b9d4:	e77e      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b9d6:	0ff8      	lsrs	r0, r7, #31
 800b9d8:	3801      	subs	r0, #1
 800b9da:	ea56 0300 	orrs.w	r3, r6, r0
 800b9de:	d104      	bne.n	800b9ea <__ieee754_powf+0x146>
 800b9e0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b9e4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b9e8:	e774      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b9ea:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800b9ee:	dd73      	ble.n	800bad8 <__ieee754_powf+0x234>
 800b9f0:	4b9b      	ldr	r3, [pc, #620]	; (800bc60 <__ieee754_powf+0x3bc>)
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	dc08      	bgt.n	800ba08 <__ieee754_powf+0x164>
 800b9f6:	2c00      	cmp	r4, #0
 800b9f8:	da0b      	bge.n	800ba12 <__ieee754_powf+0x16e>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	ecbd 8b02 	vpop	{d8}
 800ba00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	f000 baa2 	b.w	800bf4c <__math_oflowf>
 800ba08:	4b96      	ldr	r3, [pc, #600]	; (800bc64 <__ieee754_powf+0x3c0>)
 800ba0a:	429d      	cmp	r5, r3
 800ba0c:	dd08      	ble.n	800ba20 <__ieee754_powf+0x17c>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	dcf3      	bgt.n	800b9fa <__ieee754_powf+0x156>
 800ba12:	2000      	movs	r0, #0
 800ba14:	ecbd 8b02 	vpop	{d8}
 800ba18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	f000 ba90 	b.w	800bf40 <__math_uflowf>
 800ba20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba24:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba28:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800bc68 <__ieee754_powf+0x3c4>
 800ba2c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ba30:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ba34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba38:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ba3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ba40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba44:	eddf 7a89 	vldr	s15, [pc, #548]	; 800bc6c <__ieee754_powf+0x3c8>
 800ba48:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ba4c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800bc70 <__ieee754_powf+0x3cc>
 800ba50:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba54:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800bc74 <__ieee754_powf+0x3d0>
 800ba58:	eef0 6a67 	vmov.f32	s13, s15
 800ba5c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ba60:	ee16 3a90 	vmov	r3, s13
 800ba64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ba68:	f023 030f 	bic.w	r3, r3, #15
 800ba6c:	ee06 3a90 	vmov	s13, r3
 800ba70:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ba74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba78:	3e01      	subs	r6, #1
 800ba7a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ba7e:	4306      	orrs	r6, r0
 800ba80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ba84:	f024 040f 	bic.w	r4, r4, #15
 800ba88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ba8c:	bf08      	it	eq
 800ba8e:	eeb0 8a47 	vmoveq.f32	s16, s14
 800ba92:	ee07 4a10 	vmov	s14, r4
 800ba96:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ba9a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800baa6:	ee07 4a10 	vmov	s14, r4
 800baaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bab2:	ee17 1a10 	vmov	r1, s14
 800bab6:	2900      	cmp	r1, #0
 800bab8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800babc:	f340 817c 	ble.w	800bdb8 <__ieee754_powf+0x514>
 800bac0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800bac4:	f340 80f8 	ble.w	800bcb8 <__ieee754_powf+0x414>
 800bac8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad0:	bf4c      	ite	mi
 800bad2:	2001      	movmi	r0, #1
 800bad4:	2000      	movpl	r0, #0
 800bad6:	e791      	b.n	800b9fc <__ieee754_powf+0x158>
 800bad8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800badc:	bf01      	itttt	eq
 800bade:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800bc78 <__ieee754_powf+0x3d4>
 800bae2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bae6:	f06f 0317 	mvneq.w	r3, #23
 800baea:	ee17 5a90 	vmoveq	r5, s15
 800baee:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800baf2:	bf18      	it	ne
 800baf4:	2300      	movne	r3, #0
 800baf6:	3a7f      	subs	r2, #127	; 0x7f
 800baf8:	441a      	add	r2, r3
 800bafa:	4b60      	ldr	r3, [pc, #384]	; (800bc7c <__ieee754_powf+0x3d8>)
 800bafc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800bb00:	429d      	cmp	r5, r3
 800bb02:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800bb06:	dd06      	ble.n	800bb16 <__ieee754_powf+0x272>
 800bb08:	4b5d      	ldr	r3, [pc, #372]	; (800bc80 <__ieee754_powf+0x3dc>)
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	f340 80a4 	ble.w	800bc58 <__ieee754_powf+0x3b4>
 800bb10:	3201      	adds	r2, #1
 800bb12:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800bb16:	2500      	movs	r5, #0
 800bb18:	4b5a      	ldr	r3, [pc, #360]	; (800bc84 <__ieee754_powf+0x3e0>)
 800bb1a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800bb1e:	ee07 1a10 	vmov	s14, r1
 800bb22:	edd3 5a00 	vldr	s11, [r3]
 800bb26:	4b58      	ldr	r3, [pc, #352]	; (800bc88 <__ieee754_powf+0x3e4>)
 800bb28:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bb2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb30:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bb34:	1049      	asrs	r1, r1, #1
 800bb36:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bb3a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800bb3e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800bb42:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bb46:	ee07 1a90 	vmov	s15, r1
 800bb4a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bb4e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bb52:	ee15 7a10 	vmov	r7, s10
 800bb56:	401f      	ands	r7, r3
 800bb58:	ee06 7a90 	vmov	s13, r7
 800bb5c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bb60:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bb64:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bb68:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bb6c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800bc8c <__ieee754_powf+0x3e8>
 800bb70:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800bc90 <__ieee754_powf+0x3ec>
 800bb74:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bb78:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bc94 <__ieee754_powf+0x3f0>
 800bb7c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bb80:	eddf 5a39 	vldr	s11, [pc, #228]	; 800bc68 <__ieee754_powf+0x3c4>
 800bb84:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bb88:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800bc98 <__ieee754_powf+0x3f4>
 800bb8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bb90:	eddf 5a42 	vldr	s11, [pc, #264]	; 800bc9c <__ieee754_powf+0x3f8>
 800bb94:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb98:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bb9c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800bba0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800bba4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bba8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800bbac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800bbb0:	eef0 5a67 	vmov.f32	s11, s15
 800bbb4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800bbb8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800bbbc:	ee15 1a90 	vmov	r1, s11
 800bbc0:	4019      	ands	r1, r3
 800bbc2:	ee05 1a90 	vmov	s11, r1
 800bbc6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bbca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800bbce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbd2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bbd6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bbda:	eeb0 6a67 	vmov.f32	s12, s15
 800bbde:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800bbe2:	ee16 1a10 	vmov	r1, s12
 800bbe6:	4019      	ands	r1, r3
 800bbe8:	ee07 1a10 	vmov	s14, r1
 800bbec:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800bbf0:	ee06 1a10 	vmov	s12, r1
 800bbf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbf8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bca0 <__ieee754_powf+0x3fc>
 800bbfc:	4929      	ldr	r1, [pc, #164]	; (800bca4 <__ieee754_powf+0x400>)
 800bbfe:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800bca8 <__ieee754_powf+0x404>
 800bc02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc06:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bcac <__ieee754_powf+0x408>
 800bc0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc0e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800bc12:	ed91 7a00 	vldr	s14, [r1]
 800bc16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc1a:	ee07 2a10 	vmov	s14, r2
 800bc1e:	eef0 6a67 	vmov.f32	s13, s15
 800bc22:	4a23      	ldr	r2, [pc, #140]	; (800bcb0 <__ieee754_powf+0x40c>)
 800bc24:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bc28:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800bc2c:	ed92 5a00 	vldr	s10, [r2]
 800bc30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc34:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bc38:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bc3c:	ee16 2a90 	vmov	r2, s13
 800bc40:	4013      	ands	r3, r2
 800bc42:	ee06 3a90 	vmov	s13, r3
 800bc46:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bc4a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800bc4e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800bc52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc56:	e70f      	b.n	800ba78 <__ieee754_powf+0x1d4>
 800bc58:	2501      	movs	r5, #1
 800bc5a:	e75d      	b.n	800bb18 <__ieee754_powf+0x274>
 800bc5c:	00000000 	.word	0x00000000
 800bc60:	3f7ffff3 	.word	0x3f7ffff3
 800bc64:	3f800007 	.word	0x3f800007
 800bc68:	3eaaaaab 	.word	0x3eaaaaab
 800bc6c:	3fb8aa3b 	.word	0x3fb8aa3b
 800bc70:	36eca570 	.word	0x36eca570
 800bc74:	3fb8aa00 	.word	0x3fb8aa00
 800bc78:	4b800000 	.word	0x4b800000
 800bc7c:	001cc471 	.word	0x001cc471
 800bc80:	005db3d6 	.word	0x005db3d6
 800bc84:	0800bfe8 	.word	0x0800bfe8
 800bc88:	fffff000 	.word	0xfffff000
 800bc8c:	3e6c3255 	.word	0x3e6c3255
 800bc90:	3e53f142 	.word	0x3e53f142
 800bc94:	3e8ba305 	.word	0x3e8ba305
 800bc98:	3edb6db7 	.word	0x3edb6db7
 800bc9c:	3f19999a 	.word	0x3f19999a
 800bca0:	3f76384f 	.word	0x3f76384f
 800bca4:	0800bff8 	.word	0x0800bff8
 800bca8:	3f763800 	.word	0x3f763800
 800bcac:	369dc3a0 	.word	0x369dc3a0
 800bcb0:	0800bff0 	.word	0x0800bff0
 800bcb4:	3338aa3c 	.word	0x3338aa3c
 800bcb8:	f040 8093 	bne.w	800bde2 <__ieee754_powf+0x53e>
 800bcbc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800bcb4 <__ieee754_powf+0x410>
 800bcc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcc4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bcc8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd0:	f73f aefa 	bgt.w	800bac8 <__ieee754_powf+0x224>
 800bcd4:	15db      	asrs	r3, r3, #23
 800bcd6:	3b7e      	subs	r3, #126	; 0x7e
 800bcd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800bcdc:	4118      	asrs	r0, r3
 800bcde:	4408      	add	r0, r1
 800bce0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bce4:	4a49      	ldr	r2, [pc, #292]	; (800be0c <__ieee754_powf+0x568>)
 800bce6:	3b7f      	subs	r3, #127	; 0x7f
 800bce8:	411a      	asrs	r2, r3
 800bcea:	4002      	ands	r2, r0
 800bcec:	ee07 2a10 	vmov	s14, r2
 800bcf0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800bcf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bcf8:	f1c3 0317 	rsb	r3, r3, #23
 800bcfc:	4118      	asrs	r0, r3
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd04:	bfb8      	it	lt
 800bd06:	4240      	neglt	r0, r0
 800bd08:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800bd0c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800be10 <__ieee754_powf+0x56c>
 800bd10:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800be14 <__ieee754_powf+0x570>
 800bd14:	ee17 3a10 	vmov	r3, s14
 800bd18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bd1c:	f023 030f 	bic.w	r3, r3, #15
 800bd20:	ee07 3a10 	vmov	s14, r3
 800bd24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd2c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bd30:	eddf 7a39 	vldr	s15, [pc, #228]	; 800be18 <__ieee754_powf+0x574>
 800bd34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd38:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800bd3c:	eef0 6a67 	vmov.f32	s13, s15
 800bd40:	eee7 6a06 	vfma.f32	s13, s14, s12
 800bd44:	eef0 5a66 	vmov.f32	s11, s13
 800bd48:	eee7 5a46 	vfms.f32	s11, s14, s12
 800bd4c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bd50:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bd54:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800be1c <__ieee754_powf+0x578>
 800bd58:	eddf 5a31 	vldr	s11, [pc, #196]	; 800be20 <__ieee754_powf+0x57c>
 800bd5c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bd60:	eddf 5a30 	vldr	s11, [pc, #192]	; 800be24 <__ieee754_powf+0x580>
 800bd64:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bd68:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800be28 <__ieee754_powf+0x584>
 800bd6c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bd70:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800be2c <__ieee754_powf+0x588>
 800bd74:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bd78:	eeb0 6a66 	vmov.f32	s12, s13
 800bd7c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800bd80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bd84:	ee66 5a86 	vmul.f32	s11, s13, s12
 800bd88:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bd8c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800bd90:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800bd94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bda0:	ee10 3a10 	vmov	r3, s0
 800bda4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800bda8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdac:	da1f      	bge.n	800bdee <__ieee754_powf+0x54a>
 800bdae:	f000 f84b 	bl	800be48 <scalbnf>
 800bdb2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bdb6:	e58d      	b.n	800b8d4 <__ieee754_powf+0x30>
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	; (800be30 <__ieee754_powf+0x58c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	dd07      	ble.n	800bdce <__ieee754_powf+0x52a>
 800bdbe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc6:	bf4c      	ite	mi
 800bdc8:	2001      	movmi	r0, #1
 800bdca:	2000      	movpl	r0, #0
 800bdcc:	e622      	b.n	800ba14 <__ieee754_powf+0x170>
 800bdce:	d108      	bne.n	800bde2 <__ieee754_powf+0x53e>
 800bdd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bdd4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bddc:	f6ff af7a 	blt.w	800bcd4 <__ieee754_powf+0x430>
 800bde0:	e7ed      	b.n	800bdbe <__ieee754_powf+0x51a>
 800bde2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800bde6:	f73f af75 	bgt.w	800bcd4 <__ieee754_powf+0x430>
 800bdea:	2000      	movs	r0, #0
 800bdec:	e78c      	b.n	800bd08 <__ieee754_powf+0x464>
 800bdee:	ee00 3a10 	vmov	s0, r3
 800bdf2:	e7de      	b.n	800bdb2 <__ieee754_powf+0x50e>
 800bdf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bdf8:	e56c      	b.n	800b8d4 <__ieee754_powf+0x30>
 800bdfa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800be34 <__ieee754_powf+0x590>
 800bdfe:	e569      	b.n	800b8d4 <__ieee754_powf+0x30>
 800be00:	eeb0 0a48 	vmov.f32	s0, s16
 800be04:	e566      	b.n	800b8d4 <__ieee754_powf+0x30>
 800be06:	2600      	movs	r6, #0
 800be08:	e591      	b.n	800b92e <__ieee754_powf+0x8a>
 800be0a:	bf00      	nop
 800be0c:	ff800000 	.word	0xff800000
 800be10:	3f317218 	.word	0x3f317218
 800be14:	3f317200 	.word	0x3f317200
 800be18:	35bfbe8c 	.word	0x35bfbe8c
 800be1c:	b5ddea0e 	.word	0xb5ddea0e
 800be20:	3331bb4c 	.word	0x3331bb4c
 800be24:	388ab355 	.word	0x388ab355
 800be28:	bb360b61 	.word	0xbb360b61
 800be2c:	3e2aaaab 	.word	0x3e2aaaab
 800be30:	43160000 	.word	0x43160000
 800be34:	00000000 	.word	0x00000000

0800be38 <fabsf>:
 800be38:	ee10 3a10 	vmov	r3, s0
 800be3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be40:	ee00 3a10 	vmov	s0, r3
 800be44:	4770      	bx	lr
	...

0800be48 <scalbnf>:
 800be48:	ee10 3a10 	vmov	r3, s0
 800be4c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800be50:	d02b      	beq.n	800beaa <scalbnf+0x62>
 800be52:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be56:	d302      	bcc.n	800be5e <scalbnf+0x16>
 800be58:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be5c:	4770      	bx	lr
 800be5e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800be62:	d123      	bne.n	800beac <scalbnf+0x64>
 800be64:	4b24      	ldr	r3, [pc, #144]	; (800bef8 <scalbnf+0xb0>)
 800be66:	eddf 7a25 	vldr	s15, [pc, #148]	; 800befc <scalbnf+0xb4>
 800be6a:	4298      	cmp	r0, r3
 800be6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be70:	db17      	blt.n	800bea2 <scalbnf+0x5a>
 800be72:	ee10 3a10 	vmov	r3, s0
 800be76:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800be7a:	3a19      	subs	r2, #25
 800be7c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800be80:	4288      	cmp	r0, r1
 800be82:	dd15      	ble.n	800beb0 <scalbnf+0x68>
 800be84:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bf00 <scalbnf+0xb8>
 800be88:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800bf04 <scalbnf+0xbc>
 800be8c:	ee10 3a10 	vmov	r3, s0
 800be90:	eeb0 7a67 	vmov.f32	s14, s15
 800be94:	2b00      	cmp	r3, #0
 800be96:	bfb8      	it	lt
 800be98:	eef0 7a66 	vmovlt.f32	s15, s13
 800be9c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bea0:	4770      	bx	lr
 800bea2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800bf08 <scalbnf+0xc0>
 800bea6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800beaa:	4770      	bx	lr
 800beac:	0dd2      	lsrs	r2, r2, #23
 800beae:	e7e5      	b.n	800be7c <scalbnf+0x34>
 800beb0:	4410      	add	r0, r2
 800beb2:	28fe      	cmp	r0, #254	; 0xfe
 800beb4:	dce6      	bgt.n	800be84 <scalbnf+0x3c>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	dd06      	ble.n	800bec8 <scalbnf+0x80>
 800beba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bebe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bec2:	ee00 3a10 	vmov	s0, r3
 800bec6:	4770      	bx	lr
 800bec8:	f110 0f16 	cmn.w	r0, #22
 800becc:	da09      	bge.n	800bee2 <scalbnf+0x9a>
 800bece:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800bf08 <scalbnf+0xc0>
 800bed2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800bf0c <scalbnf+0xc4>
 800bed6:	ee10 3a10 	vmov	r3, s0
 800beda:	eeb0 7a67 	vmov.f32	s14, s15
 800bede:	2b00      	cmp	r3, #0
 800bee0:	e7d9      	b.n	800be96 <scalbnf+0x4e>
 800bee2:	3019      	adds	r0, #25
 800bee4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bee8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800beec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800bf10 <scalbnf+0xc8>
 800bef0:	ee07 3a90 	vmov	s15, r3
 800bef4:	e7d7      	b.n	800bea6 <scalbnf+0x5e>
 800bef6:	bf00      	nop
 800bef8:	ffff3cb0 	.word	0xffff3cb0
 800befc:	4c000000 	.word	0x4c000000
 800bf00:	7149f2ca 	.word	0x7149f2ca
 800bf04:	f149f2ca 	.word	0xf149f2ca
 800bf08:	0da24260 	.word	0x0da24260
 800bf0c:	8da24260 	.word	0x8da24260
 800bf10:	33000000 	.word	0x33000000

0800bf14 <with_errnof>:
 800bf14:	b513      	push	{r0, r1, r4, lr}
 800bf16:	4604      	mov	r4, r0
 800bf18:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bf1c:	f7ff fc26 	bl	800b76c <__errno>
 800bf20:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bf24:	6004      	str	r4, [r0, #0]
 800bf26:	b002      	add	sp, #8
 800bf28:	bd10      	pop	{r4, pc}

0800bf2a <xflowf>:
 800bf2a:	b130      	cbz	r0, 800bf3a <xflowf+0x10>
 800bf2c:	eef1 7a40 	vneg.f32	s15, s0
 800bf30:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf34:	2022      	movs	r0, #34	; 0x22
 800bf36:	f7ff bfed 	b.w	800bf14 <with_errnof>
 800bf3a:	eef0 7a40 	vmov.f32	s15, s0
 800bf3e:	e7f7      	b.n	800bf30 <xflowf+0x6>

0800bf40 <__math_uflowf>:
 800bf40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf48 <__math_uflowf+0x8>
 800bf44:	f7ff bff1 	b.w	800bf2a <xflowf>
 800bf48:	10000000 	.word	0x10000000

0800bf4c <__math_oflowf>:
 800bf4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf54 <__math_oflowf+0x8>
 800bf50:	f7ff bfeb 	b.w	800bf2a <xflowf>
 800bf54:	70000000 	.word	0x70000000

0800bf58 <__ieee754_sqrtf>:
 800bf58:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bf5c:	4770      	bx	lr
	...

0800bf60 <_init>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr

0800bf6c <_fini>:
 800bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6e:	bf00      	nop
 800bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf72:	bc08      	pop	{r3}
 800bf74:	469e      	mov	lr, r3
 800bf76:	4770      	bx	lr
