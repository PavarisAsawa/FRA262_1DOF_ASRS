
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004890  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab0  08004ab0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000010  08004ac8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004ac8  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129df  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240e  00000000  00000000  00032a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00034e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c80  00000000  00000000  00035e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025876  00000000  00000000  00036ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128b7  00000000  00000000  0005c35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7cae  00000000  00000000  0006ec15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004554  00000000  00000000  001668c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0016ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a50 	.word	0x08004a50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004a50 	.word	0x08004a50

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	; 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	bf28      	it	cs
 8000b10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b14:	d2ed      	bcs.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b970 	b.w	8000f68 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9e08      	ldr	r6, [sp, #32]
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4604      	mov	r4, r0
 8000caa:	460f      	mov	r7, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14a      	bne.n	8000d46 <__udivmoddi4+0xa6>
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	4694      	mov	ip, r2
 8000cb4:	d965      	bls.n	8000d82 <__udivmoddi4+0xe2>
 8000cb6:	fab2 f382 	clz	r3, r2
 8000cba:	b143      	cbz	r3, 8000cce <__udivmoddi4+0x2e>
 8000cbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc0:	f1c3 0220 	rsb	r2, r3, #32
 8000cc4:	409f      	lsls	r7, r3
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	4317      	orrs	r7, r2
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd2:	fa1f f58c 	uxth.w	r5, ip
 8000cd6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cda:	0c22      	lsrs	r2, r4, #16
 8000cdc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	fb01 f005 	mul.w	r0, r1, r5
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x62>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf4:	f080 811c 	bcs.w	8000f30 <__udivmoddi4+0x290>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f240 8119 	bls.w	8000f30 <__udivmoddi4+0x290>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4462      	add	r2, ip
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	b2a4      	uxth	r4, r4
 8000d06:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d12:	fb00 f505 	mul.w	r5, r0, r5
 8000d16:	42a5      	cmp	r5, r4
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x90>
 8000d1a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d22:	f080 8107 	bcs.w	8000f34 <__udivmoddi4+0x294>
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	f240 8104 	bls.w	8000f34 <__udivmoddi4+0x294>
 8000d2c:	4464      	add	r4, ip
 8000d2e:	3802      	subs	r0, #2
 8000d30:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	2100      	movs	r1, #0
 8000d38:	b11e      	cbz	r6, 8000d42 <__udivmoddi4+0xa2>
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0xbc>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	f000 80ed 	beq.w	8000f2a <__udivmoddi4+0x28a>
 8000d50:	2100      	movs	r1, #0
 8000d52:	e9c6 0500 	strd	r0, r5, [r6]
 8000d56:	4608      	mov	r0, r1
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	fab3 f183 	clz	r1, r3
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d149      	bne.n	8000df8 <__udivmoddi4+0x158>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d302      	bcc.n	8000d6e <__udivmoddi4+0xce>
 8000d68:	4282      	cmp	r2, r0
 8000d6a:	f200 80f8 	bhi.w	8000f5e <__udivmoddi4+0x2be>
 8000d6e:	1a84      	subs	r4, r0, r2
 8000d70:	eb65 0203 	sbc.w	r2, r5, r3
 8000d74:	2001      	movs	r0, #1
 8000d76:	4617      	mov	r7, r2
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d0e2      	beq.n	8000d42 <__udivmoddi4+0xa2>
 8000d7c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d80:	e7df      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000d82:	b902      	cbnz	r2, 8000d86 <__udivmoddi4+0xe6>
 8000d84:	deff      	udf	#255	; 0xff
 8000d86:	fab2 f382 	clz	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8090 	bne.w	8000eb0 <__udivmoddi4+0x210>
 8000d90:	1a8a      	subs	r2, r1, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da0:	fb07 2015 	mls	r0, r7, r5, r2
 8000da4:	0c22      	lsrs	r2, r4, #16
 8000da6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000daa:	fb0e f005 	mul.w	r0, lr, r5
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x124>
 8000db2:	eb1c 0202 	adds.w	r2, ip, r2
 8000db6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x122>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2b8>
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	1a12      	subs	r2, r2, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x14e>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x14c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2c2>
 8000dec:	4610      	mov	r0, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000df6:	e79f      	b.n	8000d38 <__udivmoddi4+0x98>
 8000df8:	f1c1 0720 	rsb	r7, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e0e:	40fd      	lsrs	r5, r7
 8000e10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e14:	4323      	orrs	r3, r4
 8000e16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e28:	fb08 f50e 	mul.w	r5, r8, lr
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	fa00 f001 	lsl.w	r0, r0, r1
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b0>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2b4>
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2b4>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4464      	add	r4, ip
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	b29d      	uxth	r5, r3
 8000e54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e58:	fb09 4413 	mls	r4, r9, r3, r4
 8000e5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e60:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1da>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2ac>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2ac>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4464      	add	r4, ip
 8000e7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e7e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46ae      	mov	lr, r5
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x29c>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x298>
 8000e90:	b156      	cbz	r6, 8000ea8 <__udivmoddi4+0x208>
 8000e92:	ebb0 0208 	subs.w	r2, r0, r8
 8000e96:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9e:	40ca      	lsrs	r2, r1
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	4317      	orrs	r7, r2
 8000ea4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	f1c3 0120 	rsb	r1, r3, #32
 8000eb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ebc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec0:	409d      	lsls	r5, r3
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed4:	0c11      	lsrs	r1, r2, #16
 8000ed6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eda:	fb00 f50e 	mul.w	r5, r0, lr
 8000ede:	428d      	cmp	r5, r1
 8000ee0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x258>
 8000ee6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef0:	428d      	cmp	r5, r1
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	1b49      	subs	r1, r1, r5
 8000efa:	b292      	uxth	r2, r2
 8000efc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f00:	fb07 1115 	mls	r1, r7, r5, r1
 8000f04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f08:	fb05 f10e 	mul.w	r1, r5, lr
 8000f0c:	4291      	cmp	r1, r2
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x282>
 8000f10:	eb1c 0202 	adds.w	r2, ip, r2
 8000f14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1a:	4291      	cmp	r1, r2
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1e:	3d02      	subs	r5, #2
 8000f20:	4462      	add	r2, ip
 8000f22:	1a52      	subs	r2, r2, r1
 8000f24:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0xfc>
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000f30:	4639      	mov	r1, r7
 8000f32:	e6e6      	b.n	8000d02 <__udivmoddi4+0x62>
 8000f34:	4610      	mov	r0, r2
 8000f36:	e6fb      	b.n	8000d30 <__udivmoddi4+0x90>
 8000f38:	4548      	cmp	r0, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f0>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f44:	3b01      	subs	r3, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f0>
 8000f48:	4645      	mov	r5, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x282>
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1da>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x258>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b0>
 8000f58:	3d02      	subs	r5, #2
 8000f5a:	4462      	add	r2, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x124>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e70a      	b.n	8000d78 <__udivmoddi4+0xd8>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x14e>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <QEIEncoder_Update>:

extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm
void QEIEncoder_Update(TIM_HandleTypeDef* Encoder_tim, QEIStructureTypeDef* QEIdata, uint64_t current_time)
{
 8000f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f74:	b08e      	sub	sp, #56	; 0x38
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6278      	str	r0, [r7, #36]	; 0x24
 8000f7a:	6239      	str	r1, [r7, #32]
 8000f7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8000f80:	6a39      	ldr	r1, [r7, #32]
 8000f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f86:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(Encoder_tim);	// index[0] = new Position
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	2200      	movs	r2, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	617a      	str	r2, [r7, #20]
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f9c:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fac:	1a84      	subs	r4, r0, r2
 8000fae:	eb61 0503 	sbc.w	r5, r1, r3
 8000fb2:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fc2:	ebb0 0a02 	subs.w	sl, r0, r2
 8000fc6:	eb61 0b03 	sbc.w	fp, r1, r3
 8000fca:	4650      	mov	r0, sl
 8000fcc:	4659      	mov	r1, fp
 8000fce:	f7ff faa9 	bl	8000524 <__aeabi_ul2d>
 8000fd2:	a35b      	add	r3, pc, #364	; (adr r3, 8001140 <QEIEncoder_Update+0x1d0>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fada 	bl	8000590 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fce6 	bl	80009b4 <__aeabi_d2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 8000fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ff0:	494f      	ldr	r1, [pc, #316]	; (8001130 <QEIEncoder_Update+0x1c0>)
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	f173 0300 	sbcs.w	r3, r3, #0
 8000ff8:	db08      	blt.n	800100c <QEIEncoder_Update+0x9c>
 8000ffa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ffe:	1e59      	subs	r1, r3, #1
 8001000:	60f9      	str	r1, [r7, #12]
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001008:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 800100c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001010:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001014:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001018:	da08      	bge.n	800102c <QEIEncoder_Update+0xbc>
 800101a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800101e:	1c59      	adds	r1, r3, #1
 8001020:	6079      	str	r1, [r7, #4]
 8001022:	603a      	str	r2, [r7, #0]
 8001024:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001028:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 800102c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001030:	4622      	mov	r2, r4
 8001032:	462b      	mov	r3, r5
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	0119      	lsls	r1, r3, #4
 800103e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001042:	0110      	lsls	r0, r2, #4
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ebb2 0804 	subs.w	r8, r2, r4
 800104c:	eb63 0905 	sbc.w	r9, r3, r5
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800105c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001060:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001064:	4690      	mov	r8, r2
 8001066:	4699      	mov	r9, r3
 8001068:	4642      	mov	r2, r8
 800106a:	464b      	mov	r3, r9
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fdc0 	bl	8000bf4 <__aeabi_l2f>
 8001074:	ee06 0a90 	vmov	s13, r0
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <QEIEncoder_Update+0x1c4>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800109c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80010a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001138 <QEIEncoder_Update+0x1c8>
 80010a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa12 	bl	80004e0 <__aeabi_f2d>
 80010bc:	4604      	mov	r4, r0
 80010be:	460d      	mov	r5, r1
 80010c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80010c4:	f7ff fa36 	bl	8000534 <__aeabi_l2d>
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <QEIEncoder_Update+0x1cc>)
 80010ce:	f7ff fa5f 	bl	8000590 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4690      	mov	r8, r2
 80010d8:	4699      	mov	r9, r3
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <QEIEncoder_Update+0x1c4>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f9ec 	bl	80004bc <__aeabi_i2d>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4640      	mov	r0, r8
 80010ea:	4649      	mov	r1, r9
 80010ec:	f7ff fb7a 	bl	80007e4 <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff f894 	bl	8000224 <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc56 	bl	80009b4 <__aeabi_d2f>
 8001108:	4602      	mov	r2, r0
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1] = QEIdata->TimeStamp[0];
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001114:	6a39      	ldr	r1, [r7, #32]
 8001116:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1] = QEIdata->Position[0];
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	6a39      	ldr	r1, [r7, #32]
 8001122:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	; 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001130:	80000001 	.word	0x80000001
 8001134:	20000000 	.word	0x20000000
 8001138:	42700000 	.word	0x42700000
 800113c:	40300000 	.word	0x40300000
 8001140:	a0b5ed8d 	.word	0xa0b5ed8d
 8001144:	3eb0c6f7 	.word	0x3eb0c6f7

08001148 <QEIEncoder_SetHome>:

void QEIEncoder_SetHome(TIM_HandleTypeDef* Encoder_tim, QEIStructureTypeDef* QEIdata)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	QEIdata->LinearPosition = 0;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fb8f 	bl	800188e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f820 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f000 f956 	bl	8001424 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001178:	f000 f866 	bl	8001248 <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 800117c:	f000 f8fc 	bl	8001378 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001180:	f000 f8ac 	bl	80012dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <main+0x40>)
 8001186:	f001 ff3d 	bl	8003004 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 800118a:	213c      	movs	r1, #60	; 0x3c
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <main+0x44>)
 800118e:	f002 f857 	bl	8003240 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = __HAL_TIM_GET_COUNTER(&htim5);
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <main+0x44>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	2200      	movs	r2, #0
 800119a:	461c      	mov	r4, r3
 800119c:	4615      	mov	r5, r2
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <main+0x48>)
 80011a0:	e9c3 4500 	strd	r4, r5, [r3]
 80011a4:	e7f5      	b.n	8001192 <main+0x2a>
 80011a6:	bf00      	nop
 80011a8:	200000c0 	.word	0x200000c0
 80011ac:	2000010c 	.word	0x2000010c
 80011b0:	20000190 	.word	0x20000190

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	; 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	2238      	movs	r2, #56	; 0x38
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fc18 	bl	80049f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 fe8c 	bl	8001ef4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	2303      	movs	r3, #3
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80011ee:	2306      	movs	r3, #6
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011f2:	2355      	movs	r3, #85	; 0x55
 80011f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4618      	mov	r0, r3
 8001208:	f000 ff28 	bl	800205c <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001212:	f000 f9cb 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2303      	movs	r3, #3
 800121c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2104      	movs	r1, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fa26 	bl	8002680 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800123a:	f000 f9b7 	bl	80015ac <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	; 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <MX_LPUART1_UART_Init+0x90>)
 8001250:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800128c:	f002 fd46 	bl	8003d1c <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 f989 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800129e:	f003 fae1 	bl	8004864 <HAL_UARTEx_SetTxFifoThreshold>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012a8:	f000 f980 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 80012b0:	f003 fb16 	bl	80048e0 <HAL_UARTEx_SetRxFifoThreshold>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012ba:	f000 f977 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	f003 fa97 	bl	80047f2 <HAL_UARTEx_DisableFifoMode>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012ca:	f000 f96f 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000002c 	.word	0x2000002c
 80012d8:	40008000 	.word	0x40008000

080012dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM2_Init+0x98>)
 80012fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM2_Init+0x98>)
 8001304:	22a9      	movs	r2, #169	; 0xa9
 8001306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM2_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM2_Init+0x98>)
 8001310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001314:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_TIM2_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_TIM2_Init+0x98>)
 8001324:	f001 fe16 	bl	8002f54 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800132e:	f000 f93d 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_TIM2_Init+0x98>)
 8001340:	f002 f95c 	bl	80035fc <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800134a:	f000 f92f 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM2_Init+0x98>)
 800135c:	f002 fc02 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001366:	f000 f921 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000c0 	.word	0x200000c0

08001378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fb36 	bl	80049f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_TIM5_Init+0xa4>)
 8001398:	4a21      	ldr	r2, [pc, #132]	; (8001420 <MX_TIM5_Init+0xa8>)
 800139a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_TIM5_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_TIM5_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_TIM5_Init+0xa4>)
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_TIM5_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_TIM5_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013bc:	2303      	movs	r3, #3
 80013be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_TIM5_Init+0xa4>)
 80013e8:	f001 fe84 	bl	80030f4 <HAL_TIM_Encoder_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80013f2:	f000 f8db 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_TIM5_Init+0xa4>)
 8001404:	f002 fbae 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800140e:	f000 f8cd 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000010c 	.word	0x2000010c
 8001420:	40000c00 	.word	0x40000c00

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <MX_GPIO_Init+0xd4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <MX_GPIO_Init+0xd4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2120      	movs	r1, #32
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f000 fcf7 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480f      	ldr	r0, [pc, #60]	; (80014fc <MX_GPIO_Init+0xd8>)
 80014be:	f000 fb67 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c2:	2320      	movs	r3, #32
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f000 fb58 	bl	8001b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2028      	movs	r0, #40	; 0x28
 80014e6:	f000 fb1e 	bl	8001b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ea:	2028      	movs	r0, #40	; 0x28
 80014ec:	f000 fb35 	bl	8001b5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000800 	.word	0x48000800

08001500 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d111      	bne.n	8001534 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		_micros += 1000;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 800151a:	f143 0500 	adc.w	r5, r3, #0
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001520:	e9c3 4500 	strd	r4, r5, [r3]
		QEIEncoder_Update(&htim5,&QEI,micros());
 8001524:	f000 f812 	bl	800154c <micros>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4905      	ldr	r1, [pc, #20]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001530:	f7ff fd1e 	bl	8000f70 <QEIEncoder_Update>
	}
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	200000c0 	.word	0x200000c0
 8001540:	20000158 	.word	0x20000158
 8001544:	20000160 	.word	0x20000160
 8001548:	2000010c 	.word	0x2000010c

0800154c <micros>:

uint64_t micros()
{
 800154c:	b4b0      	push	{r4, r5, r7}
 800154e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <micros+0x2c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	2200      	movs	r2, #0
 8001558:	4618      	mov	r0, r3
 800155a:	4611      	mov	r1, r2
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <micros+0x30>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	1884      	adds	r4, r0, r2
 8001564:	eb41 0503 	adc.w	r5, r1, r3
 8001568:	4622      	mov	r2, r4
 800156a:	462b      	mov	r3, r5
}
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bcb0      	pop	{r4, r5, r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000010c 	.word	0x2000010c
 800157c:	20000158 	.word	0x20000158

08001580 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001590:	d103      	bne.n	800159a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		QEIEncoder_SetHome(&htim5, &QEI);
 8001592:	4904      	ldr	r1, [pc, #16]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001596:	f7ff fdd7 	bl	8001148 <QEIEncoder_SetHome>
	}
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000160 	.word	0x20000160
 80015a8:	2000010c 	.word	0x2000010c

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_MspInit+0x44>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x44>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ee:	f000 fd25 	bl	800203c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09e      	sub	sp, #120	; 0x78
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2254      	movs	r2, #84	; 0x54
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f003 f9e9 	bl	80049f8 <memset>
  if(huart->Instance==LPUART1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_UART_MspInit+0xa8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d136      	bne.n	800169e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001630:	2320      	movs	r3, #32
 8001632:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4618      	mov	r0, r3
 800163e:	f001 fa3b 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001648:	f7ff ffb0 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_UART_MspInit+0xac>)
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xac>)
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_UART_MspInit+0xac>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_UART_MspInit+0xac>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800167c:	230c      	movs	r3, #12
 800167e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800168c:	230c      	movs	r3, #12
 800168e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f000 fa79 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3778      	adds	r7, #120	; 0x78
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40008000 	.word	0x40008000
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d113      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201c      	movs	r0, #28
 80016e0:	f000 fa21 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e4:	201c      	movs	r0, #28
 80016e6:	f000 fa38 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d130      	bne.n	800177c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_TIM_Encoder_MspInit+0x90>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <HAL_TIM_Encoder_MspInit+0x90>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_TIM_Encoder_MspInit+0x90>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_TIM_Encoder_MspInit+0x90>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_TIM_Encoder_MspInit+0x90>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_TIM_Encoder_MspInit+0x90>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800174a:	2303      	movs	r3, #3
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800175a:	2302      	movs	r3, #2
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f000 fa12 	bl	8001b90 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2032      	movs	r0, #50	; 0x32
 8001772:	f000 f9d8 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001776:	2032      	movs	r0, #50	; 0x32
 8001778:	f000 f9ef 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40000c00 	.word	0x40000c00
 8001788:	40021000 	.word	0x40021000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f8ac 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM2_IRQHandler+0x10>)
 80017e6:	f001 fdb9 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000c0 	.word	0x200000c0

080017f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017fc:	f000 fb62 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM5_IRQHandler+0x10>)
 800180a:	f001 fda7 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000010c 	.word	0x2000010c

08001818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800183e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f003 f8cd 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7ff fc7b 	bl	8001168 <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   r0, =_estack
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001880:	08004ab8 	.word	0x08004ab8
  ldr r2, =_sbss
 8001884:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001888:	2000019c 	.word	0x2000019c

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>

0800188e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f000 f939 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 f80e 	bl	80018c0 <HAL_InitTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e001      	b.n	80018b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b0:	f7ff fe82 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b4:	79fb      	ldrb	r3, [r7, #7]

}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_InitTick+0x68>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d022      	beq.n	800191a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_InitTick+0x6c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_InitTick+0x68>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f944 	bl	8001b76 <HAL_SYSTICK_Config>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	d809      	bhi.n	800190e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fa:	2200      	movs	r2, #0
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001902:	f000 f910 	bl	8001b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_InitTick+0x70>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e007      	b.n	800191e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e004      	b.n	800191e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e001      	b.n	800191e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000000c 	.word	0x2000000c
 800192c:	20000004 	.word	0x20000004
 8001930:	20000008 	.word	0x20000008

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x1c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x20>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_IncTick+0x1c>)
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	20000198 	.word	0x20000198
 8001954:	2000000c 	.word	0x2000000c

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000198 	.word	0x20000198

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff40 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff90 	bl	8001a64 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5f 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff33 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa4 	bl	8001acc <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b9e:	e15a      	b.n	8001e56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 814c 	beq.w	8001e50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d123      	bne.n	8001cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	6939      	ldr	r1, [r7, #16]
 8001cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0203 	and.w	r2, r3, #3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80a6 	beq.w	8001e50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d04:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <HAL_GPIO_Init+0x2e4>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <HAL_GPIO_Init+0x2e4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_GPIO_Init+0x2e4>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1c:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d46:	d01f      	beq.n	8001d88 <HAL_GPIO_Init+0x1f8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d019      	beq.n	8001d84 <HAL_GPIO_Init+0x1f4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4b      	ldr	r2, [pc, #300]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1f0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_GPIO_Init+0x2f4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1ec>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_GPIO_Init+0x2f8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1e8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1e4>
 8001d70:	2305      	movs	r3, #5
 8001d72:	e00a      	b.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d74:	2306      	movs	r3, #6
 8001d76:	e008      	b.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e006      	b.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e004      	b.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9a:	4937      	ldr	r1, [pc, #220]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dcc:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f ae9d 	bne.w	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	48000800 	.word	0x48000800
 8001e84:	48000c00 	.word	0x48000c00
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	48001400 	.word	0x48001400
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fb4c 	bl	8001580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d141      	bne.n	8001f86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f02:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d131      	bne.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f10:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f16:	4a46      	ldr	r2, [pc, #280]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f28:	4a41      	ldr	r2, [pc, #260]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f30:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2232      	movs	r2, #50	; 0x32
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	4a3f      	ldr	r2, [pc, #252]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f46:	e002      	b.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	d102      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f2      	bne.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f62:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d158      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e057      	b.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f7a:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f84:	e04d      	b.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8c:	d141      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8e:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d131      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2232      	movs	r2, #50	; 0x32
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	0c9b      	lsrs	r3, r3, #18
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd2:	e002      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	d102      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f2      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d112      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e011      	b.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002010:	e007      	b.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002020:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40007000 	.word	0x40007000
 8002034:	20000004 	.word	0x20000004
 8002038:	431bde83 	.word	0x431bde83

0800203c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204a:	6093      	str	r3, [r2, #8]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40007000 	.word	0x40007000

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e2fe      	b.n	800266c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d075      	beq.n	8002166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002084:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d102      	bne.n	800209a <HAL_RCC_OscConfig+0x3e>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_OscConfig+0x44>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d10b      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d05b      	beq.n	8002164 <HAL_RCC_OscConfig+0x108>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d157      	bne.n	8002164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e2d9      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d106      	bne.n	80020d0 <HAL_RCC_OscConfig+0x74>
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a84      	ldr	r2, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e01d      	b.n	800210c <HAL_RCC_OscConfig+0xb0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x98>
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7b      	ldr	r2, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xb0>
 80020f4:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a77      	ldr	r2, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b75      	ldr	r3, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a74      	ldr	r2, [pc, #464]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fc20 	bl	8001958 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fc1c 	bl	8001958 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e29e      	b.n	800266c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0xc0>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fc0c 	bl	8001958 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fc08 	bl	8001958 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e28a      	b.n	800266c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0xe8>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d075      	beq.n	800225e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002172:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0x136>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d002      	beq.n	8002198 <HAL_RCC_OscConfig+0x13c>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11f      	bne.n	80021d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x154>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e25d      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	4946      	ldr	r1, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021c4:	4b45      	ldr	r3, [pc, #276]	; (80022dc <HAL_RCC_OscConfig+0x280>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fb79 	bl	80018c0 <HAL_InitTick>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d043      	beq.n	800225c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e249      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d023      	beq.n	8002228 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a3c      	ldr	r2, [pc, #240]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff fbb4 	bl	8001958 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff fbb0 	bl	8001958 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e232      	b.n	800266c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	492d      	ldr	r1, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e01a      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800222e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff fb90 	bl	8001958 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7ff fb8c 	bl	8001958 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e20e      	b.n	800266c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1e0>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d041      	beq.n	80022ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01c      	beq.n	80022ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff fb69 	bl	8001958 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228a:	f7ff fb65 	bl	8001958 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1e7      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ef      	beq.n	800228a <HAL_RCC_OscConfig+0x22e>
 80022aa:	e020      	b.n	80022ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff fb4c 	bl	8001958 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022c2:	e00d      	b.n	80022e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fb48 	bl	8001958 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d906      	bls.n	80022e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1ca      	b.n	800266c <HAL_RCC_OscConfig+0x610>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e0:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ea      	bne.n	80022c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_OscConfig+0x2b4>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x2b6>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a7e      	ldr	r2, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002332:	4b79      	ldr	r3, [pc, #484]	; (8002518 <HAL_RCC_OscConfig+0x4bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x4bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x4bc>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7ff fb05 	bl	8001958 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7ff fb01 	bl	8001958 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e183      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x4bc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d108      	bne.n	800238a <HAL_RCC_OscConfig+0x32e>
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002388:	e024      	b.n	80023d4 <HAL_RCC_OscConfig+0x378>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d110      	bne.n	80023b4 <HAL_RCC_OscConfig+0x358>
 8002392:	4b60      	ldr	r3, [pc, #384]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	4a5e      	ldr	r2, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b2:	e00f      	b.n	80023d4 <HAL_RCC_OscConfig+0x378>
 80023b4:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7ff fabc 	bl	8001958 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7ff fab8 	bl	8001958 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e138      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ed      	beq.n	80023e4 <HAL_RCC_OscConfig+0x388>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7ff faa5 	bl	8001958 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff faa1 	bl	8001958 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e121      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ed      	bne.n	8002412 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a34      	ldr	r2, [pc, #208]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03c      	beq.n	80024ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002462:	4a2c      	ldr	r2, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7ff fa74 	bl	8001958 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002474:	f7ff fa70 	bl	8001958 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0f2      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCC_OscConfig+0x418>
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 8002498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7ff fa57 	bl	8001958 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ae:	f7ff fa53 	bl	8001958 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0d5      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ef      	bne.n	80024ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80c9 	beq.w	800266a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	f000 8083 	beq.w	80025ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d15e      	bne.n	80025ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a08      	ldr	r2, [pc, #32]	; (8002514 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff fa2d 	bl	8001958 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002500:	e00c      	b.n	800251c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff fa29 	bl	8001958 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d905      	bls.n	800251c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0ab      	b.n	800266c <HAL_RCC_OscConfig+0x610>
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251c:	4b55      	ldr	r3, [pc, #340]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ec      	bne.n	8002502 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	4b52      	ldr	r3, [pc, #328]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	4b52      	ldr	r3, [pc, #328]	; (8002678 <HAL_RCC_OscConfig+0x61c>)
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6a11      	ldr	r1, [r2, #32]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002538:	3a01      	subs	r2, #1
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002542:	0212      	lsls	r2, r2, #8
 8002544:	4311      	orrs	r1, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800254a:	0852      	lsrs	r2, r2, #1
 800254c:	3a01      	subs	r2, #1
 800254e:	0552      	lsls	r2, r2, #21
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3a01      	subs	r2, #1
 800255a:	0652      	lsls	r2, r2, #25
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002562:	06d2      	lsls	r2, r2, #27
 8002564:	430a      	orrs	r2, r1
 8002566:	4943      	ldr	r1, [pc, #268]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256c:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a40      	ldr	r2, [pc, #256]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002578:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff f9e8 	bl	8001958 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff f9e4 	bl	8001958 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e066      	b.n	800266c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x530>
 80025aa:	e05e      	b.n	800266a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff f9ce 	bl	8001958 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff f9ca 	bl	8001958 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04c      	b.n	800266c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	4924      	ldr	r1, [pc, #144]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_OscConfig+0x620>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
 80025ea:	e03e      	b.n	800266a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e039      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_OscConfig+0x618>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d12c      	bne.n	8002666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	3b01      	subs	r3, #1
 8002618:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d123      	bne.n	8002666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11b      	bne.n	8002666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d113      	bne.n	8002666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d109      	bne.n	8002666 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	019f800c 	.word	0x019f800c
 800267c:	feeefffc 	.word	0xfeeefffc

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e11e      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b8e      	ldr	r3, [pc, #568]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 020f 	bic.w	r2, r3, #15
 80026ae:	498c      	ldr	r1, [pc, #560]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b8a      	ldr	r3, [pc, #552]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e106      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d073      	beq.n	80027bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d129      	bne.n	8002730 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026dc:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0f4      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026ec:	f000 f99e 	bl	8002a2c <RCC_GetSysClockFreqFromPLLSource>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4a7c      	ldr	r2, [pc, #496]	; (80028e8 <HAL_RCC_ClockConfig+0x268>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d93f      	bls.n	800277a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026fa:	4b7a      	ldr	r3, [pc, #488]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800270e:	2b00      	cmp	r3, #0
 8002710:	d033      	beq.n	800277a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12f      	bne.n	800277a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800271a:	4b72      	ldr	r3, [pc, #456]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002722:	4a70      	ldr	r2, [pc, #448]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e024      	b.n	800277a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d107      	bne.n	8002748 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002738:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0c6      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002748:	4b66      	ldr	r3, [pc, #408]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0be      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002758:	f000 f8ce 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 800275c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <HAL_RCC_ClockConfig+0x268>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d909      	bls.n	800277a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276e:	4a5d      	ldr	r2, [pc, #372]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002774:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b5a      	ldr	r3, [pc, #360]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4957      	ldr	r1, [pc, #348]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278c:	f7ff f8e4 	bl	8001958 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7ff f8e0 	bl	8001958 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e095      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80027da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027f4:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
 800280e:	e008      	b.n	8002822 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d105      	bne.n	8002822 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002816:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4a32      	ldr	r2, [pc, #200]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800281c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002820:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002822:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d21d      	bcs.n	800286c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 020f 	bic.w	r2, r3, #15
 8002838:	4929      	ldr	r1, [pc, #164]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002840:	f7ff f88a 	bl	8001958 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7ff f886 	bl	8001958 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e03b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d1ed      	bne.n	8002848 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4917      	ldr	r1, [pc, #92]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	490f      	ldr	r1, [pc, #60]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028aa:	f000 f825 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_RCC_ClockConfig+0x264>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	490c      	ldr	r1, [pc, #48]	; (80028ec <HAL_RCC_ClockConfig+0x26c>)
 80028bc:	5ccb      	ldrb	r3, [r1, r3]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x270>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x274>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fff6 	bl	80018c0 <HAL_InitTick>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	04c4b400 	.word	0x04c4b400
 80028ec:	08004a68 	.word	0x08004a68
 80028f0:	20000004 	.word	0x20000004
 80028f4:	20000008 	.word	0x20000008

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028fe:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d102      	bne.n	8002910 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	e047      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d102      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	e03e      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d136      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3301      	adds	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	4a16      	ldr	r2, [pc, #88]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002956:	68d2      	ldr	r2, [r2, #12]
 8002958:	0a12      	lsrs	r2, r2, #8
 800295a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
      break;
 8002964:	e00c      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	0a12      	lsrs	r2, r2, #8
 8002974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
      break;
 800297e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0e5b      	lsrs	r3, r3, #25
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	3301      	adds	r3, #1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	e001      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029a0:	693b      	ldr	r3, [r7, #16]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	016e3600 	.word	0x016e3600

080029bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4904      	ldr	r1, [pc, #16]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08004a78 	.word	0x08004a78

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a04:	f7ff ffda 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0adb      	lsrs	r3, r3, #11
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4904      	ldr	r1, [pc, #16]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08004a78 	.word	0x08004a78

08002a2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d10c      	bne.n	8002a6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a5a:	68d2      	ldr	r2, [r2, #12]
 8002a5c:	0a12      	lsrs	r2, r2, #8
 8002a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
    break;
 8002a68:	e00c      	b.n	8002a84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	0a12      	lsrs	r2, r2, #8
 8002a78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    break;
 8002a82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0e5b      	lsrs	r3, r3, #25
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a9e:	687b      	ldr	r3, [r7, #4]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	016e3600 	.word	0x016e3600
 8002ab4:	00f42400 	.word	0x00f42400

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8098 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6593      	str	r3, [r2, #88]	; 0x58
 8002af2:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b0e:	f7fe ff23 	bl	8001958 <HAL_GetTick>
 8002b12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b14:	e009      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe ff1f 	bl	8001958 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d902      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	74fb      	strb	r3, [r7, #19]
        break;
 8002b28:	e005      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b2a:	4b30      	ldr	r3, [pc, #192]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ef      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d159      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01e      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d019      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b84:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe fedf 	bl	8001958 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9c:	e00b      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fe fedb 	bl	8001958 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb4:	e006      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ec      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002be0:	e008      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	74bb      	strb	r3, [r7, #18]
 8002be6:	e005      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf4:	7c7b      	ldrb	r3, [r7, #17]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4ba7      	ldr	r3, [pc, #668]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	4aa6      	ldr	r2, [pc, #664]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c12:	4ba1      	ldr	r3, [pc, #644]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 0203 	bic.w	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	499d      	ldr	r1, [pc, #628]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c34:	4b98      	ldr	r3, [pc, #608]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 020c 	bic.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	4995      	ldr	r1, [pc, #596]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c56:	4b90      	ldr	r3, [pc, #576]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	498c      	ldr	r1, [pc, #560]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c78:	4b87      	ldr	r3, [pc, #540]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	4984      	ldr	r1, [pc, #528]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	497b      	ldr	r1, [pc, #492]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cbc:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	4973      	ldr	r1, [pc, #460]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cde:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	496a      	ldr	r1, [pc, #424]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d00:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4962      	ldr	r1, [pc, #392]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d22:	4b5d      	ldr	r3, [pc, #372]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	4959      	ldr	r1, [pc, #356]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d44:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	4951      	ldr	r1, [pc, #324]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d66:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4948      	ldr	r1, [pc, #288]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d88:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4940      	ldr	r1, [pc, #256]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dc0:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	4932      	ldr	r1, [pc, #200]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	4924      	ldr	r1, [pc, #144]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d019      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e86:	d109      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a02      	ldr	r2, [pc, #8]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e92:	60d3      	str	r3, [r2, #12]
 8002e94:	e002      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4926      	ldr	r1, [pc, #152]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	4918      	ldr	r1, [pc, #96]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d105      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	490a      	ldr	r1, [pc, #40]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f36:	d105      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f44:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e049      	b.n	8002ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe fb98 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f000 fc70 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e054      	b.n	80030c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d01d      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a21      	ldr	r2, [pc, #132]	; (80030dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_TIM_Base_Start_IT+0xe8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d115      	bne.n	80030b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_TIM_Base_Start_IT+0xec>)
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d015      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0xbe>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d011      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	e008      	b.n	80030c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40013400 	.word	0x40013400
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40015000 	.word	0x40015000
 80030f0:	00010007 	.word	0x00010007

080030f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e097      	b.n	8003238 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fe faeb 	bl	80016f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003138:	f023 0307 	bic.w	r3, r3, #7
 800313c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 fb95 	bl	8003878 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	4313      	orrs	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003194:	f023 030c 	bic.w	r3, r3, #12
 8003198:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	4313      	orrs	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	011a      	lsls	r2, r3, #4
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	031b      	lsls	r3, r3, #12
 80031c4:	4313      	orrs	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	4313      	orrs	r3, r2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003250:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003258:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003260:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003268:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d110      	bne.n	8003292 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003276:	7b7b      	ldrb	r3, [r7, #13]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e069      	b.n	8003354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	e031      	b.n	80032f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d110      	bne.n	80032ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800329e:	7b3b      	ldrb	r3, [r7, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d001      	beq.n	80032a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e055      	b.n	8003354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b8:	e01d      	b.n	80032f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d108      	bne.n	80032d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c0:	7bbb      	ldrb	r3, [r7, #14]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c6:	7b7b      	ldrb	r3, [r7, #13]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032cc:	7b3b      	ldrb	r3, [r7, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03e      	b.n	8003354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_TIM_Encoder_Start+0xc4>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d008      	beq.n	8003314 <HAL_TIM_Encoder_Start+0xd4>
 8003302:	e00f      	b.n	8003324 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fc03 	bl	8003b18 <TIM_CCxChannelCmd>
      break;
 8003312:	e016      	b.n	8003342 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	2104      	movs	r1, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fbfb 	bl	8003b18 <TIM_CCxChannelCmd>
      break;
 8003322:	e00e      	b.n	8003342 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fbf3 	bl	8003b18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	2104      	movs	r1, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fbec 	bl	8003b18 <TIM_CCxChannelCmd>
      break;
 8003340:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0202 	mvn.w	r2, #2
 8003390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa48 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa3a 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa4b 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa22 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa14 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa25 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0208 	mvn.w	r2, #8
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2204      	movs	r2, #4
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9fc 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9ee 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9ff 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d020      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0210 	mvn.w	r2, #16
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2208      	movs	r2, #8
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9d6 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9c8 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f9d9 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0201 	mvn.w	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe f81c 	bl	8001500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fbd7 	bl	8003ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00c      	beq.n	800351a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fbcf 	bl	8003cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00c      	beq.n	800353e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f993 	bl	8003864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f06f 0220 	mvn.w	r2, #32
 800355a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb97 	bl	8003c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00c      	beq.n	8003586 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fba3 	bl	8003ccc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80035a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb9b 	bl	8003ce0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fb93 	bl	8003cf4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fb8b 	bl	8003d08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIM_ConfigClockSource+0x1c>
 8003614:	2302      	movs	r3, #2
 8003616:	e0f6      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x20a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800363a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6f      	ldr	r2, [pc, #444]	; (8003810 <HAL_TIM_ConfigClockSource+0x214>)
 8003652:	4293      	cmp	r3, r2
 8003654:	f000 80c1 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003658:	4a6d      	ldr	r2, [pc, #436]	; (8003810 <HAL_TIM_ConfigClockSource+0x214>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f200 80c6 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 8003660:	4a6c      	ldr	r2, [pc, #432]	; (8003814 <HAL_TIM_ConfigClockSource+0x218>)
 8003662:	4293      	cmp	r3, r2
 8003664:	f000 80b9 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <HAL_TIM_ConfigClockSource+0x218>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f200 80be 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 8003670:	4a69      	ldr	r2, [pc, #420]	; (8003818 <HAL_TIM_ConfigClockSource+0x21c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	f000 80b1 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003678:	4a67      	ldr	r2, [pc, #412]	; (8003818 <HAL_TIM_ConfigClockSource+0x21c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	f200 80b6 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 8003680:	4a66      	ldr	r2, [pc, #408]	; (800381c <HAL_TIM_ConfigClockSource+0x220>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f000 80a9 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003688:	4a64      	ldr	r2, [pc, #400]	; (800381c <HAL_TIM_ConfigClockSource+0x220>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f200 80ae 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 8003690:	4a63      	ldr	r2, [pc, #396]	; (8003820 <HAL_TIM_ConfigClockSource+0x224>)
 8003692:	4293      	cmp	r3, r2
 8003694:	f000 80a1 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003698:	4a61      	ldr	r2, [pc, #388]	; (8003820 <HAL_TIM_ConfigClockSource+0x224>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f200 80a6 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036a0:	4a60      	ldr	r2, [pc, #384]	; (8003824 <HAL_TIM_ConfigClockSource+0x228>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f000 8099 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 80036a8:	4a5e      	ldr	r2, [pc, #376]	; (8003824 <HAL_TIM_ConfigClockSource+0x228>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f200 809e 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036b4:	f000 8091 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 80036b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036bc:	f200 8096 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c4:	f000 8089 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x1de>
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	f200 808e 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d03e      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x158>
 80036d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036da:	f200 8087 	bhi.w	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	f000 8086 	beq.w	80037f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	d87f      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d01a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x12a>
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d87b      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036f4:	2b60      	cmp	r3, #96	; 0x60
 80036f6:	d050      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x19e>
 80036f8:	2b60      	cmp	r3, #96	; 0x60
 80036fa:	d877      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 80036fc:	2b50      	cmp	r3, #80	; 0x50
 80036fe:	d03c      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x17e>
 8003700:	2b50      	cmp	r3, #80	; 0x50
 8003702:	d873      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d058      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x1be>
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d86f      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 800370c:	2b30      	cmp	r3, #48	; 0x30
 800370e:	d064      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003710:	2b30      	cmp	r3, #48	; 0x30
 8003712:	d86b      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 8003714:	2b20      	cmp	r3, #32
 8003716:	d060      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003718:	2b20      	cmp	r3, #32
 800371a:	d867      	bhi.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d05c      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003720:	2b10      	cmp	r3, #16
 8003722:	d05a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x1de>
 8003724:	e062      	b.n	80037ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003736:	f000 f9cf 	bl	8003ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	609a      	str	r2, [r3, #8]
      break;
 8003752:	e04f      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003764:	f000 f9b8 	bl	8003ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003776:	609a      	str	r2, [r3, #8]
      break;
 8003778:	e03c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	461a      	mov	r2, r3
 8003788:	f000 f92a 	bl	80039e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2150      	movs	r1, #80	; 0x50
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f983 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003798:	e02c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a6:	461a      	mov	r2, r3
 80037a8:	f000 f949 	bl	8003a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2160      	movs	r1, #96	; 0x60
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f973 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80037b8:	e01c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 f90a 	bl	80039e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2140      	movs	r1, #64	; 0x40
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f963 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80037d8:	e00c      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 f95a 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80037ea:	e003      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80037f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	00100070 	.word	0x00100070
 8003814:	00100060 	.word	0x00100060
 8003818:	00100050 	.word	0x00100050
 800381c:	00100040 	.word	0x00100040
 8003820:	00100030 	.word	0x00100030
 8003824:	00100020 	.word	0x00100020

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a4c      	ldr	r2, [pc, #304]	; (80039bc <TIM_Base_SetConfig+0x144>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d017      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d013      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a49      	ldr	r2, [pc, #292]	; (80039c0 <TIM_Base_SetConfig+0x148>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00f      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <TIM_Base_SetConfig+0x14c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a47      	ldr	r2, [pc, #284]	; (80039c8 <TIM_Base_SetConfig+0x150>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a46      	ldr	r2, [pc, #280]	; (80039cc <TIM_Base_SetConfig+0x154>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a39      	ldr	r2, [pc, #228]	; (80039bc <TIM_Base_SetConfig+0x144>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d023      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <TIM_Base_SetConfig+0x148>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <TIM_Base_SetConfig+0x14c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <TIM_Base_SetConfig+0x150>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <TIM_Base_SetConfig+0x154>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <TIM_Base_SetConfig+0x15c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <TIM_Base_SetConfig+0x160>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a31      	ldr	r2, [pc, #196]	; (80039dc <TIM_Base_SetConfig+0x164>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <TIM_Base_SetConfig+0x144>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <TIM_Base_SetConfig+0x154>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00f      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <TIM_Base_SetConfig+0x15c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <TIM_Base_SetConfig+0x160>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <TIM_Base_SetConfig+0x164>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  }
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40015000 	.word	0x40015000
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 030a 	bic.w	r3, r3, #10
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f023 0210 	bic.w	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e074      	b.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d009      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a33      	ldr	r2, [pc, #204]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a31      	ldr	r2, [pc, #196]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d01d      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10c      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40013400 	.word	0x40013400
 8003c7c:	40015000 	.word	0x40015000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40014000 	.word	0x40014000

08003c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e042      	b.n	8003db4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd fc5d 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2224      	movs	r2, #36	; 0x24
 8003d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb24 	bl	80043b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f825 	bl	8003dbc <UART_SetConfig>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e01b      	b.n	8003db4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fba3 	bl	80044f8 <UART_CheckIdleState>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc0:	b08c      	sub	sp, #48	; 0x30
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4baa      	ldr	r3, [pc, #680]	; (8004094 <UART_SetConfig+0x2d8>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a9f      	ldr	r2, [pc, #636]	; (8004098 <UART_SetConfig+0x2dc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e24:	4313      	orrs	r3, r2
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f023 010f 	bic.w	r1, r3, #15
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a90      	ldr	r2, [pc, #576]	; (800409c <UART_SetConfig+0x2e0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d125      	bne.n	8003eac <UART_SetConfig+0xf0>
 8003e60:	4b8f      	ldr	r3, [pc, #572]	; (80040a0 <UART_SetConfig+0x2e4>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d81a      	bhi.n	8003ea4 <UART_SetConfig+0xe8>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0xb8>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e95 	.word	0x08003e95
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e9d 	.word	0x08003e9d
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8a:	e116      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e92:	e112      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003e94:	2304      	movs	r3, #4
 8003e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9a:	e10e      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	e10a      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	e106      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a7c      	ldr	r2, [pc, #496]	; (80040a4 <UART_SetConfig+0x2e8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d138      	bne.n	8003f28 <UART_SetConfig+0x16c>
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	; (80040a0 <UART_SetConfig+0x2e4>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d82d      	bhi.n	8003f20 <UART_SetConfig+0x164>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x110>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003f21 	.word	0x08003f21
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f09 	.word	0x08003f09
 8003ef0:	08003f21 	.word	0x08003f21
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f06:	e0d8      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0e:	e0d4      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f16:	e0d0      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1e:	e0cc      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f26:	e0c8      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a5e      	ldr	r2, [pc, #376]	; (80040a8 <UART_SetConfig+0x2ec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d125      	bne.n	8003f7e <UART_SetConfig+0x1c2>
 8003f32:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <UART_SetConfig+0x2e4>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f3c:	2b30      	cmp	r3, #48	; 0x30
 8003f3e:	d016      	beq.n	8003f6e <UART_SetConfig+0x1b2>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d818      	bhi.n	8003f76 <UART_SetConfig+0x1ba>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d00a      	beq.n	8003f5e <UART_SetConfig+0x1a2>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d814      	bhi.n	8003f76 <UART_SetConfig+0x1ba>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <UART_SetConfig+0x19a>
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d008      	beq.n	8003f66 <UART_SetConfig+0x1aa>
 8003f54:	e00f      	b.n	8003f76 <UART_SetConfig+0x1ba>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f5c:	e0ad      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f64:	e0a9      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f66:	2304      	movs	r3, #4
 8003f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6c:	e0a5      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f74:	e0a1      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f76:	2310      	movs	r3, #16
 8003f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7c:	e09d      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <UART_SetConfig+0x2f0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d125      	bne.n	8003fd4 <UART_SetConfig+0x218>
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <UART_SetConfig+0x2e4>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f92:	2bc0      	cmp	r3, #192	; 0xc0
 8003f94:	d016      	beq.n	8003fc4 <UART_SetConfig+0x208>
 8003f96:	2bc0      	cmp	r3, #192	; 0xc0
 8003f98:	d818      	bhi.n	8003fcc <UART_SetConfig+0x210>
 8003f9a:	2b80      	cmp	r3, #128	; 0x80
 8003f9c:	d00a      	beq.n	8003fb4 <UART_SetConfig+0x1f8>
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d814      	bhi.n	8003fcc <UART_SetConfig+0x210>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <UART_SetConfig+0x1f0>
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d008      	beq.n	8003fbc <UART_SetConfig+0x200>
 8003faa:	e00f      	b.n	8003fcc <UART_SetConfig+0x210>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fb2:	e082      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fba:	e07e      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	e07a      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e076      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e072      	b.n	80040ba <UART_SetConfig+0x2fe>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a35      	ldr	r2, [pc, #212]	; (80040b0 <UART_SetConfig+0x2f4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d12a      	bne.n	8004034 <UART_SetConfig+0x278>
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <UART_SetConfig+0x2e4>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fec:	d01a      	beq.n	8004024 <UART_SetConfig+0x268>
 8003fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff2:	d81b      	bhi.n	800402c <UART_SetConfig+0x270>
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d00c      	beq.n	8004014 <UART_SetConfig+0x258>
 8003ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffe:	d815      	bhi.n	800402c <UART_SetConfig+0x270>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <UART_SetConfig+0x250>
 8004004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004008:	d008      	beq.n	800401c <UART_SetConfig+0x260>
 800400a:	e00f      	b.n	800402c <UART_SetConfig+0x270>
 800400c:	2300      	movs	r3, #0
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004012:	e052      	b.n	80040ba <UART_SetConfig+0x2fe>
 8004014:	2302      	movs	r3, #2
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401a:	e04e      	b.n	80040ba <UART_SetConfig+0x2fe>
 800401c:	2304      	movs	r3, #4
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004022:	e04a      	b.n	80040ba <UART_SetConfig+0x2fe>
 8004024:	2308      	movs	r3, #8
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800402a:	e046      	b.n	80040ba <UART_SetConfig+0x2fe>
 800402c:	2310      	movs	r3, #16
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004032:	e042      	b.n	80040ba <UART_SetConfig+0x2fe>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <UART_SetConfig+0x2dc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d13a      	bne.n	80040b4 <UART_SetConfig+0x2f8>
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <UART_SetConfig+0x2e4>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404c:	d01a      	beq.n	8004084 <UART_SetConfig+0x2c8>
 800404e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004052:	d81b      	bhi.n	800408c <UART_SetConfig+0x2d0>
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004058:	d00c      	beq.n	8004074 <UART_SetConfig+0x2b8>
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405e:	d815      	bhi.n	800408c <UART_SetConfig+0x2d0>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <UART_SetConfig+0x2b0>
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d008      	beq.n	800407c <UART_SetConfig+0x2c0>
 800406a:	e00f      	b.n	800408c <UART_SetConfig+0x2d0>
 800406c:	2300      	movs	r3, #0
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e022      	b.n	80040ba <UART_SetConfig+0x2fe>
 8004074:	2302      	movs	r3, #2
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407a:	e01e      	b.n	80040ba <UART_SetConfig+0x2fe>
 800407c:	2304      	movs	r3, #4
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004082:	e01a      	b.n	80040ba <UART_SetConfig+0x2fe>
 8004084:	2308      	movs	r3, #8
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408a:	e016      	b.n	80040ba <UART_SetConfig+0x2fe>
 800408c:	2310      	movs	r3, #16
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004092:	e012      	b.n	80040ba <UART_SetConfig+0x2fe>
 8004094:	cfff69f3 	.word	0xcfff69f3
 8004098:	40008000 	.word	0x40008000
 800409c:	40013800 	.word	0x40013800
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40004400 	.word	0x40004400
 80040a8:	40004800 	.word	0x40004800
 80040ac:	40004c00 	.word	0x40004c00
 80040b0:	40005000 	.word	0x40005000
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4aae      	ldr	r2, [pc, #696]	; (8004378 <UART_SetConfig+0x5bc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	f040 8097 	bne.w	80041f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d823      	bhi.n	8004116 <UART_SetConfig+0x35a>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <UART_SetConfig+0x318>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004117 	.word	0x08004117
 80040e4:	08004107 	.word	0x08004107
 80040e8:	08004117 	.word	0x08004117
 80040ec:	08004117 	.word	0x08004117
 80040f0:	08004117 	.word	0x08004117
 80040f4:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe fc6c 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040fe:	e010      	b.n	8004122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004100:	4b9e      	ldr	r3, [pc, #632]	; (800437c <UART_SetConfig+0x5c0>)
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004104:	e00d      	b.n	8004122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004106:	f7fe fbf7 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800410c:	e009      	b.n	8004122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004114:	e005      	b.n	8004122 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8130 	beq.w	800438a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	4a94      	ldr	r2, [pc, #592]	; (8004380 <UART_SetConfig+0x5c4>)
 8004130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004134:	461a      	mov	r2, r3
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	fbb3 f3f2 	udiv	r3, r3, r2
 800413c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	429a      	cmp	r2, r3
 800414c:	d305      	bcc.n	800415a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	429a      	cmp	r2, r3
 8004158:	d903      	bls.n	8004162 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004160:	e113      	b.n	800438a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2200      	movs	r2, #0
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	60fa      	str	r2, [r7, #12]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	4a84      	ldr	r2, [pc, #528]	; (8004380 <UART_SetConfig+0x5c4>)
 8004170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004174:	b29b      	uxth	r3, r3
 8004176:	2200      	movs	r2, #0
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004180:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004184:	f7fc fd74 	bl	8000c70 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	020b      	lsls	r3, r1, #8
 800419a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800419e:	0202      	lsls	r2, r0, #8
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	6849      	ldr	r1, [r1, #4]
 80041a4:	0849      	lsrs	r1, r1, #1
 80041a6:	2000      	movs	r0, #0
 80041a8:	460c      	mov	r4, r1
 80041aa:	4605      	mov	r5, r0
 80041ac:	eb12 0804 	adds.w	r8, r2, r4
 80041b0:	eb43 0905 	adc.w	r9, r3, r5
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	469a      	mov	sl, r3
 80041bc:	4693      	mov	fp, r2
 80041be:	4652      	mov	r2, sl
 80041c0:	465b      	mov	r3, fp
 80041c2:	4640      	mov	r0, r8
 80041c4:	4649      	mov	r1, r9
 80041c6:	f7fc fd53 	bl	8000c70 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4613      	mov	r3, r2
 80041d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d8:	d308      	bcc.n	80041ec <UART_SetConfig+0x430>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e0:	d204      	bcs.n	80041ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	e0ce      	b.n	800438a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041f2:	e0ca      	b.n	800438a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	d166      	bne.n	80042cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80041fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004202:	2b08      	cmp	r3, #8
 8004204:	d827      	bhi.n	8004256 <UART_SetConfig+0x49a>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0x450>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004231 	.word	0x08004231
 8004210:	08004239 	.word	0x08004239
 8004214:	08004241 	.word	0x08004241
 8004218:	08004257 	.word	0x08004257
 800421c:	08004247 	.word	0x08004247
 8004220:	08004257 	.word	0x08004257
 8004224:	08004257 	.word	0x08004257
 8004228:	08004257 	.word	0x08004257
 800422c:	0800424f 	.word	0x0800424f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004230:	f7fe fbd0 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004236:	e014      	b.n	8004262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004238:	f7fe fbe2 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800423e:	e010      	b.n	8004262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004240:	4b4e      	ldr	r3, [pc, #312]	; (800437c <UART_SetConfig+0x5c0>)
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004244:	e00d      	b.n	8004262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004246:	f7fe fb57 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 800424a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800424c:	e009      	b.n	8004262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004254:	e005      	b.n	8004262 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8090 	beq.w	800438a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	4a44      	ldr	r2, [pc, #272]	; (8004380 <UART_SetConfig+0x5c4>)
 8004270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004274:	461a      	mov	r2, r3
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	fbb3 f3f2 	udiv	r3, r3, r2
 800427c:	005a      	lsls	r2, r3, #1
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	441a      	add	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2b0f      	cmp	r3, #15
 8004294:	d916      	bls.n	80042c4 <UART_SetConfig+0x508>
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d212      	bcs.n	80042c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f023 030f 	bic.w	r3, r3, #15
 80042a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	8bfb      	ldrh	r3, [r7, #30]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	8bfa      	ldrh	r2, [r7, #30]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	e062      	b.n	800438a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042ca:	e05e      	b.n	800438a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d828      	bhi.n	8004326 <UART_SetConfig+0x56a>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x520>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004327 	.word	0x08004327
 80042ec:	08004317 	.word	0x08004317
 80042f0:	08004327 	.word	0x08004327
 80042f4:	08004327 	.word	0x08004327
 80042f8:	08004327 	.word	0x08004327
 80042fc:	0800431f 	.word	0x0800431f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004300:	f7fe fb68 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004306:	e014      	b.n	8004332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004308:	f7fe fb7a 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 800430c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800430e:	e010      	b.n	8004332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <UART_SetConfig+0x5c0>)
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004314:	e00d      	b.n	8004332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004316:	f7fe faef 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 800431a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800431c:	e009      	b.n	8004332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004324:	e005      	b.n	8004332 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004330:	bf00      	nop
    }

    if (pclk != 0U)
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d028      	beq.n	800438a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4a10      	ldr	r2, [pc, #64]	; (8004380 <UART_SetConfig+0x5c4>)
 800433e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004342:	461a      	mov	r2, r3
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	fbb3 f2f2 	udiv	r2, r3, r2
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	441a      	add	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	d910      	bls.n	8004384 <UART_SetConfig+0x5c8>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d20c      	bcs.n	8004384 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	b29a      	uxth	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	e009      	b.n	800438a <UART_SetConfig+0x5ce>
 8004376:	bf00      	nop
 8004378:	40008000 	.word	0x40008000
 800437c:	00f42400 	.word	0x00f42400
 8004380:	08004a80 	.word	0x08004a80
      }
      else
      {
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2201      	movs	r2, #1
 800438e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2201      	movs	r2, #1
 8004396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2200      	movs	r2, #0
 80043a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80043a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3730      	adds	r7, #48	; 0x30
 80043ae:	46bd      	mov	sp, r7
 80043b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01a      	beq.n	80044ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b2:	d10a      	bne.n	80044ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b098      	sub	sp, #96	; 0x60
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004508:	f7fd fa26 	bl	8001958 <HAL_GetTick>
 800450c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b08      	cmp	r3, #8
 800451a:	d12f      	bne.n	800457c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800451c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004524:	2200      	movs	r2, #0
 8004526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f88e 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d022      	beq.n	800457c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454a:	653b      	str	r3, [r7, #80]	; 0x50
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
 8004556:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800455a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e6      	bne.n	8004536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e063      	b.n	8004644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d149      	bne.n	800461e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004592:	2200      	movs	r2, #0
 8004594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f857 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03c      	beq.n	800461e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	623b      	str	r3, [r7, #32]
   return(result);
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
 80045c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e6      	bne.n	80045a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f6:	61fa      	str	r2, [r7, #28]
 80045f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	69b9      	ldr	r1, [r7, #24]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	617b      	str	r3, [r7, #20]
   return(result);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e5      	bne.n	80045d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e012      	b.n	8004644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3758      	adds	r7, #88	; 0x58
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465c:	e04f      	b.n	80046fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d04b      	beq.n	80046fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004666:	f7fd f977 	bl	8001958 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <UART_WaitOnFlagUntilTimeout+0x30>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e04e      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d037      	beq.n	80046fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d034      	beq.n	80046fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d031      	beq.n	80046fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d110      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2208      	movs	r2, #8
 80046ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f838 	bl	8004726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2208      	movs	r2, #8
 80046ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e029      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d8:	d111      	bne.n	80046fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f81e 	bl	8004726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e00f      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4013      	ands	r3, r2
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	429a      	cmp	r2, r3
 800471a:	d0a0      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004726:	b480      	push	{r7}
 8004728:	b095      	sub	sp, #84	; 0x54
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	643b      	str	r3, [r7, #64]	; 0x40
 800474e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e6      	bne.n	800472e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	64bb      	str	r3, [r7, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e3      	bne.n	8004760 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d118      	bne.n	80047d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f023 0310 	bic.w	r3, r3, #16
 80047b4:	647b      	str	r3, [r7, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6979      	ldr	r1, [r7, #20]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	613b      	str	r3, [r7, #16]
   return(result);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e6      	bne.n	80047a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80047e6:	bf00      	nop
 80047e8:	3754      	adds	r7, #84	; 0x54
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_UARTEx_DisableFifoMode+0x16>
 8004804:	2302      	movs	r3, #2
 8004806:	e027      	b.n	8004858 <HAL_UARTEx_DisableFifoMode+0x66>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004878:	2302      	movs	r3, #2
 800487a:	e02d      	b.n	80048d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	; 0x24
 8004888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f84f 	bl	800495c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e02d      	b.n	8004954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f811 	bl	800495c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800497c:	e031      	b.n	80049e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800497e:	2308      	movs	r3, #8
 8004980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004982:	2308      	movs	r3, #8
 8004984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	0e5b      	lsrs	r3, r3, #25
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	0f5b      	lsrs	r3, r3, #29
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049a6:	7bbb      	ldrb	r3, [r7, #14]
 80049a8:	7b3a      	ldrb	r2, [r7, #12]
 80049aa:	4911      	ldr	r1, [pc, #68]	; (80049f0 <UARTEx_SetNbDataToProcess+0x94>)
 80049ac:	5c8a      	ldrb	r2, [r1, r2]
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049b2:	7b3a      	ldrb	r2, [r7, #12]
 80049b4:	490f      	ldr	r1, [pc, #60]	; (80049f4 <UARTEx_SetNbDataToProcess+0x98>)
 80049b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	7b7a      	ldrb	r2, [r7, #13]
 80049c8:	4909      	ldr	r1, [pc, #36]	; (80049f0 <UARTEx_SetNbDataToProcess+0x94>)
 80049ca:	5c8a      	ldrb	r2, [r1, r2]
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049d0:	7b7a      	ldrb	r2, [r7, #13]
 80049d2:	4908      	ldr	r1, [pc, #32]	; (80049f4 <UARTEx_SetNbDataToProcess+0x98>)
 80049d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	08004a98 	.word	0x08004a98
 80049f4:	08004aa0 	.word	0x08004aa0

080049f8 <memset>:
 80049f8:	4402      	add	r2, r0
 80049fa:	4603      	mov	r3, r0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memset+0xa>
 8004a00:	4770      	bx	lr
 8004a02:	f803 1b01 	strb.w	r1, [r3], #1
 8004a06:	e7f9      	b.n	80049fc <memset+0x4>

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	; (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	; (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	; (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f000 f818 	bl	8004a50 <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08004ab0 	.word	0x08004ab0
 8004a44:	08004ab0 	.word	0x08004ab0
 8004a48:	08004ab0 	.word	0x08004ab0
 8004a4c:	08004ab4 	.word	0x08004ab4

08004a50 <_init>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

08004a5c <_fini>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr
