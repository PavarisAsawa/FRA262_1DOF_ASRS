
FRA262_Studio3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf8  08004bf8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c00  08004c00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  08004c18  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004c18  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012afc  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002481  00000000  00000000  00032b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00035000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c94  00000000  00000000  00036010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ca4  00000000  00000000  00036ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001297f  00000000  00000000  00038948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7c8c  00000000  00000000  0004b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045b8  00000000  00000000  00142f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0014750c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ba0 	.word	0x08004ba0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004ba0 	.word	0x08004ba0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	; 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	bf28      	it	cs
 8000b10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b14:	d2ed      	bcs.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b970 	b.w	8000f68 <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9e08      	ldr	r6, [sp, #32]
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4604      	mov	r4, r0
 8000caa:	460f      	mov	r7, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14a      	bne.n	8000d46 <__udivmoddi4+0xa6>
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	4694      	mov	ip, r2
 8000cb4:	d965      	bls.n	8000d82 <__udivmoddi4+0xe2>
 8000cb6:	fab2 f382 	clz	r3, r2
 8000cba:	b143      	cbz	r3, 8000cce <__udivmoddi4+0x2e>
 8000cbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc0:	f1c3 0220 	rsb	r2, r3, #32
 8000cc4:	409f      	lsls	r7, r3
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	4317      	orrs	r7, r2
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd2:	fa1f f58c 	uxth.w	r5, ip
 8000cd6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cda:	0c22      	lsrs	r2, r4, #16
 8000cdc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce4:	fb01 f005 	mul.w	r0, r1, r5
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x62>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf4:	f080 811c 	bcs.w	8000f30 <__udivmoddi4+0x290>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f240 8119 	bls.w	8000f30 <__udivmoddi4+0x290>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4462      	add	r2, ip
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	b2a4      	uxth	r4, r4
 8000d06:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d12:	fb00 f505 	mul.w	r5, r0, r5
 8000d16:	42a5      	cmp	r5, r4
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x90>
 8000d1a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d22:	f080 8107 	bcs.w	8000f34 <__udivmoddi4+0x294>
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	f240 8104 	bls.w	8000f34 <__udivmoddi4+0x294>
 8000d2c:	4464      	add	r4, ip
 8000d2e:	3802      	subs	r0, #2
 8000d30:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	2100      	movs	r1, #0
 8000d38:	b11e      	cbz	r6, 8000d42 <__udivmoddi4+0xa2>
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0xbc>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	f000 80ed 	beq.w	8000f2a <__udivmoddi4+0x28a>
 8000d50:	2100      	movs	r1, #0
 8000d52:	e9c6 0500 	strd	r0, r5, [r6]
 8000d56:	4608      	mov	r0, r1
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	fab3 f183 	clz	r1, r3
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d149      	bne.n	8000df8 <__udivmoddi4+0x158>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d302      	bcc.n	8000d6e <__udivmoddi4+0xce>
 8000d68:	4282      	cmp	r2, r0
 8000d6a:	f200 80f8 	bhi.w	8000f5e <__udivmoddi4+0x2be>
 8000d6e:	1a84      	subs	r4, r0, r2
 8000d70:	eb65 0203 	sbc.w	r2, r5, r3
 8000d74:	2001      	movs	r0, #1
 8000d76:	4617      	mov	r7, r2
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d0e2      	beq.n	8000d42 <__udivmoddi4+0xa2>
 8000d7c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d80:	e7df      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000d82:	b902      	cbnz	r2, 8000d86 <__udivmoddi4+0xe6>
 8000d84:	deff      	udf	#255	; 0xff
 8000d86:	fab2 f382 	clz	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8090 	bne.w	8000eb0 <__udivmoddi4+0x210>
 8000d90:	1a8a      	subs	r2, r1, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da0:	fb07 2015 	mls	r0, r7, r5, r2
 8000da4:	0c22      	lsrs	r2, r4, #16
 8000da6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000daa:	fb0e f005 	mul.w	r0, lr, r5
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x124>
 8000db2:	eb1c 0202 	adds.w	r2, ip, r2
 8000db6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x122>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2b8>
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	1a12      	subs	r2, r2, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x14e>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x14c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2c2>
 8000dec:	4610      	mov	r0, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000df6:	e79f      	b.n	8000d38 <__udivmoddi4+0x98>
 8000df8:	f1c1 0720 	rsb	r7, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e0e:	40fd      	lsrs	r5, r7
 8000e10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e14:	4323      	orrs	r3, r4
 8000e16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e28:	fb08 f50e 	mul.w	r5, r8, lr
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	fa00 f001 	lsl.w	r0, r0, r1
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b0>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2b4>
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2b4>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4464      	add	r4, ip
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	b29d      	uxth	r5, r3
 8000e54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e58:	fb09 4413 	mls	r4, r9, r3, r4
 8000e5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e60:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1da>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2ac>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2ac>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4464      	add	r4, ip
 8000e7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e7e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46ae      	mov	lr, r5
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x29c>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x298>
 8000e90:	b156      	cbz	r6, 8000ea8 <__udivmoddi4+0x208>
 8000e92:	ebb0 0208 	subs.w	r2, r0, r8
 8000e96:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e9e:	40ca      	lsrs	r2, r1
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	4317      	orrs	r7, r2
 8000ea4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	f1c3 0120 	rsb	r1, r3, #32
 8000eb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ebc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec0:	409d      	lsls	r5, r3
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed4:	0c11      	lsrs	r1, r2, #16
 8000ed6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eda:	fb00 f50e 	mul.w	r5, r0, lr
 8000ede:	428d      	cmp	r5, r1
 8000ee0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x258>
 8000ee6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef0:	428d      	cmp	r5, r1
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b0>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	1b49      	subs	r1, r1, r5
 8000efa:	b292      	uxth	r2, r2
 8000efc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f00:	fb07 1115 	mls	r1, r7, r5, r1
 8000f04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f08:	fb05 f10e 	mul.w	r1, r5, lr
 8000f0c:	4291      	cmp	r1, r2
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x282>
 8000f10:	eb1c 0202 	adds.w	r2, ip, r2
 8000f14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1a:	4291      	cmp	r1, r2
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2a8>
 8000f1e:	3d02      	subs	r5, #2
 8000f20:	4462      	add	r2, ip
 8000f22:	1a52      	subs	r2, r2, r1
 8000f24:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0xfc>
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000f30:	4639      	mov	r1, r7
 8000f32:	e6e6      	b.n	8000d02 <__udivmoddi4+0x62>
 8000f34:	4610      	mov	r0, r2
 8000f36:	e6fb      	b.n	8000d30 <__udivmoddi4+0x90>
 8000f38:	4548      	cmp	r0, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f0>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f44:	3b01      	subs	r3, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f0>
 8000f48:	4645      	mov	r5, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x282>
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1da>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x258>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b0>
 8000f58:	3d02      	subs	r5, #2
 8000f5a:	4462      	add	r2, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x124>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e70a      	b.n	8000d78 <__udivmoddi4+0xd8>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x14e>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <QEIEncoder_Init>:
extern uint64_t micros;				// Find time from main.c
uint16_t resolution = 8192; 		// pulse / revolution
uint8_t lead = 16;					// Lead of Ball screw = 16 mm

void QEIEncoder_Init(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* Encoder_tim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	QEIdata->EncoderTIM = Encoder_tim;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
	HAL_TIM_Encoder_Start(QEIdata->EncoderTIM, TIM_CHANNEL_ALL);		// Initialize Encoder Timer
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	213c      	movs	r1, #60	; 0x3c
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fa04 	bl	8003390 <HAL_TIM_Encoder_Start>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <QEIEncoder_Update>:

void QEIEncoder_Update(QEIStructureTypeDef* QEIdata,TIM_HandleTypeDef* EncoderTIM ,uint64_t current_time)
{
 8000f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f94:	b08e      	sub	sp, #56	; 0x38
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6278      	str	r0, [r7, #36]	; 0x24
 8000f9a:	6239      	str	r1, [r7, #32]
 8000f9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static float tempVel[2] = {0};			// For Estimate Acceleration

	QEIdata->TimeStamp[0] = current_time; 						// index[0] = new time
 8000fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fa6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata->Position[0] = __HAL_TIM_GET_COUNTER(EncoderTIM);	// index[0] = new Position
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	617a      	str	r2, [r7, #20]
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000fbc:	e9c3 1200 	strd	r1, r2, [r3]

	int64_t diffPosition = QEIdata->Position[0] - QEIdata->Position[1];			// position [pulse]
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fcc:	1a84      	subs	r4, r0, r2
 8000fce:	eb61 0503 	sbc.w	r5, r1, r3
 8000fd2:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
	float diffTime = (QEIdata->TimeStamp[0]-QEIdata->TimeStamp[1]) * 0.000001; 	// time [seconds]
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fe2:	ebb0 0a02 	subs.w	sl, r0, r2
 8000fe6:	eb61 0b03 	sbc.w	fp, r1, r3
 8000fea:	4650      	mov	r0, sl
 8000fec:	4659      	mov	r1, fp
 8000fee:	f7ff fa99 	bl	8000524 <__aeabi_ul2d>
 8000ff2:	a368      	add	r3, pc, #416	; (adr r3, 8001194 <QEIEncoder_Update+0x204>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff faca 	bl	8000590 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fcd6 	bl	80009b4 <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(diffPosition > 2147483648)  diffPosition -= 4294967296;		// For unwrap
 800100c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001010:	495b      	ldr	r1, [pc, #364]	; (8001180 <QEIEncoder_Update+0x1f0>)
 8001012:	428a      	cmp	r2, r1
 8001014:	f173 0300 	sbcs.w	r3, r3, #0
 8001018:	db08      	blt.n	800102c <QEIEncoder_Update+0x9c>
 800101a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800101e:	1e59      	subs	r1, r3, #1
 8001020:	60f9      	str	r1, [r7, #12]
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001028:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(diffPosition < -2147483648) diffPosition +=  4294967296;
 800102c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001030:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001034:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001038:	da08      	bge.n	800104c <QEIEncoder_Update+0xbc>
 800103a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800103e:	1c59      	adds	r1, r3, #1
 8001040:	6079      	str	r1, [r7, #4]
 8001042:	603a      	str	r2, [r7, #0]
 8001044:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001048:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	QEIdata->AngularVelocity	=	(diffPosition*60)/(diffTime*resolution);	//	Angular Velocity [RPM]
 800104c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001050:	4622      	mov	r2, r4
 8001052:	462b      	mov	r3, r5
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	f04f 0100 	mov.w	r1, #0
 800105c:	0119      	lsls	r1, r3, #4
 800105e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001062:	0110      	lsls	r0, r2, #4
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	ebb2 0804 	subs.w	r8, r2, r4
 800106c:	eb63 0905 	sbc.w	r9, r3, r5
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800107c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001080:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001084:	4690      	mov	r8, r2
 8001086:	4699      	mov	r9, r3
 8001088:	4642      	mov	r2, r8
 800108a:	464b      	mov	r3, r9
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fdb0 	bl	8000bf4 <__aeabi_l2f>
 8001094:	ee06 0a90 	vmov	s13, r0
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <QEIEncoder_Update+0x1f4>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	edc3 7a08 	vstr	s15, [r3, #32]
	QEIdata->LinearPosition		+=	(diffPosition*16.0)/resolution;				//	Linear	Position [mm]
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa10 	bl	80004e0 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80010c8:	f7ff fa34 	bl	8000534 <__aeabi_l2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <QEIEncoder_Update+0x1f8>)
 80010d2:	f7ff fa5d 	bl	8000590 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4690      	mov	r8, r2
 80010dc:	4699      	mov	r9, r3
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <QEIEncoder_Update+0x1f4>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9ea 	bl	80004bc <__aeabi_i2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4640      	mov	r0, r8
 80010ee:	4649      	mov	r1, r9
 80010f0:	f7ff fb78 	bl	80007e4 <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff f892 	bl	8000224 <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fc54 	bl	80009b4 <__aeabi_d2f>
 800110c:	4602      	mov	r2, r0
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
	QEIdata->LinearVelocity		=	(QEIdata->AngularVelocity * 16)/60.0;		//	Linear	Velocity [mm/s]
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	edd3 7a08 	vldr	s15, [r3, #32]
 8001118:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800111c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001120:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800118c <QEIEncoder_Update+0x1fc>
 8001124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tempVel[0]					=	QEIdata->LinearVelocity;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <QEIEncoder_Update+0x200>)
 8001134:	6013      	str	r3, [r2, #0]
	QEIdata->LinearAcceleration	=	(tempVel[0] - tempVel[1])/diffTime;			// Linear	Acceleration [mm/s^2]
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <QEIEncoder_Update+0x200>)
 8001138:	ed93 7a00 	vldr	s14, [r3]
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <QEIEncoder_Update+0x200>)
 800113e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001142:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001146:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Updata NEW[0] to OLD[1] Value
	QEIdata->TimeStamp[1]	=	QEIdata->TimeStamp[0];
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800115a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800115c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	QEIdata->Position[1]	=	QEIdata->Position[0];
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001168:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tempVel[1]				=	tempVel[0];
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <QEIEncoder_Update+0x200>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <QEIEncoder_Update+0x200>)
 8001172:	6053      	str	r3, [r2, #4]
}
 8001174:	bf00      	nop
 8001176:	3738      	adds	r7, #56	; 0x38
 8001178:	46bd      	mov	sp, r7
 800117a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800117e:	bf00      	nop
 8001180:	80000001 	.word	0x80000001
 8001184:	20000000 	.word	0x20000000
 8001188:	40300000 	.word	0x40300000
 800118c:	42700000 	.word	0x42700000
 8001190:	2000002c 	.word	0x2000002c
 8001194:	a0b5ed8d 	.word	0xa0b5ed8d
 8001198:	3eb0c6f7 	.word	0x3eb0c6f7

0800119c <QEIEncoder_SetHome>:

void QEIEncoder_SetHome(QEIStructureTypeDef* QEIdata)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	QEIdata->LinearPosition = 0;	//	Set Zero Position
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fc0f 	bl	80019de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f828 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f000 f9ae 	bl	8001524 <MX_GPIO_Init>
  MX_TIM5_Init();
 80011c8:	f000 f90a 	bl	80013e0 <MX_TIM5_Init>
  MX_TIM2_Init();
 80011cc:	f000 f86c 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011d0:	f000 f8b8 	bl	8001344 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80011d4:	f000 f95a 	bl	800148c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);						// Initialize System Timer
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <main+0x48>)
 80011da:	f001 ffbb 	bl	8003154 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Initialize 1 ms Timer
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <main+0x4c>)
 80011e0:	f001 ffb8 	bl	8003154 <HAL_TIM_Base_Start_IT>
  QEIEncoder_Init(&QEI,&htim5);							// Initialize QEI Encoder
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <main+0x50>)
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <main+0x54>)
 80011e8:	f7ff fec0 	bl	8000f6c <QEIEncoder_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = __HAL_TIM_GET_COUNTER(&htim5);
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <main+0x50>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	2200      	movs	r2, #0
 80011f4:	461c      	mov	r4, r3
 80011f6:	4615      	mov	r5, r2
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <main+0x58>)
 80011fa:	e9c3 4500 	strd	r4, r5, [r3]
 80011fe:	e7f5      	b.n	80011ec <main+0x34>
 8001200:	20000034 	.word	0x20000034
 8001204:	20000080 	.word	0x20000080
 8001208:	200000cc 	.word	0x200000cc
 800120c:	200001b8 	.word	0x200001b8
 8001210:	200001f0 	.word	0x200001f0

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	2238      	movs	r2, #56	; 0x38
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fc90 	bl	8004b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001236:	2000      	movs	r0, #0
 8001238:	f000 ff04 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	2303      	movs	r3, #3
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800124e:	2306      	movs	r3, #6
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001252:	2355      	movs	r3, #85	; 0x55
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125e:	2302      	movs	r3, #2
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4618      	mov	r0, r3
 8001268:	f000 ffa0 	bl	80021ac <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001272:	f000 fa1d 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2303      	movs	r3, #3
 800127c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fa9e 	bl	80027d0 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800129a:	f000 fa09 	bl	80016b0 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_TIM2_Init+0x98>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d0:	22a9      	movs	r2, #169	; 0xa9
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_TIM2_Init+0x98>)
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_TIM2_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_TIM2_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_TIM2_Init+0x98>)
 80012f0:	f001 fed8 	bl	80030a4 <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012fa:	f000 f9d9 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_TIM2_Init+0x98>)
 800130c:	f002 fa1e 	bl	800374c <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001316:	f000 f9cb 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_TIM2_Init+0x98>)
 8001328:	f002 fcc4 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001332:	f000 f9bd 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000034 	.word	0x20000034

08001344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_TIM3_Init+0x94>)
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <MX_TIM3_Init+0x98>)
 8001366:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_TIM3_Init+0x94>)
 800136a:	22a9      	movs	r2, #169	; 0xa9
 800136c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_TIM3_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM3_Init+0x94>)
 8001376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_TIM3_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_TIM3_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <MX_TIM3_Init+0x94>)
 800138a:	f001 fe8b 	bl	80030a4 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001394:	f000 f98c 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_TIM3_Init+0x94>)
 80013a6:	f002 f9d1 	bl	800374c <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013b0:	f000 f97e 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM3_Init+0x94>)
 80013c2:	f002 fc77 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013cc:	f000 f970 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000080 	.word	0x20000080
 80013dc:	40000400 	.word	0x40000400

080013e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2224      	movs	r2, #36	; 0x24
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fbaa 	bl	8004b48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_TIM5_Init+0xa4>)
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <MX_TIM5_Init+0xa8>)
 8001402:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_TIM5_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_TIM5_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_TIM5_Init+0xa4>)
 8001412:	f04f 32ff 	mov.w	r2, #4294967295
 8001416:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_TIM5_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_TIM5_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001424:	2303      	movs	r3, #3
 8001426:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800143c:	2301      	movs	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_TIM5_Init+0xa4>)
 8001450:	f001 fef8 	bl	8003244 <HAL_TIM_Encoder_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800145a:	f000 f929 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_TIM5_Init+0xa4>)
 800146c:	f002 fc22 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001476:	f000 f91b 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3730      	adds	r7, #48	; 0x30
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000cc 	.word	0x200000cc
 8001488:	40000c00 	.word	0x40000c00

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_USART2_UART_Init+0x90>)
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MX_USART2_UART_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_USART2_UART_Init+0x90>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014d6:	f002 fcc9 	bl	8003e6c <HAL_UART_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014e0:	f000 f8e6 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014e8:	f003 fa64 	bl	80049b4 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014f2:	f000 f8dd 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014fa:	f003 fa99 	bl	8004a30 <HAL_UARTEx_SetRxFifoThreshold>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 f8d4 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_USART2_UART_Init+0x90>)
 800150a:	f003 fa1a 	bl	8004942 <HAL_UARTEx_DisableFifoMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001514:	f000 f8cc 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000118 	.word	0x20000118
 8001520:	40004400 	.word	0x40004400

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <MX_GPIO_Init+0xd4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001558:	f043 0320 	orr.w	r3, r3, #32
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_GPIO_Init+0xd4>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_GPIO_Init+0xd4>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2120      	movs	r1, #32
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f000 fd1f 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	480f      	ldr	r0, [pc, #60]	; (80015fc <MX_GPIO_Init+0xd8>)
 80015be:	f000 fb8f 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015c2:	2320      	movs	r3, #32
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f000 fb80 	bl	8001ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2028      	movs	r0, #40	; 0x28
 80015e6:	f000 fb46 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f000 fb5d 	bl	8001caa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	48000800 	.word	0x48000800

08001600 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// Timer Interrupt
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d108      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += 1;
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	1c54      	adds	r4, r2, #1
 8001618:	f143 0500 	adc.w	r5, r3, #0
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800161e:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim3)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d107      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		QEIEncoder_Update(&QEI,&htim5,micros());
 800162a:	f000 f815 	bl	8001658 <micros>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4907      	ldr	r1, [pc, #28]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001636:	f7ff fcab 	bl	8000f90 <QEIEncoder_Update>
	}
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}
 8001642:	bf00      	nop
 8001644:	20000034 	.word	0x20000034
 8001648:	200001b0 	.word	0x200001b0
 800164c:	20000080 	.word	0x20000080
 8001650:	200000cc 	.word	0x200000cc
 8001654:	200001b8 	.word	0x200001b8

08001658 <micros>:

uint64_t micros()	// System Time
{
 8001658:	b4b0      	push	{r4, r5, r7}
 800165a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <micros+0x2c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2200      	movs	r2, #0
 8001664:	4618      	mov	r0, r3
 8001666:	4611      	mov	r1, r2
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <micros+0x30>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	1884      	adds	r4, r0, r2
 8001670:	eb41 0503 	adc.w	r5, r1, r3
 8001674:	4622      	mov	r2, r4
 8001676:	462b      	mov	r3, r5
}
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bcb0      	pop	{r4, r5, r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000034 	.word	0x20000034
 8001688:	200001b0 	.word	0x200001b0

0800168c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				//	External Interrupt
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)			// Blue Switch
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800169c:	d102      	bne.n	80016a4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		QEIEncoder_SetHome(&QEI);
 800169e:	4803      	ldr	r0, [pc, #12]	; (80016ac <HAL_GPIO_EXTI_Callback+0x20>)
 80016a0:	f7ff fd7c 	bl	800119c <QEIEncoder_SetHome>
	}
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200001b8 	.word	0x200001b8

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>
	...

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x44>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x44>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x44>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x44>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x44>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6593      	str	r3, [r2, #88]	; 0x58
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x44>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016f2:	f000 fd4b 	bl	800218c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001714:	d114      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_TIM_Base_MspInit+0x78>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_TIM_Base_MspInit+0x78>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6593      	str	r3, [r2, #88]	; 0x58
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_TIM_Base_MspInit+0x78>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201c      	movs	r0, #28
 8001734:	f000 fa9f 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001738:	201c      	movs	r0, #28
 800173a:	f000 fab6 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800173e:	e018      	b.n	8001772 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_TIM_Base_MspInit+0x7c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d113      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_TIM_Base_MspInit+0x78>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_TIM_Base_MspInit+0x78>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_TIM_Base_MspInit+0x78>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	201d      	movs	r0, #29
 8001768:	f000 fa85 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800176c:	201d      	movs	r0, #29
 800176e:	f000 fa9c 	bl	8001caa <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40000400 	.word	0x40000400

08001784 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_TIM_Encoder_MspInit+0x8c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d130      	bne.n	8001808 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_TIM_Encoder_MspInit+0x90>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_TIM_Encoder_MspInit+0x90>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_TIM_Encoder_MspInit+0x90>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_TIM_Encoder_MspInit+0x90>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_TIM_Encoder_MspInit+0x90>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_TIM_Encoder_MspInit+0x90>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d6:	2303      	movs	r3, #3
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017e6:	2302      	movs	r3, #2
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f000 fa74 	bl	8001ce0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2032      	movs	r0, #50	; 0x32
 80017fe:	f000 fa3a 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001802:	2032      	movs	r0, #50	; 0x32
 8001804:	f000 fa51 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40000c00 	.word	0x40000c00
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b09e      	sub	sp, #120	; 0x78
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2254      	movs	r2, #84	; 0x54
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f985 	bl	8004b48 <memset>
  if(huart->Instance==USART2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_UART_MspInit+0xa8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d136      	bne.n	80018b6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4618      	mov	r0, r3
 8001856:	f001 f9d7 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001860:	f7ff ff26 	bl	80016b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0xac>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <HAL_UART_MspInit+0xac>)
 800186a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_UART_MspInit+0xac>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0xac>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_UART_MspInit+0xac>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_UART_MspInit+0xac>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001894:	230c      	movs	r3, #12
 8001896:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a4:	2307      	movs	r3, #7
 80018a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b2:	f000 fa15 	bl	8001ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3778      	adds	r7, #120	; 0x78
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40021000 	.word	0x40021000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f8b6 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM2_IRQHandler+0x10>)
 8001922:	f001 fdc3 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000034 	.word	0x20000034

08001930 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM3_IRQHandler+0x10>)
 8001936:	f001 fdb9 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000080 	.word	0x20000080

08001944 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001948:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800194c:	f000 fb62 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM5_IRQHandler+0x10>)
 800195a:	f001 fda7 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000cc 	.word	0x200000cc

08001968 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800198e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001990:	f7ff ffea 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	; (80019cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <LoopForever+0xe>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	; (80019d8 <LoopForever+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ba:	f003 f8cd 	bl	8004b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019be:	f7ff fbfb 	bl	80011b8 <main>

080019c2 <LoopForever>:

LoopForever:
    b LoopForever
 80019c2:	e7fe      	b.n	80019c2 <LoopForever>
  ldr   r0, =_estack
 80019c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019d0:	08004c08 	.word	0x08004c08
  ldr r2, =_sbss
 80019d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019d8:	200001fc 	.word	0x200001fc

080019dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_2_IRQHandler>

080019de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 f939 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 f80e 	bl	8001a10 <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	e001      	b.n	8001a04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a00:	f7ff fe5c 	bl	80016bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a04:	79fb      	ldrb	r3, [r7, #7]

}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_InitTick+0x68>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d022      	beq.n	8001a6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_InitTick+0x6c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_InitTick+0x68>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f944 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10f      	bne.n	8001a64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	d809      	bhi.n	8001a5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a52:	f000 f910 	bl	8001c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_InitTick+0x70>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e007      	b.n	8001a6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e004      	b.n	8001a6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x1c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <HAL_IncTick+0x1c>)
 8001a94:	6013      	str	r3, [r2, #0]
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	200001f8 	.word	0x200001f8
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200001f8 	.word	0x200001f8

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff40 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff90 	bl	8001bb4 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5f 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff33 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa4 	bl	8001c1c <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cee:	e15a      	b.n	8001fa6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 814c 	beq.w	8001fa0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d005      	beq.n	8001d20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d017      	beq.n	8001dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d123      	bne.n	8001e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	6939      	ldr	r1, [r7, #16]
 8001e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0203 	and.w	r2, r3, #3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e54:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e60:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6c:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e96:	d01f      	beq.n	8001ed8 <HAL_GPIO_Init+0x1f8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_GPIO_Init+0x2ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d019      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a4a      	ldr	r2, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00d      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a49      	ldr	r2, [pc, #292]	; (8001fd8 <HAL_GPIO_Init+0x2f8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_GPIO_Init+0x2fc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	e00a      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e008      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eea:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1c:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f ae9d 	bne.w	8001cf0 <HAL_GPIO_Init+0x10>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002000:	e002      	b.n	8002008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fb2a 	bl	800168c <HAL_GPIO_EXTI_Callback>
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d141      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002052:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205e:	d131      	bne.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002060:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002066:	4a46      	ldr	r2, [pc, #280]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800206c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002078:	4a41      	ldr	r2, [pc, #260]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2232      	movs	r2, #50	; 0x32
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	e002      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3b01      	subs	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d102      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f2      	bne.n	8002098 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020be:	d158      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e057      	b.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ca:	4a2d      	ldr	r2, [pc, #180]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020d4:	e04d      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020dc:	d141      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d131      	bne.n	8002150 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f2:	4a23      	ldr	r2, [pc, #140]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2232      	movs	r2, #50	; 0x32
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	0c9b      	lsrs	r3, r3, #18
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	e002      	b.n	800212a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d102      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f2      	bne.n	8002124 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d112      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e011      	b.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002160:	e007      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002170:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40007000 	.word	0x40007000
 8002184:	20000004 	.word	0x20000004
 8002188:	431bde83 	.word	0x431bde83

0800218c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219a:	6093      	str	r3, [r2, #8]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40007000 	.word	0x40007000

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e2fe      	b.n	80027bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d075      	beq.n	80022b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4b97      	ldr	r3, [pc, #604]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	4b94      	ldr	r3, [pc, #592]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_OscConfig+0x3e>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_OscConfig+0x44>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b8d      	ldr	r3, [pc, #564]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d05b      	beq.n	80022b4 <HAL_RCC_OscConfig+0x108>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d157      	bne.n	80022b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e2d9      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x74>
 8002212:	4b85      	ldr	r3, [pc, #532]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a84      	ldr	r2, [pc, #528]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b7f      	ldr	r3, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7e      	ldr	r2, [pc, #504]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b7c      	ldr	r3, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7b      	ldr	r2, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
 8002244:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b75      	ldr	r3, [pc, #468]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a74      	ldr	r2, [pc, #464]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fc20 	bl	8001aa8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fc1c 	bl	8001aa8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e29e      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227e:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0xc0>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fc0c 	bl	8001aa8 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fc08 	bl	8001aa8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e28a      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a6:	4b60      	ldr	r3, [pc, #384]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0xe8>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d075      	beq.n	80023ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c2:	4b59      	ldr	r3, [pc, #356]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0x136>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_OscConfig+0x13c>
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d11f      	bne.n	8002328 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e8:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x154>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e25d      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4946      	ldr	r1, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002314:	4b45      	ldr	r3, [pc, #276]	; (800242c <HAL_RCC_OscConfig+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fb79 	bl	8001a10 <HAL_InitTick>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d043      	beq.n	80023ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e249      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d023      	beq.n	8002378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3c      	ldr	r2, [pc, #240]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff fbb4 	bl	8001aa8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff fbb0 	bl	8001aa8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e232      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	492d      	ldr	r1, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
 8002376:	e01a      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 800237e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff fb90 	bl	8001aa8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fb8c 	bl	8001aa8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e20e      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x1e0>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d041      	beq.n	800243e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01c      	beq.n	80023fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80023c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb69 	bl	8001aa8 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023da:	f7ff fb65 	bl	8001aa8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1e7      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ef      	beq.n	80023da <HAL_RCC_OscConfig+0x22e>
 80023fa:	e020      	b.n	800243e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x27c>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff fb4c 	bl	8001aa8 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002412:	e00d      	b.n	8002430 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fb48 	bl	8001aa8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d906      	bls.n	8002430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1ca      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002430:	4b8c      	ldr	r3, [pc, #560]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ea      	bne.n	8002414 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80a6 	beq.w	8002598 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002450:	4b84      	ldr	r3, [pc, #528]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x2b4>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x2b6>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a7e      	ldr	r2, [pc, #504]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b7c      	ldr	r3, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	4b79      	ldr	r3, [pc, #484]	; (8002668 <HAL_RCC_OscConfig+0x4bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248e:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x4bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x4bc>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7ff fb05 	bl	8001aa8 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7ff fb01 	bl	8001aa8 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e183      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b4:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x4bc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_RCC_OscConfig+0x32e>
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d8:	e024      	b.n	8002524 <HAL_RCC_OscConfig+0x378>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d110      	bne.n	8002504 <HAL_RCC_OscConfig+0x358>
 80024e2:	4b60      	ldr	r3, [pc, #384]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a5e      	ldr	r2, [pc, #376]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a5a      	ldr	r2, [pc, #360]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	e00f      	b.n	8002524 <HAL_RCC_OscConfig+0x378>
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d016      	beq.n	800255a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff fabc 	bl	8001aa8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff fab8 	bl	8001aa8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e138      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ed      	beq.n	8002534 <HAL_RCC_OscConfig+0x388>
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7ff faa5 	bl	8001aa8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7ff faa1 	bl	8001aa8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e121      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002578:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ed      	bne.n	8002562 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a34      	ldr	r2, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d03c      	beq.n	800261e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80025ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7ff fa74 	bl	8001aa8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c4:	f7ff fa70 	bl	8001aa8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0f2      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ef      	beq.n	80025c4 <HAL_RCC_OscConfig+0x418>
 80025e4:	e01b      	b.n	800261e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7ff fa57 	bl	8001aa8 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025fe:	f7ff fa53 	bl	8001aa8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0d5      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ef      	bne.n	80025fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80c9 	beq.w	80027ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b0c      	cmp	r3, #12
 8002632:	f000 8083 	beq.w	800273c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d15e      	bne.n	80026fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a08      	ldr	r2, [pc, #32]	; (8002664 <HAL_RCC_OscConfig+0x4b8>)
 8002644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7ff fa2d 	bl	8001aa8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002650:	e00c      	b.n	800266c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff fa29 	bl	8001aa8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d905      	bls.n	800266c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0ab      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ec      	bne.n	8002652 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b52      	ldr	r3, [pc, #328]	; (80027c8 <HAL_RCC_OscConfig+0x61c>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6a11      	ldr	r1, [r2, #32]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002688:	3a01      	subs	r2, #1
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	4311      	orrs	r1, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002692:	0212      	lsls	r2, r2, #8
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
 800269e:	0552      	lsls	r2, r2, #21
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026a6:	0852      	lsrs	r2, r2, #1
 80026a8:	3a01      	subs	r2, #1
 80026aa:	0652      	lsls	r2, r2, #25
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026b2:	06d2      	lsls	r2, r2, #27
 80026b4:	430a      	orrs	r2, r1
 80026b6:	4943      	ldr	r1, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f9e8 	bl	8001aa8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff f9e4 	bl	8001aa8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e066      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x530>
 80026fa:	e05e      	b.n	80027ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a30      	ldr	r2, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7ff f9ce 	bl	8001aa8 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7ff f9ca 	bl	8001aa8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e04c      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002722:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4924      	ldr	r1, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x620>)
 8002736:	4013      	ands	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
 800273a:	e03e      	b.n	80027ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e039      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_RCC_OscConfig+0x618>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	429a      	cmp	r2, r3
 800275a:	d12c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	3b01      	subs	r3, #1
 8002768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d123      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d11b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d113      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	019f800c 	.word	0x019f800c
 80027cc:	feeefffc 	.word	0xfeeefffc

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e11e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b91      	ldr	r3, [pc, #580]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b8e      	ldr	r3, [pc, #568]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 020f 	bic.w	r2, r3, #15
 80027fe:	498c      	ldr	r1, [pc, #560]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b8a      	ldr	r3, [pc, #552]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e106      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d073      	beq.n	800290c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d129      	bne.n	8002880 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282c:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0f4      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800283c:	f000 f99e 	bl	8002b7c <RCC_GetSysClockFreqFromPLLSource>
 8002840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4a7c      	ldr	r2, [pc, #496]	; (8002a38 <HAL_RCC_ClockConfig+0x268>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d93f      	bls.n	80028ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800285e:	2b00      	cmp	r3, #0
 8002860:	d033      	beq.n	80028ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d12f      	bne.n	80028ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800286a:	4b72      	ldr	r3, [pc, #456]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002872:	4a70      	ldr	r2, [pc, #448]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 8002874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e024      	b.n	80028ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002888:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0c6      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002898:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0be      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028a8:	f000 f8ce 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <HAL_RCC_ClockConfig+0x268>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d909      	bls.n	80028ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028b6:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028be:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80028c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4957      	ldr	r1, [pc, #348]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028dc:	f7ff f8e4 	bl	8001aa8 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7ff f8e0 	bl	8001aa8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e095      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a42      	ldr	r2, [pc, #264]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800292a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800293c:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002944:	4a3b      	ldr	r2, [pc, #236]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 8002946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800294a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4936      	ldr	r1, [pc, #216]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
 800295e:	e008      	b.n	8002972 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d105      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 800296c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002970:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d21d      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 020f 	bic.w	r2, r3, #15
 8002988:	4929      	ldr	r1, [pc, #164]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002990:	f7ff f88a 	bl	8001aa8 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7ff f886 	bl	8001aa8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e03b      	b.n	8002a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1ed      	bne.n	8002998 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4917      	ldr	r1, [pc, #92]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	490f      	ldr	r1, [pc, #60]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029fa:	f000 f825 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	490c      	ldr	r1, [pc, #48]	; (8002a3c <HAL_RCC_ClockConfig+0x26c>)
 8002a0c:	5ccb      	ldrb	r3, [r1, r3]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x270>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fff6 	bl	8001a10 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	04c4b400 	.word	0x04c4b400
 8002a3c:	08004bb8 	.word	0x08004bb8
 8002a40:	20000004 	.word	0x20000004
 8002a44:	20000008 	.word	0x20000008

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d102      	bne.n	8002a60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	e047      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e03e      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d136      	bne.n	8002aec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3301      	adds	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa6:	68d2      	ldr	r2, [r2, #12]
 8002aa8:	0a12      	lsrs	r2, r2, #8
 8002aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
      break;
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac0:	68d2      	ldr	r2, [r2, #12]
 8002ac2:	0a12      	lsrs	r2, r2, #8
 8002ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
      break;
 8002ace:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0e5b      	lsrs	r3, r3, #25
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e001      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002af0:	693b      	ldr	r3, [r7, #16]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	016e3600 	.word	0x016e3600

08002b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4904      	ldr	r1, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08004bc8 	.word	0x08004bc8

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b54:	f7ff ffda 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0adb      	lsrs	r3, r3, #11
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08004bc8 	.word	0x08004bc8

08002b7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d10c      	bne.n	8002bba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002baa:	68d2      	ldr	r2, [r2, #12]
 8002bac:	0a12      	lsrs	r2, r2, #8
 8002bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
    break;
 8002bb8:	e00c      	b.n	8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	0a12      	lsrs	r2, r2, #8
 8002bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    break;
 8002bd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0e5b      	lsrs	r3, r3, #25
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bee:	687b      	ldr	r3, [r7, #4]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	016e3600 	.word	0x016e3600
 8002c04:	00f42400 	.word	0x00f42400

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c10:	2300      	movs	r3, #0
 8002c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c14:	2300      	movs	r3, #0
 8002c16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8098 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	4a3f      	ldr	r2, [pc, #252]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6593      	str	r3, [r2, #88]	; 0x58
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c52:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a39      	ldr	r2, [pc, #228]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c5e:	f7fe ff23 	bl	8001aa8 <HAL_GetTick>
 8002c62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c64:	e009      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe ff1f 	bl	8001aa8 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d902      	bls.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	74fb      	strb	r3, [r7, #19]
        break;
 8002c78:	e005      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ef      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d159      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fedf 	bl	8001aa8 <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cec:	e00b      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fedb 	bl	8001aa8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d902      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	74fb      	strb	r3, [r7, #19]
            break;
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ec      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d30:	e008      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
 8002d36:	e005      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d44:	7c7b      	ldrb	r3, [r7, #17]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4ba7      	ldr	r3, [pc, #668]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	4aa6      	ldr	r2, [pc, #664]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d62:	4ba1      	ldr	r3, [pc, #644]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f023 0203 	bic.w	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	499d      	ldr	r1, [pc, #628]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d84:	4b98      	ldr	r3, [pc, #608]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 020c 	bic.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4995      	ldr	r1, [pc, #596]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da6:	4b90      	ldr	r3, [pc, #576]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	498c      	ldr	r1, [pc, #560]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc8:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	4984      	ldr	r1, [pc, #528]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dea:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e0c:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	4973      	ldr	r1, [pc, #460]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2e:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	496a      	ldr	r1, [pc, #424]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e50:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4962      	ldr	r1, [pc, #392]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	4959      	ldr	r1, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e94:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	4951      	ldr	r1, [pc, #324]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	4948      	ldr	r1, [pc, #288]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4940      	ldr	r1, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a3a      	ldr	r2, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	4932      	ldr	r1, [pc, #200]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	4924      	ldr	r1, [pc, #144]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f66:	d105      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002faa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd6:	d109      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e002      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4926      	ldr	r1, [pc, #152]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003016:	d105      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a20      	ldr	r2, [pc, #128]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003022:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303e:	4918      	ldr	r1, [pc, #96]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800306a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800306e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003094:	7cbb      	ldrb	r3, [r7, #18]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e049      	b.n	800314a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe fb1a 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f000 fc70 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d001      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e054      	b.n	8003216 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_TIM_Base_Start_IT+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d01d      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <HAL_TIM_Base_Start_IT+0xd4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_TIM_Base_Start_IT+0xd8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_TIM_Base_Start_IT+0xdc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_TIM_Base_Start_IT+0xe0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_TIM_Base_Start_IT+0xe4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_TIM_Base_Start_IT+0xe8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d115      	bne.n	8003200 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_TIM_Base_Start_IT+0xec>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d015      	beq.n	8003212 <HAL_TIM_Base_Start_IT+0xbe>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d011      	beq.n	8003212 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	e008      	b.n	8003212 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e000      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40013400 	.word	0x40013400
 8003238:	40014000 	.word	0x40014000
 800323c:	40015000 	.word	0x40015000
 8003240:	00010007 	.word	0x00010007

08003244 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e097      	b.n	8003388 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fe fa89 	bl	8001784 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003288:	f023 0307 	bic.w	r3, r3, #7
 800328c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 fb95 	bl	80039c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	4313      	orrs	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80032e4:	f023 030c 	bic.w	r3, r3, #12
 80032e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4313      	orrs	r3, r2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	011a      	lsls	r2, r3, #4
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	4313      	orrs	r3, r2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	4313      	orrs	r3, r2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d102      	bne.n	80033cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80033c6:	7b7b      	ldrb	r3, [r7, #13]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e069      	b.n	80034a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e0:	e031      	b.n	8003446 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d110      	bne.n	800340a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033e8:	7bbb      	ldrb	r3, [r7, #14]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d102      	bne.n	80033f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033ee:	7b3b      	ldrb	r3, [r7, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e055      	b.n	80034a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003408:	e01d      	b.n	8003446 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d108      	bne.n	8003422 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003416:	7b7b      	ldrb	r3, [r7, #13]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800341c:	7b3b      	ldrb	r3, [r7, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e03e      	b.n	80034a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_TIM_Encoder_Start+0xc4>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d008      	beq.n	8003464 <HAL_TIM_Encoder_Start+0xd4>
 8003452:	e00f      	b.n	8003474 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2201      	movs	r2, #1
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fc03 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003462:	e016      	b.n	8003492 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2201      	movs	r2, #1
 800346a:	2104      	movs	r1, #4
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fbfb 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003472:	e00e      	b.n	8003492 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fbf3 	bl	8003c68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2201      	movs	r2, #1
 8003488:	2104      	movs	r1, #4
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fbec 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003490:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa48 	bl	800398c <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa3a 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa4b 	bl	80039a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa22 	bl	800398c <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa14 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fa25 	bl	80039a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0208 	mvn.w	r2, #8
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9fc 	bl	800398c <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9ee 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f9ff 	bl	80039a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9d6 	bl	800398c <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9c8 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f9d9 	bl	80039a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fff4 	bl	8001600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00c      	beq.n	8003646 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800363e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fbd7 	bl	8003df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fbcf 	bl	8003e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f993 	bl	80039b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0220 	mvn.w	r2, #32
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fb97 	bl	8003de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00c      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80036ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fba3 	bl	8003e1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80036f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb9b 	bl	8003e30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fb93 	bl	8003e44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00c      	beq.n	8003742 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb8b 	bl	8003e58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e0f6      	b.n	8003956 <HAL_TIM_ConfigClockSource+0x20a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <HAL_TIM_ConfigClockSource+0x214>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f000 80c1 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 80037a8:	4a6d      	ldr	r2, [pc, #436]	; (8003960 <HAL_TIM_ConfigClockSource+0x214>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f200 80c6 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 80037b0:	4a6c      	ldr	r2, [pc, #432]	; (8003964 <HAL_TIM_ConfigClockSource+0x218>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f000 80b9 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 80037b8:	4a6a      	ldr	r2, [pc, #424]	; (8003964 <HAL_TIM_ConfigClockSource+0x218>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f200 80be 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 80037c0:	4a69      	ldr	r2, [pc, #420]	; (8003968 <HAL_TIM_ConfigClockSource+0x21c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f000 80b1 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 80037c8:	4a67      	ldr	r2, [pc, #412]	; (8003968 <HAL_TIM_ConfigClockSource+0x21c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	f200 80b6 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 80037d0:	4a66      	ldr	r2, [pc, #408]	; (800396c <HAL_TIM_ConfigClockSource+0x220>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	f000 80a9 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 80037d8:	4a64      	ldr	r2, [pc, #400]	; (800396c <HAL_TIM_ConfigClockSource+0x220>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	f200 80ae 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 80037e0:	4a63      	ldr	r2, [pc, #396]	; (8003970 <HAL_TIM_ConfigClockSource+0x224>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	f000 80a1 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 80037e8:	4a61      	ldr	r2, [pc, #388]	; (8003970 <HAL_TIM_ConfigClockSource+0x224>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	f200 80a6 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 80037f0:	4a60      	ldr	r2, [pc, #384]	; (8003974 <HAL_TIM_ConfigClockSource+0x228>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	f000 8099 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 80037f8:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_TIM_ConfigClockSource+0x228>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	f200 809e 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 8003800:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003804:	f000 8091 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 8003808:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800380c:	f200 8096 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 8003810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003814:	f000 8089 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x1de>
 8003818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381c:	f200 808e 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d03e      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382a:	f200 8087 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	f000 8086 	beq.w	8003942 <HAL_TIM_ConfigClockSource+0x1f6>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d87f      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 800383c:	2b70      	cmp	r3, #112	; 0x70
 800383e:	d01a      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x12a>
 8003840:	2b70      	cmp	r3, #112	; 0x70
 8003842:	d87b      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 8003844:	2b60      	cmp	r3, #96	; 0x60
 8003846:	d050      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x19e>
 8003848:	2b60      	cmp	r3, #96	; 0x60
 800384a:	d877      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 800384c:	2b50      	cmp	r3, #80	; 0x50
 800384e:	d03c      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x17e>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d873      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d058      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x1be>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d86f      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 800385c:	2b30      	cmp	r3, #48	; 0x30
 800385e:	d064      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x1de>
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d86b      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 8003864:	2b20      	cmp	r3, #32
 8003866:	d060      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x1de>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d867      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05c      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x1de>
 8003870:	2b10      	cmp	r3, #16
 8003872:	d05a      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x1de>
 8003874:	e062      	b.n	800393c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003886:	f000 f9cf 	bl	8003c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	609a      	str	r2, [r3, #8]
      break;
 80038a2:	e04f      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b4:	f000 f9b8 	bl	8003c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c6:	609a      	str	r2, [r3, #8]
      break;
 80038c8:	e03c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 f92a 	bl	8003b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2150      	movs	r1, #80	; 0x50
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f983 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 80038e8:	e02c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 f949 	bl	8003b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2160      	movs	r1, #96	; 0x60
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f973 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 8003908:	e01c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	461a      	mov	r2, r3
 8003918:	f000 f90a 	bl	8003b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2140      	movs	r1, #64	; 0x40
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f963 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 8003928:	e00c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f000 f95a 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 800393a:	e003      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      break;
 8003940:	e000      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	00100070 	.word	0x00100070
 8003964:	00100060 	.word	0x00100060
 8003968:	00100050 	.word	0x00100050
 800396c:	00100040 	.word	0x00100040
 8003970:	00100030 	.word	0x00100030
 8003974:	00100020 	.word	0x00100020

08003978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a4c      	ldr	r2, [pc, #304]	; (8003b0c <TIM_Base_SetConfig+0x144>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d017      	beq.n	8003a10 <TIM_Base_SetConfig+0x48>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d013      	beq.n	8003a10 <TIM_Base_SetConfig+0x48>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <TIM_Base_SetConfig+0x148>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00f      	beq.n	8003a10 <TIM_Base_SetConfig+0x48>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <TIM_Base_SetConfig+0x14c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_Base_SetConfig+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <TIM_Base_SetConfig+0x150>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_Base_SetConfig+0x48>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a46      	ldr	r2, [pc, #280]	; (8003b1c <TIM_Base_SetConfig+0x154>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0x48>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a45      	ldr	r2, [pc, #276]	; (8003b20 <TIM_Base_SetConfig+0x158>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a39      	ldr	r2, [pc, #228]	; (8003b0c <TIM_Base_SetConfig+0x144>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d023      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d01f      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a36      	ldr	r2, [pc, #216]	; (8003b10 <TIM_Base_SetConfig+0x148>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01b      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <TIM_Base_SetConfig+0x14c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d017      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a34      	ldr	r2, [pc, #208]	; (8003b18 <TIM_Base_SetConfig+0x150>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a33      	ldr	r2, [pc, #204]	; (8003b1c <TIM_Base_SetConfig+0x154>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <TIM_Base_SetConfig+0x15c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a32      	ldr	r2, [pc, #200]	; (8003b28 <TIM_Base_SetConfig+0x160>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <TIM_Base_SetConfig+0x164>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_Base_SetConfig+0xaa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_Base_SetConfig+0x158>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <TIM_Base_SetConfig+0x144>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <TIM_Base_SetConfig+0x110>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <TIM_Base_SetConfig+0x154>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00f      	beq.n	8003ad8 <TIM_Base_SetConfig+0x110>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <TIM_Base_SetConfig+0x15c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <TIM_Base_SetConfig+0x110>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <TIM_Base_SetConfig+0x160>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <TIM_Base_SetConfig+0x110>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <TIM_Base_SetConfig+0x164>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0x110>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <TIM_Base_SetConfig+0x158>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	611a      	str	r2, [r3, #16]
  }
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40013400 	.word	0x40013400
 8003b20:	40015000 	.word	0x40015000
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800

08003b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0201 	bic.w	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 030a 	bic.w	r3, r3, #10
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 0210 	bic.w	r2, r3, #16
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	031b      	lsls	r3, r3, #12
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f043 0307 	orr.w	r3, r3, #7
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e074      	b.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a33      	ldr	r2, [pc, #204]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d01d      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10c      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40013400 	.word	0x40013400
 8003dcc:	40015000 	.word	0x40015000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40014000 	.word	0x40014000

08003de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e042      	b.n	8003f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fd fcc1 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2224      	movs	r2, #36	; 0x24
 8003e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fb24 	bl	8004504 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f825 	bl	8003f0c <UART_SetConfig>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e01b      	b.n	8003f04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fba3 	bl	8004648 <UART_CheckIdleState>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f10:	b08c      	sub	sp, #48	; 0x30
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4baa      	ldr	r3, [pc, #680]	; (80041e4 <UART_SetConfig+0x2d8>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a9f      	ldr	r2, [pc, #636]	; (80041e8 <UART_SetConfig+0x2dc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f74:	4313      	orrs	r3, r2
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f023 010f 	bic.w	r1, r3, #15
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a90      	ldr	r2, [pc, #576]	; (80041ec <UART_SetConfig+0x2e0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d125      	bne.n	8003ffc <UART_SetConfig+0xf0>
 8003fb0:	4b8f      	ldr	r3, [pc, #572]	; (80041f0 <UART_SetConfig+0x2e4>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d81a      	bhi.n	8003ff4 <UART_SetConfig+0xe8>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0xb8>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fed 	.word	0x08003fed
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e116      	b.n	800420a <UART_SetConfig+0x2fe>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e112      	b.n	800420a <UART_SetConfig+0x2fe>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fea:	e10e      	b.n	800420a <UART_SetConfig+0x2fe>
 8003fec:	2308      	movs	r3, #8
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff2:	e10a      	b.n	800420a <UART_SetConfig+0x2fe>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffa:	e106      	b.n	800420a <UART_SetConfig+0x2fe>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <UART_SetConfig+0x2e8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d138      	bne.n	8004078 <UART_SetConfig+0x16c>
 8004006:	4b7a      	ldr	r3, [pc, #488]	; (80041f0 <UART_SetConfig+0x2e4>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d82d      	bhi.n	8004070 <UART_SetConfig+0x164>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x110>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004051 	.word	0x08004051
 8004020:	08004071 	.word	0x08004071
 8004024:	08004071 	.word	0x08004071
 8004028:	08004071 	.word	0x08004071
 800402c:	08004061 	.word	0x08004061
 8004030:	08004071 	.word	0x08004071
 8004034:	08004071 	.word	0x08004071
 8004038:	08004071 	.word	0x08004071
 800403c:	08004059 	.word	0x08004059
 8004040:	08004071 	.word	0x08004071
 8004044:	08004071 	.word	0x08004071
 8004048:	08004071 	.word	0x08004071
 800404c:	08004069 	.word	0x08004069
 8004050:	2300      	movs	r3, #0
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e0d8      	b.n	800420a <UART_SetConfig+0x2fe>
 8004058:	2302      	movs	r3, #2
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e0d4      	b.n	800420a <UART_SetConfig+0x2fe>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004066:	e0d0      	b.n	800420a <UART_SetConfig+0x2fe>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406e:	e0cc      	b.n	800420a <UART_SetConfig+0x2fe>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004076:	e0c8      	b.n	800420a <UART_SetConfig+0x2fe>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5e      	ldr	r2, [pc, #376]	; (80041f8 <UART_SetConfig+0x2ec>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d125      	bne.n	80040ce <UART_SetConfig+0x1c2>
 8004082:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <UART_SetConfig+0x2e4>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800408c:	2b30      	cmp	r3, #48	; 0x30
 800408e:	d016      	beq.n	80040be <UART_SetConfig+0x1b2>
 8004090:	2b30      	cmp	r3, #48	; 0x30
 8004092:	d818      	bhi.n	80040c6 <UART_SetConfig+0x1ba>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d00a      	beq.n	80040ae <UART_SetConfig+0x1a2>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d814      	bhi.n	80040c6 <UART_SetConfig+0x1ba>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <UART_SetConfig+0x19a>
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d008      	beq.n	80040b6 <UART_SetConfig+0x1aa>
 80040a4:	e00f      	b.n	80040c6 <UART_SetConfig+0x1ba>
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ac:	e0ad      	b.n	800420a <UART_SetConfig+0x2fe>
 80040ae:	2302      	movs	r3, #2
 80040b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b4:	e0a9      	b.n	800420a <UART_SetConfig+0x2fe>
 80040b6:	2304      	movs	r3, #4
 80040b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040bc:	e0a5      	b.n	800420a <UART_SetConfig+0x2fe>
 80040be:	2308      	movs	r3, #8
 80040c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c4:	e0a1      	b.n	800420a <UART_SetConfig+0x2fe>
 80040c6:	2310      	movs	r3, #16
 80040c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040cc:	e09d      	b.n	800420a <UART_SetConfig+0x2fe>
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a4a      	ldr	r2, [pc, #296]	; (80041fc <UART_SetConfig+0x2f0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d125      	bne.n	8004124 <UART_SetConfig+0x218>
 80040d8:	4b45      	ldr	r3, [pc, #276]	; (80041f0 <UART_SetConfig+0x2e4>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e2:	2bc0      	cmp	r3, #192	; 0xc0
 80040e4:	d016      	beq.n	8004114 <UART_SetConfig+0x208>
 80040e6:	2bc0      	cmp	r3, #192	; 0xc0
 80040e8:	d818      	bhi.n	800411c <UART_SetConfig+0x210>
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d00a      	beq.n	8004104 <UART_SetConfig+0x1f8>
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d814      	bhi.n	800411c <UART_SetConfig+0x210>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <UART_SetConfig+0x1f0>
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d008      	beq.n	800410c <UART_SetConfig+0x200>
 80040fa:	e00f      	b.n	800411c <UART_SetConfig+0x210>
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004102:	e082      	b.n	800420a <UART_SetConfig+0x2fe>
 8004104:	2302      	movs	r3, #2
 8004106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800410a:	e07e      	b.n	800420a <UART_SetConfig+0x2fe>
 800410c:	2304      	movs	r3, #4
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004112:	e07a      	b.n	800420a <UART_SetConfig+0x2fe>
 8004114:	2308      	movs	r3, #8
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411a:	e076      	b.n	800420a <UART_SetConfig+0x2fe>
 800411c:	2310      	movs	r3, #16
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004122:	e072      	b.n	800420a <UART_SetConfig+0x2fe>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a35      	ldr	r2, [pc, #212]	; (8004200 <UART_SetConfig+0x2f4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d12a      	bne.n	8004184 <UART_SetConfig+0x278>
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <UART_SetConfig+0x2e4>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413c:	d01a      	beq.n	8004174 <UART_SetConfig+0x268>
 800413e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004142:	d81b      	bhi.n	800417c <UART_SetConfig+0x270>
 8004144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004148:	d00c      	beq.n	8004164 <UART_SetConfig+0x258>
 800414a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414e:	d815      	bhi.n	800417c <UART_SetConfig+0x270>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <UART_SetConfig+0x250>
 8004154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004158:	d008      	beq.n	800416c <UART_SetConfig+0x260>
 800415a:	e00f      	b.n	800417c <UART_SetConfig+0x270>
 800415c:	2300      	movs	r3, #0
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004162:	e052      	b.n	800420a <UART_SetConfig+0x2fe>
 8004164:	2302      	movs	r3, #2
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416a:	e04e      	b.n	800420a <UART_SetConfig+0x2fe>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004172:	e04a      	b.n	800420a <UART_SetConfig+0x2fe>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417a:	e046      	b.n	800420a <UART_SetConfig+0x2fe>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004182:	e042      	b.n	800420a <UART_SetConfig+0x2fe>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <UART_SetConfig+0x2dc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d13a      	bne.n	8004204 <UART_SetConfig+0x2f8>
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <UART_SetConfig+0x2e4>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800419c:	d01a      	beq.n	80041d4 <UART_SetConfig+0x2c8>
 800419e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a2:	d81b      	bhi.n	80041dc <UART_SetConfig+0x2d0>
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a8:	d00c      	beq.n	80041c4 <UART_SetConfig+0x2b8>
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d815      	bhi.n	80041dc <UART_SetConfig+0x2d0>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <UART_SetConfig+0x2b0>
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d008      	beq.n	80041cc <UART_SetConfig+0x2c0>
 80041ba:	e00f      	b.n	80041dc <UART_SetConfig+0x2d0>
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c2:	e022      	b.n	800420a <UART_SetConfig+0x2fe>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ca:	e01e      	b.n	800420a <UART_SetConfig+0x2fe>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e01a      	b.n	800420a <UART_SetConfig+0x2fe>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041da:	e016      	b.n	800420a <UART_SetConfig+0x2fe>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e2:	e012      	b.n	800420a <UART_SetConfig+0x2fe>
 80041e4:	cfff69f3 	.word	0xcfff69f3
 80041e8:	40008000 	.word	0x40008000
 80041ec:	40013800 	.word	0x40013800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40004800 	.word	0x40004800
 80041fc:	40004c00 	.word	0x40004c00
 8004200:	40005000 	.word	0x40005000
 8004204:	2310      	movs	r3, #16
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4aae      	ldr	r2, [pc, #696]	; (80044c8 <UART_SetConfig+0x5bc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	f040 8097 	bne.w	8004344 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800421a:	2b08      	cmp	r3, #8
 800421c:	d823      	bhi.n	8004266 <UART_SetConfig+0x35a>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x318>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004249 	.word	0x08004249
 8004228:	08004267 	.word	0x08004267
 800422c:	08004251 	.word	0x08004251
 8004230:	08004267 	.word	0x08004267
 8004234:	08004257 	.word	0x08004257
 8004238:	08004267 	.word	0x08004267
 800423c:	08004267 	.word	0x08004267
 8004240:	08004267 	.word	0x08004267
 8004244:	0800425f 	.word	0x0800425f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004248:	f7fe fc6c 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800424e:	e010      	b.n	8004272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004250:	4b9e      	ldr	r3, [pc, #632]	; (80044cc <UART_SetConfig+0x5c0>)
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004254:	e00d      	b.n	8004272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004256:	f7fe fbf7 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 800425a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800425c:	e009      	b.n	8004272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004264:	e005      	b.n	8004272 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8130 	beq.w	80044da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	4a94      	ldr	r2, [pc, #592]	; (80044d0 <UART_SetConfig+0x5c4>)
 8004280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004284:	461a      	mov	r2, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	fbb3 f3f2 	udiv	r3, r3, r2
 800428c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	429a      	cmp	r2, r3
 800429c:	d305      	bcc.n	80042aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d903      	bls.n	80042b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042b0:	e113      	b.n	80044da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	2200      	movs	r2, #0
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	60fa      	str	r2, [r7, #12]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	4a84      	ldr	r2, [pc, #528]	; (80044d0 <UART_SetConfig+0x5c4>)
 80042c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2200      	movs	r2, #0
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042d4:	f7fc fccc 	bl	8000c70 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	020b      	lsls	r3, r1, #8
 80042ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042ee:	0202      	lsls	r2, r0, #8
 80042f0:	6979      	ldr	r1, [r7, #20]
 80042f2:	6849      	ldr	r1, [r1, #4]
 80042f4:	0849      	lsrs	r1, r1, #1
 80042f6:	2000      	movs	r0, #0
 80042f8:	460c      	mov	r4, r1
 80042fa:	4605      	mov	r5, r0
 80042fc:	eb12 0804 	adds.w	r8, r2, r4
 8004300:	eb43 0905 	adc.w	r9, r3, r5
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	469a      	mov	sl, r3
 800430c:	4693      	mov	fp, r2
 800430e:	4652      	mov	r2, sl
 8004310:	465b      	mov	r3, fp
 8004312:	4640      	mov	r0, r8
 8004314:	4649      	mov	r1, r9
 8004316:	f7fc fcab 	bl	8000c70 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4613      	mov	r3, r2
 8004320:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004328:	d308      	bcc.n	800433c <UART_SetConfig+0x430>
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004330:	d204      	bcs.n	800433c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	e0ce      	b.n	80044da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004342:	e0ca      	b.n	80044da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d166      	bne.n	800441c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800434e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004352:	2b08      	cmp	r3, #8
 8004354:	d827      	bhi.n	80043a6 <UART_SetConfig+0x49a>
 8004356:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x450>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	080043a7 	.word	0x080043a7
 800436c:	08004397 	.word	0x08004397
 8004370:	080043a7 	.word	0x080043a7
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043a7 	.word	0x080043a7
 800437c:	0800439f 	.word	0x0800439f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7fe fbd0 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004386:	e014      	b.n	80043b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004388:	f7fe fbe2 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 800438c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800438e:	e010      	b.n	80043b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <UART_SetConfig+0x5c0>)
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004394:	e00d      	b.n	80043b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004396:	f7fe fb57 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 800439a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800439c:	e009      	b.n	80043b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043a4:	e005      	b.n	80043b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8090 	beq.w	80044da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	4a44      	ldr	r2, [pc, #272]	; (80044d0 <UART_SetConfig+0x5c4>)
 80043c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043cc:	005a      	lsls	r2, r3, #1
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	441a      	add	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d916      	bls.n	8004414 <UART_SetConfig+0x508>
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d212      	bcs.n	8004414 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f023 030f 	bic.w	r3, r3, #15
 80043f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	b29a      	uxth	r2, r3
 8004404:	8bfb      	ldrh	r3, [r7, #30]
 8004406:	4313      	orrs	r3, r2
 8004408:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	8bfa      	ldrh	r2, [r7, #30]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e062      	b.n	80044da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800441a:	e05e      	b.n	80044da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004420:	2b08      	cmp	r3, #8
 8004422:	d828      	bhi.n	8004476 <UART_SetConfig+0x56a>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x520>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	08004459 	.word	0x08004459
 8004434:	08004461 	.word	0x08004461
 8004438:	08004477 	.word	0x08004477
 800443c:	08004467 	.word	0x08004467
 8004440:	08004477 	.word	0x08004477
 8004444:	08004477 	.word	0x08004477
 8004448:	08004477 	.word	0x08004477
 800444c:	0800446f 	.word	0x0800446f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fb68 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004456:	e014      	b.n	8004482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7fe fb7a 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800445e:	e010      	b.n	8004482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <UART_SetConfig+0x5c0>)
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004464:	e00d      	b.n	8004482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7fe faef 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 800446a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800446c:	e009      	b.n	8004482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004474:	e005      	b.n	8004482 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004480:	bf00      	nop
    }

    if (pclk != 0U)
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d028      	beq.n	80044da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <UART_SetConfig+0x5c4>)
 800448e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004492:	461a      	mov	r2, r3
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	fbb3 f2f2 	udiv	r2, r3, r2
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	441a      	add	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	d910      	bls.n	80044d4 <UART_SetConfig+0x5c8>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d20c      	bcs.n	80044d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	e009      	b.n	80044da <UART_SetConfig+0x5ce>
 80044c6:	bf00      	nop
 80044c8:	40008000 	.word	0x40008000
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	08004bd0 	.word	0x08004bd0
      }
      else
      {
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2201      	movs	r2, #1
 80044de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2200      	movs	r2, #0
 80044f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80044f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3730      	adds	r7, #48	; 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01a      	beq.n	800461a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004602:	d10a      	bne.n	800461a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b098      	sub	sp, #96	; 0x60
 800464c:	af02      	add	r7, sp, #8
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004658:	f7fd fa26 	bl	8001aa8 <HAL_GetTick>
 800465c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d12f      	bne.n	80046cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004674:	2200      	movs	r2, #0
 8004676:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f88e 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d022      	beq.n	80046cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469a:	653b      	str	r3, [r7, #80]	; 0x50
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
 80046a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e063      	b.n	8004794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d149      	bne.n	800476e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	2200      	movs	r2, #0
 80046e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f857 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d03c      	beq.n	800476e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	623b      	str	r3, [r7, #32]
   return(result);
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
 8004714:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60fb      	str	r3, [r7, #12]
   return(result);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004746:	61fa      	str	r2, [r7, #28]
 8004748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	617b      	str	r3, [r7, #20]
   return(result);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e012      	b.n	8004794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3758      	adds	r7, #88	; 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e04f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d04b      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fd f977 	bl	8001aa8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e04e      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d037      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d034      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d031      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d110      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f838 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2208      	movs	r2, #8
 800480a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e029      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004828:	d111      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f81e 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0a0      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004876:	b480      	push	{r7}
 8004878:	b095      	sub	sp, #84	; 0x54
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
 800489e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d118      	bne.n	8004922 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0310 	bic.w	r3, r3, #16
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6979      	ldr	r1, [r7, #20]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	613b      	str	r3, [r7, #16]
   return(result);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e6      	bne.n	80048f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004936:	bf00      	nop
 8004938:	3754      	adds	r7, #84	; 0x54
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_UARTEx_DisableFifoMode+0x16>
 8004954:	2302      	movs	r3, #2
 8004956:	e027      	b.n	80049a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2224      	movs	r2, #36	; 0x24
 8004964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004986:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e02d      	b.n	8004a28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f84f 	bl	8004aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e02d      	b.n	8004aa4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f811 	bl	8004aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d108      	bne.n	8004ace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004acc:	e031      	b.n	8004b32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ace:	2308      	movs	r3, #8
 8004ad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	0e5b      	lsrs	r3, r3, #25
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	0f5b      	lsrs	r3, r3, #29
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	7b3a      	ldrb	r2, [r7, #12]
 8004afa:	4911      	ldr	r1, [pc, #68]	; (8004b40 <UARTEx_SetNbDataToProcess+0x94>)
 8004afc:	5c8a      	ldrb	r2, [r1, r2]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b02:	7b3a      	ldrb	r2, [r7, #12]
 8004b04:	490f      	ldr	r1, [pc, #60]	; (8004b44 <UARTEx_SetNbDataToProcess+0x98>)
 8004b06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b08:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	7b7a      	ldrb	r2, [r7, #13]
 8004b18:	4909      	ldr	r1, [pc, #36]	; (8004b40 <UARTEx_SetNbDataToProcess+0x94>)
 8004b1a:	5c8a      	ldrb	r2, [r1, r2]
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b20:	7b7a      	ldrb	r2, [r7, #13]
 8004b22:	4908      	ldr	r1, [pc, #32]	; (8004b44 <UARTEx_SetNbDataToProcess+0x98>)
 8004b24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	08004be8 	.word	0x08004be8
 8004b44:	08004bf0 	.word	0x08004bf0

08004b48 <memset>:
 8004b48:	4402      	add	r2, r0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <memset+0xa>
 8004b50:	4770      	bx	lr
 8004b52:	f803 1b01 	strb.w	r1, [r3], #1
 8004b56:	e7f9      	b.n	8004b4c <memset+0x4>

08004b58 <__libc_init_array>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	4d0d      	ldr	r5, [pc, #52]	; (8004b90 <__libc_init_array+0x38>)
 8004b5c:	4c0d      	ldr	r4, [pc, #52]	; (8004b94 <__libc_init_array+0x3c>)
 8004b5e:	1b64      	subs	r4, r4, r5
 8004b60:	10a4      	asrs	r4, r4, #2
 8004b62:	2600      	movs	r6, #0
 8004b64:	42a6      	cmp	r6, r4
 8004b66:	d109      	bne.n	8004b7c <__libc_init_array+0x24>
 8004b68:	4d0b      	ldr	r5, [pc, #44]	; (8004b98 <__libc_init_array+0x40>)
 8004b6a:	4c0c      	ldr	r4, [pc, #48]	; (8004b9c <__libc_init_array+0x44>)
 8004b6c:	f000 f818 	bl	8004ba0 <_init>
 8004b70:	1b64      	subs	r4, r4, r5
 8004b72:	10a4      	asrs	r4, r4, #2
 8004b74:	2600      	movs	r6, #0
 8004b76:	42a6      	cmp	r6, r4
 8004b78:	d105      	bne.n	8004b86 <__libc_init_array+0x2e>
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b80:	4798      	blx	r3
 8004b82:	3601      	adds	r6, #1
 8004b84:	e7ee      	b.n	8004b64 <__libc_init_array+0xc>
 8004b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8a:	4798      	blx	r3
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	e7f2      	b.n	8004b76 <__libc_init_array+0x1e>
 8004b90:	08004c00 	.word	0x08004c00
 8004b94:	08004c00 	.word	0x08004c00
 8004b98:	08004c00 	.word	0x08004c00
 8004b9c:	08004c04 	.word	0x08004c04

08004ba0 <_init>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr

08004bac <_fini>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr
