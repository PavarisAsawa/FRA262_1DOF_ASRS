/*
 * ModeHandler.c
 *
 *  Created on: Apr 27, 2024
 *      Author: emper
 */

#include "ModeHandler.h"
#include "Controller.h"
#include "main.h"
#include "BaseSystem.h"

float MAX_SPEED = 200;
uint64_t _BACKDRIVE_FACTOR = 20;
extern TIM_HandleTypeDef htim4;
extern u16u8_t registerFrame[200];

void SetShelve_mode(FlagTypeDef *flag,JoystickStructureTypeDef *joystick , QEIStructureTypeDef *QEI)
{
	flag->setShelve = 1;

    if(joystick->PIN[A] == 1)
	{
		registerFrame[0x23].U16 = joystick->PointPosition[0]; // ค่า Shelve ที่ต้องส่งให้ BaseSytem
		registerFrame[0x24].U16 = joystick->PointPosition[1];
		registerFrame[0x25].U16 = joystick->PointPosition[2];
		registerFrame[0x26].U16 = joystick->PointPosition[3];
		registerFrame[0x27].U16 = joystick->PointPosition[4];
		flag->setShelve = 2;
	}
    else if(joystick->PIN[B] == 1)
	{
		joystick->PointPosition[POINT] = QEI->LinearPosition;
		POINT++;
	}
	else if(joystick->PIN[C] == 1)
	{
		joystick->PointPosition[0] = 0;
		joystick->PointPosition[1] = 0;
		joystick->PointPosition[2] = 0;
		joystick->PointPosition[3] = 0;
		joystick->PointPosition[4] = 0;
		POINT = 0;
	}
	else if(joystick->PIN[D] == 1)
	{
		joystick->PointPosition[POINT] = 0;
		POINT--;
	}

	if(joystick->Y < 2146 && joystick->Y >1950)
	{
		Motor_Control(_BACKDRIVE_FACTOR);
	}
	else if(joystick->Y > 2146)
	{
		if( (uint16_t)(((joystick->Y-2000)*MAX_SPEED)/2000) > _BACKDRIVE_FACTOR) Motor_Control((uint16_t)(((joystick->Y-2000)*MAX_SPEED)/2000));
		else Motor_Control(_BACKDRIVE_FACTOR);
	}
	else if(joystick->Y < 1950)
	{
		Motor_Control(-(uint16_t)(((1975-joystick->Y)*MAX_SPEED)/1975));
	}
	else Motor_Control(_BACKDRIVE_FACTOR);
}

void Point_mode(PIDStructureTypeDef *PID , QEIStructureTypeDef *QEI,float setpoint)
{
	PIDControllerPosition_Command(PID, QEI, setpoint);
	Motor_Control(PID->Command);
}

void SetHome_mode(FlagTypeDef *flag ,QEIStructureTypeDef *QEI)
{
	static uint8_t pre_state = 0;
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && !pre_state)		// IF found PHOTOELECTRIC
	{
		flag->setHome = 2;
		Motor_Control(_BACKDRIVE_FACTOR);
		QEIEncoder_SetHome(QEI);
	}
	else
	{
		flag->setHome = 1;
		Motor_Control(-100);
		pre_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
	}
}


