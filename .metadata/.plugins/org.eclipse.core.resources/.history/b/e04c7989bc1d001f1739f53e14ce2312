/*
 * ModeHandler.c
 *
 *  Created on: Apr 27, 2024
 *      Author: emper
 */

#include "ModeHandler.h"
#include "main.h"

uint64_t _BACKDRIVE_FACTOR = 102;
uint64_t MAX_SPEED = 180;

extern TIM_HandleTypeDef htim4;
extern u16u8_t registerFrame[200];
extern GetValue Value;
extern State status;
extern JoystickStructureTypeDef Joystick;
extern float SetPosition;
extern float SteadyPosition;
extern uint64_t micros();

extern uint8_t test2;
//extern QEIStructureTypeDef QEI;

enum
{
	IDLE,GOING,PICKING,PLACING
};

enum
{
	WAIT,PUSH,PULL,DONE
}PPSTATE;

void SetShelve_mode(FlagTypeDef *flag,JoystickStructureTypeDef *joystick , QEIStructureTypeDef *QEI)
{
	flag->setShelve = 1;
	static int8_t POINT = 0;

	if(POINT > 4) POINT = 4;
	else if(POINT < 0) POINT = 0;
	Joystick_UpdateValue(joystick, QEI);

    if(joystick->PIN[A] == 1)
	{
		registerFrame[0x23].U16 = (joystick->PointPosition[0] - QEI->HomePosition)*10; // ค่า Shelve ที่ต้องส่งให้ BaseSytem
		registerFrame[0x24].U16 = (joystick->PointPosition[1]- QEI->HomePosition)*10;
		registerFrame[0x25].U16 = (joystick->PointPosition[2]- QEI->HomePosition)*10;
		registerFrame[0x26].U16 = (joystick->PointPosition[3]- QEI->HomePosition)*10;
		registerFrame[0x27].U16 = (joystick->PointPosition[4]- QEI->HomePosition)*10;
		flag->setShelve = 2;
	}
    else if(joystick->PIN[B] == 1)
	{
		joystick->PointPosition[POINT] = QEI->LinearPosition;
		POINT++;
	}
	else if(joystick->PIN[C] == 1)
	{
		joystick->PointPosition[0] = 0;
		joystick->PointPosition[1] = 0;
		joystick->PointPosition[2] = 0;
		joystick->PointPosition[3] = 0;
		joystick->PointPosition[4] = 0;
		POINT = 0;
	}
	else if(joystick->PIN[D] == 1)
	{
		joystick->PointPosition[POINT] = 0;
		POINT--;
	}

	if(joystick->Y < 1750 && joystick->Y >2000)
	{
		Motor_Control(_BACKDRIVE_FACTOR);
	}
	else if(joystick->Y > 3000)
	{
		Motor_Control(MAX_SPEED);
	}
	else if(joystick->Y < 500)
	{
		Motor_Control(-MAX_SPEED + 50);
	}
	else
	{
		Motor_Control(_BACKDRIVE_FACTOR);
	}

	if(joystick->X >= 3000 && joystick->Xpos <= 100)
	{
		joystick->Xpos += 0.001;
	}
	else if(joystick->X <= 500 && joystick->Xpos >= -100)
	{
		joystick->Xpos -= 0.001;
	}
}
void SetHome_mode(FlagTypeDef *flag ,QEIStructureTypeDef *QEI)
{
	static uint64_t tempTime;
	static uint8_t tempSTATE = 0;
	switch (tempSTATE) {
		case 0:	// init
			flag->setHome = 1;
			Motor_Control(-100);
			tempTime = micros() + 1000000;
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
			{
				tempTime = micros() + 1000000;
				tempSTATE = 1;
			}
			break;
		case 1:	// wait and down
			Motor_Control(-75);
			if(micros() > tempTime) tempSTATE = 2;
			break;
		case 2:
			Motor_Control(0);
			QEIEncoder_SetHome(QEI);
			flag->setHome = 2;
			tempSTATE = 0;
			break;
	}

// HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)		- ของจริง
//	HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)    - สำรอง
}

void Point_mode(FlagTypeDef *flag,PIDStructureTypeDef *PIDp , PIDStructureTypeDef *PIDv , QEIStructureTypeDef *QEI,QuinticTypeDef *quintic , float goal)
{
	flag->Point = 1;
	flag->TrejectoryGen = 1;
	PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
	Motor_Control((int32_t)PIDv->Command);
	if(fabs(QEI->LinearPosition - goal) <= 0.05)
	{
		flag->Point = 2;
		flag->TrejectoryGen =0;
	}
}



void Jog_mode(FlagTypeDef *flag,PIDStructureTypeDef *PIDp , PIDStructureTypeDef *PIDv , QEIStructureTypeDef *QEI,QuinticTypeDef *quintic)
{
	static uint8_t SUBSTATE = IDLE;
	static uint64_t timestamp;
	static uint8_t PP = WAIT;
	switch (SUBSTATE) {
		case IDLE:
			if(flag->Jog == 0) flag->jogTIME = 0;

			flag->Jog = 1;
			flag->TrejectoryGen = 1;
			if (flag->jogTIME < 10)
			{
				SetPosition = Value.TargetPosition[flag->jogTIME];
				QuinticTrajectory_SetReady(quintic);
				SUBSTATE = GOING;
			}
			else
			{
				flag->Jog = 2;
				SolenoidSuck(0);
				SteadyPosition = SetPosition;
				return;
			}
			break;
		case GOING:
			if(flag->jogTIME % 2 == 0) status.Z_Status = 4;				//	Pick
			else if(flag->jogTIME % 2 == 1) status.Z_Status = 8;		//	Place

			PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);

			/*                    */
			SolenoidPull();
			SolenoidSuck(1);

			if(fabs(QEI->LinearPosition - SetPosition) <= 0.1)
			{
				Motor_Control(_BACKDRIVE_FACTOR);
//				flag->TrejectoryGen = 0;
				if(flag->jogTIME % 2 == 0) SUBSTATE = PICKING;				//	Pick
				else if(flag->jogTIME % 2 == 1) SUBSTATE = PLACING;		//	Place
				/*                Delay Time      */
				timestamp = micros() + 100000; // ตั้งแเวลาว่ารอกี่วิถึงทำ

			}
			else{
				Motor_Control((int32_t)PIDv->Command);
			}

			break;
		case PICKING:
			switch (PP) {
				case WAIT:
					if(micros() < timestamp)
					{
						Motor_Control(_BACKDRIVE_FACTOR);
					}
					else
					{
						PP = PUSH;
						timestamp = micros() + 600000;		// delay push seconds?
					}
					break;

				case PUSH:
					if(micros() < timestamp)
					{
						Motor_Control(_BACKDRIVE_FACTOR);
						SolenoidPush();
						SolenoidSuck(1);
					}
					else
					{
						PP = PULL;
						timestamp = micros() + 1500000;		// delay push seconds?
					}
					break;
				case PULL:
					if(micros() < timestamp)
					{
						Motor_Control(_BACKDRIVE_FACTOR);
						SolenoidPull();
						SolenoidSuck(1);
					}
					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) && micros() > timestamp)
					{
						PP = DONE;
					}
					break;
				case DONE:
					flag->TrejectoryGen = 0;
					SolenoidPull();
					flag->jogTIME +=1;
					SUBSTATE = IDLE;
					PP = WAIT;
					break;
			}
			break;

		case PLACING:
			switch (PP) {
				case WAIT:
					if(micros() < timestamp)
					{
						Motor_Control(_BACKDRIVE_FACTOR);
					}
					else
					{
						PP = PUSH;
						timestamp = micros() + 400000;		// delay push seconds?
					}
					break;

				case PUSH:
					if(micros() < timestamp)
					{
						Motor_Control(_BACKDRIVE_FACTOR);
						SolenoidPush();
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) SolenoidSuck(0);
					}
					else
					{
						PP = PULL;
						timestamp = micros() + 1500000;		// delay push seconds?
					}
					break;
				case PULL:
					if(micros() < timestamp)
					{
						Motor_Control(_BACKDRIVE_FACTOR);
						SolenoidPull();
						SolenoidSuck(0);
					}
					else if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) && micros() > timestamp)
					{
						PP = DONE;
					}
					break;
				case DONE:
					flag->TrejectoryGen = 0;
					SolenoidPull();
					flag->jogTIME +=1;
					SUBSTATE = IDLE;
					PP = WAIT;
					break;
			}
			break;
	}
	if(flag->Jog == 0) flag->jogTIME = 0;

//	PIDControllerCascade_Command2(PIDp, PIDv, QEI, quintic->Position, quintic->Velocity);
//	Motor_Control((int32_t)PIDv->Command);

	if(flag->jogTIME % 2 == 0) status.Z_Status = 4;				//	Pick
	else if(flag->jogTIME % 2 == 1) status.Z_Status = 8;		//	Place

}

void SolenoidPush()
{
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != 0)	// ไม่เจอหน้าสุด
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}
}

void SolenoidPull()
{
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) != 0)	// ไม่เจอหลังสุด
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
	}

}

void SolenoidSuck(uint8_t trig)
{
	if(trig == 1) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);

}
